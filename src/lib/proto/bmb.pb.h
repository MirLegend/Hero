// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bmb.proto

#ifndef PROTOBUF_bmb_2eproto__INCLUDED
#define PROTOBUF_bmb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace basemgr_base {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bmb_2eproto();
void protobuf_AssignDesc_bmb_2eproto();
void protobuf_ShutdownFile_bmb_2eproto();

class registerPendingLogin;
class PendingAccountGetBaseappAddr;
class BaseappInitProgress;

// ===================================================================

class registerPendingLogin : public ::google::protobuf::Message {
 public:
  registerPendingLogin();
  virtual ~registerPendingLogin();

  registerPendingLogin(const registerPendingLogin& from);

  inline registerPendingLogin& operator=(const registerPendingLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const registerPendingLogin& default_instance();

  void Swap(registerPendingLogin* other);

  // implements Message ----------------------------------------------

  registerPendingLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const registerPendingLogin& from);
  void MergeFrom(const registerPendingLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string loginName = 1;
  inline bool has_loginname() const;
  inline void clear_loginname();
  static const int kLoginNameFieldNumber = 1;
  inline const ::std::string& loginname() const;
  inline void set_loginname(const ::std::string& value);
  inline void set_loginname(const char* value);
  inline void set_loginname(const char* value, size_t size);
  inline ::std::string* mutable_loginname();
  inline ::std::string* release_loginname();
  inline void set_allocated_loginname(::std::string* loginname);

  // optional string accountName = 2;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 2;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional uint64 eid = 4;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 4;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint64 dbid = 5;
  inline bool has_dbid() const;
  inline void clear_dbid();
  static const int kDbidFieldNumber = 5;
  inline ::google::protobuf::uint64 dbid() const;
  inline void set_dbid(::google::protobuf::uint64 value);

  // optional uint32 flags = 6;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 6;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // optional string extraData = 7;
  inline bool has_extradata() const;
  inline void clear_extradata();
  static const int kExtraDataFieldNumber = 7;
  inline const ::std::string& extradata() const;
  inline void set_extradata(const ::std::string& value);
  inline void set_extradata(const char* value);
  inline void set_extradata(const char* value, size_t size);
  inline ::std::string* mutable_extradata();
  inline ::std::string* release_extradata();
  inline void set_allocated_extradata(::std::string* extradata);

  // @@protoc_insertion_point(class_scope:basemgr_base.registerPendingLogin)
 private:
  inline void set_has_loginname();
  inline void clear_has_loginname();
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_dbid();
  inline void clear_has_dbid();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_extradata();
  inline void clear_has_extradata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* loginname_;
  ::std::string* accountname_;
  ::std::string* password_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint64 dbid_;
  ::std::string* extradata_;
  ::google::protobuf::uint32 flags_;
  friend void  protobuf_AddDesc_bmb_2eproto();
  friend void protobuf_AssignDesc_bmb_2eproto();
  friend void protobuf_ShutdownFile_bmb_2eproto();

  void InitAsDefaultInstance();
  static registerPendingLogin* default_instance_;
};
// -------------------------------------------------------------------

class PendingAccountGetBaseappAddr : public ::google::protobuf::Message {
 public:
  PendingAccountGetBaseappAddr();
  virtual ~PendingAccountGetBaseappAddr();

  PendingAccountGetBaseappAddr(const PendingAccountGetBaseappAddr& from);

  inline PendingAccountGetBaseappAddr& operator=(const PendingAccountGetBaseappAddr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PendingAccountGetBaseappAddr& default_instance();

  void Swap(PendingAccountGetBaseappAddr* other);

  // implements Message ----------------------------------------------

  PendingAccountGetBaseappAddr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PendingAccountGetBaseappAddr& from);
  void MergeFrom(const PendingAccountGetBaseappAddr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string loginName = 1;
  inline bool has_loginname() const;
  inline void clear_loginname();
  static const int kLoginNameFieldNumber = 1;
  inline const ::std::string& loginname() const;
  inline void set_loginname(const ::std::string& value);
  inline void set_loginname(const char* value);
  inline void set_loginname(const char* value, size_t size);
  inline ::std::string* mutable_loginname();
  inline ::std::string* release_loginname();
  inline void set_allocated_loginname(::std::string* loginname);

  // optional string accountName = 2;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 2;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:basemgr_base.PendingAccountGetBaseappAddr)
 private:
  inline void set_has_loginname();
  inline void clear_has_loginname();
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* loginname_;
  ::std::string* accountname_;
  ::std::string* ip_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_bmb_2eproto();
  friend void protobuf_AssignDesc_bmb_2eproto();
  friend void protobuf_ShutdownFile_bmb_2eproto();

  void InitAsDefaultInstance();
  static PendingAccountGetBaseappAddr* default_instance_;
};
// -------------------------------------------------------------------

class BaseappInitProgress : public ::google::protobuf::Message {
 public:
  BaseappInitProgress();
  virtual ~BaseappInitProgress();

  BaseappInitProgress(const BaseappInitProgress& from);

  inline BaseappInitProgress& operator=(const BaseappInitProgress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseappInitProgress& default_instance();

  void Swap(BaseappInitProgress* other);

  // implements Message ----------------------------------------------

  BaseappInitProgress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseappInitProgress& from);
  void MergeFrom(const BaseappInitProgress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 componentId = 1;
  inline bool has_componentid() const;
  inline void clear_componentid();
  static const int kComponentIdFieldNumber = 1;
  inline ::google::protobuf::uint32 componentid() const;
  inline void set_componentid(::google::protobuf::uint32 value);

  // optional uint32 progress = 2;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 2;
  inline ::google::protobuf::uint32 progress() const;
  inline void set_progress(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:basemgr_base.BaseappInitProgress)
 private:
  inline void set_has_componentid();
  inline void clear_has_componentid();
  inline void set_has_progress();
  inline void clear_has_progress();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 componentid_;
  ::google::protobuf::uint32 progress_;
  friend void  protobuf_AddDesc_bmb_2eproto();
  friend void protobuf_AssignDesc_bmb_2eproto();
  friend void protobuf_ShutdownFile_bmb_2eproto();

  void InitAsDefaultInstance();
  static BaseappInitProgress* default_instance_;
};
// ===================================================================


// ===================================================================

// registerPendingLogin

// optional string loginName = 1;
inline bool registerPendingLogin::has_loginname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void registerPendingLogin::set_has_loginname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void registerPendingLogin::clear_has_loginname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void registerPendingLogin::clear_loginname() {
  if (loginname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginname_->clear();
  }
  clear_has_loginname();
}
inline const ::std::string& registerPendingLogin::loginname() const {
  // @@protoc_insertion_point(field_get:basemgr_base.registerPendingLogin.loginName)
  return *loginname_;
}
inline void registerPendingLogin::set_loginname(const ::std::string& value) {
  set_has_loginname();
  if (loginname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginname_ = new ::std::string;
  }
  loginname_->assign(value);
  // @@protoc_insertion_point(field_set:basemgr_base.registerPendingLogin.loginName)
}
inline void registerPendingLogin::set_loginname(const char* value) {
  set_has_loginname();
  if (loginname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginname_ = new ::std::string;
  }
  loginname_->assign(value);
  // @@protoc_insertion_point(field_set_char:basemgr_base.registerPendingLogin.loginName)
}
inline void registerPendingLogin::set_loginname(const char* value, size_t size) {
  set_has_loginname();
  if (loginname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginname_ = new ::std::string;
  }
  loginname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:basemgr_base.registerPendingLogin.loginName)
}
inline ::std::string* registerPendingLogin::mutable_loginname() {
  set_has_loginname();
  if (loginname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:basemgr_base.registerPendingLogin.loginName)
  return loginname_;
}
inline ::std::string* registerPendingLogin::release_loginname() {
  clear_has_loginname();
  if (loginname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = loginname_;
    loginname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void registerPendingLogin::set_allocated_loginname(::std::string* loginname) {
  if (loginname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loginname_;
  }
  if (loginname) {
    set_has_loginname();
    loginname_ = loginname;
  } else {
    clear_has_loginname();
    loginname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:basemgr_base.registerPendingLogin.loginName)
}

// optional string accountName = 2;
inline bool registerPendingLogin::has_accountname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void registerPendingLogin::set_has_accountname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void registerPendingLogin::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void registerPendingLogin::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& registerPendingLogin::accountname() const {
  // @@protoc_insertion_point(field_get:basemgr_base.registerPendingLogin.accountName)
  return *accountname_;
}
inline void registerPendingLogin::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
  // @@protoc_insertion_point(field_set:basemgr_base.registerPendingLogin.accountName)
}
inline void registerPendingLogin::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
  // @@protoc_insertion_point(field_set_char:basemgr_base.registerPendingLogin.accountName)
}
inline void registerPendingLogin::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:basemgr_base.registerPendingLogin.accountName)
}
inline ::std::string* registerPendingLogin::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:basemgr_base.registerPendingLogin.accountName)
  return accountname_;
}
inline ::std::string* registerPendingLogin::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void registerPendingLogin::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:basemgr_base.registerPendingLogin.accountName)
}

// optional string password = 3;
inline bool registerPendingLogin::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void registerPendingLogin::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void registerPendingLogin::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void registerPendingLogin::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& registerPendingLogin::password() const {
  // @@protoc_insertion_point(field_get:basemgr_base.registerPendingLogin.password)
  return *password_;
}
inline void registerPendingLogin::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:basemgr_base.registerPendingLogin.password)
}
inline void registerPendingLogin::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:basemgr_base.registerPendingLogin.password)
}
inline void registerPendingLogin::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:basemgr_base.registerPendingLogin.password)
}
inline ::std::string* registerPendingLogin::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:basemgr_base.registerPendingLogin.password)
  return password_;
}
inline ::std::string* registerPendingLogin::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void registerPendingLogin::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:basemgr_base.registerPendingLogin.password)
}

// optional uint64 eid = 4;
inline bool registerPendingLogin::has_eid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void registerPendingLogin::set_has_eid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void registerPendingLogin::clear_has_eid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void registerPendingLogin::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 registerPendingLogin::eid() const {
  // @@protoc_insertion_point(field_get:basemgr_base.registerPendingLogin.eid)
  return eid_;
}
inline void registerPendingLogin::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:basemgr_base.registerPendingLogin.eid)
}

// optional uint64 dbid = 5;
inline bool registerPendingLogin::has_dbid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void registerPendingLogin::set_has_dbid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void registerPendingLogin::clear_has_dbid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void registerPendingLogin::clear_dbid() {
  dbid_ = GOOGLE_ULONGLONG(0);
  clear_has_dbid();
}
inline ::google::protobuf::uint64 registerPendingLogin::dbid() const {
  // @@protoc_insertion_point(field_get:basemgr_base.registerPendingLogin.dbid)
  return dbid_;
}
inline void registerPendingLogin::set_dbid(::google::protobuf::uint64 value) {
  set_has_dbid();
  dbid_ = value;
  // @@protoc_insertion_point(field_set:basemgr_base.registerPendingLogin.dbid)
}

// optional uint32 flags = 6;
inline bool registerPendingLogin::has_flags() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void registerPendingLogin::set_has_flags() {
  _has_bits_[0] |= 0x00000020u;
}
inline void registerPendingLogin::clear_has_flags() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void registerPendingLogin::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 registerPendingLogin::flags() const {
  // @@protoc_insertion_point(field_get:basemgr_base.registerPendingLogin.flags)
  return flags_;
}
inline void registerPendingLogin::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:basemgr_base.registerPendingLogin.flags)
}

// optional string extraData = 7;
inline bool registerPendingLogin::has_extradata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void registerPendingLogin::set_has_extradata() {
  _has_bits_[0] |= 0x00000040u;
}
inline void registerPendingLogin::clear_has_extradata() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void registerPendingLogin::clear_extradata() {
  if (extradata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extradata_->clear();
  }
  clear_has_extradata();
}
inline const ::std::string& registerPendingLogin::extradata() const {
  // @@protoc_insertion_point(field_get:basemgr_base.registerPendingLogin.extraData)
  return *extradata_;
}
inline void registerPendingLogin::set_extradata(const ::std::string& value) {
  set_has_extradata();
  if (extradata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extradata_ = new ::std::string;
  }
  extradata_->assign(value);
  // @@protoc_insertion_point(field_set:basemgr_base.registerPendingLogin.extraData)
}
inline void registerPendingLogin::set_extradata(const char* value) {
  set_has_extradata();
  if (extradata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extradata_ = new ::std::string;
  }
  extradata_->assign(value);
  // @@protoc_insertion_point(field_set_char:basemgr_base.registerPendingLogin.extraData)
}
inline void registerPendingLogin::set_extradata(const char* value, size_t size) {
  set_has_extradata();
  if (extradata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extradata_ = new ::std::string;
  }
  extradata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:basemgr_base.registerPendingLogin.extraData)
}
inline ::std::string* registerPendingLogin::mutable_extradata() {
  set_has_extradata();
  if (extradata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extradata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:basemgr_base.registerPendingLogin.extraData)
  return extradata_;
}
inline ::std::string* registerPendingLogin::release_extradata() {
  clear_has_extradata();
  if (extradata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = extradata_;
    extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void registerPendingLogin::set_allocated_extradata(::std::string* extradata) {
  if (extradata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extradata_;
  }
  if (extradata) {
    set_has_extradata();
    extradata_ = extradata;
  } else {
    clear_has_extradata();
    extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:basemgr_base.registerPendingLogin.extraData)
}

// -------------------------------------------------------------------

// PendingAccountGetBaseappAddr

// optional string loginName = 1;
inline bool PendingAccountGetBaseappAddr::has_loginname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PendingAccountGetBaseappAddr::set_has_loginname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PendingAccountGetBaseappAddr::clear_has_loginname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PendingAccountGetBaseappAddr::clear_loginname() {
  if (loginname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginname_->clear();
  }
  clear_has_loginname();
}
inline const ::std::string& PendingAccountGetBaseappAddr::loginname() const {
  // @@protoc_insertion_point(field_get:basemgr_base.PendingAccountGetBaseappAddr.loginName)
  return *loginname_;
}
inline void PendingAccountGetBaseappAddr::set_loginname(const ::std::string& value) {
  set_has_loginname();
  if (loginname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginname_ = new ::std::string;
  }
  loginname_->assign(value);
  // @@protoc_insertion_point(field_set:basemgr_base.PendingAccountGetBaseappAddr.loginName)
}
inline void PendingAccountGetBaseappAddr::set_loginname(const char* value) {
  set_has_loginname();
  if (loginname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginname_ = new ::std::string;
  }
  loginname_->assign(value);
  // @@protoc_insertion_point(field_set_char:basemgr_base.PendingAccountGetBaseappAddr.loginName)
}
inline void PendingAccountGetBaseappAddr::set_loginname(const char* value, size_t size) {
  set_has_loginname();
  if (loginname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginname_ = new ::std::string;
  }
  loginname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:basemgr_base.PendingAccountGetBaseappAddr.loginName)
}
inline ::std::string* PendingAccountGetBaseappAddr::mutable_loginname() {
  set_has_loginname();
  if (loginname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:basemgr_base.PendingAccountGetBaseappAddr.loginName)
  return loginname_;
}
inline ::std::string* PendingAccountGetBaseappAddr::release_loginname() {
  clear_has_loginname();
  if (loginname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = loginname_;
    loginname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PendingAccountGetBaseappAddr::set_allocated_loginname(::std::string* loginname) {
  if (loginname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loginname_;
  }
  if (loginname) {
    set_has_loginname();
    loginname_ = loginname;
  } else {
    clear_has_loginname();
    loginname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:basemgr_base.PendingAccountGetBaseappAddr.loginName)
}

// optional string accountName = 2;
inline bool PendingAccountGetBaseappAddr::has_accountname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PendingAccountGetBaseappAddr::set_has_accountname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PendingAccountGetBaseappAddr::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PendingAccountGetBaseappAddr::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& PendingAccountGetBaseappAddr::accountname() const {
  // @@protoc_insertion_point(field_get:basemgr_base.PendingAccountGetBaseappAddr.accountName)
  return *accountname_;
}
inline void PendingAccountGetBaseappAddr::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
  // @@protoc_insertion_point(field_set:basemgr_base.PendingAccountGetBaseappAddr.accountName)
}
inline void PendingAccountGetBaseappAddr::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
  // @@protoc_insertion_point(field_set_char:basemgr_base.PendingAccountGetBaseappAddr.accountName)
}
inline void PendingAccountGetBaseappAddr::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:basemgr_base.PendingAccountGetBaseappAddr.accountName)
}
inline ::std::string* PendingAccountGetBaseappAddr::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:basemgr_base.PendingAccountGetBaseappAddr.accountName)
  return accountname_;
}
inline ::std::string* PendingAccountGetBaseappAddr::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PendingAccountGetBaseappAddr::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:basemgr_base.PendingAccountGetBaseappAddr.accountName)
}

// optional string ip = 3;
inline bool PendingAccountGetBaseappAddr::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PendingAccountGetBaseappAddr::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PendingAccountGetBaseappAddr::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PendingAccountGetBaseappAddr::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& PendingAccountGetBaseappAddr::ip() const {
  // @@protoc_insertion_point(field_get:basemgr_base.PendingAccountGetBaseappAddr.ip)
  return *ip_;
}
inline void PendingAccountGetBaseappAddr::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:basemgr_base.PendingAccountGetBaseappAddr.ip)
}
inline void PendingAccountGetBaseappAddr::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:basemgr_base.PendingAccountGetBaseappAddr.ip)
}
inline void PendingAccountGetBaseappAddr::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:basemgr_base.PendingAccountGetBaseappAddr.ip)
}
inline ::std::string* PendingAccountGetBaseappAddr::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:basemgr_base.PendingAccountGetBaseappAddr.ip)
  return ip_;
}
inline ::std::string* PendingAccountGetBaseappAddr::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PendingAccountGetBaseappAddr::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:basemgr_base.PendingAccountGetBaseappAddr.ip)
}

// optional uint32 port = 4;
inline bool PendingAccountGetBaseappAddr::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PendingAccountGetBaseappAddr::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PendingAccountGetBaseappAddr::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PendingAccountGetBaseappAddr::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 PendingAccountGetBaseappAddr::port() const {
  // @@protoc_insertion_point(field_get:basemgr_base.PendingAccountGetBaseappAddr.port)
  return port_;
}
inline void PendingAccountGetBaseappAddr::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:basemgr_base.PendingAccountGetBaseappAddr.port)
}

// -------------------------------------------------------------------

// BaseappInitProgress

// optional uint32 componentId = 1;
inline bool BaseappInitProgress::has_componentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseappInitProgress::set_has_componentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseappInitProgress::clear_has_componentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseappInitProgress::clear_componentid() {
  componentid_ = 0u;
  clear_has_componentid();
}
inline ::google::protobuf::uint32 BaseappInitProgress::componentid() const {
  // @@protoc_insertion_point(field_get:basemgr_base.BaseappInitProgress.componentId)
  return componentid_;
}
inline void BaseappInitProgress::set_componentid(::google::protobuf::uint32 value) {
  set_has_componentid();
  componentid_ = value;
  // @@protoc_insertion_point(field_set:basemgr_base.BaseappInitProgress.componentId)
}

// optional uint32 progress = 2;
inline bool BaseappInitProgress::has_progress() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BaseappInitProgress::set_has_progress() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BaseappInitProgress::clear_has_progress() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BaseappInitProgress::clear_progress() {
  progress_ = 0u;
  clear_has_progress();
}
inline ::google::protobuf::uint32 BaseappInitProgress::progress() const {
  // @@protoc_insertion_point(field_get:basemgr_base.BaseappInitProgress.progress)
  return progress_;
}
inline void BaseappInitProgress::set_progress(::google::protobuf::uint32 value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:basemgr_base.BaseappInitProgress.progress)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace basemgr_base

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bmb_2eproto__INCLUDED
