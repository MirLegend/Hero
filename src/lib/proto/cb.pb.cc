// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client_baseserver {

namespace {

const ::google::protobuf::Descriptor* Hello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hello_reflection_ = NULL;
const ::google::protobuf::Descriptor* HelloCB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelloCB_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginBaseappFailed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginBaseappFailed_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatedProxies_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatedProxies_reflection_ = NULL;
const ::google::protobuf::Descriptor* hire_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hire_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* hire_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hire_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* down_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  down_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* system_setting_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  system_setting_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* system_setting_change_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  system_setting_change_reflection_ = NULL;
const ::google::protobuf::Descriptor* system_setting_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  system_setting_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* system_setting_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  system_setting_item_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* system_setting_item_setting_status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* global_config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  global_config_reflection_ = NULL;
const ::google::protobuf::Descriptor* login_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* sdk_login_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sdk_login_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_check_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_check_reflection_ = NULL;
const ::google::protobuf::Descriptor* reset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reset_reflection_ = NULL;
const ::google::protobuf::Descriptor* enter_stage_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_stage_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_info_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_info_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* last_activity_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  last_activity_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_lotto_info_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_lotto_info_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_lotto_reward_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_lotto_reward_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_bigpackage_info_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_bigpackage_info_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_bigpackage_reward_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_bigpackage_reward_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_bigpackage_reset_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_bigpackage_reset_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* exit_stage_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  exit_stage_reply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* exit_stage_reply_exit_stage_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* hero_upgrade_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_upgrade_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* equip_synthesis_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equip_synthesis_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* wear_equip_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wear_equip_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* sync_vitality_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sync_vitality_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* consume_item_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  consume_item_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_shop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_shop_reflection_ = NULL;
const ::google::protobuf::Descriptor* star_shop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  star_shop_reflection_ = NULL;
const ::google::protobuf::Descriptor* shop_consume_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shop_consume_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* skill_levelup_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  skill_levelup_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* sell_item_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sell_item_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* fragment_compose_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fragment_compose_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_equip_upgrade_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_equip_upgrade_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* tutorial_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tutorial_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* error_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  error_info_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* error_info_exit_descriptor_ = NULL;
const ::google::protobuf::Descriptor* goods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  goods_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* goods_price_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* star_goods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  star_goods_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* star_goods_box_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* user_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_summary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_summary_reflection_ = NULL;
const ::google::protobuf::Descriptor* name_card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  name_card_reflection_ = NULL;
const ::google::protobuf::Descriptor* daily_login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  daily_login_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* daily_login_dailylogin_status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ask_daily_login_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ask_daily_login_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_equip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_equip_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_summary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_summary_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_dyna_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_dyna_reflection_ = NULL;
const ::google::protobuf::Descriptor* skilllevelup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  skilllevelup_reflection_ = NULL;
const ::google::protobuf::Descriptor* usertask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  usertask_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* usertask_status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* dailyjob_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dailyjob_reflection_ = NULL;
const ::google::protobuf::Descriptor* sweeploot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sweeploot_reflection_ = NULL;
const ::google::protobuf::Descriptor* tavern_record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tavern_record_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* tavern_record_box_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* usermidas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  usermidas_reflection_ = NULL;
const ::google::protobuf::Descriptor* trigger_task_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  trigger_task_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* require_rewards_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  require_rewards_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* trigger_job_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  trigger_job_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* dailyjob_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dailyjob_reward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* dailyjob_reward_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* job_rewards_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  job_rewards_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* tavern_draw_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tavern_draw_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* reset_elite_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reset_elite_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* sweep_stage_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sweep_stage_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* sweep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sweep_reflection_ = NULL;
const ::google::protobuf::Descriptor* sync_skill_stren_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sync_skill_stren_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_evolve_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_evolve_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* vitality_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vitality_reflection_ = NULL;
const ::google::protobuf::Descriptor* userstage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  userstage_reflection_ = NULL;
const ::google::protobuf::Descriptor* act_daily_record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  act_daily_record_reflection_ = NULL;
const ::google::protobuf::Descriptor* ladder_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ladder_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* open_panel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  open_panel_reflection_ = NULL;
const ::google::protobuf::Descriptor* apply_opponent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  apply_opponent_reflection_ = NULL;
const ::google::protobuf::Descriptor* start_battle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  start_battle_reflection_ = NULL;
const ::google::protobuf::Descriptor* end_battle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  end_battle_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_lineup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_lineup_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_records_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_records_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_replay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_replay_reflection_ = NULL;
const ::google::protobuf::Descriptor* pvp_record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pvp_record_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_rankboard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_rankboard_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_oppo_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_oppo_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* clear_battle_cd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  clear_battle_cd_reflection_ = NULL;
const ::google::protobuf::Descriptor* rankboard_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rankboard_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* ladder_record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ladder_record_reflection_ = NULL;
const ::google::protobuf::Descriptor* ladder_opponent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ladder_opponent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ladder_rank_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ladder_rank_reward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ladder_rank_reward_reward_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* draw_rank_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  draw_rank_reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* buy_battle_chance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buy_battle_chance_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_name_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_name_reply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* set_name_reply_set_name_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* set_avatar_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_avatar_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_data_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_data_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* midas_acquire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  midas_acquire_reflection_ = NULL;
const ::google::protobuf::Descriptor* midas_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  midas_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* open_shop_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  open_shop_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* charge_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  charge_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* notify_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  notify_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ladder_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ladder_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbc_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbc_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbc_self_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbc_self_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbc_oppo_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbc_oppo_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbc_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbc_reward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* tbc_reward_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* tbc_stage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbc_stage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* tbc_stage_status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* tbc_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbc_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbc_open_panel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbc_open_panel_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbc_query_oppo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbc_query_oppo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbc_start_battle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbc_start_battle_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbc_end_battle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbc_end_battle_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbc_reset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbc_reset_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbc_draw_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbc_draw_reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_maillist_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_maillist_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* sys_mail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sys_mail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* sys_mail_status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* mail_content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_content_reflection_ = NULL;
const ::google::protobuf::Descriptor* plain_mail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  plain_mail_reflection_ = NULL;
const ::google::protobuf::Descriptor* format_mail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  format_mail_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_param_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_param_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* mail_param_mail_param_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* user_point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_point_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* user_point_user_point_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* read_mail_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  read_mail_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_vip_gift_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_vip_gift_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_blacklist_user_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_blacklist_user_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_blacklist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_blacklist_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_broad_say_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_broad_say_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_say_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_say_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_fresh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_fresh_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_fetch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_fetch_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_acc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_acc_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* chat_acc_chat_acc_t_descriptor_ = NULL;
const ::google::protobuf::Descriptor* chat_content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_content_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_add_bl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_add_bl_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_del_bl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_del_bl_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_guild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_guild_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_send_mail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_send_mail_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_set_jump_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_set_jump_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_instance_prepare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_instance_prepare_reflection_ = NULL;
const ::google::protobuf::Descriptor* dps_rank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dps_rank_reflection_ = NULL;
const ::google::protobuf::Descriptor* dps_rank_array_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dps_rank_array_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_first_pass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_first_pass_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_fast_pass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_fast_pass_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_stage_rank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_stage_rank_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_app_queue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_app_queue_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_members_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_members_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_jump_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_jump_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_items_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_items_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_item_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_item_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_challenger_damage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_challenger_damage_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_instance_damage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_instance_damage_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_drop_give_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_drop_give_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_drop_item_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_drop_item_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_drop_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_drop_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_instance_dps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_instance_dps_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_drop_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_drop_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_instance_apply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_instance_apply_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_instance_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_instance_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_instance_start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_instance_start_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_stage_hp_drop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_stage_hp_drop_reflection_ = NULL;
const ::google::protobuf::Descriptor* hp_drop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hp_drop_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_instance_end_down_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_instance_end_down_reflection_ = NULL;
const ::google::protobuf::Descriptor* break_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  break_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_instance_open_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_instance_open_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_create_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_create_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_dismiss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_dismiss_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_summary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_summary_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_member_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_applier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_applier_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_search_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_search_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_join_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_join_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* guild_join_join_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* guild_join_confirm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_join_confirm_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_leave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_leave_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_kick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_kick_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_set_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_set_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_query_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_worship_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_worship_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_set_job_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_set_job_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_add_hire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_add_hire_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_del_hire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_del_hire_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_query_hires_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_query_hires_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_hire_user_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_hire_user_reflection_ = NULL;
const ::google::protobuf::Descriptor* hire_hero_summary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hire_hero_summary_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_hire_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_hire_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_worship_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_worship_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_worship_withdraw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_worship_withdraw_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_qurey_hh_detail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_qurey_hh_detail_reflection_ = NULL;
const ::google::protobuf::Descriptor* worship_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  worship_reward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* worship_reward_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* activity_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_reward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* activity_reward_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* activity_infos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_infos_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_rewards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_rewards_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_info_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* activity_info_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* cdkey_gift_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cdkey_gift_reply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* cdkey_gift_reply_cdkey_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* res_pack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  res_pack_reflection_ = NULL;
const ::google::protobuf::Descriptor* ask_magicsoul_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ask_magicsoul_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* important_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  important_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* monthcard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  monthcard_reflection_ = NULL;
const ::google::protobuf::Descriptor* excavate_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  excavate_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* revenge_excavate_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  revenge_excavate_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* search_excavate_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  search_excavate_reply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* search_excavate_reply_search_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* query_excavate_data_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_excavate_data_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* excavate_self_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  excavate_self_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* excavate_cfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  excavate_cfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* excavate_team_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  excavate_team_reflection_ = NULL;
const ::google::protobuf::Descriptor* excavate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  excavate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* excavate_owner_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* excavate_state_descriptor_ = NULL;
const ::google::protobuf::Descriptor* excavate_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  excavate_history_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* excavate_history_def_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* query_excavate_history_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_excavate_history_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* excavate_battle_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  excavate_battle_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* excavate_battle_team_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  excavate_battle_team_reflection_ = NULL;
const ::google::protobuf::Descriptor* excavate_battle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  excavate_battle_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_excavate_battle_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_excavate_battle_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_excavate_team_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_excavate_team_reply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* set_excavate_team_reply_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* excavate_start_battle_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  excavate_start_battle_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* excavate_end_battle_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  excavate_end_battle_reply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* excavate_end_battle_reply_mine_battle_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* draw_excav_res_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  draw_excav_res_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* excavate_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  excavate_reward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* excavate_reward_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* query_excavate_def_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_excavate_def_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* clear_excavate_battle_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  clear_excavate_battle_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* withdraw_excavate_hero_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  withdraw_excavate_hero_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* draw_excavate_def_rwd_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  draw_excavate_def_rwd_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* drop_excavate_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  drop_excavate_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* change_server_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  change_server_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* server_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  server_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_instance_query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_instance_query_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* guild_instance_query_is_can_jump_descriptor_ = NULL;
const ::google::protobuf::Descriptor* guild_chapter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_chapter_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_instance_detail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_instance_detail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* guild_instance_detail_challenger_status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* guild_challenger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_challenger_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_instance_record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_instance_record_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_instance_summary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_instance_summary_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_instance_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_instance_item_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* guild_instance_item_drop_state_descriptor_ = NULL;
const ::google::protobuf::Descriptor* guild_instance_drop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_instance_drop_reflection_ = NULL;
const ::google::protobuf::Descriptor* splitable_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  splitable_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_split_data_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_split_data_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_split_return_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_split_return_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* split_hero_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  split_hero_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* worldcup_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  worldcup_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* worldcup_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  worldcup_reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* worldcup_comp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  worldcup_comp_reflection_ = NULL;
const ::google::protobuf::Descriptor* worldcup_query_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  worldcup_query_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* worldcup_submit_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  worldcup_submit_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_check_fail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_check_fail_reflection_ = NULL;
const ::google::protobuf::Descriptor* super_link_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  super_link_reflection_ = NULL;
const ::google::protobuf::Descriptor* ranklist_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ranklist_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_ranklist_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_ranklist_reply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* query_ranklist_reply_rank_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* request_guild_log_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  request_guild_log_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_log_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_log_content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_log_content_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_update_version_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_update_version_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_act_stage_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_act_stage_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* fb_attention_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fb_attention_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* continue_pay_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  continue_pay_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* recharge_rebate_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  recharge_rebate_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* every_day_happy_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  every_day_happy_reply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* battle_result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* money_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* hero_status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* server_opt_result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* hire_result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* hire_from_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* guild_join_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* guild_job_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* chat_channel_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cb_2eproto() {
  protobuf_AddDesc_cb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cb.proto");
  GOOGLE_CHECK(file != NULL);
  Hello_descriptor_ = file->message_type(0);
  static const int Hello_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, extradata_),
  };
  Hello_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hello_descriptor_,
      Hello::default_instance_,
      Hello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hello));
  HelloCB_descriptor_ = file->message_type(1);
  static const int HelloCB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloCB, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloCB, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloCB, extradata_),
  };
  HelloCB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HelloCB_descriptor_,
      HelloCB::default_instance_,
      HelloCB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloCB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloCB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HelloCB));
  Login_descriptor_ = file->message_type(2);
  static const int Login_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, password_),
  };
  Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_descriptor_,
      Login::default_instance_,
      Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login));
  LoginBaseappFailed_descriptor_ = file->message_type(3);
  static const int LoginBaseappFailed_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginBaseappFailed, retcode_),
  };
  LoginBaseappFailed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginBaseappFailed_descriptor_,
      LoginBaseappFailed::default_instance_,
      LoginBaseappFailed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginBaseappFailed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginBaseappFailed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginBaseappFailed));
  CreatedProxies_descriptor_ = file->message_type(4);
  static const int CreatedProxies_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatedProxies, entityid_),
  };
  CreatedProxies_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatedProxies_descriptor_,
      CreatedProxies::default_instance_,
      CreatedProxies_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatedProxies, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatedProxies, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatedProxies));
  hire_data_descriptor_ = file->message_type(5);
  static const int hire_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hire_data, _uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hire_data, _name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hire_data, _hero_),
  };
  hire_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hire_data_descriptor_,
      hire_data::default_instance_,
      hire_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hire_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hire_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hire_data));
  hire_hero_descriptor_ = file->message_type(6);
  static const int hire_hero_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hire_hero, _base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hire_hero, _dyna_),
  };
  hire_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hire_hero_descriptor_,
      hire_hero::default_instance_,
      hire_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hire_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hire_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hire_hero));
  down_msg_descriptor_ = file->message_type(7);
  static const int down_msg_offsets_[69] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _login_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _reset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _enter_stage_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _exit_stage_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _hero_upgrade_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _equip_synthesis_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _wear_equip_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _consume_item_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _shop_refresh_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _shop_consume_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _skill_levelup_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _sell_item_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _fragment_compose_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _hero_equip_upgrade_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _trigger_task_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _require_rewards_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _trigger_job_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _job_rewards_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _reset_elite_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _sweep_stage_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _tavern_draw_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _sync_skill_stren_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _query_data_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _hero_evolve_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _sync_vitality_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _user_check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _tutorial_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _error_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _ladder_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _set_name_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _midas_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _open_shop_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _charge_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _sdk_login_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _set_avatar_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _notify_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _ask_daily_login_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _tbc_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _get_maillist_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _read_mail_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _svr_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _get_vip_gift_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _chat_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _cdkey_gift_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _guild_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _ask_magicsoul_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _ask_activity_info_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _excavate_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _system_setting_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _query_split_data_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _query_split_return_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _split_hero_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _worldcup_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _battle_check_fail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _query_replay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _super_link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _query_ranklist_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _request_guild_log_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _change_server_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _activity_info_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _activity_lotto_info_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _activity_lotto_reward_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _activity_bigpackage_info_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _activity_bigpackage_reward_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _activity_bigpackage_reset_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _fb_attention_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _continue_pay_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _recharge_rebate_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _every_day_happy_reply_),
  };
  down_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      down_msg_descriptor_,
      down_msg::default_instance_,
      down_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(down_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(down_msg));
  system_setting_reply_descriptor_ = file->message_type(8);
  static const int system_setting_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting_reply, _request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting_reply, _change_),
  };
  system_setting_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      system_setting_reply_descriptor_,
      system_setting_reply::default_instance_,
      system_setting_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(system_setting_reply));
  system_setting_change_descriptor_ = file->message_type(9);
  static const int system_setting_change_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting_change, _result_),
  };
  system_setting_change_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      system_setting_change_descriptor_,
      system_setting_change::default_instance_,
      system_setting_change_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting_change, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting_change, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(system_setting_change));
  system_setting_request_descriptor_ = file->message_type(10);
  static const int system_setting_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting_request, _system_setting_item_),
  };
  system_setting_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      system_setting_request_descriptor_,
      system_setting_request::default_instance_,
      system_setting_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(system_setting_request));
  system_setting_item_descriptor_ = file->message_type(11);
  static const int system_setting_item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting_item, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting_item, value_),
  };
  system_setting_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      system_setting_item_descriptor_,
      system_setting_item::default_instance_,
      system_setting_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(system_setting_item));
  system_setting_item_setting_status_descriptor_ = system_setting_item_descriptor_->enum_type(0);
  global_config_descriptor_ = file->message_type(12);
  static const int global_config_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_config, _hero_split_ending_),
  };
  global_config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      global_config_descriptor_,
      global_config::default_instance_,
      global_config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(global_config));
  login_reply_descriptor_ = file->message_type(13);
  static const int login_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_reply, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_reply, _user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_reply, _time_zone_),
  };
  login_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      login_reply_descriptor_,
      login_reply::default_instance_,
      login_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(login_reply));
  sdk_login_reply_descriptor_ = file->message_type(14);
  static const int sdk_login_reply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdk_login_reply, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdk_login_reply, _uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdk_login_reply, _access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdk_login_reply, _recharge_url_),
  };
  sdk_login_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sdk_login_reply_descriptor_,
      sdk_login_reply::default_instance_,
      sdk_login_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdk_login_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdk_login_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sdk_login_reply));
  user_check_descriptor_ = file->message_type(15);
  static const int user_check_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_check, _user_),
  };
  user_check_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_check_descriptor_,
      user_check::default_instance_,
      user_check_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_check, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_check, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_check));
  reset_descriptor_ = file->message_type(16);
  static const int reset_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reset, _user_),
  };
  reset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reset_descriptor_,
      reset::default_instance_,
      reset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reset));
  enter_stage_reply_descriptor_ = file->message_type(17);
  static const int enter_stage_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_stage_reply, _rseed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_stage_reply, _loots_),
  };
  enter_stage_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_stage_reply_descriptor_,
      enter_stage_reply::default_instance_,
      enter_stage_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_stage_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_stage_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_stage_reply));
  activity_info_reply_descriptor_ = file->message_type(18);
  static const int activity_info_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_reply, _last_activity_info_),
  };
  activity_info_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_info_reply_descriptor_,
      activity_info_reply::default_instance_,
      activity_info_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_info_reply));
  last_activity_info_descriptor_ = file->message_type(19);
  static const int last_activity_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(last_activity_info, _group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(last_activity_info, _activity_ids_),
  };
  last_activity_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      last_activity_info_descriptor_,
      last_activity_info::default_instance_,
      last_activity_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(last_activity_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(last_activity_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(last_activity_info));
  activity_lotto_info_reply_descriptor_ = file->message_type(20);
  static const int activity_lotto_info_reply_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_lotto_info_reply, _diamond_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_lotto_info_reply, _current_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_lotto_info_reply, _need_diamond_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_lotto_info_reply, _win_diamond_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_lotto_info_reply, _remain_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_lotto_info_reply, _broadcast_texts_),
  };
  activity_lotto_info_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_lotto_info_reply_descriptor_,
      activity_lotto_info_reply::default_instance_,
      activity_lotto_info_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_lotto_info_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_lotto_info_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_lotto_info_reply));
  activity_lotto_reward_reply_descriptor_ = file->message_type(21);
  static const int activity_lotto_reward_reply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_lotto_reward_reply, _status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_lotto_reward_reply, _reward_diamon_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_lotto_reward_reply, _have_next_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_lotto_reward_reply, _need_diamond_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_lotto_reward_reply, _diamond_num_),
  };
  activity_lotto_reward_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_lotto_reward_reply_descriptor_,
      activity_lotto_reward_reply::default_instance_,
      activity_lotto_reward_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_lotto_reward_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_lotto_reward_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_lotto_reward_reply));
  activity_bigpackage_info_reply_descriptor_ = file->message_type(22);
  static const int activity_bigpackage_info_reply_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_info_reply, _people_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_info_reply, _remain_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_info_reply, _next_reset_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_info_reply, _current_ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_info_reply, _get_box_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_info_reply, _distance_score_20_),
  };
  activity_bigpackage_info_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_bigpackage_info_reply_descriptor_,
      activity_bigpackage_info_reply::default_instance_,
      activity_bigpackage_info_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_info_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_info_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_bigpackage_info_reply));
  activity_bigpackage_reward_reply_descriptor_ = file->message_type(23);
  static const int activity_bigpackage_reward_reply_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_reward_reply, _status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_reward_reply, _rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_reward_reply, _item_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_reward_reply, _people_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_reward_reply, _current_ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_reward_reply, _distance_score_20_),
  };
  activity_bigpackage_reward_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_bigpackage_reward_reply_descriptor_,
      activity_bigpackage_reward_reply::default_instance_,
      activity_bigpackage_reward_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_reward_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_reward_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_bigpackage_reward_reply));
  activity_bigpackage_reset_reply_descriptor_ = file->message_type(24);
  static const int activity_bigpackage_reset_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_reset_reply, _status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_reset_reply, _next_reset_price_),
  };
  activity_bigpackage_reset_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_bigpackage_reset_reply_descriptor_,
      activity_bigpackage_reset_reply::default_instance_,
      activity_bigpackage_reset_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_reset_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_reset_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_bigpackage_reset_reply));
  exit_stage_reply_descriptor_ = file->message_type(25);
  static const int exit_stage_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_stage_reply, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_stage_reply, _shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_stage_reply, _sshop_),
  };
  exit_stage_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      exit_stage_reply_descriptor_,
      exit_stage_reply::default_instance_,
      exit_stage_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_stage_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_stage_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(exit_stage_reply));
  exit_stage_reply_exit_stage_result_descriptor_ = exit_stage_reply_descriptor_->enum_type(0);
  hero_upgrade_reply_descriptor_ = file->message_type(26);
  static const int hero_upgrade_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upgrade_reply, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upgrade_reply, _hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upgrade_reply, _items_),
  };
  hero_upgrade_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_upgrade_reply_descriptor_,
      hero_upgrade_reply::default_instance_,
      hero_upgrade_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upgrade_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upgrade_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_upgrade_reply));
  equip_synthesis_reply_descriptor_ = file->message_type(27);
  static const int equip_synthesis_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_synthesis_reply, _result_),
  };
  equip_synthesis_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equip_synthesis_reply_descriptor_,
      equip_synthesis_reply::default_instance_,
      equip_synthesis_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_synthesis_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_synthesis_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equip_synthesis_reply));
  wear_equip_reply_descriptor_ = file->message_type(28);
  static const int wear_equip_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_equip_reply, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_equip_reply, _gs_),
  };
  wear_equip_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wear_equip_reply_descriptor_,
      wear_equip_reply::default_instance_,
      wear_equip_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_equip_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_equip_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wear_equip_reply));
  sync_vitality_reply_descriptor_ = file->message_type(29);
  static const int sync_vitality_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_vitality_reply, _vitality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_vitality_reply, _shadow_runes_),
  };
  sync_vitality_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sync_vitality_reply_descriptor_,
      sync_vitality_reply::default_instance_,
      sync_vitality_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_vitality_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_vitality_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sync_vitality_reply));
  consume_item_reply_descriptor_ = file->message_type(30);
  static const int consume_item_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(consume_item_reply, _hero_),
  };
  consume_item_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      consume_item_reply_descriptor_,
      consume_item_reply::default_instance_,
      consume_item_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(consume_item_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(consume_item_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(consume_item_reply));
  user_shop_descriptor_ = file->message_type(31);
  static const int user_shop_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop, _last_auto_refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop, _expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop, _last_manual_refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop, _today_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop, _current_goods_),
  };
  user_shop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_shop_descriptor_,
      user_shop::default_instance_,
      user_shop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_shop));
  star_shop_descriptor_ = file->message_type(32);
  static const int star_shop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(star_shop, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(star_shop, _expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(star_shop, _star_goods_),
  };
  star_shop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      star_shop_descriptor_,
      star_shop::default_instance_,
      star_shop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(star_shop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(star_shop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(star_shop));
  shop_consume_reply_descriptor_ = file->message_type(33);
  static const int shop_consume_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_consume_reply, _result_),
  };
  shop_consume_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shop_consume_reply_descriptor_,
      shop_consume_reply::default_instance_,
      shop_consume_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_consume_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_consume_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shop_consume_reply));
  skill_levelup_reply_descriptor_ = file->message_type(34);
  static const int skill_levelup_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_levelup_reply, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_levelup_reply, _gs_),
  };
  skill_levelup_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      skill_levelup_reply_descriptor_,
      skill_levelup_reply::default_instance_,
      skill_levelup_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_levelup_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_levelup_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(skill_levelup_reply));
  sell_item_reply_descriptor_ = file->message_type(35);
  static const int sell_item_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_item_reply, _result_),
  };
  sell_item_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sell_item_reply_descriptor_,
      sell_item_reply::default_instance_,
      sell_item_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_item_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_item_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sell_item_reply));
  fragment_compose_reply_descriptor_ = file->message_type(36);
  static const int fragment_compose_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fragment_compose_reply, _result_),
  };
  fragment_compose_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fragment_compose_reply_descriptor_,
      fragment_compose_reply::default_instance_,
      fragment_compose_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fragment_compose_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fragment_compose_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fragment_compose_reply));
  hero_equip_upgrade_reply_descriptor_ = file->message_type(37);
  static const int hero_equip_upgrade_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_upgrade_reply, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_upgrade_reply, _hero_),
  };
  hero_equip_upgrade_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_equip_upgrade_reply_descriptor_,
      hero_equip_upgrade_reply::default_instance_,
      hero_equip_upgrade_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_upgrade_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_upgrade_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_equip_upgrade_reply));
  tutorial_reply_descriptor_ = file->message_type(38);
  static const int tutorial_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tutorial_reply, _result_),
  };
  tutorial_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tutorial_reply_descriptor_,
      tutorial_reply::default_instance_,
      tutorial_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tutorial_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tutorial_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tutorial_reply));
  error_info_descriptor_ = file->message_type(39);
  static const int error_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error_info, _info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error_info, _exit_),
  };
  error_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      error_info_descriptor_,
      error_info::default_instance_,
      error_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(error_info));
  error_info_exit_descriptor_ = error_info_descriptor_->enum_type(0);
  goods_descriptor_ = file->message_type(40);
  static const int goods_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(goods, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(goods, _amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(goods, _type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(goods, _price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(goods, _is_sale_),
  };
  goods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      goods_descriptor_,
      goods::default_instance_,
      goods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(goods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(goods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(goods));
  goods_price_type_descriptor_ = goods_descriptor_->enum_type(0);
  star_goods_descriptor_ = file->message_type(41);
  static const int star_goods_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(star_goods, _type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(star_goods, _amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(star_goods, _stone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(star_goods, _stone_amount_),
  };
  star_goods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      star_goods_descriptor_,
      star_goods::default_instance_,
      star_goods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(star_goods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(star_goods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(star_goods));
  star_goods_box_type_descriptor_ = star_goods_descriptor_->enum_type(0);
  user_descriptor_ = file->message_type(42);
  static const int user_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _name_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _recharge_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _vitality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _skill_level_up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _userstage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _tutorial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _task_finished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _last_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _dailyjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _tavern_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _usermidas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _daily_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _recharge_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _vip_gifts_draw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _month_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _user_guild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _sshop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _facebook_follow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _praise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _shadow_runes_),
  };
  user_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_descriptor_,
      user::default_instance_,
      user_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user));
  user_summary_descriptor_ = file->message_type(43);
  static const int user_summary_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_summary, _avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_summary, _name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_summary, _vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_summary, _level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_summary, _guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_summary, _user_id_),
  };
  user_summary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_summary_descriptor_,
      user_summary::default_instance_,
      user_summary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_summary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_summary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_summary));
  name_card_descriptor_ = file->message_type(44);
  static const int name_card_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(name_card, _name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(name_card, _last_set_name_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(name_card, _avatar_),
  };
  name_card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      name_card_descriptor_,
      name_card::default_instance_,
      name_card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(name_card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(name_card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(name_card));
  daily_login_descriptor_ = file->message_type(45);
  static const int daily_login_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(daily_login, _status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(daily_login, _frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(daily_login, _last_login_date_),
  };
  daily_login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      daily_login_descriptor_,
      daily_login::default_instance_,
      daily_login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(daily_login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(daily_login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(daily_login));
  daily_login_dailylogin_status_descriptor_ = daily_login_descriptor_->enum_type(0);
  ask_daily_login_reply_descriptor_ = file->message_type(46);
  static const int ask_daily_login_reply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_daily_login_reply, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_daily_login_reply, _items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_daily_login_reply, _hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_daily_login_reply, _diamond_),
  };
  ask_daily_login_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ask_daily_login_reply_descriptor_,
      ask_daily_login_reply::default_instance_,
      ask_daily_login_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_daily_login_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_daily_login_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ask_daily_login_reply));
  hero_equip_descriptor_ = file->message_type(47);
  static const int hero_equip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip, _index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip, _item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip, _exp_),
  };
  hero_equip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_equip_descriptor_,
      hero_equip::default_instance_,
      hero_equip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_equip));
  hero_descriptor_ = file->message_type(48);
  static const int hero_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero, _tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero, _rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero, _level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero, _stars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero, _exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero, _gs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero, _state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero, _skill_levels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero, _items_),
  };
  hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_descriptor_,
      hero::default_instance_,
      hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero));
  hero_summary_descriptor_ = file->message_type(49);
  static const int hero_summary_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_summary, _tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_summary, _rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_summary, _level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_summary, _stars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_summary, _gs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_summary, _state_),
  };
  hero_summary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_summary_descriptor_,
      hero_summary::default_instance_,
      hero_summary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_summary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_summary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_summary));
  hero_dyna_descriptor_ = file->message_type(50);
  static const int hero_dyna_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_dyna, _hp_perc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_dyna, _mp_perc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_dyna, _custom_data_),
  };
  hero_dyna_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_dyna_descriptor_,
      hero_dyna::default_instance_,
      hero_dyna_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_dyna, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_dyna, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_dyna));
  skilllevelup_descriptor_ = file->message_type(51);
  static const int skilllevelup_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skilllevelup, _skill_levelup_chance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skilllevelup, _skill_levelup_cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skilllevelup, _reset_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skilllevelup, _last_reset_date_),
  };
  skilllevelup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      skilllevelup_descriptor_,
      skilllevelup::default_instance_,
      skilllevelup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skilllevelup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skilllevelup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(skilllevelup));
  usertask_descriptor_ = file->message_type(52);
  static const int usertask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(usertask, _line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(usertask, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(usertask, _status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(usertask, _task_target_),
  };
  usertask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      usertask_descriptor_,
      usertask::default_instance_,
      usertask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(usertask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(usertask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(usertask));
  usertask_status_descriptor_ = usertask_descriptor_->enum_type(0);
  dailyjob_descriptor_ = file->message_type(53);
  static const int dailyjob_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailyjob, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailyjob, _last_rewards_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailyjob, _task_target_),
  };
  dailyjob_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dailyjob_descriptor_,
      dailyjob::default_instance_,
      dailyjob_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailyjob, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailyjob, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dailyjob));
  sweeploot_descriptor_ = file->message_type(54);
  static const int sweeploot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sweeploot, _exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sweeploot, _money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sweeploot, _items_),
  };
  sweeploot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sweeploot_descriptor_,
      sweeploot::default_instance_,
      sweeploot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sweeploot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sweeploot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sweeploot));
  tavern_record_descriptor_ = file->message_type(55);
  static const int tavern_record_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tavern_record, _box_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tavern_record, _left_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tavern_record, _last_get_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tavern_record, _has_first_draw_),
  };
  tavern_record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tavern_record_descriptor_,
      tavern_record::default_instance_,
      tavern_record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tavern_record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tavern_record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tavern_record));
  tavern_record_box_type_descriptor_ = tavern_record_descriptor_->enum_type(0);
  usermidas_descriptor_ = file->message_type(56);
  static const int usermidas_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(usermidas, _last_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(usermidas, _today_times_),
  };
  usermidas_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      usermidas_descriptor_,
      usermidas::default_instance_,
      usermidas_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(usermidas, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(usermidas, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(usermidas));
  trigger_task_reply_descriptor_ = file->message_type(57);
  static const int trigger_task_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trigger_task_reply, _result_),
  };
  trigger_task_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      trigger_task_reply_descriptor_,
      trigger_task_reply::default_instance_,
      trigger_task_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trigger_task_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trigger_task_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(trigger_task_reply));
  require_rewards_reply_descriptor_ = file->message_type(58);
  static const int require_rewards_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(require_rewards_reply, _result_),
  };
  require_rewards_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      require_rewards_reply_descriptor_,
      require_rewards_reply::default_instance_,
      require_rewards_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(require_rewards_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(require_rewards_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(require_rewards_reply));
  trigger_job_reply_descriptor_ = file->message_type(59);
  static const int trigger_job_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trigger_job_reply, _result_),
  };
  trigger_job_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      trigger_job_reply_descriptor_,
      trigger_job_reply::default_instance_,
      trigger_job_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trigger_job_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trigger_job_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(trigger_job_reply));
  dailyjob_reward_descriptor_ = file->message_type(60);
  static const int dailyjob_reward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailyjob_reward, _type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailyjob_reward, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailyjob_reward, _amount_),
  };
  dailyjob_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dailyjob_reward_descriptor_,
      dailyjob_reward::default_instance_,
      dailyjob_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailyjob_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailyjob_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dailyjob_reward));
  dailyjob_reward_type_descriptor_ = dailyjob_reward_descriptor_->enum_type(0);
  job_rewards_reply_descriptor_ = file->message_type(61);
  static const int job_rewards_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_rewards_reply, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_rewards_reply, _activity_reward_),
  };
  job_rewards_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      job_rewards_reply_descriptor_,
      job_rewards_reply::default_instance_,
      job_rewards_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_rewards_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_rewards_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(job_rewards_reply));
  tavern_draw_reply_descriptor_ = file->message_type(62);
  static const int tavern_draw_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tavern_draw_reply, _item_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tavern_draw_reply, _new_heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tavern_draw_reply, _smash_idx_),
  };
  tavern_draw_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tavern_draw_reply_descriptor_,
      tavern_draw_reply::default_instance_,
      tavern_draw_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tavern_draw_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tavern_draw_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tavern_draw_reply));
  reset_elite_reply_descriptor_ = file->message_type(63);
  static const int reset_elite_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reset_elite_reply, _result_),
  };
  reset_elite_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reset_elite_reply_descriptor_,
      reset_elite_reply::default_instance_,
      reset_elite_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reset_elite_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reset_elite_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reset_elite_reply));
  sweep_stage_reply_descriptor_ = file->message_type(64);
  static const int sweep_stage_reply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sweep_stage_reply, _loot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sweep_stage_reply, _items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sweep_stage_reply, _shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sweep_stage_reply, _sshop_),
  };
  sweep_stage_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sweep_stage_reply_descriptor_,
      sweep_stage_reply::default_instance_,
      sweep_stage_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sweep_stage_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sweep_stage_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sweep_stage_reply));
  sweep_descriptor_ = file->message_type(65);
  static const int sweep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sweep, _last_reset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sweep, _today_free_sweep_times_),
  };
  sweep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sweep_descriptor_,
      sweep::default_instance_,
      sweep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sweep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sweep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sweep));
  sync_skill_stren_reply_descriptor_ = file->message_type(66);
  static const int sync_skill_stren_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_skill_stren_reply, _skill_level_up_),
  };
  sync_skill_stren_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sync_skill_stren_reply_descriptor_,
      sync_skill_stren_reply::default_instance_,
      sync_skill_stren_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_skill_stren_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_skill_stren_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sync_skill_stren_reply));
  hero_evolve_reply_descriptor_ = file->message_type(67);
  static const int hero_evolve_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_evolve_reply, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_evolve_reply, _hero_),
  };
  hero_evolve_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_evolve_reply_descriptor_,
      hero_evolve_reply::default_instance_,
      hero_evolve_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_evolve_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_evolve_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_evolve_reply));
  vitality_descriptor_ = file->message_type(68);
  static const int vitality_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vitality, _current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vitality, _lastchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vitality, _todaybuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vitality, _lastbuy_),
  };
  vitality_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vitality_descriptor_,
      vitality::default_instance_,
      vitality_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vitality, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vitality, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vitality));
  userstage_descriptor_ = file->message_type(69);
  static const int userstage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userstage, _normal_stage_stars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userstage, _elite_stage_stars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userstage, _elite_daily_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userstage, _elite_reset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userstage, _sweep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userstage, _act_daily_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userstage, _act_reset_time_),
  };
  userstage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      userstage_descriptor_,
      userstage::default_instance_,
      userstage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userstage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userstage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(userstage));
  act_daily_record_descriptor_ = file->message_type(70);
  static const int act_daily_record_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_daily_record, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_daily_record, _frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_daily_record, _last_change_),
  };
  act_daily_record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      act_daily_record_descriptor_,
      act_daily_record::default_instance_,
      act_daily_record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_daily_record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_daily_record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(act_daily_record));
  ladder_reply_descriptor_ = file->message_type(71);
  static const int ladder_reply_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_reply, _open_panel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_reply, _apply_oppo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_reply, _start_battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_reply, _end_battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_reply, _set_lineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_reply, _query_records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_reply, _query_replay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_reply, _query_rankborad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_reply, _query_oppo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_reply, _clear_battle_cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_reply, _draw_rank_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_reply, _buy_battle_chance_),
  };
  ladder_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ladder_reply_descriptor_,
      ladder_reply::default_instance_,
      ladder_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ladder_reply));
  open_panel_descriptor_ = file->message_type(72);
  static const int open_panel_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_panel, _rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_panel, _left_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_panel, _last_bt_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_panel, _buy_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_panel, _lineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_panel, _gs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_panel, _oppos_),
  };
  open_panel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      open_panel_descriptor_,
      open_panel::default_instance_,
      open_panel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_panel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_panel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(open_panel));
  apply_opponent_descriptor_ = file->message_type(73);
  static const int apply_opponent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_opponent, _oppos_),
  };
  apply_opponent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      apply_opponent_descriptor_,
      apply_opponent::default_instance_,
      apply_opponent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_opponent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_opponent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(apply_opponent));
  start_battle_descriptor_ = file->message_type(74);
  static const int start_battle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_battle, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_battle, _rseed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_battle, _self_heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_battle, _heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_battle, _is_robot_),
  };
  start_battle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      start_battle_descriptor_,
      start_battle::default_instance_,
      start_battle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_battle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_battle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(start_battle));
  end_battle_descriptor_ = file->message_type(75);
  static const int end_battle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(end_battle, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(end_battle, _best_rank_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(end_battle, _best_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(end_battle, _cur_rank_),
  };
  end_battle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      end_battle_descriptor_,
      end_battle::default_instance_,
      end_battle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(end_battle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(end_battle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(end_battle));
  set_lineup_descriptor_ = file->message_type(76);
  static const int set_lineup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_lineup, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_lineup, _lineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_lineup, _gs_),
  };
  set_lineup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_lineup_descriptor_,
      set_lineup::default_instance_,
      set_lineup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_lineup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_lineup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_lineup));
  query_records_descriptor_ = file->message_type(77);
  static const int query_records_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_records, _records_),
  };
  query_records_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_records_descriptor_,
      query_records::default_instance_,
      query_records_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_records, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_records, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_records));
  query_replay_descriptor_ = file->message_type(78);
  static const int query_replay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_replay, _record_),
  };
  query_replay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_replay_descriptor_,
      query_replay::default_instance_,
      query_replay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_replay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_replay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_replay));
  pvp_record_descriptor_ = file->message_type(79);
  static const int pvp_record_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_record, _checkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_record, _userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_record, _username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_record, _level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_record, _avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_record, _vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_record, _oppo_userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_record, _oppo_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_record, _oppo_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_record, _oppo_avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_record, _oppo_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_record, _oppo_robot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_record, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_record, _self_heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_record, _self_dynas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_record, _oppo_heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_record, _oppo_dynas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_record, _rseed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_record, _self_robot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_record, _param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_record, _operations_),
  };
  pvp_record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pvp_record_descriptor_,
      pvp_record::default_instance_,
      pvp_record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pvp_record));
  query_rankboard_descriptor_ = file->message_type(80);
  static const int query_rankboard_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_rankboard, _rank_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_rankboard, _self_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_rankboard, _pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_rankboard, _prev_pos_),
  };
  query_rankboard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_rankboard_descriptor_,
      query_rankboard::default_instance_,
      query_rankboard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_rankboard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_rankboard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_rankboard));
  query_oppo_info_descriptor_ = file->message_type(81);
  static const int query_oppo_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_oppo_info, _user_),
  };
  query_oppo_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_oppo_info_descriptor_,
      query_oppo_info::default_instance_,
      query_oppo_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_oppo_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_oppo_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_oppo_info));
  clear_battle_cd_descriptor_ = file->message_type(82);
  static const int clear_battle_cd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clear_battle_cd, _result_),
  };
  clear_battle_cd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      clear_battle_cd_descriptor_,
      clear_battle_cd::default_instance_,
      clear_battle_cd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clear_battle_cd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clear_battle_cd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(clear_battle_cd));
  rankboard_data_descriptor_ = file->message_type(83);
  static const int rankboard_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rankboard_data, _user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rankboard_data, _summary_),
  };
  rankboard_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rankboard_data_descriptor_,
      rankboard_data::default_instance_,
      rankboard_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rankboard_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rankboard_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rankboard_data));
  ladder_record_descriptor_ = file->message_type(84);
  static const int ladder_record_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_record, _user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_record, _summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_record, _deta_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_record, _bt_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_record, _bt_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_record, _replay_id_),
  };
  ladder_record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ladder_record_descriptor_,
      ladder_record::default_instance_,
      ladder_record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ladder_record));
  ladder_opponent_descriptor_ = file->message_type(85);
  static const int ladder_opponent_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_opponent, _user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_opponent, _summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_opponent, _rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_opponent, _win_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_opponent, _gs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_opponent, _is_robot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_opponent, _heros_),
  };
  ladder_opponent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ladder_opponent_descriptor_,
      ladder_opponent::default_instance_,
      ladder_opponent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_opponent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_opponent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ladder_opponent));
  ladder_rank_reward_descriptor_ = file->message_type(86);
  static const int ladder_rank_reward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_rank_reward, _type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_rank_reward, _param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_rank_reward, _param2_),
  };
  ladder_rank_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ladder_rank_reward_descriptor_,
      ladder_rank_reward::default_instance_,
      ladder_rank_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_rank_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_rank_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ladder_rank_reward));
  ladder_rank_reward_reward_type_descriptor_ = ladder_rank_reward_descriptor_->enum_type(0);
  draw_rank_reward_descriptor_ = file->message_type(87);
  static const int draw_rank_reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(draw_rank_reward, _rewards_),
  };
  draw_rank_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      draw_rank_reward_descriptor_,
      draw_rank_reward::default_instance_,
      draw_rank_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(draw_rank_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(draw_rank_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(draw_rank_reward));
  buy_battle_chance_descriptor_ = file->message_type(88);
  static const int buy_battle_chance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_battle_chance, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_battle_chance, _buy_times_),
  };
  buy_battle_chance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buy_battle_chance_descriptor_,
      buy_battle_chance::default_instance_,
      buy_battle_chance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_battle_chance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_battle_chance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buy_battle_chance));
  set_name_reply_descriptor_ = file->message_type(89);
  static const int set_name_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_name_reply, _result_),
  };
  set_name_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_name_reply_descriptor_,
      set_name_reply::default_instance_,
      set_name_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_name_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_name_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_name_reply));
  set_name_reply_set_name_result_descriptor_ = set_name_reply_descriptor_->enum_type(0);
  set_avatar_reply_descriptor_ = file->message_type(90);
  static const int set_avatar_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_avatar_reply, _result_),
  };
  set_avatar_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_avatar_reply_descriptor_,
      set_avatar_reply::default_instance_,
      set_avatar_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_avatar_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_avatar_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_avatar_reply));
  query_data_reply_descriptor_ = file->message_type(91);
  static const int query_data_reply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_data_reply, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_data_reply, charge_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_data_reply, heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_data_reply, recharge_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_data_reply, _month_card_),
  };
  query_data_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_data_reply_descriptor_,
      query_data_reply::default_instance_,
      query_data_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_data_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_data_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_data_reply));
  midas_acquire_descriptor_ = file->message_type(92);
  static const int midas_acquire_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(midas_acquire, _type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(midas_acquire, _money_),
  };
  midas_acquire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      midas_acquire_descriptor_,
      midas_acquire::default_instance_,
      midas_acquire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(midas_acquire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(midas_acquire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(midas_acquire));
  midas_reply_descriptor_ = file->message_type(93);
  static const int midas_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(midas_reply, _acquire_),
  };
  midas_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      midas_reply_descriptor_,
      midas_reply::default_instance_,
      midas_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(midas_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(midas_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(midas_reply));
  open_shop_reply_descriptor_ = file->message_type(94);
  static const int open_shop_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_shop_reply, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_shop_reply, _shop_),
  };
  open_shop_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      open_shop_reply_descriptor_,
      open_shop_reply::default_instance_,
      open_shop_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_shop_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_shop_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(open_shop_reply));
  charge_reply_descriptor_ = file->message_type(95);
  static const int charge_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(charge_reply, _serial_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(charge_reply, _charge_id_),
  };
  charge_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      charge_reply_descriptor_,
      charge_reply::default_instance_,
      charge_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(charge_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(charge_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(charge_reply));
  notify_msg_descriptor_ = file->message_type(96);
  static const int notify_msg_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_msg, _ladder_notify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_msg, _new_mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_msg, _guild_chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_msg, _activity_notify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_msg, _activity_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_msg, _release_heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_msg, _excav_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_msg, _guild_drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_msg, _personal_chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_msg, _splitable_heroes_),
  };
  notify_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      notify_msg_descriptor_,
      notify_msg::default_instance_,
      notify_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(notify_msg));
  ladder_notify_descriptor_ = file->message_type(97);
  static const int ladder_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_notify, _is_attacked_),
  };
  ladder_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ladder_notify_descriptor_,
      ladder_notify::default_instance_,
      ladder_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ladder_notify));
  tbc_reply_descriptor_ = file->message_type(98);
  static const int tbc_reply_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_reply, _open_panel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_reply, _query_oppo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_reply, _start_bat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_reply, _end_bat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_reply, _reset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_reply, _draw_reward_),
  };
  tbc_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbc_reply_descriptor_,
      tbc_reply::default_instance_,
      tbc_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbc_reply));
  tbc_self_hero_descriptor_ = file->message_type(99);
  static const int tbc_self_hero_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_self_hero, _tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_self_hero, _dyna_),
  };
  tbc_self_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbc_self_hero_descriptor_,
      tbc_self_hero::default_instance_,
      tbc_self_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_self_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_self_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbc_self_hero));
  tbc_oppo_hero_descriptor_ = file->message_type(100);
  static const int tbc_oppo_hero_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_oppo_hero, _base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_oppo_hero, _dyna_),
  };
  tbc_oppo_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbc_oppo_hero_descriptor_,
      tbc_oppo_hero::default_instance_,
      tbc_oppo_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_oppo_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_oppo_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbc_oppo_hero));
  tbc_reward_descriptor_ = file->message_type(101);
  static const int tbc_reward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_reward, _type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_reward, _param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_reward, _param2_),
  };
  tbc_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbc_reward_descriptor_,
      tbc_reward::default_instance_,
      tbc_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbc_reward));
  tbc_reward_type_descriptor_ = tbc_reward_descriptor_->enum_type(0);
  tbc_stage_descriptor_ = file->message_type(102);
  static const int tbc_stage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_stage, _status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_stage, _rewards_),
  };
  tbc_stage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbc_stage_descriptor_,
      tbc_stage::default_instance_,
      tbc_stage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_stage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_stage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbc_stage));
  tbc_stage_status_descriptor_ = tbc_stage_descriptor_->enum_type(0);
  tbc_info_descriptor_ = file->message_type(103);
  static const int tbc_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_info, _cur_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_info, _reset_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_info, _heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_info, _stages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_info, _hire_hero_),
  };
  tbc_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbc_info_descriptor_,
      tbc_info::default_instance_,
      tbc_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbc_info));
  tbc_open_panel_descriptor_ = file->message_type(104);
  static const int tbc_open_panel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_open_panel, _info_),
  };
  tbc_open_panel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbc_open_panel_descriptor_,
      tbc_open_panel::default_instance_,
      tbc_open_panel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_open_panel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_open_panel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbc_open_panel));
  tbc_query_oppo_descriptor_ = file->message_type(105);
  static const int tbc_query_oppo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_query_oppo, _summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_query_oppo, _oppos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_query_oppo, _is_robot_),
  };
  tbc_query_oppo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbc_query_oppo_descriptor_,
      tbc_query_oppo::default_instance_,
      tbc_query_oppo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_query_oppo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_query_oppo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbc_query_oppo));
  tbc_start_battle_descriptor_ = file->message_type(106);
  static const int tbc_start_battle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_start_battle, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_start_battle, _rseed_),
  };
  tbc_start_battle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbc_start_battle_descriptor_,
      tbc_start_battle::default_instance_,
      tbc_start_battle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_start_battle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_start_battle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbc_start_battle));
  tbc_end_battle_descriptor_ = file->message_type(107);
  static const int tbc_end_battle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_end_battle, _result_),
  };
  tbc_end_battle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbc_end_battle_descriptor_,
      tbc_end_battle::default_instance_,
      tbc_end_battle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_end_battle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_end_battle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbc_end_battle));
  tbc_reset_descriptor_ = file->message_type(108);
  static const int tbc_reset_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_reset, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_reset, _info_),
  };
  tbc_reset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbc_reset_descriptor_,
      tbc_reset::default_instance_,
      tbc_reset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_reset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_reset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbc_reset));
  tbc_draw_reward_descriptor_ = file->message_type(109);
  static const int tbc_draw_reward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_draw_reward, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_draw_reward, _stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_draw_reward, _rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_draw_reward, _heroes_),
  };
  tbc_draw_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbc_draw_reward_descriptor_,
      tbc_draw_reward::default_instance_,
      tbc_draw_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_draw_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_draw_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbc_draw_reward));
  get_maillist_reply_descriptor_ = file->message_type(110);
  static const int get_maillist_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_maillist_reply, _sys_mail_list_),
  };
  get_maillist_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_maillist_reply_descriptor_,
      get_maillist_reply::default_instance_,
      get_maillist_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_maillist_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_maillist_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_maillist_reply));
  sys_mail_descriptor_ = file->message_type(111);
  static const int sys_mail_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_mail, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_mail, _status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_mail, _mail_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_mail, _expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_mail, _content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_mail, _money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_mail, _diamonds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_mail, _skill_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_mail, _items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_mail, _type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_mail, _points_),
  };
  sys_mail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sys_mail_descriptor_,
      sys_mail::default_instance_,
      sys_mail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_mail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_mail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sys_mail));
  sys_mail_status_descriptor_ = sys_mail_descriptor_->enum_type(0);
  mail_content_descriptor_ = file->message_type(112);
  static const int mail_content_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_content, _plain_mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_content, _format_mail_),
  };
  mail_content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_content_descriptor_,
      mail_content::default_instance_,
      mail_content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_content));
  plain_mail_descriptor_ = file->message_type(113);
  static const int plain_mail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plain_mail, _from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plain_mail, _title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plain_mail, _content_),
  };
  plain_mail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      plain_mail_descriptor_,
      plain_mail::default_instance_,
      plain_mail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plain_mail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plain_mail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(plain_mail));
  format_mail_descriptor_ = file->message_type(114);
  static const int format_mail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(format_mail, _mail_cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(format_mail, _params_),
  };
  format_mail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      format_mail_descriptor_,
      format_mail::default_instance_,
      format_mail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(format_mail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(format_mail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(format_mail));
  mail_param_descriptor_ = file->message_type(115);
  static const int mail_param_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_param, _idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_param, _type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_param, _value_),
  };
  mail_param_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_param_descriptor_,
      mail_param::default_instance_,
      mail_param_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_param, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_param, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_param));
  mail_param_mail_param_type_descriptor_ = mail_param_descriptor_->enum_type(0);
  user_point_descriptor_ = file->message_type(116);
  static const int user_point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_point, _type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_point, _value_),
  };
  user_point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_point_descriptor_,
      user_point::default_instance_,
      user_point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_point));
  user_point_user_point_type_descriptor_ = user_point_descriptor_->enum_type(0);
  read_mail_reply_descriptor_ = file->message_type(117);
  static const int read_mail_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(read_mail_reply, _result_),
  };
  read_mail_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      read_mail_reply_descriptor_,
      read_mail_reply::default_instance_,
      read_mail_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(read_mail_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(read_mail_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(read_mail_reply));
  get_vip_gift_reply_descriptor_ = file->message_type(118);
  static const int get_vip_gift_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_vip_gift_reply, _result_),
  };
  get_vip_gift_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_vip_gift_reply_descriptor_,
      get_vip_gift_reply::default_instance_,
      get_vip_gift_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_vip_gift_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_vip_gift_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_vip_gift_reply));
  chat_reply_descriptor_ = file->message_type(119);
  static const int chat_reply_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_reply, _say_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_reply, _fresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_reply, _fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_reply, _chat_add_bl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_reply, _chat_del_bl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_reply, _chat_blacklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_reply, _chat_borad_say_),
  };
  chat_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_reply_descriptor_,
      chat_reply::default_instance_,
      chat_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_reply));
  chat_blacklist_user_descriptor_ = file->message_type(120);
  static const int chat_blacklist_user_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_blacklist_user, _userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_blacklist_user, _user_summary_),
  };
  chat_blacklist_user_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_blacklist_user_descriptor_,
      chat_blacklist_user::default_instance_,
      chat_blacklist_user_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_blacklist_user, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_blacklist_user, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_blacklist_user));
  chat_blacklist_descriptor_ = file->message_type(121);
  static const int chat_blacklist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_blacklist, _chat_blacklist_user_),
  };
  chat_blacklist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_blacklist_descriptor_,
      chat_blacklist::default_instance_,
      chat_blacklist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_blacklist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_blacklist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_blacklist));
  chat_broad_say_descriptor_ = file->message_type(122);
  static const int chat_broad_say_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broad_say, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broad_say, _channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broad_say, _contents_),
  };
  chat_broad_say_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_broad_say_descriptor_,
      chat_broad_say::default_instance_,
      chat_broad_say_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broad_say, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broad_say, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_broad_say));
  chat_say_descriptor_ = file->message_type(123);
  static const int chat_say_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_say, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_say, _channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_say, _contents_),
  };
  chat_say_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_say_descriptor_,
      chat_say::default_instance_,
      chat_say_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_say, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_say, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_say));
  chat_fresh_descriptor_ = file->message_type(124);
  static const int chat_fresh_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_fresh, _channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_fresh, _contents_),
  };
  chat_fresh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_fresh_descriptor_,
      chat_fresh::default_instance_,
      chat_fresh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_fresh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_fresh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_fresh));
  chat_fetch_descriptor_ = file->message_type(125);
  static const int chat_fetch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_fetch, _channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_fetch, _chat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_fetch, _accessory_),
  };
  chat_fetch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_fetch_descriptor_,
      chat_fetch::default_instance_,
      chat_fetch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_fetch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_fetch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_fetch));
  chat_acc_descriptor_ = file->message_type(126);
  static const int chat_acc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_acc, _type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_acc, _binary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_acc, _replay_),
  };
  chat_acc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_acc_descriptor_,
      chat_acc::default_instance_,
      chat_acc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_acc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_acc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_acc));
  chat_acc_chat_acc_t_descriptor_ = chat_acc_descriptor_->enum_type(0);
  chat_content_descriptor_ = file->message_type(127);
  static const int chat_content_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_content, _chat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_content, _speaker_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_content, _speaker_summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_content, _target_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_content, _target_summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_content, _speaker_post_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_content, _speak_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_content, _content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_content, _content_),
  };
  chat_content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_content_descriptor_,
      chat_content::default_instance_,
      chat_content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_content));
  chat_add_bl_descriptor_ = file->message_type(128);
  static const int chat_add_bl_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_add_bl, _ret_),
  };
  chat_add_bl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_add_bl_descriptor_,
      chat_add_bl::default_instance_,
      chat_add_bl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_add_bl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_add_bl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_add_bl));
  chat_del_bl_descriptor_ = file->message_type(129);
  static const int chat_del_bl_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_del_bl, _ret_),
  };
  chat_del_bl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_del_bl_descriptor_,
      chat_del_bl::default_instance_,
      chat_del_bl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_del_bl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_del_bl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_del_bl));
  chat_descriptor_ = file->message_type(130);
  static const int chat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat, _world_chat_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat, _last_reset_world_chat_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat, _black_list_),
  };
  chat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_descriptor_,
      chat::default_instance_,
      chat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat));
  user_guild_descriptor_ = file->message_type(131);
  static const int user_guild_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_guild, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_guild, _name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_guild, _job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_guild, _req_guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_guild, _hire_hero_),
  };
  user_guild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_guild_descriptor_,
      user_guild::default_instance_,
      user_guild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_guild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_guild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_guild));
  guild_reply_descriptor_ = file->message_type(132);
  static const int guild_reply_offsets_[37] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _create_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _dismiss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _search_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _join_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _join_confirm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _leave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _kick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _set_job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _add_hire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _del_hire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _query_hires_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _hire_hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _worship_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _worship_withdraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _query_hh_detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _instance_query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _instance_detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _instance_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _instance_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _instance_drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _instance_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _instance_apply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _drop_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _drop_give_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _instance_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _items_history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _guild_jump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _guild_app_queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _instance_prepare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _guild_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _guild_stage_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _set_jump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _send_mail_reply_),
  };
  guild_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_reply_descriptor_,
      guild_reply::default_instance_,
      guild_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_reply));
  guild_send_mail_descriptor_ = file->message_type(133);
  static const int guild_send_mail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_send_mail, _result_),
  };
  guild_send_mail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_send_mail_descriptor_,
      guild_send_mail::default_instance_,
      guild_send_mail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_send_mail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_send_mail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_send_mail));
  guild_set_jump_descriptor_ = file->message_type(134);
  static const int guild_set_jump_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_set_jump, _result_),
  };
  guild_set_jump_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_set_jump_descriptor_,
      guild_set_jump::default_instance_,
      guild_set_jump_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_set_jump, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_set_jump, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_set_jump));
  guild_instance_prepare_descriptor_ = file->message_type(135);
  static const int guild_instance_prepare_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_prepare, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_prepare, _left_time_),
  };
  guild_instance_prepare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_instance_prepare_descriptor_,
      guild_instance_prepare::default_instance_,
      guild_instance_prepare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_prepare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_prepare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_instance_prepare));
  dps_rank_descriptor_ = file->message_type(136);
  static const int dps_rank_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dps_rank, _dps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dps_rank, _dps_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dps_rank, _array_),
  };
  dps_rank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dps_rank_descriptor_,
      dps_rank::default_instance_,
      dps_rank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dps_rank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dps_rank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dps_rank));
  dps_rank_array_descriptor_ = file->message_type(137);
  static const int dps_rank_array_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dps_rank_array, _heros_),
  };
  dps_rank_array_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dps_rank_array_descriptor_,
      dps_rank_array::default_instance_,
      dps_rank_array_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dps_rank_array, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dps_rank_array, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dps_rank_array));
  guild_first_pass_descriptor_ = file->message_type(138);
  static const int guild_first_pass_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_first_pass, _summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_first_pass, _pass_time_),
  };
  guild_first_pass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_first_pass_descriptor_,
      guild_first_pass::default_instance_,
      guild_first_pass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_first_pass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_first_pass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_first_pass));
  guild_fast_pass_descriptor_ = file->message_type(139);
  static const int guild_fast_pass_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_fast_pass, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_fast_pass, _icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_fast_pass, _time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_fast_pass, _name_),
  };
  guild_fast_pass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_fast_pass_descriptor_,
      guild_fast_pass::default_instance_,
      guild_fast_pass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_fast_pass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_fast_pass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_fast_pass));
  guild_stage_rank_descriptor_ = file->message_type(140);
  static const int guild_stage_rank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_stage_rank, _stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_stage_rank, _dps_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_stage_rank, _first_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_stage_rank, _fast_pass_),
  };
  guild_stage_rank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_stage_rank_descriptor_,
      guild_stage_rank::default_instance_,
      guild_stage_rank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_stage_rank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_stage_rank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_stage_rank));
  guild_app_queue_descriptor_ = file->message_type(141);
  static const int guild_app_queue_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_app_queue, _summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_app_queue, _timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_app_queue, _item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_app_queue, _rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_app_queue, _item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_app_queue, _jump_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_app_queue, _cost_money_),
  };
  guild_app_queue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_app_queue_descriptor_,
      guild_app_queue::default_instance_,
      guild_app_queue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_app_queue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_app_queue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_app_queue));
  guild_members_descriptor_ = file->message_type(142);
  static const int guild_members_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_members, _guild_member_),
  };
  guild_members_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_members_descriptor_,
      guild_members::default_instance_,
      guild_members_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_members, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_members, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_members));
  guild_jump_descriptor_ = file->message_type(143);
  static const int guild_jump_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_jump, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_jump, _app_queue_),
  };
  guild_jump_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_jump_descriptor_,
      guild_jump::default_instance_,
      guild_jump_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_jump, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_jump, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_jump));
  guild_items_history_descriptor_ = file->message_type(144);
  static const int guild_items_history_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_items_history, _isthere_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_items_history, _item_historys_),
  };
  guild_items_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_items_history_descriptor_,
      guild_items_history::default_instance_,
      guild_items_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_items_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_items_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_items_history));
  guild_item_history_descriptor_ = file->message_type(145);
  static const int guild_item_history_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_item_history, _item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_item_history, _receiver_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_item_history, _send_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_item_history, _sender_name_),
  };
  guild_item_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_item_history_descriptor_,
      guild_item_history::default_instance_,
      guild_item_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_item_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_item_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_item_history));
  guild_challenger_damage_descriptor_ = file->message_type(146);
  static const int guild_challenger_damage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_challenger_damage, _challenger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_challenger_damage, _damage_),
  };
  guild_challenger_damage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_challenger_damage_descriptor_,
      guild_challenger_damage::default_instance_,
      guild_challenger_damage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_challenger_damage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_challenger_damage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_challenger_damage));
  guild_instance_damage_descriptor_ = file->message_type(147);
  static const int guild_instance_damage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_damage, _isthere_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_damage, _damages_),
  };
  guild_instance_damage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_instance_damage_descriptor_,
      guild_instance_damage::default_instance_,
      guild_instance_damage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_damage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_damage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_instance_damage));
  guild_drop_give_descriptor_ = file->message_type(148);
  static const int guild_drop_give_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_give, _result_),
  };
  guild_drop_give_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_drop_give_descriptor_,
      guild_drop_give::default_instance_,
      guild_drop_give_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_give, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_give, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_drop_give));
  guild_drop_item_info_descriptor_ = file->message_type(149);
  static const int guild_drop_item_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_item_info, _item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_item_info, _time_out_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_item_info, _user_id_),
  };
  guild_drop_item_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_drop_item_info_descriptor_,
      guild_drop_item_info::default_instance_,
      guild_drop_item_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_item_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_item_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_drop_item_info));
  guild_drop_item_descriptor_ = file->message_type(150);
  static const int guild_drop_item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_item, _raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_item, _dps_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_item, _item_info_),
  };
  guild_drop_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_drop_item_descriptor_,
      guild_drop_item::default_instance_,
      guild_drop_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_drop_item));
  guild_instance_dps_descriptor_ = file->message_type(151);
  static const int guild_instance_dps_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_dps, _uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_dps, _dps_),
  };
  guild_instance_dps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_instance_dps_descriptor_,
      guild_instance_dps::default_instance_,
      guild_instance_dps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_dps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_dps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_instance_dps));
  guild_drop_info_descriptor_ = file->message_type(152);
  static const int guild_drop_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_info, _members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_info, _items_),
  };
  guild_drop_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_drop_info_descriptor_,
      guild_drop_info::default_instance_,
      guild_drop_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_drop_info));
  guild_instance_apply_descriptor_ = file->message_type(153);
  static const int guild_instance_apply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_apply, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_apply, _app_queue_),
  };
  guild_instance_apply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_instance_apply_descriptor_,
      guild_instance_apply::default_instance_,
      guild_instance_apply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_apply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_apply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_instance_apply));
  guild_instance_info_descriptor_ = file->message_type(154);
  static const int guild_instance_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_info, _raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_info, _stage_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_info, _wave_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_info, _hp_info_),
  };
  guild_instance_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_instance_info_descriptor_,
      guild_instance_info::default_instance_,
      guild_instance_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_instance_info));
  guild_instance_start_descriptor_ = file->message_type(155);
  static const int guild_instance_start_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_start, _instance_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_start, _rseed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_start, _loots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_start, _hp_drop_),
  };
  guild_instance_start_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_instance_start_descriptor_,
      guild_instance_start::default_instance_,
      guild_instance_start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_start, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_start, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_instance_start));
  guild_stage_hp_drop_descriptor_ = file->message_type(156);
  static const int guild_stage_hp_drop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_stage_hp_drop, _monster_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_stage_hp_drop, _loots_),
  };
  guild_stage_hp_drop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_stage_hp_drop_descriptor_,
      guild_stage_hp_drop::default_instance_,
      guild_stage_hp_drop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_stage_hp_drop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_stage_hp_drop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_stage_hp_drop));
  hp_drop_descriptor_ = file->message_type(157);
  static const int hp_drop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hp_drop, _per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hp_drop, _items_),
  };
  hp_drop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hp_drop_descriptor_,
      hp_drop::default_instance_,
      hp_drop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hp_drop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hp_drop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hp_drop));
  guild_instance_end_down_descriptor_ = file->message_type(158);
  static const int guild_instance_end_down_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_end_down, _summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_end_down, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_end_down, _rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_end_down, _apply_rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_end_down, _stage_old_progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_end_down, _join_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_end_down, _break_history_),
  };
  guild_instance_end_down_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_instance_end_down_descriptor_,
      guild_instance_end_down::default_instance_,
      guild_instance_end_down_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_end_down, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_end_down, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_instance_end_down));
  break_history_descriptor_ = file->message_type(159);
  static const int break_history_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(break_history, _diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(break_history, _guildpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(break_history, _dps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(break_history, _old_dps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(break_history, _old_summary_),
  };
  break_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      break_history_descriptor_,
      break_history::default_instance_,
      break_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(break_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(break_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(break_history));
  guild_instance_open_descriptor_ = file->message_type(160);
  static const int guild_instance_open_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_open, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_open, _raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_open, _left_time_),
  };
  guild_instance_open_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_instance_open_descriptor_,
      guild_instance_open::default_instance_,
      guild_instance_open_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_open, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_open, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_instance_open));
  guild_create_descriptor_ = file->message_type(161);
  static const int guild_create_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_create, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_create, _guild_info_),
  };
  guild_create_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_create_descriptor_,
      guild_create::default_instance_,
      guild_create_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_create, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_create, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_create));
  guild_dismiss_descriptor_ = file->message_type(162);
  static const int guild_dismiss_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_dismiss, _result_),
  };
  guild_dismiss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_dismiss_descriptor_,
      guild_dismiss::default_instance_,
      guild_dismiss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_dismiss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_dismiss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_dismiss));
  guild_info_descriptor_ = file->message_type(163);
  static const int guild_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_info, _summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_info, _members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_info, _appliers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_info, _vitality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_info, _self_vitality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_info, _left_distribute_time_),
  };
  guild_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_info_descriptor_,
      guild_info::default_instance_,
      guild_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_info));
  guild_summary_descriptor_ = file->message_type(164);
  static const int guild_summary_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_summary, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_summary, _name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_summary, _avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_summary, _slogan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_summary, _join_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_summary, _join_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_summary, _member_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_summary, _president_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_summary, _liveness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_summary, _can_jump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_summary, _host_id_),
  };
  guild_summary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_summary_descriptor_,
      guild_summary::default_instance_,
      guild_summary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_summary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_summary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_summary));
  guild_member_descriptor_ = file->message_type(165);
  static const int guild_member_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_member, _uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_member, _summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_member, _job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_member, _last_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_member, _active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_member, _join_instance_time_),
  };
  guild_member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_member_descriptor_,
      guild_member::default_instance_,
      guild_member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_member));
  guild_applier_descriptor_ = file->message_type(166);
  static const int guild_applier_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_applier, _uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_applier, _user_summary_),
  };
  guild_applier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_applier_descriptor_,
      guild_applier::default_instance_,
      guild_applier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_applier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_applier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_applier));
  guild_list_descriptor_ = file->message_type(167);
  static const int guild_list_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_list, _guilds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_list, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_list, _create_cost_),
  };
  guild_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_list_descriptor_,
      guild_list::default_instance_,
      guild_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_list));
  guild_search_descriptor_ = file->message_type(168);
  static const int guild_search_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_search, _guilds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_search, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_search, _create_cost_),
  };
  guild_search_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_search_descriptor_,
      guild_search::default_instance_,
      guild_search_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_search, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_search, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_search));
  guild_join_descriptor_ = file->message_type(169);
  static const int guild_join_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_join, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_join, _join_guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_join, _guild_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_join, _cd_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_join, _fail_reason_),
  };
  guild_join_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_join_descriptor_,
      guild_join::default_instance_,
      guild_join_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_join, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_join, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_join));
  guild_join_join_result_descriptor_ = guild_join_descriptor_->enum_type(0);
  guild_join_confirm_descriptor_ = file->message_type(170);
  static const int guild_join_confirm_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_join_confirm, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_join_confirm, _new_man_),
  };
  guild_join_confirm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_join_confirm_descriptor_,
      guild_join_confirm::default_instance_,
      guild_join_confirm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_join_confirm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_join_confirm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_join_confirm));
  guild_leave_descriptor_ = file->message_type(171);
  static const int guild_leave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_leave, _result_),
  };
  guild_leave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_leave_descriptor_,
      guild_leave::default_instance_,
      guild_leave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_leave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_leave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_leave));
  guild_kick_descriptor_ = file->message_type(172);
  static const int guild_kick_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_kick, _result_),
  };
  guild_kick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_kick_descriptor_,
      guild_kick::default_instance_,
      guild_kick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_kick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_kick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_kick));
  guild_set_descriptor_ = file->message_type(173);
  static const int guild_set_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_set, _result_),
  };
  guild_set_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_set_descriptor_,
      guild_set::default_instance_,
      guild_set_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_set, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_set, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_set));
  guild_query_descriptor_ = file->message_type(174);
  static const int guild_query_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_query, _info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_query, _worship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_query, _drop_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_query, _to_chairman_),
  };
  guild_query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_query_descriptor_,
      guild_query::default_instance_,
      guild_query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_query));
  guild_worship_descriptor_ = file->message_type(175);
  static const int guild_worship_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_worship, _use_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_worship, _rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_worship, _times_),
  };
  guild_worship_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_worship_descriptor_,
      guild_worship::default_instance_,
      guild_worship_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_worship, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_worship, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_worship));
  guild_set_job_descriptor_ = file->message_type(176);
  static const int guild_set_job_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_set_job, _result_),
  };
  guild_set_job_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_set_job_descriptor_,
      guild_set_job::default_instance_,
      guild_set_job_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_set_job, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_set_job, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_set_job));
  guild_add_hire_descriptor_ = file->message_type(177);
  static const int guild_add_hire_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_add_hire, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_add_hire, _income_),
  };
  guild_add_hire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_add_hire_descriptor_,
      guild_add_hire::default_instance_,
      guild_add_hire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_add_hire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_add_hire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_add_hire));
  guild_del_hire_descriptor_ = file->message_type(178);
  static const int guild_del_hire_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_del_hire, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_del_hire, _hire_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_del_hire, _stay_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_del_hire, _heroid_),
  };
  guild_del_hire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_del_hire_descriptor_,
      guild_del_hire::default_instance_,
      guild_del_hire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_del_hire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_del_hire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_del_hire));
  guild_query_hires_descriptor_ = file->message_type(179);
  static const int guild_query_hires_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_query_hires, _users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_query_hires, _hire_uids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_query_hires, _from_),
  };
  guild_query_hires_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_query_hires_descriptor_,
      guild_query_hires::default_instance_,
      guild_query_hires_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_query_hires, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_query_hires, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_query_hires));
  guild_hire_user_descriptor_ = file->message_type(180);
  static const int guild_hire_user_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_hire_user, _uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_hire_user, _name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_hire_user, _level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_hire_user, _avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_hire_user, _heroes_),
  };
  guild_hire_user_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_hire_user_descriptor_,
      guild_hire_user::default_instance_,
      guild_hire_user_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_hire_user, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_hire_user, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_hire_user));
  hire_hero_summary_descriptor_ = file->message_type(181);
  static const int hire_hero_summary_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hire_hero_summary, _hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hire_hero_summary, _cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hire_hero_summary, _income_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hire_hero_summary, _hire_ts_),
  };
  hire_hero_summary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hire_hero_summary_descriptor_,
      hire_hero_summary::default_instance_,
      hire_hero_summary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hire_hero_summary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hire_hero_summary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hire_hero_summary));
  guild_hire_hero_descriptor_ = file->message_type(182);
  static const int guild_hire_hero_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_hire_hero, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_hire_hero, _from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_hire_hero, _uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_hire_hero, _hero_),
  };
  guild_hire_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_hire_hero_descriptor_,
      guild_hire_hero::default_instance_,
      guild_hire_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_hire_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_hire_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_hire_hero));
  guild_worship_req_descriptor_ = file->message_type(183);
  static const int guild_worship_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_worship_req, _result_),
  };
  guild_worship_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_worship_req_descriptor_,
      guild_worship_req::default_instance_,
      guild_worship_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_worship_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_worship_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_worship_req));
  guild_worship_withdraw_descriptor_ = file->message_type(184);
  static const int guild_worship_withdraw_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_worship_withdraw, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_worship_withdraw, _rewards_),
  };
  guild_worship_withdraw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_worship_withdraw_descriptor_,
      guild_worship_withdraw::default_instance_,
      guild_worship_withdraw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_worship_withdraw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_worship_withdraw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_worship_withdraw));
  guild_qurey_hh_detail_descriptor_ = file->message_type(185);
  static const int guild_qurey_hh_detail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_qurey_hh_detail, _hero_),
  };
  guild_qurey_hh_detail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_qurey_hh_detail_descriptor_,
      guild_qurey_hh_detail::default_instance_,
      guild_qurey_hh_detail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_qurey_hh_detail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_qurey_hh_detail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_qurey_hh_detail));
  worship_reward_descriptor_ = file->message_type(186);
  static const int worship_reward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worship_reward, _type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worship_reward, _param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worship_reward, _param2_),
  };
  worship_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      worship_reward_descriptor_,
      worship_reward::default_instance_,
      worship_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worship_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worship_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(worship_reward));
  worship_reward_type_descriptor_ = worship_reward_descriptor_->enum_type(0);
  activity_reward_descriptor_ = file->message_type(187);
  static const int activity_reward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward, _type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward, _amount_),
  };
  activity_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_reward_descriptor_,
      activity_reward::default_instance_,
      activity_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_reward));
  activity_reward_type_descriptor_ = activity_reward_descriptor_->enum_type(0);
  activity_infos_descriptor_ = file->message_type(188);
  static const int activity_infos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_infos, _activity_info_),
  };
  activity_infos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_infos_descriptor_,
      activity_infos::default_instance_,
      activity_infos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_infos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_infos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_infos));
  activity_rewards_descriptor_ = file->message_type(189);
  static const int activity_rewards_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_rewards, _amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_rewards, _rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_rewards, _dailyjob_),
  };
  activity_rewards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_rewards_descriptor_,
      activity_rewards::default_instance_,
      activity_rewards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_rewards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_rewards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_rewards));
  activity_info_descriptor_ = file->message_type(190);
  static const int activity_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info, _type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info, _start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info, _end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info, _rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info, _title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info, _desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info, _rules_),
  };
  activity_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_info_descriptor_,
      activity_info::default_instance_,
      activity_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_info));
  activity_info_type_descriptor_ = activity_info_descriptor_->enum_type(0);
  cdkey_gift_reply_descriptor_ = file->message_type(191);
  static const int cdkey_gift_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cdkey_gift_reply, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cdkey_gift_reply, _pack_),
  };
  cdkey_gift_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cdkey_gift_reply_descriptor_,
      cdkey_gift_reply::default_instance_,
      cdkey_gift_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cdkey_gift_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cdkey_gift_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cdkey_gift_reply));
  cdkey_gift_reply_cdkey_result_descriptor_ = cdkey_gift_reply_descriptor_->enum_type(0);
  res_pack_descriptor_ = file->message_type(192);
  static const int res_pack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_pack, _money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_pack, _diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_pack, _items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_pack, _heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_pack, _month_card_),
  };
  res_pack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      res_pack_descriptor_,
      res_pack::default_instance_,
      res_pack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_pack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_pack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(res_pack));
  ask_magicsoul_reply_descriptor_ = file->message_type(193);
  static const int ask_magicsoul_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_magicsoul_reply, _id_),
  };
  ask_magicsoul_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ask_magicsoul_reply_descriptor_,
      ask_magicsoul_reply::default_instance_,
      ask_magicsoul_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_magicsoul_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_magicsoul_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ask_magicsoul_reply));
  important_data_descriptor_ = file->message_type(194);
  static const int important_data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(important_data, _money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(important_data, _rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(important_data, _heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(important_data, _items_),
  };
  important_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      important_data_descriptor_,
      important_data::default_instance_,
      important_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(important_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(important_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(important_data));
  monthcard_descriptor_ = file->message_type(195);
  static const int monthcard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monthcard, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monthcard, _expire_time_),
  };
  monthcard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      monthcard_descriptor_,
      monthcard::default_instance_,
      monthcard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monthcard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monthcard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(monthcard));
  excavate_reply_descriptor_ = file->message_type(196);
  static const int excavate_reply_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_reply, _search_excavate_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_reply, _query_excavate_data_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_reply, _query_excavate_history_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_reply, _query_excavate_battle_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_reply, _set_excavate_team_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_reply, _excavate_start_battle_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_reply, _excavate_end_battle_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_reply, _query_excavate_def_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_reply, _clear_excavate_battle_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_reply, _draw_excavate_def_rwd_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_reply, _revenge_excavate_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_reply, _draw_excav_res_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_reply, _withdraw_excavate_hero_reply_),
  };
  excavate_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      excavate_reply_descriptor_,
      excavate_reply::default_instance_,
      excavate_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(excavate_reply));
  revenge_excavate_reply_descriptor_ = file->message_type(197);
  static const int revenge_excavate_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(revenge_excavate_reply, _excavate_),
  };
  revenge_excavate_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      revenge_excavate_reply_descriptor_,
      revenge_excavate_reply::default_instance_,
      revenge_excavate_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(revenge_excavate_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(revenge_excavate_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(revenge_excavate_reply));
  search_excavate_reply_descriptor_ = file->message_type(198);
  static const int search_excavate_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_excavate_reply, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_excavate_reply, _excavate_),
  };
  search_excavate_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      search_excavate_reply_descriptor_,
      search_excavate_reply::default_instance_,
      search_excavate_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_excavate_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_excavate_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(search_excavate_reply));
  search_excavate_reply_search_result_descriptor_ = search_excavate_reply_descriptor_->enum_type(0);
  query_excavate_data_reply_descriptor_ = file->message_type(199);
  static const int query_excavate_data_reply_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_data_reply, _excavate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_data_reply, _searched_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_data_reply, _search_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_data_reply, _last_search_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_data_reply, _attacking_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_data_reply, _bat_heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_data_reply, _cfg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_data_reply, _hire_),
  };
  query_excavate_data_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_excavate_data_reply_descriptor_,
      query_excavate_data_reply::default_instance_,
      query_excavate_data_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_data_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_data_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_excavate_data_reply));
  excavate_self_hero_descriptor_ = file->message_type(200);
  static const int excavate_self_hero_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_self_hero, _hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_self_hero, _dyna_),
  };
  excavate_self_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      excavate_self_hero_descriptor_,
      excavate_self_hero::default_instance_,
      excavate_self_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_self_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_self_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(excavate_self_hero));
  excavate_cfg_descriptor_ = file->message_type(201);
  static const int excavate_cfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_cfg, _attack_timeout_),
  };
  excavate_cfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      excavate_cfg_descriptor_,
      excavate_cfg::default_instance_,
      excavate_cfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_cfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_cfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(excavate_cfg));
  excavate_team_descriptor_ = file->message_type(202);
  static const int excavate_team_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_team, _team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_team, _player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_team, _hero_bases_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_team, _hero_dynas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_team, _res_got_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_team, _svr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_team, _display_svr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_team, _svr_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_team, _team_gs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_team, _speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_team, _robbed_),
  };
  excavate_team_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      excavate_team_descriptor_,
      excavate_team::default_instance_,
      excavate_team_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_team, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_team, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(excavate_team));
  excavate_descriptor_ = file->message_type(203);
  static const int excavate_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _state_end_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _create_time_),
  };
  excavate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      excavate_descriptor_,
      excavate::default_instance_,
      excavate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(excavate));
  excavate_owner_descriptor_ = excavate_descriptor_->enum_type(0);
  excavate_state_descriptor_ = excavate_descriptor_->enum_type(1);
  excavate_history_descriptor_ = file->message_type(204);
  static const int excavate_history_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_history, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_history, _excavate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_history, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_history, _enemy_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_history, _enemy_svrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_history, _enemy_svrname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_history, _time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_history, _vatility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_history, _reward_),
  };
  excavate_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      excavate_history_descriptor_,
      excavate_history::default_instance_,
      excavate_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(excavate_history));
  excavate_history_def_result_descriptor_ = excavate_history_descriptor_->enum_type(0);
  query_excavate_history_reply_descriptor_ = file->message_type(205);
  static const int query_excavate_history_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_history_reply, _excavate_history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_history_reply, _draw_def_vitality_),
  };
  query_excavate_history_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_excavate_history_reply_descriptor_,
      query_excavate_history_reply::default_instance_,
      query_excavate_history_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_history_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_history_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_excavate_history_reply));
  excavate_battle_hero_descriptor_ = file->message_type(206);
  static const int excavate_battle_hero_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_battle_hero, _base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_battle_hero, _dyna_),
  };
  excavate_battle_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      excavate_battle_hero_descriptor_,
      excavate_battle_hero::default_instance_,
      excavate_battle_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_battle_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_battle_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(excavate_battle_hero));
  excavate_battle_team_descriptor_ = file->message_type(207);
  static const int excavate_battle_team_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_battle_team, _player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_battle_team, _hero_),
  };
  excavate_battle_team_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      excavate_battle_team_descriptor_,
      excavate_battle_team::default_instance_,
      excavate_battle_team_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_battle_team, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_battle_team, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(excavate_battle_team));
  excavate_battle_descriptor_ = file->message_type(208);
  static const int excavate_battle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_battle, _self_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_battle, _oppo_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_battle, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_battle, _record_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_battle, _record_svrid_),
  };
  excavate_battle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      excavate_battle_descriptor_,
      excavate_battle::default_instance_,
      excavate_battle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_battle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_battle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(excavate_battle));
  query_excavate_battle_reply_descriptor_ = file->message_type(209);
  static const int query_excavate_battle_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_battle_reply, _battles_),
  };
  query_excavate_battle_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_excavate_battle_reply_descriptor_,
      query_excavate_battle_reply::default_instance_,
      query_excavate_battle_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_battle_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_battle_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_excavate_battle_reply));
  set_excavate_team_reply_descriptor_ = file->message_type(210);
  static const int set_excavate_team_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_excavate_team_reply, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_excavate_team_reply, _mine_),
  };
  set_excavate_team_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_excavate_team_reply_descriptor_,
      set_excavate_team_reply::default_instance_,
      set_excavate_team_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_excavate_team_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_excavate_team_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_excavate_team_reply));
  set_excavate_team_reply_result_descriptor_ = set_excavate_team_reply_descriptor_->enum_type(0);
  excavate_start_battle_reply_descriptor_ = file->message_type(211);
  static const int excavate_start_battle_reply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_start_battle_reply, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_start_battle_reply, _rseed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_start_battle_reply, _hero_bases_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_start_battle_reply, _hero_dynas_),
  };
  excavate_start_battle_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      excavate_start_battle_reply_descriptor_,
      excavate_start_battle_reply::default_instance_,
      excavate_start_battle_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_start_battle_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_start_battle_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(excavate_start_battle_reply));
  excavate_end_battle_reply_descriptor_ = file->message_type(212);
  static const int excavate_end_battle_reply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_end_battle_reply, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_end_battle_reply, _excavate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_end_battle_reply, _reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_end_battle_reply, _mine_battle_result_),
  };
  excavate_end_battle_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      excavate_end_battle_reply_descriptor_,
      excavate_end_battle_reply::default_instance_,
      excavate_end_battle_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_end_battle_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_end_battle_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(excavate_end_battle_reply));
  excavate_end_battle_reply_mine_battle_result_descriptor_ = excavate_end_battle_reply_descriptor_->enum_type(0);
  draw_excav_res_reply_descriptor_ = file->message_type(213);
  static const int draw_excav_res_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(draw_excav_res_reply, _diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(draw_excav_res_reply, _reward_),
  };
  draw_excav_res_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      draw_excav_res_reply_descriptor_,
      draw_excav_res_reply::default_instance_,
      draw_excav_res_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(draw_excav_res_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(draw_excav_res_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(draw_excav_res_reply));
  excavate_reward_descriptor_ = file->message_type(214);
  static const int excavate_reward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_reward, _type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_reward, _team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_reward, _param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_reward, _param2_),
  };
  excavate_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      excavate_reward_descriptor_,
      excavate_reward::default_instance_,
      excavate_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(excavate_reward));
  excavate_reward_type_descriptor_ = excavate_reward_descriptor_->enum_type(0);
  query_excavate_def_reply_descriptor_ = file->message_type(215);
  static const int query_excavate_def_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_def_reply, _excavate_),
  };
  query_excavate_def_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_excavate_def_reply_descriptor_,
      query_excavate_def_reply::default_instance_,
      query_excavate_def_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_def_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_def_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_excavate_def_reply));
  clear_excavate_battle_reply_descriptor_ = file->message_type(216);
  static const int clear_excavate_battle_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clear_excavate_battle_reply, _result_),
  };
  clear_excavate_battle_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      clear_excavate_battle_reply_descriptor_,
      clear_excavate_battle_reply::default_instance_,
      clear_excavate_battle_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clear_excavate_battle_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clear_excavate_battle_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(clear_excavate_battle_reply));
  withdraw_excavate_hero_reply_descriptor_ = file->message_type(217);
  static const int withdraw_excavate_hero_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(withdraw_excavate_hero_reply, _result_),
  };
  withdraw_excavate_hero_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      withdraw_excavate_hero_reply_descriptor_,
      withdraw_excavate_hero_reply::default_instance_,
      withdraw_excavate_hero_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(withdraw_excavate_hero_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(withdraw_excavate_hero_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(withdraw_excavate_hero_reply));
  draw_excavate_def_rwd_reply_descriptor_ = file->message_type(218);
  static const int draw_excavate_def_rwd_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(draw_excavate_def_rwd_reply, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(draw_excavate_def_rwd_reply, _draw_vitality_),
  };
  draw_excavate_def_rwd_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      draw_excavate_def_rwd_reply_descriptor_,
      draw_excavate_def_rwd_reply::default_instance_,
      draw_excavate_def_rwd_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(draw_excavate_def_rwd_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(draw_excavate_def_rwd_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(draw_excavate_def_rwd_reply));
  drop_excavate_reply_descriptor_ = file->message_type(219);
  static const int drop_excavate_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_excavate_reply, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_excavate_reply, _reward_),
  };
  drop_excavate_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      drop_excavate_reply_descriptor_,
      drop_excavate_reply::default_instance_,
      drop_excavate_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_excavate_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_excavate_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(drop_excavate_reply));
  change_server_reply_descriptor_ = file->message_type(220);
  static const int change_server_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_server_reply, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_server_reply, _server_info_),
  };
  change_server_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      change_server_reply_descriptor_,
      change_server_reply::default_instance_,
      change_server_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_server_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_server_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(change_server_reply));
  server_info_descriptor_ = file->message_type(221);
  static const int server_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info, _server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info, _server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info, _player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info, _player_level_),
  };
  server_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      server_info_descriptor_,
      server_info::default_instance_,
      server_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(server_info));
  guild_instance_query_descriptor_ = file->message_type(222);
  static const int guild_instance_query_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_query, _current_raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_query, _summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_query, _stage_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_query, _is_can_jump_),
  };
  guild_instance_query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_instance_query_descriptor_,
      guild_instance_query::default_instance_,
      guild_instance_query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_instance_query));
  guild_instance_query_is_can_jump_descriptor_ = guild_instance_query_descriptor_->enum_type(0);
  guild_chapter_descriptor_ = file->message_type(223);
  static const int guild_chapter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_chapter, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_chapter, _progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_chapter, _begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_chapter, _rest_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_chapter, _cur_stage_id_),
  };
  guild_chapter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_chapter_descriptor_,
      guild_chapter::default_instance_,
      guild_chapter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_chapter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_chapter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_chapter));
  guild_instance_detail_descriptor_ = file->message_type(224);
  static const int guild_instance_detail_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_detail, _stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_detail, _wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_detail, _hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_detail, _record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_detail, _challenger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_detail, _challenger_status_),
  };
  guild_instance_detail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_instance_detail_descriptor_,
      guild_instance_detail::default_instance_,
      guild_instance_detail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_detail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_detail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_instance_detail));
  guild_instance_detail_challenger_status_descriptor_ = guild_instance_detail_descriptor_->enum_type(0);
  guild_challenger_descriptor_ = file->message_type(225);
  static const int guild_challenger_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_challenger, _summary_),
  };
  guild_challenger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_challenger_descriptor_,
      guild_challenger::default_instance_,
      guild_challenger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_challenger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_challenger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_challenger));
  guild_instance_record_descriptor_ = file->message_type(226);
  static const int guild_instance_record_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_record, _challenger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_record, _damage_),
  };
  guild_instance_record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_instance_record_descriptor_,
      guild_instance_record::default_instance_,
      guild_instance_record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_instance_record));
  guild_instance_summary_descriptor_ = file->message_type(227);
  static const int guild_instance_summary_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_summary, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_summary, _stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_summary, _left_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_summary, _start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_summary, _progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_summary, _stage_progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_summary, _battle_user_id_),
  };
  guild_instance_summary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_instance_summary_descriptor_,
      guild_instance_summary::default_instance_,
      guild_instance_summary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_summary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_summary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_instance_summary));
  guild_instance_item_descriptor_ = file->message_type(228);
  static const int guild_instance_item_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_item, _item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_item, _num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_item, _state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_item, _apply_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_item, _able_app_count_),
  };
  guild_instance_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_instance_item_descriptor_,
      guild_instance_item::default_instance_,
      guild_instance_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_instance_item));
  guild_instance_item_drop_state_descriptor_ = guild_instance_item_descriptor_->enum_type(0);
  guild_instance_drop_descriptor_ = file->message_type(229);
  static const int guild_instance_drop_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_drop, _items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_drop, _raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_drop, _apply_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_drop, _rank_),
  };
  guild_instance_drop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_instance_drop_descriptor_,
      guild_instance_drop::default_instance_,
      guild_instance_drop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_drop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_drop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_instance_drop));
  splitable_hero_descriptor_ = file->message_type(230);
  static const int splitable_hero_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(splitable_hero, _tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(splitable_hero, _split_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(splitable_hero, _end_point_),
  };
  splitable_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      splitable_hero_descriptor_,
      splitable_hero::default_instance_,
      splitable_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(splitable_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(splitable_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(splitable_hero));
  query_split_data_reply_descriptor_ = file->message_type(231);
  static const int query_split_data_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_split_data_reply, _heroes_),
  };
  query_split_data_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_split_data_reply_descriptor_,
      query_split_data_reply::default_instance_,
      query_split_data_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_split_data_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_split_data_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_split_data_reply));
  query_split_return_reply_descriptor_ = file->message_type(232);
  static const int query_split_return_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_split_return_reply, _items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_split_return_reply, _gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_split_return_reply, _skill_point_),
  };
  query_split_return_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_split_return_reply_descriptor_,
      query_split_return_reply::default_instance_,
      query_split_return_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_split_return_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_split_return_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_split_return_reply));
  split_hero_reply_descriptor_ = file->message_type(233);
  static const int split_hero_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(split_hero_reply, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(split_hero_reply, _hero_),
  };
  split_hero_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      split_hero_reply_descriptor_,
      split_hero_reply::default_instance_,
      split_hero_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(split_hero_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(split_hero_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(split_hero_reply));
  worldcup_reply_descriptor_ = file->message_type(234);
  static const int worldcup_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_reply, _worldcup_query_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_reply, _worldcup_submit_reply_),
  };
  worldcup_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      worldcup_reply_descriptor_,
      worldcup_reply::default_instance_,
      worldcup_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(worldcup_reply));
  worldcup_reward_descriptor_ = file->message_type(235);
  static const int worldcup_reward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_reward, _gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_reward, _diamond_),
  };
  worldcup_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      worldcup_reward_descriptor_,
      worldcup_reward::default_instance_,
      worldcup_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(worldcup_reward));
  worldcup_comp_descriptor_ = file->message_type(236);
  static const int worldcup_comp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_comp, _teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_comp, _reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_comp, _guess_),
  };
  worldcup_comp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      worldcup_comp_descriptor_,
      worldcup_comp::default_instance_,
      worldcup_comp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_comp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_comp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(worldcup_comp));
  worldcup_query_reply_descriptor_ = file->message_type(237);
  static const int worldcup_query_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_query_reply, _comp_),
  };
  worldcup_query_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      worldcup_query_reply_descriptor_,
      worldcup_query_reply::default_instance_,
      worldcup_query_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_query_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_query_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(worldcup_query_reply));
  worldcup_submit_reply_descriptor_ = file->message_type(238);
  static const int worldcup_submit_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_submit_reply, _result_),
  };
  worldcup_submit_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      worldcup_submit_reply_descriptor_,
      worldcup_submit_reply::default_instance_,
      worldcup_submit_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_submit_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_submit_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(worldcup_submit_reply));
  battle_check_fail_descriptor_ = file->message_type(239);
  static const int battle_check_fail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_check_fail, _checkid_),
  };
  battle_check_fail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_check_fail_descriptor_,
      battle_check_fail::default_instance_,
      battle_check_fail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_check_fail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_check_fail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_check_fail));
  super_link_descriptor_ = file->message_type(240);
  static const int super_link_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(super_link, _info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(super_link, _addr_),
  };
  super_link_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      super_link_descriptor_,
      super_link::default_instance_,
      super_link_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(super_link, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(super_link, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(super_link));
  ranklist_item_descriptor_ = file->message_type(241);
  static const int ranklist_item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ranklist_item, _user_summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ranklist_item, _guild_summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ranklist_item, _param1_),
  };
  ranklist_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ranklist_item_descriptor_,
      ranklist_item::default_instance_,
      ranklist_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ranklist_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ranklist_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ranklist_item));
  query_ranklist_reply_descriptor_ = file->message_type(242);
  static const int query_ranklist_reply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_ranklist_reply, _rank_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_ranklist_reply, _ranklist_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_ranklist_reply, _self_ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_ranklist_reply, _self_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_ranklist_reply, _self_prev_pos_),
  };
  query_ranklist_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_ranklist_reply_descriptor_,
      query_ranklist_reply::default_instance_,
      query_ranklist_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_ranklist_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_ranklist_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_ranklist_reply));
  query_ranklist_reply_rank_type_descriptor_ = query_ranklist_reply_descriptor_->enum_type(0);
  request_guild_log_reply_descriptor_ = file->message_type(243);
  static const int request_guild_log_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request_guild_log_reply, _guild_log_),
  };
  request_guild_log_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      request_guild_log_reply_descriptor_,
      request_guild_log_reply::default_instance_,
      request_guild_log_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request_guild_log_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request_guild_log_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(request_guild_log_reply));
  guild_log_descriptor_ = file->message_type(244);
  static const int guild_log_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_log, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_log, _guild_log_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_log, _date_),
  };
  guild_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_log_descriptor_,
      guild_log::default_instance_,
      guild_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_log));
  guild_log_content_descriptor_ = file->message_type(245);
  static const int guild_log_content_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_log_content, _time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_log_content, _content_),
  };
  guild_log_content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_log_content_descriptor_,
      guild_log_content::default_instance_,
      guild_log_content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_log_content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_log_content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_log_content));
  client_update_version_descriptor_ = file->message_type(246);
  static const int client_update_version_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_update_version, _version_),
  };
  client_update_version_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_update_version_descriptor_,
      client_update_version::default_instance_,
      client_update_version_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_update_version, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_update_version, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_update_version));
  query_act_stage_reply_descriptor_ = file->message_type(247);
  static const int query_act_stage_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_act_stage_reply, _opened_act_stage_),
  };
  query_act_stage_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_act_stage_reply_descriptor_,
      query_act_stage_reply::default_instance_,
      query_act_stage_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_act_stage_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_act_stage_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_act_stage_reply));
  fb_attention_reply_descriptor_ = file->message_type(248);
  static const int fb_attention_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fb_attention_reply, _attention_),
  };
  fb_attention_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fb_attention_reply_descriptor_,
      fb_attention_reply::default_instance_,
      fb_attention_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fb_attention_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fb_attention_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fb_attention_reply));
  continue_pay_reply_descriptor_ = file->message_type(249);
  static const int continue_pay_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(continue_pay_reply, _time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(continue_pay_reply, _status_),
  };
  continue_pay_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      continue_pay_reply_descriptor_,
      continue_pay_reply::default_instance_,
      continue_pay_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(continue_pay_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(continue_pay_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(continue_pay_reply));
  recharge_rebate_reply_descriptor_ = file->message_type(250);
  static const int recharge_rebate_reply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_rebate_reply, _time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_rebate_reply, _status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_rebate_reply, _recharge_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_rebate_reply, _get_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_rebate_reply, _get_status_),
  };
  recharge_rebate_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      recharge_rebate_reply_descriptor_,
      recharge_rebate_reply::default_instance_,
      recharge_rebate_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_rebate_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_rebate_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(recharge_rebate_reply));
  every_day_happy_reply_descriptor_ = file->message_type(251);
  static const int every_day_happy_reply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(every_day_happy_reply, _status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(every_day_happy_reply, _goldcard_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(every_day_happy_reply, _silvercard_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(every_day_happy_reply, _coppercard_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(every_day_happy_reply, _rewards_),
  };
  every_day_happy_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      every_day_happy_reply_descriptor_,
      every_day_happy_reply::default_instance_,
      every_day_happy_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(every_day_happy_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(every_day_happy_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(every_day_happy_reply));
  result_descriptor_ = file->enum_type(0);
  battle_result_descriptor_ = file->enum_type(1);
  money_type_descriptor_ = file->enum_type(2);
  hero_status_descriptor_ = file->enum_type(3);
  server_opt_result_descriptor_ = file->enum_type(4);
  hire_result_descriptor_ = file->enum_type(5);
  hire_from_descriptor_ = file->enum_type(6);
  guild_join_t_descriptor_ = file->enum_type(7);
  guild_job_t_descriptor_ = file->enum_type(8);
  chat_channel_descriptor_ = file->enum_type(9);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hello_descriptor_, &Hello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelloCB_descriptor_, &HelloCB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_descriptor_, &Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginBaseappFailed_descriptor_, &LoginBaseappFailed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatedProxies_descriptor_, &CreatedProxies::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hire_data_descriptor_, &hire_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hire_hero_descriptor_, &hire_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    down_msg_descriptor_, &down_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    system_setting_reply_descriptor_, &system_setting_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    system_setting_change_descriptor_, &system_setting_change::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    system_setting_request_descriptor_, &system_setting_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    system_setting_item_descriptor_, &system_setting_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    global_config_descriptor_, &global_config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    login_reply_descriptor_, &login_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sdk_login_reply_descriptor_, &sdk_login_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_check_descriptor_, &user_check::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reset_descriptor_, &reset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_stage_reply_descriptor_, &enter_stage_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_info_reply_descriptor_, &activity_info_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    last_activity_info_descriptor_, &last_activity_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_lotto_info_reply_descriptor_, &activity_lotto_info_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_lotto_reward_reply_descriptor_, &activity_lotto_reward_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_bigpackage_info_reply_descriptor_, &activity_bigpackage_info_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_bigpackage_reward_reply_descriptor_, &activity_bigpackage_reward_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_bigpackage_reset_reply_descriptor_, &activity_bigpackage_reset_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    exit_stage_reply_descriptor_, &exit_stage_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_upgrade_reply_descriptor_, &hero_upgrade_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equip_synthesis_reply_descriptor_, &equip_synthesis_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wear_equip_reply_descriptor_, &wear_equip_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sync_vitality_reply_descriptor_, &sync_vitality_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    consume_item_reply_descriptor_, &consume_item_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_shop_descriptor_, &user_shop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    star_shop_descriptor_, &star_shop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shop_consume_reply_descriptor_, &shop_consume_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    skill_levelup_reply_descriptor_, &skill_levelup_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sell_item_reply_descriptor_, &sell_item_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fragment_compose_reply_descriptor_, &fragment_compose_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_equip_upgrade_reply_descriptor_, &hero_equip_upgrade_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tutorial_reply_descriptor_, &tutorial_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    error_info_descriptor_, &error_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    goods_descriptor_, &goods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    star_goods_descriptor_, &star_goods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_descriptor_, &user::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_summary_descriptor_, &user_summary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    name_card_descriptor_, &name_card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    daily_login_descriptor_, &daily_login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ask_daily_login_reply_descriptor_, &ask_daily_login_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_equip_descriptor_, &hero_equip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_descriptor_, &hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_summary_descriptor_, &hero_summary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_dyna_descriptor_, &hero_dyna::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    skilllevelup_descriptor_, &skilllevelup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    usertask_descriptor_, &usertask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dailyjob_descriptor_, &dailyjob::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sweeploot_descriptor_, &sweeploot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tavern_record_descriptor_, &tavern_record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    usermidas_descriptor_, &usermidas::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    trigger_task_reply_descriptor_, &trigger_task_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    require_rewards_reply_descriptor_, &require_rewards_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    trigger_job_reply_descriptor_, &trigger_job_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dailyjob_reward_descriptor_, &dailyjob_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    job_rewards_reply_descriptor_, &job_rewards_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tavern_draw_reply_descriptor_, &tavern_draw_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reset_elite_reply_descriptor_, &reset_elite_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sweep_stage_reply_descriptor_, &sweep_stage_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sweep_descriptor_, &sweep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sync_skill_stren_reply_descriptor_, &sync_skill_stren_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_evolve_reply_descriptor_, &hero_evolve_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vitality_descriptor_, &vitality::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    userstage_descriptor_, &userstage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    act_daily_record_descriptor_, &act_daily_record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ladder_reply_descriptor_, &ladder_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    open_panel_descriptor_, &open_panel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    apply_opponent_descriptor_, &apply_opponent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    start_battle_descriptor_, &start_battle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    end_battle_descriptor_, &end_battle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_lineup_descriptor_, &set_lineup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_records_descriptor_, &query_records::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_replay_descriptor_, &query_replay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pvp_record_descriptor_, &pvp_record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_rankboard_descriptor_, &query_rankboard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_oppo_info_descriptor_, &query_oppo_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    clear_battle_cd_descriptor_, &clear_battle_cd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rankboard_data_descriptor_, &rankboard_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ladder_record_descriptor_, &ladder_record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ladder_opponent_descriptor_, &ladder_opponent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ladder_rank_reward_descriptor_, &ladder_rank_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    draw_rank_reward_descriptor_, &draw_rank_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buy_battle_chance_descriptor_, &buy_battle_chance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_name_reply_descriptor_, &set_name_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_avatar_reply_descriptor_, &set_avatar_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_data_reply_descriptor_, &query_data_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    midas_acquire_descriptor_, &midas_acquire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    midas_reply_descriptor_, &midas_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    open_shop_reply_descriptor_, &open_shop_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    charge_reply_descriptor_, &charge_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    notify_msg_descriptor_, &notify_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ladder_notify_descriptor_, &ladder_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbc_reply_descriptor_, &tbc_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbc_self_hero_descriptor_, &tbc_self_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbc_oppo_hero_descriptor_, &tbc_oppo_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbc_reward_descriptor_, &tbc_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbc_stage_descriptor_, &tbc_stage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbc_info_descriptor_, &tbc_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbc_open_panel_descriptor_, &tbc_open_panel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbc_query_oppo_descriptor_, &tbc_query_oppo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbc_start_battle_descriptor_, &tbc_start_battle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbc_end_battle_descriptor_, &tbc_end_battle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbc_reset_descriptor_, &tbc_reset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbc_draw_reward_descriptor_, &tbc_draw_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_maillist_reply_descriptor_, &get_maillist_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sys_mail_descriptor_, &sys_mail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_content_descriptor_, &mail_content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    plain_mail_descriptor_, &plain_mail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    format_mail_descriptor_, &format_mail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_param_descriptor_, &mail_param::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_point_descriptor_, &user_point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    read_mail_reply_descriptor_, &read_mail_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_vip_gift_reply_descriptor_, &get_vip_gift_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_reply_descriptor_, &chat_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_blacklist_user_descriptor_, &chat_blacklist_user::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_blacklist_descriptor_, &chat_blacklist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_broad_say_descriptor_, &chat_broad_say::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_say_descriptor_, &chat_say::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_fresh_descriptor_, &chat_fresh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_fetch_descriptor_, &chat_fetch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_acc_descriptor_, &chat_acc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_content_descriptor_, &chat_content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_add_bl_descriptor_, &chat_add_bl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_del_bl_descriptor_, &chat_del_bl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_descriptor_, &chat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_guild_descriptor_, &user_guild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_reply_descriptor_, &guild_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_send_mail_descriptor_, &guild_send_mail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_set_jump_descriptor_, &guild_set_jump::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_instance_prepare_descriptor_, &guild_instance_prepare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dps_rank_descriptor_, &dps_rank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dps_rank_array_descriptor_, &dps_rank_array::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_first_pass_descriptor_, &guild_first_pass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_fast_pass_descriptor_, &guild_fast_pass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_stage_rank_descriptor_, &guild_stage_rank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_app_queue_descriptor_, &guild_app_queue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_members_descriptor_, &guild_members::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_jump_descriptor_, &guild_jump::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_items_history_descriptor_, &guild_items_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_item_history_descriptor_, &guild_item_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_challenger_damage_descriptor_, &guild_challenger_damage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_instance_damage_descriptor_, &guild_instance_damage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_drop_give_descriptor_, &guild_drop_give::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_drop_item_info_descriptor_, &guild_drop_item_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_drop_item_descriptor_, &guild_drop_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_instance_dps_descriptor_, &guild_instance_dps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_drop_info_descriptor_, &guild_drop_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_instance_apply_descriptor_, &guild_instance_apply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_instance_info_descriptor_, &guild_instance_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_instance_start_descriptor_, &guild_instance_start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_stage_hp_drop_descriptor_, &guild_stage_hp_drop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hp_drop_descriptor_, &hp_drop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_instance_end_down_descriptor_, &guild_instance_end_down::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    break_history_descriptor_, &break_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_instance_open_descriptor_, &guild_instance_open::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_create_descriptor_, &guild_create::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_dismiss_descriptor_, &guild_dismiss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_info_descriptor_, &guild_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_summary_descriptor_, &guild_summary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_member_descriptor_, &guild_member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_applier_descriptor_, &guild_applier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_list_descriptor_, &guild_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_search_descriptor_, &guild_search::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_join_descriptor_, &guild_join::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_join_confirm_descriptor_, &guild_join_confirm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_leave_descriptor_, &guild_leave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_kick_descriptor_, &guild_kick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_set_descriptor_, &guild_set::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_query_descriptor_, &guild_query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_worship_descriptor_, &guild_worship::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_set_job_descriptor_, &guild_set_job::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_add_hire_descriptor_, &guild_add_hire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_del_hire_descriptor_, &guild_del_hire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_query_hires_descriptor_, &guild_query_hires::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_hire_user_descriptor_, &guild_hire_user::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hire_hero_summary_descriptor_, &hire_hero_summary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_hire_hero_descriptor_, &guild_hire_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_worship_req_descriptor_, &guild_worship_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_worship_withdraw_descriptor_, &guild_worship_withdraw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_qurey_hh_detail_descriptor_, &guild_qurey_hh_detail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    worship_reward_descriptor_, &worship_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_reward_descriptor_, &activity_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_infos_descriptor_, &activity_infos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_rewards_descriptor_, &activity_rewards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_info_descriptor_, &activity_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cdkey_gift_reply_descriptor_, &cdkey_gift_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    res_pack_descriptor_, &res_pack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ask_magicsoul_reply_descriptor_, &ask_magicsoul_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    important_data_descriptor_, &important_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    monthcard_descriptor_, &monthcard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    excavate_reply_descriptor_, &excavate_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    revenge_excavate_reply_descriptor_, &revenge_excavate_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    search_excavate_reply_descriptor_, &search_excavate_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_excavate_data_reply_descriptor_, &query_excavate_data_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    excavate_self_hero_descriptor_, &excavate_self_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    excavate_cfg_descriptor_, &excavate_cfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    excavate_team_descriptor_, &excavate_team::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    excavate_descriptor_, &excavate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    excavate_history_descriptor_, &excavate_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_excavate_history_reply_descriptor_, &query_excavate_history_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    excavate_battle_hero_descriptor_, &excavate_battle_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    excavate_battle_team_descriptor_, &excavate_battle_team::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    excavate_battle_descriptor_, &excavate_battle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_excavate_battle_reply_descriptor_, &query_excavate_battle_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_excavate_team_reply_descriptor_, &set_excavate_team_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    excavate_start_battle_reply_descriptor_, &excavate_start_battle_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    excavate_end_battle_reply_descriptor_, &excavate_end_battle_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    draw_excav_res_reply_descriptor_, &draw_excav_res_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    excavate_reward_descriptor_, &excavate_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_excavate_def_reply_descriptor_, &query_excavate_def_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    clear_excavate_battle_reply_descriptor_, &clear_excavate_battle_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    withdraw_excavate_hero_reply_descriptor_, &withdraw_excavate_hero_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    draw_excavate_def_rwd_reply_descriptor_, &draw_excavate_def_rwd_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    drop_excavate_reply_descriptor_, &drop_excavate_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    change_server_reply_descriptor_, &change_server_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    server_info_descriptor_, &server_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_instance_query_descriptor_, &guild_instance_query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_chapter_descriptor_, &guild_chapter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_instance_detail_descriptor_, &guild_instance_detail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_challenger_descriptor_, &guild_challenger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_instance_record_descriptor_, &guild_instance_record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_instance_summary_descriptor_, &guild_instance_summary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_instance_item_descriptor_, &guild_instance_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_instance_drop_descriptor_, &guild_instance_drop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    splitable_hero_descriptor_, &splitable_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_split_data_reply_descriptor_, &query_split_data_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_split_return_reply_descriptor_, &query_split_return_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    split_hero_reply_descriptor_, &split_hero_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    worldcup_reply_descriptor_, &worldcup_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    worldcup_reward_descriptor_, &worldcup_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    worldcup_comp_descriptor_, &worldcup_comp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    worldcup_query_reply_descriptor_, &worldcup_query_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    worldcup_submit_reply_descriptor_, &worldcup_submit_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_check_fail_descriptor_, &battle_check_fail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    super_link_descriptor_, &super_link::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ranklist_item_descriptor_, &ranklist_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_ranklist_reply_descriptor_, &query_ranklist_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    request_guild_log_reply_descriptor_, &request_guild_log_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_log_descriptor_, &guild_log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_log_content_descriptor_, &guild_log_content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_update_version_descriptor_, &client_update_version::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_act_stage_reply_descriptor_, &query_act_stage_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fb_attention_reply_descriptor_, &fb_attention_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    continue_pay_reply_descriptor_, &continue_pay_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    recharge_rebate_reply_descriptor_, &recharge_rebate_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    every_day_happy_reply_descriptor_, &every_day_happy_reply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cb_2eproto() {
  delete Hello::default_instance_;
  delete Hello_reflection_;
  delete HelloCB::default_instance_;
  delete HelloCB_reflection_;
  delete Login::default_instance_;
  delete Login_reflection_;
  delete LoginBaseappFailed::default_instance_;
  delete LoginBaseappFailed_reflection_;
  delete CreatedProxies::default_instance_;
  delete CreatedProxies_reflection_;
  delete hire_data::default_instance_;
  delete hire_data_reflection_;
  delete hire_hero::default_instance_;
  delete hire_hero_reflection_;
  delete down_msg::default_instance_;
  delete down_msg_reflection_;
  delete system_setting_reply::default_instance_;
  delete system_setting_reply_reflection_;
  delete system_setting_change::default_instance_;
  delete system_setting_change_reflection_;
  delete system_setting_request::default_instance_;
  delete system_setting_request_reflection_;
  delete system_setting_item::default_instance_;
  delete system_setting_item_reflection_;
  delete global_config::default_instance_;
  delete global_config_reflection_;
  delete login_reply::default_instance_;
  delete login_reply_reflection_;
  delete sdk_login_reply::default_instance_;
  delete sdk_login_reply_reflection_;
  delete user_check::default_instance_;
  delete user_check_reflection_;
  delete reset::default_instance_;
  delete reset_reflection_;
  delete enter_stage_reply::default_instance_;
  delete enter_stage_reply_reflection_;
  delete activity_info_reply::default_instance_;
  delete activity_info_reply_reflection_;
  delete last_activity_info::default_instance_;
  delete last_activity_info_reflection_;
  delete activity_lotto_info_reply::default_instance_;
  delete activity_lotto_info_reply_reflection_;
  delete activity_lotto_reward_reply::default_instance_;
  delete activity_lotto_reward_reply_reflection_;
  delete activity_bigpackage_info_reply::default_instance_;
  delete activity_bigpackage_info_reply_reflection_;
  delete activity_bigpackage_reward_reply::default_instance_;
  delete activity_bigpackage_reward_reply_reflection_;
  delete activity_bigpackage_reset_reply::default_instance_;
  delete activity_bigpackage_reset_reply_reflection_;
  delete exit_stage_reply::default_instance_;
  delete exit_stage_reply_reflection_;
  delete hero_upgrade_reply::default_instance_;
  delete hero_upgrade_reply_reflection_;
  delete equip_synthesis_reply::default_instance_;
  delete equip_synthesis_reply_reflection_;
  delete wear_equip_reply::default_instance_;
  delete wear_equip_reply_reflection_;
  delete sync_vitality_reply::default_instance_;
  delete sync_vitality_reply_reflection_;
  delete consume_item_reply::default_instance_;
  delete consume_item_reply_reflection_;
  delete user_shop::default_instance_;
  delete user_shop_reflection_;
  delete star_shop::default_instance_;
  delete star_shop_reflection_;
  delete shop_consume_reply::default_instance_;
  delete shop_consume_reply_reflection_;
  delete skill_levelup_reply::default_instance_;
  delete skill_levelup_reply_reflection_;
  delete sell_item_reply::default_instance_;
  delete sell_item_reply_reflection_;
  delete fragment_compose_reply::default_instance_;
  delete fragment_compose_reply_reflection_;
  delete hero_equip_upgrade_reply::default_instance_;
  delete hero_equip_upgrade_reply_reflection_;
  delete tutorial_reply::default_instance_;
  delete tutorial_reply_reflection_;
  delete error_info::default_instance_;
  delete error_info_reflection_;
  delete goods::default_instance_;
  delete goods_reflection_;
  delete star_goods::default_instance_;
  delete star_goods_reflection_;
  delete user::default_instance_;
  delete user_reflection_;
  delete user_summary::default_instance_;
  delete user_summary_reflection_;
  delete name_card::default_instance_;
  delete name_card_reflection_;
  delete daily_login::default_instance_;
  delete daily_login_reflection_;
  delete ask_daily_login_reply::default_instance_;
  delete ask_daily_login_reply_reflection_;
  delete hero_equip::default_instance_;
  delete hero_equip_reflection_;
  delete hero::default_instance_;
  delete hero_reflection_;
  delete hero_summary::default_instance_;
  delete hero_summary_reflection_;
  delete hero_dyna::default_instance_;
  delete hero_dyna_reflection_;
  delete skilllevelup::default_instance_;
  delete skilllevelup_reflection_;
  delete usertask::default_instance_;
  delete usertask_reflection_;
  delete dailyjob::default_instance_;
  delete dailyjob_reflection_;
  delete sweeploot::default_instance_;
  delete sweeploot_reflection_;
  delete tavern_record::default_instance_;
  delete tavern_record_reflection_;
  delete usermidas::default_instance_;
  delete usermidas_reflection_;
  delete trigger_task_reply::default_instance_;
  delete trigger_task_reply_reflection_;
  delete require_rewards_reply::default_instance_;
  delete require_rewards_reply_reflection_;
  delete trigger_job_reply::default_instance_;
  delete trigger_job_reply_reflection_;
  delete dailyjob_reward::default_instance_;
  delete dailyjob_reward_reflection_;
  delete job_rewards_reply::default_instance_;
  delete job_rewards_reply_reflection_;
  delete tavern_draw_reply::default_instance_;
  delete tavern_draw_reply_reflection_;
  delete reset_elite_reply::default_instance_;
  delete reset_elite_reply_reflection_;
  delete sweep_stage_reply::default_instance_;
  delete sweep_stage_reply_reflection_;
  delete sweep::default_instance_;
  delete sweep_reflection_;
  delete sync_skill_stren_reply::default_instance_;
  delete sync_skill_stren_reply_reflection_;
  delete hero_evolve_reply::default_instance_;
  delete hero_evolve_reply_reflection_;
  delete vitality::default_instance_;
  delete vitality_reflection_;
  delete userstage::default_instance_;
  delete userstage_reflection_;
  delete act_daily_record::default_instance_;
  delete act_daily_record_reflection_;
  delete ladder_reply::default_instance_;
  delete ladder_reply_reflection_;
  delete open_panel::default_instance_;
  delete open_panel_reflection_;
  delete apply_opponent::default_instance_;
  delete apply_opponent_reflection_;
  delete start_battle::default_instance_;
  delete start_battle_reflection_;
  delete end_battle::default_instance_;
  delete end_battle_reflection_;
  delete set_lineup::default_instance_;
  delete set_lineup_reflection_;
  delete query_records::default_instance_;
  delete query_records_reflection_;
  delete query_replay::default_instance_;
  delete query_replay_reflection_;
  delete pvp_record::default_instance_;
  delete pvp_record_reflection_;
  delete query_rankboard::default_instance_;
  delete query_rankboard_reflection_;
  delete query_oppo_info::default_instance_;
  delete query_oppo_info_reflection_;
  delete clear_battle_cd::default_instance_;
  delete clear_battle_cd_reflection_;
  delete rankboard_data::default_instance_;
  delete rankboard_data_reflection_;
  delete ladder_record::default_instance_;
  delete ladder_record_reflection_;
  delete ladder_opponent::default_instance_;
  delete ladder_opponent_reflection_;
  delete ladder_rank_reward::default_instance_;
  delete ladder_rank_reward_reflection_;
  delete draw_rank_reward::default_instance_;
  delete draw_rank_reward_reflection_;
  delete buy_battle_chance::default_instance_;
  delete buy_battle_chance_reflection_;
  delete set_name_reply::default_instance_;
  delete set_name_reply_reflection_;
  delete set_avatar_reply::default_instance_;
  delete set_avatar_reply_reflection_;
  delete query_data_reply::default_instance_;
  delete query_data_reply_reflection_;
  delete midas_acquire::default_instance_;
  delete midas_acquire_reflection_;
  delete midas_reply::default_instance_;
  delete midas_reply_reflection_;
  delete open_shop_reply::default_instance_;
  delete open_shop_reply_reflection_;
  delete charge_reply::default_instance_;
  delete charge_reply_reflection_;
  delete notify_msg::default_instance_;
  delete notify_msg_reflection_;
  delete ladder_notify::default_instance_;
  delete ladder_notify_reflection_;
  delete tbc_reply::default_instance_;
  delete tbc_reply_reflection_;
  delete tbc_self_hero::default_instance_;
  delete tbc_self_hero_reflection_;
  delete tbc_oppo_hero::default_instance_;
  delete tbc_oppo_hero_reflection_;
  delete tbc_reward::default_instance_;
  delete tbc_reward_reflection_;
  delete tbc_stage::default_instance_;
  delete tbc_stage_reflection_;
  delete tbc_info::default_instance_;
  delete tbc_info_reflection_;
  delete tbc_open_panel::default_instance_;
  delete tbc_open_panel_reflection_;
  delete tbc_query_oppo::default_instance_;
  delete tbc_query_oppo_reflection_;
  delete tbc_start_battle::default_instance_;
  delete tbc_start_battle_reflection_;
  delete tbc_end_battle::default_instance_;
  delete tbc_end_battle_reflection_;
  delete tbc_reset::default_instance_;
  delete tbc_reset_reflection_;
  delete tbc_draw_reward::default_instance_;
  delete tbc_draw_reward_reflection_;
  delete get_maillist_reply::default_instance_;
  delete get_maillist_reply_reflection_;
  delete sys_mail::default_instance_;
  delete sys_mail_reflection_;
  delete mail_content::default_instance_;
  delete mail_content_reflection_;
  delete plain_mail::default_instance_;
  delete plain_mail_reflection_;
  delete format_mail::default_instance_;
  delete format_mail_reflection_;
  delete mail_param::default_instance_;
  delete mail_param_reflection_;
  delete user_point::default_instance_;
  delete user_point_reflection_;
  delete read_mail_reply::default_instance_;
  delete read_mail_reply_reflection_;
  delete get_vip_gift_reply::default_instance_;
  delete get_vip_gift_reply_reflection_;
  delete chat_reply::default_instance_;
  delete chat_reply_reflection_;
  delete chat_blacklist_user::default_instance_;
  delete chat_blacklist_user_reflection_;
  delete chat_blacklist::default_instance_;
  delete chat_blacklist_reflection_;
  delete chat_broad_say::default_instance_;
  delete chat_broad_say_reflection_;
  delete chat_say::default_instance_;
  delete chat_say_reflection_;
  delete chat_fresh::default_instance_;
  delete chat_fresh_reflection_;
  delete chat_fetch::default_instance_;
  delete chat_fetch_reflection_;
  delete chat_acc::default_instance_;
  delete chat_acc_reflection_;
  delete chat_content::default_instance_;
  delete chat_content_reflection_;
  delete chat_add_bl::default_instance_;
  delete chat_add_bl_reflection_;
  delete chat_del_bl::default_instance_;
  delete chat_del_bl_reflection_;
  delete chat::default_instance_;
  delete chat_reflection_;
  delete user_guild::default_instance_;
  delete user_guild_reflection_;
  delete guild_reply::default_instance_;
  delete guild_reply_reflection_;
  delete guild_send_mail::default_instance_;
  delete guild_send_mail_reflection_;
  delete guild_set_jump::default_instance_;
  delete guild_set_jump_reflection_;
  delete guild_instance_prepare::default_instance_;
  delete guild_instance_prepare_reflection_;
  delete dps_rank::default_instance_;
  delete dps_rank_reflection_;
  delete dps_rank_array::default_instance_;
  delete dps_rank_array_reflection_;
  delete guild_first_pass::default_instance_;
  delete guild_first_pass_reflection_;
  delete guild_fast_pass::default_instance_;
  delete guild_fast_pass_reflection_;
  delete guild_stage_rank::default_instance_;
  delete guild_stage_rank_reflection_;
  delete guild_app_queue::default_instance_;
  delete guild_app_queue_reflection_;
  delete guild_members::default_instance_;
  delete guild_members_reflection_;
  delete guild_jump::default_instance_;
  delete guild_jump_reflection_;
  delete guild_items_history::default_instance_;
  delete guild_items_history_reflection_;
  delete guild_item_history::default_instance_;
  delete guild_item_history_reflection_;
  delete guild_challenger_damage::default_instance_;
  delete guild_challenger_damage_reflection_;
  delete guild_instance_damage::default_instance_;
  delete guild_instance_damage_reflection_;
  delete guild_drop_give::default_instance_;
  delete guild_drop_give_reflection_;
  delete guild_drop_item_info::default_instance_;
  delete guild_drop_item_info_reflection_;
  delete guild_drop_item::default_instance_;
  delete guild_drop_item_reflection_;
  delete guild_instance_dps::default_instance_;
  delete guild_instance_dps_reflection_;
  delete guild_drop_info::default_instance_;
  delete guild_drop_info_reflection_;
  delete guild_instance_apply::default_instance_;
  delete guild_instance_apply_reflection_;
  delete guild_instance_info::default_instance_;
  delete guild_instance_info_reflection_;
  delete guild_instance_start::default_instance_;
  delete guild_instance_start_reflection_;
  delete guild_stage_hp_drop::default_instance_;
  delete guild_stage_hp_drop_reflection_;
  delete hp_drop::default_instance_;
  delete hp_drop_reflection_;
  delete guild_instance_end_down::default_instance_;
  delete guild_instance_end_down_reflection_;
  delete break_history::default_instance_;
  delete break_history_reflection_;
  delete guild_instance_open::default_instance_;
  delete guild_instance_open_reflection_;
  delete guild_create::default_instance_;
  delete guild_create_reflection_;
  delete guild_dismiss::default_instance_;
  delete guild_dismiss_reflection_;
  delete guild_info::default_instance_;
  delete guild_info_reflection_;
  delete guild_summary::default_instance_;
  delete guild_summary_reflection_;
  delete guild_member::default_instance_;
  delete guild_member_reflection_;
  delete guild_applier::default_instance_;
  delete guild_applier_reflection_;
  delete guild_list::default_instance_;
  delete guild_list_reflection_;
  delete guild_search::default_instance_;
  delete guild_search_reflection_;
  delete guild_join::default_instance_;
  delete guild_join_reflection_;
  delete guild_join_confirm::default_instance_;
  delete guild_join_confirm_reflection_;
  delete guild_leave::default_instance_;
  delete guild_leave_reflection_;
  delete guild_kick::default_instance_;
  delete guild_kick_reflection_;
  delete guild_set::default_instance_;
  delete guild_set_reflection_;
  delete guild_query::default_instance_;
  delete guild_query_reflection_;
  delete guild_worship::default_instance_;
  delete guild_worship_reflection_;
  delete guild_set_job::default_instance_;
  delete guild_set_job_reflection_;
  delete guild_add_hire::default_instance_;
  delete guild_add_hire_reflection_;
  delete guild_del_hire::default_instance_;
  delete guild_del_hire_reflection_;
  delete guild_query_hires::default_instance_;
  delete guild_query_hires_reflection_;
  delete guild_hire_user::default_instance_;
  delete guild_hire_user_reflection_;
  delete hire_hero_summary::default_instance_;
  delete hire_hero_summary_reflection_;
  delete guild_hire_hero::default_instance_;
  delete guild_hire_hero_reflection_;
  delete guild_worship_req::default_instance_;
  delete guild_worship_req_reflection_;
  delete guild_worship_withdraw::default_instance_;
  delete guild_worship_withdraw_reflection_;
  delete guild_qurey_hh_detail::default_instance_;
  delete guild_qurey_hh_detail_reflection_;
  delete worship_reward::default_instance_;
  delete worship_reward_reflection_;
  delete activity_reward::default_instance_;
  delete activity_reward_reflection_;
  delete activity_infos::default_instance_;
  delete activity_infos_reflection_;
  delete activity_rewards::default_instance_;
  delete activity_rewards_reflection_;
  delete activity_info::default_instance_;
  delete activity_info_reflection_;
  delete cdkey_gift_reply::default_instance_;
  delete cdkey_gift_reply_reflection_;
  delete res_pack::default_instance_;
  delete res_pack_reflection_;
  delete ask_magicsoul_reply::default_instance_;
  delete ask_magicsoul_reply_reflection_;
  delete important_data::default_instance_;
  delete important_data_reflection_;
  delete monthcard::default_instance_;
  delete monthcard_reflection_;
  delete excavate_reply::default_instance_;
  delete excavate_reply_reflection_;
  delete revenge_excavate_reply::default_instance_;
  delete revenge_excavate_reply_reflection_;
  delete search_excavate_reply::default_instance_;
  delete search_excavate_reply_reflection_;
  delete query_excavate_data_reply::default_instance_;
  delete query_excavate_data_reply_reflection_;
  delete excavate_self_hero::default_instance_;
  delete excavate_self_hero_reflection_;
  delete excavate_cfg::default_instance_;
  delete excavate_cfg_reflection_;
  delete excavate_team::default_instance_;
  delete excavate_team_reflection_;
  delete excavate::default_instance_;
  delete excavate_reflection_;
  delete excavate_history::default_instance_;
  delete excavate_history_reflection_;
  delete query_excavate_history_reply::default_instance_;
  delete query_excavate_history_reply_reflection_;
  delete excavate_battle_hero::default_instance_;
  delete excavate_battle_hero_reflection_;
  delete excavate_battle_team::default_instance_;
  delete excavate_battle_team_reflection_;
  delete excavate_battle::default_instance_;
  delete excavate_battle_reflection_;
  delete query_excavate_battle_reply::default_instance_;
  delete query_excavate_battle_reply_reflection_;
  delete set_excavate_team_reply::default_instance_;
  delete set_excavate_team_reply_reflection_;
  delete excavate_start_battle_reply::default_instance_;
  delete excavate_start_battle_reply_reflection_;
  delete excavate_end_battle_reply::default_instance_;
  delete excavate_end_battle_reply_reflection_;
  delete draw_excav_res_reply::default_instance_;
  delete draw_excav_res_reply_reflection_;
  delete excavate_reward::default_instance_;
  delete excavate_reward_reflection_;
  delete query_excavate_def_reply::default_instance_;
  delete query_excavate_def_reply_reflection_;
  delete clear_excavate_battle_reply::default_instance_;
  delete clear_excavate_battle_reply_reflection_;
  delete withdraw_excavate_hero_reply::default_instance_;
  delete withdraw_excavate_hero_reply_reflection_;
  delete draw_excavate_def_rwd_reply::default_instance_;
  delete draw_excavate_def_rwd_reply_reflection_;
  delete drop_excavate_reply::default_instance_;
  delete drop_excavate_reply_reflection_;
  delete change_server_reply::default_instance_;
  delete change_server_reply_reflection_;
  delete server_info::default_instance_;
  delete server_info_reflection_;
  delete guild_instance_query::default_instance_;
  delete guild_instance_query_reflection_;
  delete guild_chapter::default_instance_;
  delete guild_chapter_reflection_;
  delete guild_instance_detail::default_instance_;
  delete guild_instance_detail_reflection_;
  delete guild_challenger::default_instance_;
  delete guild_challenger_reflection_;
  delete guild_instance_record::default_instance_;
  delete guild_instance_record_reflection_;
  delete guild_instance_summary::default_instance_;
  delete guild_instance_summary_reflection_;
  delete guild_instance_item::default_instance_;
  delete guild_instance_item_reflection_;
  delete guild_instance_drop::default_instance_;
  delete guild_instance_drop_reflection_;
  delete splitable_hero::default_instance_;
  delete splitable_hero_reflection_;
  delete query_split_data_reply::default_instance_;
  delete query_split_data_reply_reflection_;
  delete query_split_return_reply::default_instance_;
  delete query_split_return_reply_reflection_;
  delete split_hero_reply::default_instance_;
  delete split_hero_reply_reflection_;
  delete worldcup_reply::default_instance_;
  delete worldcup_reply_reflection_;
  delete worldcup_reward::default_instance_;
  delete worldcup_reward_reflection_;
  delete worldcup_comp::default_instance_;
  delete worldcup_comp_reflection_;
  delete worldcup_query_reply::default_instance_;
  delete worldcup_query_reply_reflection_;
  delete worldcup_submit_reply::default_instance_;
  delete worldcup_submit_reply_reflection_;
  delete battle_check_fail::default_instance_;
  delete battle_check_fail_reflection_;
  delete super_link::default_instance_;
  delete super_link_reflection_;
  delete ranklist_item::default_instance_;
  delete ranklist_item_reflection_;
  delete query_ranklist_reply::default_instance_;
  delete query_ranklist_reply_reflection_;
  delete request_guild_log_reply::default_instance_;
  delete request_guild_log_reply_reflection_;
  delete guild_log::default_instance_;
  delete guild_log_reflection_;
  delete guild_log_content::default_instance_;
  delete guild_log_content_reflection_;
  delete client_update_version::default_instance_;
  delete client_update_version_reflection_;
  delete query_act_stage_reply::default_instance_;
  delete query_act_stage_reply_reflection_;
  delete fb_attention_reply::default_instance_;
  delete fb_attention_reply_reflection_;
  delete continue_pay_reply::default_instance_;
  delete continue_pay_reply_reflection_;
  delete recharge_rebate_reply::default_instance_;
  delete recharge_rebate_reply_reflection_;
  delete every_day_happy_reply::default_instance_;
  delete every_day_happy_reply_reflection_;
}

void protobuf_AddDesc_cb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010cb.proto\022\021client_baseserver\"+\n\005Hello\022\017"
    "\n\007version\030\001 \001(\r\022\021\n\textraData\030\002 \001(\t\"=\n\007He"
    "lloCB\022\016\n\006result\030\001 \001(\r\022\017\n\007version\030\002 \001(\r\022\021"
    "\n\textraData\030\003 \001(\t\"*\n\005Login\022\017\n\007account\030\001 "
    "\001(\t\022\020\n\010password\030\002 \001(\t\"%\n\022LoginBaseappFai"
    "led\022\017\n\007retCode\030\001 \001(\r\"\"\n\016CreatedProxies\022\020"
    "\n\010entityID\030\001 \001(\005\"U\n\thire_data\022\014\n\004_uid\030\001 "
    "\002(\r\022\r\n\005_name\030\002 \002(\t\022+\n\005_hero\030\003 \002(\0132\034.clie"
    "nt_baseserver.hire_hero\"`\n\thire_hero\022&\n\005"
    "_base\030\001 \002(\0132\027.client_baseserver.hero\022+\n\005"
    "_dyna\030\002 \002(\0132\034.client_baseserver.hero_dyn"
    "a\"\327#\n\010down_msg\0224\n\014_login_reply\030\001 \001(\0132\036.c"
    "lient_baseserver.login_reply\022(\n\006_reset\030\002"
    " \001(\0132\030.client_baseserver.reset\022@\n\022_enter"
    "_stage_reply\030\003 \001(\0132$.client_baseserver.e"
    "nter_stage_reply\022>\n\021_exit_stage_reply\030\004 "
    "\001(\0132#.client_baseserver.exit_stage_reply"
    "\022B\n\023_hero_upgrade_reply\030\005 \001(\0132%.client_b"
    "aseserver.hero_upgrade_reply\022H\n\026_equip_s"
    "ynthesis_reply\030\006 \001(\0132(.client_baseserver"
    ".equip_synthesis_reply\022>\n\021_wear_equip_re"
    "ply\030\007 \001(\0132#.client_baseserver.wear_equip"
    "_reply\022B\n\023_consume_item_reply\030\010 \001(\0132%.cl"
    "ient_baseserver.consume_item_reply\0229\n\023_s"
    "hop_refresh_reply\030\t \001(\0132\034.client_baseser"
    "ver.user_shop\022B\n\023_shop_consume_reply\030\n \001"
    "(\0132%.client_baseserver.shop_consume_repl"
    "y\022D\n\024_skill_levelup_reply\030\013 \001(\0132&.client"
    "_baseserver.skill_levelup_reply\022<\n\020_sell"
    "_item_reply\030\014 \001(\0132\".client_baseserver.se"
    "ll_item_reply\022J\n\027_fragment_compose_reply"
    "\030\r \001(\0132).client_baseserver.fragment_comp"
    "ose_reply\022N\n\031_hero_equip_upgrade_reply\030\016"
    " \001(\0132+.client_baseserver.hero_equip_upgr"
    "ade_reply\022B\n\023_trigger_task_reply\030\017 \001(\0132%"
    ".client_baseserver.trigger_task_reply\022H\n"
    "\026_require_rewards_reply\030\020 \001(\0132(.client_b"
    "aseserver.require_rewards_reply\022@\n\022_trig"
    "ger_job_reply\030\021 \001(\0132$.client_baseserver."
    "trigger_job_reply\022@\n\022_job_rewards_reply\030"
    "\022 \001(\0132$.client_baseserver.job_rewards_re"
    "ply\022@\n\022_reset_elite_reply\030\023 \001(\0132$.client"
    "_baseserver.reset_elite_reply\022@\n\022_sweep_"
    "stage_reply\030\024 \001(\0132$.client_baseserver.sw"
    "eep_stage_reply\022@\n\022_tavern_draw_reply\030\025 "
    "\001(\0132$.client_baseserver.tavern_draw_repl"
    "y\022J\n\027_sync_skill_stren_reply\030\026 \001(\0132).cli"
    "ent_baseserver.sync_skill_stren_reply\022>\n"
    "\021_query_data_reply\030\027 \001(\0132#.client_basese"
    "rver.query_data_reply\022@\n\022_hero_evolve_re"
    "ply\030\030 \001(\0132$.client_baseserver.hero_evolv"
    "e_reply\022D\n\024_sync_vitality_reply\030\031 \001(\0132&."
    "client_baseserver.sync_vitality_reply\0222\n"
    "\013_user_check\030\032 \001(\0132\035.client_baseserver.u"
    "ser_check\022:\n\017_tutorial_reply\030\033 \001(\0132!.cli"
    "ent_baseserver.tutorial_reply\0222\n\013_error_"
    "info\030\034 \001(\0132\035.client_baseserver.error_inf"
    "o\0226\n\r_ladder_reply\030\035 \001(\0132\037.client_basese"
    "rver.ladder_reply\022:\n\017_set_name_reply\030\036 \001"
    "(\0132!.client_baseserver.set_name_reply\0224\n"
    "\014_midas_reply\030\037 \001(\0132\036.client_baseserver."
    "midas_reply\022<\n\020_open_shop_reply\030  \001(\0132\"."
    "client_baseserver.open_shop_reply\0226\n\r_ch"
    "arge_reply\030! \001(\0132\037.client_baseserver.cha"
    "rge_reply\022<\n\020_sdk_login_reply\030\" \001(\0132\".cl"
    "ient_baseserver.sdk_login_reply\022>\n\021_set_"
    "avatar_reply\030# \001(\0132#.client_baseserver.s"
    "et_avatar_reply\0222\n\013_notify_msg\030$ \001(\0132\035.c"
    "lient_baseserver.notify_msg\022H\n\026_ask_dail"
    "y_login_reply\030% \001(\0132(.client_baseserver."
    "ask_daily_login_reply\0220\n\n_tbc_reply\030& \001("
    "\0132\034.client_baseserver.tbc_reply\022B\n\023_get_"
    "maillist_reply\030\' \001(\0132%.client_baseserver"
    ".get_maillist_reply\022<\n\020_read_mail_reply\030"
    "( \001(\0132\".client_baseserver.read_mail_repl"
    "y\022\021\n\t_svr_time\030) \001(\r\022B\n\023_get_vip_gift_re"
    "ply\030* \001(\0132%.client_baseserver.get_vip_gi"
    "ft_reply\0222\n\013_chat_reply\030+ \001(\0132\035.client_b"
    "aseserver.chat_reply\022>\n\021_cdkey_gift_repl"
    "y\030, \001(\0132#.client_baseserver.cdkey_gift_r"
    "eply\0224\n\014_guild_reply\030- \001(\0132\036.client_base"
    "server.guild_reply\022D\n\024_ask_magicsoul_rep"
    "ly\030. \001(\0132&.client_baseserver.ask_magicso"
    "ul_reply\022C\n\030_ask_activity_info_reply\030/ \001"
    "(\0132!.client_baseserver.activity_infos\022:\n"
    "\017_excavate_reply\0300 \001(\0132!.client_baseserv"
    "er.excavate_reply\022F\n\025_system_setting_rep"
    "ly\0301 \001(\0132\'.client_baseserver.system_sett"
    "ing_reply\022J\n\027_query_split_data_reply\0302 \001"
    "(\0132).client_baseserver.query_split_data_"
    "reply\022N\n\031_query_split_return_reply\0303 \001(\013"
    "2+.client_baseserver.query_split_return_"
    "reply\022>\n\021_split_hero_reply\0304 \001(\0132#.clien"
    "t_baseserver.split_hero_reply\022:\n\017_worldc"
    "up_reply\0305 \001(\0132!.client_baseserver.world"
    "cup_reply\022@\n\022_battle_check_fail\0306 \001(\0132$."
    "client_baseserver.battle_check_fail\0226\n\r_"
    "query_replay\0307 \001(\0132\037.client_baseserver.q"
    "uery_replay\0222\n\013_super_link\0308 \001(\0132\035.clien"
    "t_baseserver.super_link\022F\n\025_query_rankli"
    "st_reply\0309 \001(\0132\'.client_baseserver.query"
    "_ranklist_reply\022L\n\030_request_guild_log_re"
    "ply\030A \001(\0132*.client_baseserver.request_gu"
    "ild_log_reply\022D\n\024_change_server_reply\030: "
    "\001(\0132&.client_baseserver.change_server_re"
    "ply\022D\n\024_activity_info_reply\030; \001(\0132&.clie"
    "nt_baseserver.activity_info_reply\022P\n\032_ac"
    "tivity_lotto_info_reply\030< \001(\0132,.client_b"
    "aseserver.activity_lotto_info_reply\022T\n\034_"
    "activity_lotto_reward_reply\030= \001(\0132..clie"
    "nt_baseserver.activity_lotto_reward_repl"
    "y\022Z\n\037_activity_bigpackage_info_reply\030> \001"
    "(\01321.client_baseserver.activity_bigpacka"
    "ge_info_reply\022^\n!_activity_bigpackage_re"
    "ward_reply\030\? \001(\01323.client_baseserver.act"
    "ivity_bigpackage_reward_reply\022\\\n _activi"
    "ty_bigpackage_reset_reply\030@ \001(\01322.client"
    "_baseserver.activity_bigpackage_reset_re"
    "ply\022C\n\023_fb_attention_reply\030\254\002 \001(\0132%.clie"
    "nt_baseserver.fb_attention_reply\022C\n\023_con"
    "tinue_pay_reply\030\256\002 \001(\0132%.client_baseserv"
    "er.continue_pay_reply\022I\n\026_recharge_rebat"
    "e_reply\030\257\002 \001(\0132(.client_baseserver.recha"
    "rge_rebate_reply\022I\n\026_every_day_happy_rep"
    "ly\030\260\002 \001(\0132(.client_baseserver.every_day_"
    "happy_reply\"\216\001\n\024system_setting_reply\022;\n\010"
    "_request\030\001 \001(\0132).client_baseserver.syste"
    "m_setting_request\0229\n\007_change\030\002 \001(\0132(.cli"
    "ent_baseserver.system_setting_change\"C\n\025"
    "system_setting_change\022*\n\007_result\030\001 \002(\0162\031"
    ".client_baseserver.result\"^\n\026system_sett"
    "ing_request\022D\n\024_system_setting_item\030\001 \003("
    "\0132&.client_baseserver.system_setting_ite"
    "m\"\213\001\n\023system_setting_item\022\013\n\003key\030\001 \002(\t\022D"
    "\n\005value\030\002 \002(\01625.client_baseserver.system"
    "_setting_item.setting_status\"!\n\016setting_"
    "status\022\006\n\002on\020\001\022\007\n\003off\020\002\"+\n\rglobal_config"
    "\022\032\n\022_hero_split_ending\030\001 \001(\r\"u\n\013login_re"
    "ply\022*\n\007_result\030\001 \002(\0162\031.client_baseserver"
    ".result\022&\n\005_user\030\002 \001(\0132\027.client_baseserv"
    "er.user\022\022\n\n_time_zone\030\003 \002(\t\"\177\n\017sdk_login"
    "_reply\0220\n\007_result\030\001 \002(\0162\031.client_baseser"
    "ver.result:\004fail\022\014\n\004_uin\030\002 \002(\t\022\025\n\r_acces"
    "s_token\030\003 \001(\t\022\025\n\r_recharge_url\030\004 \001(\t\"4\n\n"
    "user_check\022&\n\005_user\030\001 \002(\0132\027.client_bases"
    "erver.user\"/\n\005reset\022&\n\005_user\030\001 \002(\0132\027.cli"
    "ent_baseserver.user\"3\n\021enter_stage_reply"
    "\022\016\n\006_rseed\030\001 \002(\r\022\016\n\006_loots\030\002 \003(\r\"Y\n\023acti"
    "vity_info_reply\022B\n\023_last_activity_info\030\001"
    " \003(\0132%.client_baseserver.last_activity_i"
    "nfo\">\n\022last_activity_info\022\021\n\t_group_id\030\001"
    " \002(\t\022\025\n\r_activity_ids\030\002 \003(\r\"\255\001\n\031activity"
    "_lotto_info_reply\022\024\n\014_diamond_num\030\001 \002(\r\022"
    "\025\n\r_current_step\030\002 \002(\r\022\031\n\021_need_diamond_"
    "num\030\003 \002(\r\022\030\n\020_win_diamond_num\030\004 \002(\r\022\024\n\014_"
    "remain_time\030\005 \002(\r\022\030\n\020_broadcast_texts\030\006 "
    "\003(\t\"\225\001\n\033activity_lotto_reward_reply\022\017\n\007_"
    "status\030\001 \002(\r\022\032\n\022_reward_diamon_num\030\002 \002(\r"
    "\022\030\n\020_have_next_round\030\003 \002(\r\022\031\n\021_need_diam"
    "ond_num\030\004 \001(\r\022\024\n\014_diamond_num\030\005 \002(\r\"\265\001\n\036"
    "activity_bigpackage_info_reply\022\025\n\r_peopl"
    "e_count\030\001 \002(\r\022\025\n\r_remain_times\030\002 \002(\r\022\031\n\021"
    "_next_reset_price\030\003 \002(\r\022\030\n\020_current_rank"
    "ing\030\004 \002(\r\022\024\n\014_get_box_ids\030\005 \003(\r\022\032\n\022_dist"
    "ance_score_20\030\006 \002(\r\"\311\001\n activity_bigpack"
    "age_reward_reply\022\017\n\007_status\030\001 \002(\r\0224\n\010_re"
    "wards\030\002 \003(\0132\".client_baseserver.activity"
    "_reward\022\021\n\t_item_ids\030\003 \003(\r\022\025\n\r_people_co"
    "unt\030\004 \002(\r\022\030\n\020_current_ranking\030\005 \002(\r\022\032\n\022_"
    "distance_score_20\030\006 \002(\r\"M\n\037activity_bigp"
    "ackage_reset_reply\022\017\n\007_status\030\001 \002(\r\022\031\n\021_"
    "next_reset_price\030\002 \002(\r\"\351\001\n\020exit_stage_re"
    "ply\022M\n\007_result\030\001 \002(\01625.client_baseserver"
    ".exit_stage_reply.exit_stage_result:\005kno"
    "wn\022+\n\005_shop\030\002 \001(\0132\034.client_baseserver.us"
    "er_shop\022,\n\006_sshop\030\003 \001(\0132\034.client_baseser"
    "ver.star_shop\"+\n\021exit_stage_result\022\t\n\005kn"
    "own\020\000\022\013\n\007unknown\020\001\"~\n\022hero_upgrade_reply"
    "\0220\n\007_result\030\001 \002(\0162\031.client_baseserver.re"
    "sult:\004fail\022&\n\005_hero\030\002 \001(\0132\027.client_bases"
    "erver.hero\022\016\n\006_items\030\003 \003(\r\"I\n\025equip_synt"
    "hesis_reply\0220\n\007_result\030\001 \002(\0162\031.client_ba"
    "seserver.result:\004fail\"Q\n\020wear_equip_repl"
    "y\0220\n\007_result\030\001 \002(\0162\031.client_baseserver.r"
    "esult:\004fail\022\013\n\003_gs\030\002 \002(\r\"y\n\023sync_vitalit"
    "y_reply\022.\n\t_vitality\030\001 \002(\0132\033.client_base"
    "server.vitality\0222\n\r_shadow_runes\030\002 \002(\0132\033"
    ".client_baseserver.vitality\"<\n\022consume_i"
    "tem_reply\022&\n\005_hero\030\001 \002(\0132\027.client_basese"
    "rver.hero\"\272\001\n\tuser_shop\022\013\n\003_id\030\001 \002(\r\022\037\n\027"
    "_last_auto_refresh_time\030\002 \001(\r\022\024\n\014_expire"
    "_time\030\003 \001(\r\022!\n\031_last_manual_refresh_time"
    "\030\004 \001(\r\022\024\n\014_today_times\030\005 \001(\r\0220\n\016_current"
    "_goods\030\006 \003(\0132\030.client_baseserver.goods\"b"
    "\n\tstar_shop\022\013\n\003_id\030\001 \002(\r\022\024\n\014_expire_time"
    "\030\002 \001(\r\0222\n\013_star_goods\030\003 \003(\0132\035.client_bas"
    "eserver.star_goods\"I\n\022shop_consume_reply"
    "\0223\n\007_result\030\001 \002(\0162\031.client_baseserver.re"
    "sult:\007success\"T\n\023skill_levelup_reply\0220\n\007"
    "_result\030\001 \002(\0162\031.client_baseserver.result"
    ":\004fail\022\013\n\003_gs\030\002 \002(\r\"F\n\017sell_item_reply\0223"
    "\n\007_result\030\001 \002(\0162\031.client_baseserver.resu"
    "lt:\007success\"J\n\026fragment_compose_reply\0220\n"
    "\007_result\030\001 \002(\0162\031.client_baseserver.resul"
    "t:\004fail\"t\n\030hero_equip_upgrade_reply\0220\n\007_"
    "result\030\001 \002(\0162\031.client_baseserver.result:"
    "\004fail\022&\n\005_hero\030\002 \001(\0132\027.client_baseserver"
    ".hero\"E\n\016tutorial_reply\0223\n\007_result\030\001 \002(\016"
    "2\031.client_baseserver.result:\007success\"u\n\n"
    "error_info\022\r\n\005_info\030\001 \002(\t\0229\n\005_exit\030\002 \001(\016"
    "2\".client_baseserver.error_info.exit:\006no"
    "need\"\035\n\004exit\022\n\n\006noneed\020\000\022\t\n\005force\020\001\"\322\001\n\005"
    "goods\022\013\n\003_id\030\001 \002(\r\022\017\n\007_amount\030\002 \002(\r\0222\n\005_"
    "type\030\003 \002(\0162#.client_baseserver.goods.pri"
    "ce_type\022\016\n\006_price\030\004 \002(\r\022\020\n\010_is_sale\030\005 \002("
    "\r\"U\n\nprice_type\022\010\n\004gold\020\000\022\013\n\007diamond\020\001\022\020"
    "\n\014crusadepoint\020\002\022\016\n\narenapoint\020\003\022\016\n\nguil"
    "dpoint\020\004\"\300\001\n\nstar_goods\0225\n\005_type\030\001 \002(\0162&"
    ".client_baseserver.star_goods.box_type\022\022"
    "\n\007_amount\030\002 \002(\r:\0011\022\021\n\t_stone_id\030\003 \002(\r\022\025\n"
    "\r_stone_amount\030\004 \002(\r\"=\n\010box_type\022\017\n\013ston"
    "e_green\020\000\022\016\n\nstone_blue\020\001\022\020\n\014stone_purpl"
    "e\020\002\"\357\010\n\004user\022\017\n\007_userid\030\001 \002(\r\0220\n\n_name_c"
    "ard\030\002 \002(\0132\034.client_baseserver.name_card\022"
    "\016\n\006_level\030\003 \002(\r\022\025\n\r_recharge_sum\030\004 \002(\r\022\014"
    "\n\004_exp\030\005 \002(\r\022\016\n\006_money\030\006 \002(\r\022\014\n\004_rmb\030\007 \002"
    "(\r\022.\n\t_vitality\030\010 \002(\0132\033.client_baseserve"
    "r.vitality\022(\n\007_heroes\030\n \003(\0132\027.client_bas"
    "eserver.hero\022\016\n\006_items\030\013 \003(\r\0228\n\017_skill_l"
    "evel_up\030\014 \002(\0132\037.client_baseserver.skilll"
    "evelup\0220\n\n_userstage\030\017 \002(\0132\034.client_base"
    "server.userstage\022+\n\005_shop\030\020 \003(\0132\034.client"
    "_baseserver.user_shop\022\021\n\t_tutorial\030\021 \003(\r"
    "\022*\n\005_task\030\022 \003(\0132\033.client_baseserver.user"
    "task\022\026\n\016_task_finished\030\023 \003(\r\022\023\n\013_last_lo"
    "gin\030\024 \001(\r\022.\n\t_dailyjob\030\025 \003(\0132\033.client_ba"
    "seserver.dailyjob\0228\n\016_tavern_record\030\026 \003("
    "\0132 .client_baseserver.tavern_record\0220\n\n_"
    "usermidas\030\027 \002(\0132\034.client_baseserver.user"
    "midas\0224\n\014_daily_login\030\030 \002(\0132\036.client_bas"
    "eserver.daily_login\022\027\n\017_recharge_limit\030\031"
    " \003(\r\022\027\n\017_vip_gifts_draw\030\032 \003(\r\022.\n\007_points"
    "\030\033 \003(\0132\035.client_baseserver.user_point\0221\n"
    "\013_month_card\030\034 \003(\0132\034.client_baseserver.m"
    "onthcard\0222\n\013_user_guild\030\035 \002(\0132\035.client_b"
    "aseserver.user_guild\022&\n\005_chat\030\036 \002(\0132\027.cl"
    "ient_baseserver.chat\022,\n\006_sshop\030\037 \001(\0132\034.c"
    "lient_baseserver.star_shop\022\030\n\020_facebook_"
    "follow\030  \001(\r\022\017\n\007_praise\030! \001(\t\022\022\n\n_sessio"
    "nid\030\" \001(\r\0222\n\r_shadow_runes\030# \001(\0132\033.clien"
    "t_baseserver.vitality\"s\n\014user_summary\022\017\n"
    "\007_avatar\030\001 \002(\r\022\r\n\005_name\030\002 \002(\t\022\014\n\004_vip\030\003 "
    "\002(\r\022\016\n\006_level\030\004 \002(\r\022\023\n\013_guild_name\030\005 \001(\t"
    "\022\020\n\010_user_id\030\006 \001(\r\"H\n\tname_card\022\r\n\005_name"
    "\030\001 \002(\t\022\033\n\023_last_set_name_time\030\002 \002(\r\022\017\n\007_"
    "avatar\030\003 \002(\r\"\263\001\n\013daily_login\022A\n\007_status\030"
    "\001 \002(\01620.client_baseserver.daily_login.da"
    "ilylogin_status\022\022\n\n_frequency\030\002 \002(\r\022\030\n\020_"
    "last_login_date\030\003 \002(\r\"3\n\021dailylogin_stat"
    "us\022\007\n\003all\020\001\022\010\n\004part\020\002\022\013\n\007nothing\020\003\"\215\001\n\025a"
    "sk_daily_login_reply\022*\n\007_result\030\001 \002(\0162\031."
    "client_baseserver.result\022\016\n\006_items\030\002 \003(\r"
    "\022&\n\005_hero\030\003 \003(\0132\027.client_baseserver.hero"
    "\022\020\n\010_diamond\030\004 \001(\r\"<\n\nhero_equip\022\016\n\006_ind"
    "ex\030\001 \002(\r\022\020\n\010_item_id\030\002 \002(\r\022\014\n\004_exp\030\003 \002(\r"
    "\"\324\001\n\004hero\022\014\n\004_tid\030\001 \002(\r\022\r\n\005_rank\030\002 \001(\r\022\016"
    "\n\006_level\030\003 \002(\r\022\016\n\006_stars\030\004 \002(\r\022\014\n\004_exp\030\005"
    " \002(\r\022\013\n\003_gs\030\006 \002(\r\022.\n\006_state\030\007 \002(\0162\036.clie"
    "nt_baseserver.hero_status\022\025\n\r_skill_leve"
    "ls\030\010 \003(\r\022-\n\006_items\030\t \003(\0132\035.client_basese"
    "rver.hero_equip\"\210\001\n\014hero_summary\022\014\n\004_tid"
    "\030\001 \002(\r\022\r\n\005_rank\030\002 \001(\r\022\016\n\006_level\030\003 \002(\r\022\016\n"
    "\006_stars\030\004 \002(\r\022\013\n\003_gs\030\005 \001(\r\022.\n\006_state\030\006 \001"
    "(\0162\036.client_baseserver.hero_status\"E\n\the"
    "ro_dyna\022\020\n\010_hp_perc\030\001 \002(\r\022\020\n\010_mp_perc\030\002 "
    "\002(\r\022\024\n\014_custom_data\030\003 \001(\r\"x\n\014skilllevelu"
    "p\022\035\n\025_skill_levelup_chance\030\001 \002(\r\022\031\n\021_ski"
    "ll_levelup_cd\030\002 \002(\r\022\024\n\014_reset_times\030\003 \002("
    "\r\022\030\n\020_last_reset_date\030\004 \002(\r\"\237\001\n\010usertask"
    "\022\r\n\005_line\030\001 \002(\r\022\013\n\003_id\030\002 \002(\r\022<\n\007_status\030"
    "\003 \002(\0162\".client_baseserver.usertask.statu"
    "s:\007working\022\024\n\014_task_target\030\004 \001(\r\"#\n\006stat"
    "us\022\014\n\010finished\020\000\022\013\n\007working\020\001\"I\n\010dailyjo"
    "b\022\013\n\003_id\030\001 \002(\r\022\032\n\022_last_rewards_time\030\002 \002"
    "(\r\022\024\n\014_task_target\030\003 \001(\r\"9\n\tsweeploot\022\014\n"
    "\004_exp\030\001 \002(\r\022\016\n\006_money\030\002 \002(\r\022\016\n\006_items\030\003 "
    "\003(\r\"\324\001\n\rtavern_record\022C\n\t_box_type\030\001 \002(\016"
    "2).client_baseserver.tavern_record.box_t"
    "ype:\005green\022\021\n\t_left_cnt\030\002 \002(\r\022\026\n\016_last_g"
    "et_time\030\003 \002(\r\022\027\n\017_has_first_draw\030\004 \002(\r\":"
    "\n\010box_type\022\t\n\005green\020\001\022\010\n\004blue\020\002\022\n\n\006purpl"
    "e\020\003\022\r\n\tmagicsoul\020\004\"7\n\tusermidas\022\024\n\014_last"
    "_change\030\001 \002(\r\022\024\n\014_today_times\030\002 \002(\r\"@\n\022t"
    "rigger_task_reply\022*\n\007_result\030\001 \003(\0162\031.cli"
    "ent_baseserver.result\"C\n\025require_rewards"
    "_reply\022*\n\007_result\030\001 \002(\0162\031.client_baseser"
    "ver.result\"\?\n\021trigger_job_reply\022*\n\007_resu"
    "lt\030\001 \003(\0162\031.client_baseserver.result\"\346\001\n\017"
    "dailyjob_reward\0226\n\005_type\030\001 \001(\0162\'.client_"
    "baseserver.dailyjob_reward.type\022\013\n\003_id\030\002"
    " \001(\r\022\017\n\007_amount\030\003 \001(\r\"}\n\004type\022\007\n\003rmb\020\001\022\t"
    "\n\005money\020\002\022\010\n\004item\020\003\022\010\n\004hero\020\004\022\014\n\010vitalit"
    "y\020\005\022\r\n\tplayerexp\020\006\022\020\n\014crusadepoint\020\007\022\016\n\n"
    "arenapoint\020\010\022\016\n\nguildpoint\020\t\"\206\001\n\021job_rew"
    "ards_reply\0223\n\007_result\030\001 \002(\0162\031.client_bas"
    "eserver.result:\007success\022<\n\020_activity_rew"
    "ard\030\002 \003(\0132\".client_baseserver.dailyjob_r"
    "eward\"h\n\021tavern_draw_reply\022\021\n\t_item_ids\030"
    "\001 \003(\r\022,\n\013_new_heroes\030\002 \003(\0132\027.client_base"
    "server.hero\022\022\n\n_smash_idx\030\003 \003(\r\"H\n\021reset"
    "_elite_reply\0223\n\007_result\030\001 \002(\0162\031.client_b"
    "aseserver.result:\007success\"\253\001\n\021sweep_stag"
    "e_reply\022+\n\005_loot\030\001 \003(\0132\034.client_baseserv"
    "er.sweeploot\022\016\n\006_items\030\002 \003(\r\022+\n\005_shop\030\003 "
    "\001(\0132\034.client_baseserver.user_shop\022,\n\006_ss"
    "hop\030\004 \001(\0132\034.client_baseserver.star_shop\""
    "B\n\005sweep\022\030\n\020_last_reset_time\030\001 \002(\r\022\037\n\027_t"
    "oday_free_sweep_times\030\002 \002(\r\"R\n\026sync_skil"
    "l_stren_reply\0228\n\017_skill_level_up\030\001 \002(\0132\037"
    ".client_baseserver.skilllevelup\"p\n\021hero_"
    "evolve_reply\0223\n\007_result\030\001 \002(\0162\031.client_b"
    "aseserver.result:\007success\022&\n\005_hero\030\002 \001(\013"
    "2\027.client_baseserver.hero\"V\n\010vitality\022\020\n"
    "\010_current\030\001 \002(\r\022\023\n\013_lastchange\030\002 \002(\r\022\021\n\t"
    "_todaybuy\030\003 \002(\r\022\020\n\010_lastbuy\030\004 \002(\r\"\377\001\n\tus"
    "erstage\022\033\n\023_normal_stage_stars\030\001 \003(\r\022\032\n\022"
    "_elite_stage_stars\030\002 \003(\r\022\033\n\023_elite_daily"
    "_record\030\003 \003(\r\022\031\n\021_elite_reset_time\030\004 \002(\r"
    "\022(\n\006_sweep\030\005 \002(\0132\030.client_baseserver.swe"
    "ep\022>\n\021_act_daily_record\030\006 \003(\0132#.client_b"
    "aseserver.act_daily_record\022\027\n\017_act_reset"
    "_time\030\007 \002(\r\"I\n\020act_daily_record\022\013\n\003_id\030\001"
    " \002(\r\022\022\n\n_frequency\030\002 \002(\r\022\024\n\014_last_change"
    "\030\003 \002(\r\"\303\005\n\014ladder_reply\0222\n\013_open_panel\030\001"
    " \001(\0132\035.client_baseserver.open_panel\0226\n\013_"
    "apply_oppo\030\002 \001(\0132!.client_baseserver.app"
    "ly_opponent\0226\n\r_start_battle\030\003 \001(\0132\037.cli"
    "ent_baseserver.start_battle\0222\n\013_end_batt"
    "le\030\004 \001(\0132\035.client_baseserver.end_battle\022"
    "2\n\013_set_lineup\030\005 \001(\0132\035.client_baseserver"
    ".set_lineup\0228\n\016_query_records\030\006 \001(\0132 .cl"
    "ient_baseserver.query_records\0226\n\r_query_"
    "replay\030\007 \001(\0132\037.client_baseserver.query_r"
    "eplay\022<\n\020_query_rankborad\030\010 \001(\0132\".client"
    "_baseserver.query_rankboard\0227\n\013_query_op"
    "po\030\t \001(\0132\".client_baseserver.query_oppo_"
    "info\022<\n\020_clear_battle_cd\030\n \001(\0132\".client_"
    "baseserver.clear_battle_cd\022>\n\021_draw_rank"
    "_reward\030\013 \001(\0132#.client_baseserver.draw_r"
    "ank_reward\022@\n\022_buy_battle_chance\030\014 \001(\0132$"
    ".client_baseserver.buy_battle_chance\"\255\001\n"
    "\nopen_panel\022\r\n\005_rank\030\001 \002(\r\022\023\n\013_left_coun"
    "t\030\002 \002(\r\022\025\n\r_last_bt_time\030\003 \002(\r\022\022\n\n_buy_t"
    "imes\030\004 \002(\r\022\017\n\007_lineup\030\005 \003(\r\022\013\n\003_gs\030\006 \002(\r"
    "\0222\n\006_oppos\030\007 \003(\0132\".client_baseserver.lad"
    "der_opponent\"D\n\016apply_opponent\0222\n\006_oppos"
    "\030\001 \003(\0132\".client_baseserver.ladder_oppone"
    "nt\"\266\001\n\014start_battle\022*\n\007_result\030\001 \002(\0162\031.c"
    "lient_baseserver.result\022\016\n\006_rseed\030\002 \002(\r\022"
    "-\n\014_self_heroes\030\003 \003(\0132\027.client_baseserve"
    "r.hero\022(\n\007_heroes\030\004 \003(\0132\027.client_baseser"
    "ver.hero\022\021\n\t_is_robot\030\005 \002(\r\"\201\001\n\nend_batt"
    "le\0221\n\007_result\030\001 \002(\0162 .client_baseserver."
    "battle_result\022\031\n\021_best_rank_reward\030\002 \002(\r"
    "\022\022\n\n_best_rank\030\003 \002(\r\022\021\n\t_cur_rank\030\004 \002(\r\""
    "V\n\nset_lineup\022*\n\007_result\030\001 \002(\0162\031.client_"
    "baseserver.result\022\017\n\007_lineup\030\002 \003(\r\022\013\n\003_g"
    "s\030\003 \002(\r\"C\n\rquery_records\0222\n\010_records\030\001 \003"
    "(\0132 .client_baseserver.ladder_record\">\n\014"
    "query_replay\022.\n\007_record\030\001 \002(\0132\035.client_b"
    "aseserver.pvp_record\"\271\004\n\npvp_record\022\020\n\010_"
    "checkid\030\001 \002(\r\022\017\n\007_userid\030\002 \002(\r\022\021\n\t_usern"
    "ame\030\003 \001(\t\022\016\n\006_level\030\004 \001(\r\022\017\n\007_avatar\030\005 \001"
    "(\r\022\014\n\004_vip\030\006 \001(\r\022\024\n\014_oppo_userid\030\007 \002(\r\022\022"
    "\n\n_oppo_name\030\010 \001(\t\022\023\n\013_oppo_level\030\t \001(\r\022"
    "\024\n\014_oppo_avatar\030\n \001(\r\022\021\n\t_oppo_vip\030\013 \001(\r"
    "\022\023\n\013_oppo_robot\030\014 \001(\r\022:\n\007_result\030\r \001(\0162 "
    ".client_baseserver.battle_result:\007victor"
    "y\022-\n\014_self_heroes\030\016 \003(\0132\027.client_baseser"
    "ver.hero\0221\n\013_self_dynas\030\017 \003(\0132\034.client_b"
    "aseserver.hero_dyna\022-\n\014_oppo_heroes\030\020 \003("
    "\0132\027.client_baseserver.hero\0221\n\013_oppo_dyna"
    "s\030\021 \003(\0132\034.client_baseserver.hero_dyna\022\016\n"
    "\006_rseed\030\022 \002(\r\022\023\n\013_self_robot\030\023 \001(\r\022\017\n\007_p"
    "aram1\030\024 \001(\r\022\023\n\013_operations\030\025 \003(\r\"\240\001\n\017que"
    "ry_rankboard\0225\n\n_rank_list\030\001 \003(\0132!.clien"
    "t_baseserver.rankboard_data\0225\n\n_self_ran"
    "k\030\002 \001(\0132!.client_baseserver.rankboard_da"
    "ta\022\014\n\004_pos\030\003 \001(\r\022\021\n\t_prev_pos\030\004 \001(\r\"D\n\017q"
    "uery_oppo_info\0221\n\005_user\030\001 \002(\0132\".client_b"
    "aseserver.ladder_opponent\"=\n\017clear_battl"
    "e_cd\022*\n\007_result\030\001 \002(\0162\031.client_baseserve"
    "r.result\"U\n\016rankboard_data\022\020\n\010_user_id\030\001"
    " \002(\r\0221\n\010_summary\030\002 \001(\0132\037.client_baseserv"
    "er.user_summary\"\304\001\n\rladder_record\022\020\n\010_us"
    "er_id\030\001 \002(\r\0221\n\010_summary\030\002 \002(\0132\037.client_b"
    "aseserver.user_summary\022\022\n\n_deta_rank\030\003 \002"
    "(\r\022\020\n\010_bt_time\030\004 \002(\r\0224\n\n_bt_result\030\005 \002(\016"
    "2 .client_baseserver.battle_result\022\022\n\n_r"
    "eplay_id\030\006 \002(\r\"\310\001\n\017ladder_opponent\022\020\n\010_u"
    "ser_id\030\001 \002(\r\0221\n\010_summary\030\002 \002(\0132\037.client_"
    "baseserver.user_summary\022\r\n\005_rank\030\003 \002(\r\022\020"
    "\n\010_win_cnt\030\004 \002(\r\022\013\n\003_gs\030\005 \002(\r\022\021\n\t_is_rob"
    "ot\030\006 \002(\r\022/\n\006_heros\030\007 \003(\0132\037.client_basese"
    "rver.hero_summary\"\270\001\n\022ladder_rank_reward"
    "\022@\n\005_type\030\001 \002(\01621.client_baseserver.ladd"
    "er_rank_reward.reward_type\022\017\n\007_param1\030\002 "
    "\001(\r\022\017\n\007_param2\030\003 \001(\r\">\n\013reward_type\022\010\n\004g"
    "old\020\001\022\013\n\007diamond\020\002\022\010\n\004item\020\003\022\016\n\narenapoi"
    "nt\020\004\"K\n\020draw_rank_reward\0227\n\010_rewards\030\001 \003"
    "(\0132%.client_baseserver.ladder_rank_rewar"
    "d\"\\\n\021buy_battle_chance\0223\n\007_result\030\001 \002(\0162"
    "\031.client_baseserver.result:\007success\022\022\n\n_"
    "buy_times\030\002 \001(\r\"\231\001\n\016set_name_reply\022K\n\007_r"
    "esult\030\001 \002(\01621.client_baseserver.set_name"
    "_reply.set_name_result:\007success\":\n\017set_n"
    "ame_result\022\013\n\007success\020\000\022\n\n\006exists\020\001\022\016\n\nd"
    "irty_word\020\002\">\n\020set_avatar_reply\022*\n\007_resu"
    "lt\030\001 \002(\0162\031.client_baseserver.result\"\247\001\n\020"
    "query_data_reply\022\013\n\003rmb\030\001 \001(\r\022\022\n\ncharge_"
    "sum\030\002 \001(\r\022\'\n\006heroes\030\003 \003(\0132\027.client_bases"
    "erver.hero\022\026\n\016recharge_limit\030\004 \003(\r\0221\n\013_m"
    "onth_card\030\005 \003(\0132\034.client_baseserver.mont"
    "hcard\".\n\rmidas_acquire\022\r\n\005_type\030\001 \002(\r\022\016\n"
    "\006_money\030\002 \002(\r\"A\n\013midas_reply\0222\n\010_acquire"
    "\030\001 \003(\0132 .client_baseserver.midas_acquire"
    "\"j\n\017open_shop_reply\022*\n\007_result\030\001 \002(\0162\031.c"
    "lient_baseserver.result\022+\n\005_shop\030\002 \001(\0132\034"
    ".client_baseserver.user_shop\"6\n\014charge_r"
    "eply\022\022\n\n_serial_id\030\001 \002(\t\022\022\n\n_charge_id\030\002"
    " \002(\r\"\232\002\n\nnotify_msg\0228\n\016_ladder_notify\030\001 "
    "\001(\0132 .client_baseserver.ladder_notify\022\021\n"
    "\t_new_mail\030\002 \001(\r\022\023\n\013_guild_chat\030\003 \001(\r\022\030\n"
    "\020_activity_notify\030\004 \001(\r\022\030\n\020_activity_rew"
    "ard\030\005 \001(\r\022\027\n\017_release_heroes\030\006 \003(\r\022\025\n\r_e"
    "xcav_record\030\007 \001(\r\022\023\n\013_guild_drop\030\010 \001(\r\022\026"
    "\n\016_personal_chat\030\t \001(\r\022\031\n\021_splitable_her"
    "oes\030\n \001(\r\"%\n\rladder_notify\022\024\n\014_is_attack"
    "ed\030\001 \001(\r\"\321\002\n\ttbc_reply\0226\n\013_open_panel\030\001 "
    "\001(\0132!.client_baseserver.tbc_open_panel\0226"
    "\n\013_query_oppo\030\002 \001(\0132!.client_baseserver."
    "tbc_query_oppo\0227\n\n_start_bat\030\003 \001(\0132#.cli"
    "ent_baseserver.tbc_start_battle\0223\n\010_end_"
    "bat\030\004 \001(\0132!.client_baseserver.tbc_end_ba"
    "ttle\022,\n\006_reset\030\005 \001(\0132\034.client_baseserver"
    ".tbc_reset\0228\n\014_draw_reward\030\006 \001(\0132\".clien"
    "t_baseserver.tbc_draw_reward\"J\n\rtbc_self"
    "_hero\022\014\n\004_tid\030\001 \002(\r\022+\n\005_dyna\030\002 \002(\0132\034.cli"
    "ent_baseserver.hero_dyna\"d\n\rtbc_oppo_her"
    "o\022&\n\005_base\030\001 \002(\0132\027.client_baseserver.her"
    "o\022+\n\005_dyna\030\002 \002(\0132\034.client_baseserver.her"
    "o_dyna\"\265\001\n\ntbc_reward\0221\n\005_type\030\001 \002(\0162\".c"
    "lient_baseserver.tbc_reward.type\022\017\n\007_par"
    "am1\030\002 \001(\r\022\017\n\007_param2\030\003 \001(\r\"R\n\004type\022\010\n\004go"
    "ld\020\001\022\013\n\007diamond\020\002\022\010\n\004item\020\003\022\t\n\005chest\020\004\022\020"
    "\n\014crusadepoint\020\005\022\014\n\010chestbox\020\006\"\256\001\n\ttbc_s"
    "tage\022>\n\007_status\030\001 \002(\0162#.client_baseserve"
    "r.tbc_stage.status:\010unpassed\022/\n\010_rewards"
    "\030\002 \003(\0132\035.client_baseserver.tbc_reward\"0\n"
    "\006status\022\014\n\010unpassed\020\000\022\n\n\006passed\020\001\022\014\n\010rew"
    "arded\020\002\"\310\001\n\010tbc_info\022\022\n\n_cur_stage\030\001 \002(\r"
    "\022\024\n\014_reset_times\030\002 \002(\r\0221\n\007_heroes\030\003 \003(\0132"
    " .client_baseserver.tbc_self_hero\022-\n\007_st"
    "ages\030\004 \003(\0132\034.client_baseserver.tbc_stage"
    "\0220\n\n_hire_hero\030\005 \001(\0132\034.client_baseserver"
    ".hire_data\"<\n\016tbc_open_panel\022*\n\005_info\030\001 "
    "\002(\0132\033.client_baseserver.tbc_info\"\210\001\n\016tbc"
    "_query_oppo\0221\n\010_summary\030\001 \002(\0132\037.client_b"
    "aseserver.user_summary\0220\n\006_oppos\030\002 \003(\0132 "
    ".client_baseserver.tbc_oppo_hero\022\021\n\t_is_"
    "robot\030\003 \002(\r\"W\n\020tbc_start_battle\0223\n\007_resu"
    "lt\030\001 \002(\0162\031.client_baseserver.result:\007suc"
    "cess\022\016\n\006_rseed\030\002 \002(\r\"L\n\016tbc_end_battle\022:"
    "\n\007_result\030\001 \002(\0162 .client_baseserver.batt"
    "le_result:\007victory\"l\n\ttbc_reset\0223\n\007_resu"
    "lt\030\001 \002(\0162\031.client_baseserver.result:\007suc"
    "cess\022*\n\005_info\030\002 \001(\0132\033.client_baseserver."
    "tbc_info\"\264\001\n\017tbc_draw_reward\0223\n\007_result\030"
    "\001 \002(\0162\031.client_baseserver.result:\007succes"
    "s\022\021\n\t_stage_id\030\002 \002(\r\022/\n\010_rewards\030\003 \003(\0132\035"
    ".client_baseserver.tbc_reward\022(\n\007_heroes"
    "\030\004 \003(\0132\027.client_baseserver.hero\"I\n\022get_m"
    "aillist_reply\0223\n\016_sys_mail_list\030\001 \003(\0132\033."
    "client_baseserver.sys_mail\"\335\002\n\010sys_mail\022"
    "\013\n\003_id\030\001 \002(\r\0223\n\007_status\030\002 \002(\0162\".client_b"
    "aseserver.sys_mail.status\022\022\n\n_mail_time\030"
    "\003 \002(\r\022\024\n\014_expire_time\030\004 \002(\r\0221\n\010_content\030"
    "\005 \002(\0132\037.client_baseserver.mail_content\022\016"
    "\n\006_money\030\006 \001(\r\022\021\n\t_diamonds\030\007 \001(\r\022\024\n\014_sk"
    "ill_point\030\010 \001(\r\022\016\n\006_items\030\t \003(\r\022\r\n\005_type"
    "\030\013 \002(\r\022.\n\007_points\030\n \003(\0132\035.client_baseser"
    "ver.user_point\"*\n\006status\022\n\n\006unread\020\000\022\010\n\004"
    "read\020\001\022\n\n\006delete\020\002\"x\n\014mail_content\0222\n\013_p"
    "lain_mail\030\001 \001(\0132\035.client_baseserver.plai"
    "n_mail\0224\n\014_format_mail\030\002 \001(\0132\036.client_ba"
    "seserver.format_mail\"=\n\nplain_mail\022\r\n\005_f"
    "rom\030\001 \002(\t\022\016\n\006_title\030\002 \002(\t\022\020\n\010_content\030\003 "
    "\002(\t\"S\n\013format_mail\022\024\n\014_mail_cfg_id\030\001 \002(\r"
    "\022.\n\007_params\030\002 \003(\0132\035.client_baseserver.ma"
    "il_param\"\330\001\n\nmail_param\022\014\n\004_idx\030\001 \002(\r\022<\n"
    "\005_type\030\002 \001(\0162-.client_baseserver.mail_pa"
    "ram.mail_param_type\022\016\n\006_value\030\003 \001(\t\"n\n\017m"
    "ail_param_type\022\t\n\005value\020\001\022\t\n\005money\020\002\022\010\n\004"
    "item\020\003\022\010\n\004mine\020\004\022\r\n\tself_hero\020\005\022\023\n\017excav"
    "_battle_id\020\006\022\r\n\thero_name\020\007\"\253\001\n\nuser_poi"
    "nt\022H\n\005_type\030\001 \002(\0162-.client_baseserver.us"
    "er_point.user_point_type:\narenapoint\022\016\n\006"
    "_value\030\002 \002(\r\"C\n\017user_point_type\022\016\n\narena"
    "point\020\001\022\020\n\014crusadepoint\020\002\022\016\n\nguildpoint\020"
    "\003\"=\n\017read_mail_reply\022*\n\007_result\030\001 \002(\0162\031."
    "client_baseserver.result\"@\n\022get_vip_gift"
    "_reply\022*\n\007_result\030\001 \002(\0162\031.client_baseser"
    "ver.result\"\371\002\n\nchat_reply\022)\n\004_say\030\001 \001(\0132"
    "\033.client_baseserver.chat_say\022-\n\006_fresh\030\002"
    " \001(\0132\035.client_baseserver.chat_fresh\022-\n\006_"
    "fetch\030\003 \001(\0132\035.client_baseserver.chat_fet"
    "ch\0224\n\014_chat_add_bl\030\004 \001(\0132\036.client_basese"
    "rver.chat_add_bl\0224\n\014_chat_del_bl\030\005 \001(\0132\036"
    ".client_baseserver.chat_del_bl\022:\n\017_chat_"
    "blacklist\030\006 \001(\0132!.client_baseserver.chat"
    "_blacklist\022:\n\017_chat_borad_say\030\007 \001(\0132!.cl"
    "ient_baseserver.chat_broad_say\"^\n\023chat_b"
    "lacklist_user\022\017\n\007_userid\030\001 \001(\r\0226\n\r_user_"
    "summary\030\002 \001(\0132\037.client_baseserver.user_s"
    "ummary\"V\n\016chat_blacklist\022D\n\024_chat_blackl"
    "ist_user\030\001 \003(\0132&.client_baseserver.chat_"
    "blacklist_user\"\243\001\n\016chat_broad_say\022*\n\007_re"
    "sult\030\001 \001(\0162\031.client_baseserver.result\0221\n"
    "\010_channel\030\002 \001(\0162\037.client_baseserver.chat"
    "_channel\0222\n\t_contents\030\003 \003(\0132\037.client_bas"
    "eserver.chat_content\"\265\001\n\010chat_say\0223\n\007_re"
    "sult\030\001 \002(\0162\031.client_baseserver.result:\007s"
    "uccess\022@\n\010_channel\030\002 \002(\0162\037.client_basese"
    "rver.chat_channel:\rworld_channel\0222\n\t_con"
    "tents\030\003 \003(\0132\037.client_baseserver.chat_con"
    "tent\"\202\001\n\nchat_fresh\022@\n\010_channel\030\001 \002(\0162\037."
    "client_baseserver.chat_channel:\rworld_ch"
    "annel\0222\n\t_contents\030\002 \003(\0132\037.client_basese"
    "rver.chat_content\"\221\001\n\nchat_fetch\022@\n\010_cha"
    "nnel\030\001 \002(\0162\037.client_baseserver.chat_chan"
    "nel:\rworld_channel\022\020\n\010_chat_id\030\002 \002(\r\022/\n\n"
    "_accessory\030\003 \001(\0132\033.client_baseserver.cha"
    "t_acc\"\264\001\n\010chat_acc\022=\n\005_type\030\001 \002(\0162&.clie"
    "nt_baseserver.chat_acc.chat_acc_t:\006binar"
    "y\022\017\n\007_binary\030\002 \001(\t\022.\n\007_replay\030\003 \001(\0132\035.cl"
    "ient_baseserver.pvp_record\"(\n\nchat_acc_t"
    "\022\n\n\006binary\020\001\022\016\n\npvp_replay\020\002\"\225\002\n\014chat_co"
    "ntent\022\020\n\010_chat_id\030\001 \002(\r\022\024\n\014_speaker_uid\030"
    "\002 \002(\r\0229\n\020_speaker_summary\030\003 \002(\0132\037.client"
    "_baseserver.user_summary\022\023\n\013_target_uid\030"
    "\004 \001(\r\0228\n\017_target_summary\030\005 \001(\0132\037.client_"
    "baseserver.user_summary\022\025\n\r_speaker_post"
    "\030\006 \001(\r\022\023\n\013_speak_time\030\007 \002(\r\022\025\n\r_content_"
    "type\030\010 \002(\r\022\020\n\010_content\030\t \002(\t\"6\n\013chat_add"
    "_bl\022\'\n\004_ret\030\001 \002(\0162\031.client_baseserver.re"
    "sult\"6\n\013chat_del_bl\022\'\n\004_ret\030\001 \002(\0162\031.clie"
    "nt_baseserver.result\"[\n\004chat\022\031\n\021_world_c"
    "hat_times\030\001 \002(\r\022#\n\033_last_reset_world_cha"
    "t_time\030\002 \002(\r\022\023\n\013_black_list\030\003 \003(\r\"\211\001\n\nus"
    "er_guild\022\013\n\003_id\030\001 \002(\r\022\r\n\005_name\030\002 \002(\t\0224\n\004"
    "_job\030\003 \001(\0162\036.client_baseserver.guild_job"
    "_t:\006member\022\025\n\r_req_guild_id\030\004 \001(\r\022\022\n\n_hi"
    "re_hero\030\005 \003(\r\"\357\020\n\013guild_reply\0220\n\007_create"
    "\030\001 \001(\0132\037.client_baseserver.guild_create\022"
    "2\n\010_dismiss\030\002 \001(\0132 .client_baseserver.gu"
    "ild_dismiss\022,\n\005_list\030\003 \001(\0132\035.client_base"
    "server.guild_list\0220\n\007_search\030\004 \001(\0132\037.cli"
    "ent_baseserver.guild_search\022,\n\005_join\030\005 \001"
    "(\0132\035.client_baseserver.guild_join\022<\n\r_jo"
    "in_confirm\030\006 \001(\0132%.client_baseserver.gui"
    "ld_join_confirm\022.\n\006_leave\030\007 \001(\0132\036.client"
    "_baseserver.guild_leave\022,\n\005_kick\030\010 \001(\0132\035"
    ".client_baseserver.guild_kick\022*\n\004_set\030\t "
    "\001(\0132\034.client_baseserver.guild_set\022.\n\006_qu"
    "ery\030\n \001(\0132\036.client_baseserver.guild_quer"
    "y\0222\n\010_set_job\030\013 \001(\0132 .client_baseserver."
    "guild_set_job\0224\n\t_add_hire\030\014 \001(\0132!.clien"
    "t_baseserver.guild_add_hire\0224\n\t_del_hire"
    "\030\r \001(\0132!.client_baseserver.guild_del_hir"
    "e\022:\n\014_query_hires\030\016 \001(\0132$.client_baseser"
    "ver.guild_query_hires\0226\n\n_hire_hero\030\017 \001("
    "\0132\".client_baseserver.guild_hire_hero\022:\n"
    "\014_worship_req\030\020 \001(\0132$.client_baseserver."
    "guild_worship_req\022D\n\021_worship_withdraw\030\021"
    " \001(\0132).client_baseserver.guild_worship_w"
    "ithdraw\022B\n\020_query_hh_detail\030\022 \001(\0132(.clie"
    "nt_baseserver.guild_qurey_hh_detail\0223\n\007_"
    "result\030\023 \002(\0162\031.client_baseserver.result:"
    "\007success\022@\n\017_instance_query\030\024 \001(\0132\'.clie"
    "nt_baseserver.guild_instance_query\022B\n\020_i"
    "nstance_detail\030\025 \001(\0132(.client_baseserver"
    ".guild_instance_detail\022@\n\017_instance_star"
    "t\030\026 \001(\0132\'.client_baseserver.guild_instan"
    "ce_start\022A\n\r_instance_end\030\027 \001(\0132*.client"
    "_baseserver.guild_instance_end_down\022>\n\016_"
    "instance_drop\030\030 \001(\0132&.client_baseserver."
    "guild_instance_drop\022>\n\016_instance_open\030\031 "
    "\001(\0132&.client_baseserver.guild_instance_o"
    "pen\022@\n\017_instance_apply\030\032 \001(\0132\'.client_ba"
    "seserver.guild_instance_apply\0226\n\n_drop_i"
    "nfo\030\033 \001(\0132\".client_baseserver.guild_drop"
    "_info\0226\n\n_drop_give\030\034 \001(\0132\".client_bases"
    "erver.guild_drop_give\022B\n\020_instance_damag"
    "e\030\035 \001(\0132(.client_baseserver.guild_instan"
    "ce_damage\022>\n\016_items_history\030\036 \001(\0132&.clie"
    "nt_baseserver.guild_items_history\0222\n\013_gu"
    "ild_jump\030\037 \001(\0132\035.client_baseserver.guild"
    "_jump\022<\n\020_guild_app_queue\030  \001(\0132\".client"
    "_baseserver.guild_app_queue\022D\n\021_instance"
    "_prepare\030! \001(\0132).client_baseserver.guild"
    "_instance_prepare\0228\n\016_guild_members\030\" \001("
    "\0132 .client_baseserver.guild_members\022>\n\021_"
    "guild_stage_rank\030# \001(\0132#.client_baseserv"
    "er.guild_stage_rank\0224\n\t_set_jump\030$ \001(\0132!"
    ".client_baseserver.guild_set_jump\022<\n\020_se"
    "nd_mail_reply\030% \001(\0132\".client_baseserver."
    "guild_send_mail\"=\n\017guild_send_mail\022*\n\007_r"
    "esult\030\001 \002(\0162\031.client_baseserver.result\"<"
    "\n\016guild_set_jump\022*\n\007_result\030\001 \002(\0162\031.clie"
    "nt_baseserver.result\"X\n\026guild_instance_p"
    "repare\022*\n\007_result\030\001 \002(\0162\031.client_baseser"
    "ver.result\022\022\n\n_left_time\030\002 \002(\r\"\177\n\010dps_ra"
    "nk\022\014\n\004_dps\030\001 \002(\r\0222\n\t_dps_user\030\002 \002(\0132\037.cl"
    "ient_baseserver.user_summary\0221\n\006_array\030\003"
    " \001(\0132!.client_baseserver.dps_rank_array\""
    "A\n\016dps_rank_array\022/\n\006_heros\030\001 \003(\0132\037.clie"
    "nt_baseserver.hero_summary\"Y\n\020guild_firs"
    "t_pass\0221\n\010_summary\030\001 \002(\0132\037.client_basese"
    "rver.user_summary\022\022\n\n_pass_time\030\002 \002(\r\"K\n"
    "\017guild_fast_pass\022\013\n\003_id\030\001 \002(\r\022\r\n\005_icon\030\002"
    " \002(\r\022\r\n\005_time\030\003 \002(\r\022\r\n\005_name\030\004 \002(\t\"\307\001\n\020g"
    "uild_stage_rank\022\021\n\t_stage_id\030\001 \002(\r\022.\n\t_d"
    "ps_rank\030\002 \003(\0132\033.client_baseserver.dps_ra"
    "nk\0228\n\013_first_pass\030\003 \001(\0132#.client_baseser"
    "ver.guild_first_pass\0226\n\n_fast_pass\030\004 \001(\013"
    "2\".client_baseserver.guild_fast_pass\"\266\001\n"
    "\017guild_app_queue\0221\n\010_summary\030\001 \003(\0132\037.cli"
    "ent_baseserver.user_summary\022\020\n\010_timeout\030"
    "\002 \002(\r\022\023\n\013_item_count\030\003 \002(\r\022\r\n\005_rank\030\004 \002("
    "\r\022\020\n\010_item_id\030\005 \002(\r\022\023\n\013_jump_times\030\006 \002(\r"
    "\022\023\n\013_cost_money\030\007 \002(\r\"G\n\rguild_members\0226"
    "\n\r_guild_member\030\001 \003(\0132\037.client_baseserve"
    "r.guild_member\"p\n\nguild_jump\022*\n\007_result\030"
    "\001 \002(\0162\031.client_baseserver.result\0226\n\n_app"
    "_queue\030\002 \002(\0132\".client_baseserver.guild_a"
    "pp_queue\"f\n\023guild_items_history\022\020\n\010_isth"
    "ere\030\001 \002(\r\022=\n\016_item_historys\030\002 \003(\0132%.clie"
    "nt_baseserver.guild_item_history\"h\n\022guil"
    "d_item_history\022\020\n\010_item_id\030\001 \002(\r\022\026\n\016_rec"
    "eiver_name\030\002 \002(\t\022\022\n\n_send_time\030\003 \002(\r\022\024\n\014"
    "_sender_name\030\004 \001(\t\"d\n\027guild_challenger_d"
    "amage\0228\n\013_challenger\030\001 \002(\0132#.client_base"
    "server.guild_challenger\022\017\n\007_damage\030\002 \002(\r"
    "\"g\n\025guild_instance_damage\022\020\n\010_isthere\030\001 "
    "\002(\r\022<\n\010_damages\030\002 \003(\0132*.client_baseserve"
    "r.guild_challenger_damage\"=\n\017guild_drop_"
    "give\022*\n\007_result\030\001 \002(\0162\031.client_baseserve"
    "r.result\"Q\n\024guild_drop_item_info\022\020\n\010_ite"
    "m_id\030\001 \002(\r\022\025\n\r_time_out_end\030\002 \002(\r\022\020\n\010_us"
    "er_id\030\003 \003(\r\"\232\001\n\017guild_drop_item\022\020\n\010_raid"
    "_id\030\001 \002(\r\0228\n\t_dps_list\030\002 \003(\0132%.client_ba"
    "seserver.guild_instance_dps\022;\n\n_item_inf"
    "o\030\003 \003(\0132\'.client_baseserver.guild_drop_i"
    "tem_info\"0\n\022guild_instance_dps\022\014\n\004_uid\030\001"
    " \002(\r\022\014\n\004_dps\030\002 \002(\r\"x\n\017guild_drop_info\0221\n"
    "\010_members\030\001 \003(\0132\037.client_baseserver.guil"
    "d_member\0222\n\006_items\030\002 \003(\0132\".client_basese"
    "rver.guild_drop_item\"z\n\024guild_instance_a"
    "pply\022*\n\007_result\030\001 \002(\0162\031.client_baseserve"
    "r.result\0226\n\n_app_queue\030\002 \002(\0132\".client_ba"
    "seserver.guild_app_queue\"d\n\023guild_instan"
    "ce_info\022\020\n\010_raid_id\030\001 \002(\r\022\024\n\014_stage_inde"
    "x\030\002 \002(\r\022\023\n\013_wave_index\030\003 \002(\r\022\020\n\010_hp_info"
    "\030\004 \003(\r\"\260\001\n\024guild_instance_start\022>\n\016_inst"
    "ance_info\030\001 \002(\0132&.client_baseserver.guil"
    "d_instance_info\022\016\n\006_rseed\030\002 \002(\r\022\016\n\006_loot"
    "s\030\003 \003(\r\0228\n\010_hp_drop\030\004 \003(\0132&.client_bases"
    "erver.guild_stage_hp_drop\"X\n\023guild_stage"
    "_hp_drop\022\025\n\r_monster_info\030\001 \002(\r\022*\n\006_loot"
    "s\030\002 \003(\0132\032.client_baseserver.hp_drop\"\'\n\007h"
    "p_drop\022\014\n\004_per\030\001 \002(\r\022\016\n\006_items\030\002 \003(\r\"\237\002\n"
    "\027guild_instance_end_down\022;\n\010_summary\030\001 \002"
    "(\0132).client_baseserver.guild_instance_su"
    "mmary\0221\n\007_result\030\002 \002(\0162 .client_baseserv"
    "er.battle_result\022\020\n\010_rewards\030\003 \003(\r\022\026\n\016_a"
    "pply_rewards\030\004 \003(\r\022\033\n\023_stage_old_progres"
    "s\030\005 \002(\r\022\023\n\013_join_times\030\006 \002(\r\0228\n\016_break_h"
    "istory\030\007 \001(\0132 .client_baseserver.break_h"
    "istory\"\215\001\n\rbreak_history\022\020\n\010_diamond\030\001 \002"
    "(\r\022\023\n\013_guildpoint\030\002 \002(\r\022\014\n\004_dps\030\003 \002(\r\022\020\n"
    "\010_old_dps\030\004 \001(\r\0225\n\014_old_summary\030\005 \001(\0132\037."
    "client_baseserver.user_summary\"g\n\023guild_"
    "instance_open\022*\n\007_result\030\001 \002(\0162\031.client_"
    "baseserver.result\022\020\n\010_raid_id\030\002 \002(\r\022\022\n\n_"
    "left_time\030\003 \002(\r\"n\n\014guild_create\022*\n\007_resu"
    "lt\030\001 \002(\0162\031.client_baseserver.result\0222\n\013_"
    "guild_info\030\002 \001(\0132\035.client_baseserver.gui"
    "ld_info\";\n\rguild_dismiss\022*\n\007_result\030\001 \002("
    "\0162\031.client_baseserver.result\"\362\001\n\nguild_i"
    "nfo\0222\n\010_summary\030\001 \002(\0132 .client_baseserve"
    "r.guild_summary\0221\n\010_members\030\002 \003(\0132\037.clie"
    "nt_baseserver.guild_member\0223\n\t_appliers\030"
    "\003 \003(\0132 .client_baseserver.guild_applier\022"
    "\021\n\t_vitality\030\004 \002(\r\022\026\n\016_self_vitality\030\005 \002"
    "(\r\022\035\n\025_left_distribute_time\030\006 \002(\r\"\231\002\n\rgu"
    "ild_summary\022\013\n\003_id\030\001 \002(\r\022\r\n\005_name\030\002 \002(\t\022"
    "\017\n\007_avatar\030\003 \002(\r\022\017\n\007_slogan\030\004 \002(\t\0223\n\n_jo"
    "in_type\030\005 \002(\0162\037.client_baseserver.guild_"
    "join_t\022\023\n\013_join_limit\030\006 \002(\r\022\023\n\013_member_c"
    "nt\030\007 \002(\r\0223\n\n_president\030\010 \002(\0132\037.client_ba"
    "seserver.user_summary\022\021\n\t_liveness\030\t \001(\r"
    "\022\021\n\t_can_jump\030\n \001(\r\022\020\n\010_host_id\030\013 \001(\r\"\300\001"
    "\n\014guild_member\022\014\n\004_uid\030\001 \002(\r\0221\n\010_summary"
    "\030\002 \002(\0132\037.client_baseserver.user_summary\022"
    ",\n\004_job\030\003 \002(\0162\036.client_baseserver.guild_"
    "job_t\022\023\n\013_last_login\030\004 \002(\r\022\017\n\007_active\030\005 "
    "\001(\r\022\033\n\023_join_instance_time\030\006 \001(\r\"U\n\rguil"
    "d_applier\022\014\n\004_uid\030\001 \002(\r\0226\n\r_user_summary"
    "\030\002 \001(\0132\037.client_baseserver.user_summary\""
    "\212\001\n\nguild_list\0221\n\007_guilds\030\001 \003(\0132 .client"
    "_baseserver.guild_summary\0223\n\007_result\030\002 \002"
    "(\0162\031.client_baseserver.result:\007success\022\024"
    "\n\014_create_cost\030\003 \001(\r\"\214\001\n\014guild_search\0221\n"
    "\007_guilds\030\001 \001(\0132 .client_baseserver.guild"
    "_summary\0223\n\007_result\030\002 \002(\0162\031.client_bases"
    "erver.result:\007success\022\024\n\014_create_cost\030\003 "
    "\001(\r\"\371\001\n\nguild_join\022:\n\007_result\030\001 \002(\0162).cl"
    "ient_baseserver.guild_join.join_result\022\026"
    "\n\016_join_guild_id\030\002 \002(\r\0222\n\013_guild_info\030\003 "
    "\001(\0132\035.client_baseserver.guild_info\022\020\n\010_c"
    "d_time\030\004 \001(\r\022\024\n\014_fail_reason\030\005 \001(\t\";\n\013jo"
    "in_result\022\r\n\tjoin_fail\020\000\022\016\n\njoin_enter\020\001"
    "\022\r\n\tjoin_wait\020\002\"s\n\022guild_join_confirm\022*\n"
    "\007_result\030\001 \002(\0162\031.client_baseserver.resul"
    "t\0221\n\010_new_man\030\002 \001(\0132\037.client_baseserver."
    "guild_member\"9\n\013guild_leave\022*\n\007_result\030\001"
    " \002(\0162\031.client_baseserver.result\"8\n\nguild"
    "_kick\022*\n\007_result\030\001 \002(\0162\031.client_baseserv"
    "er.result\"7\n\tguild_set\022*\n\007_result\030\001 \002(\0162"
    "\031.client_baseserver.result\"\231\001\n\013guild_que"
    "ry\022,\n\005_info\030\001 \001(\0132\035.client_baseserver.gu"
    "ild_info\0222\n\010_worship\030\002 \001(\0132 .client_base"
    "server.guild_worship\022\022\n\n_drop_info\030\003 \001(\r"
    "\022\024\n\014_to_chairman\030\004 \001(\r\"h\n\rguild_worship\022"
    "\022\n\n_use_times\030\001 \002(\r\0223\n\010_rewards\030\002 \003(\0132!."
    "client_baseserver.worship_reward\022\016\n\006_tim"
    "es\030\003 \002(\r\";\n\rguild_set_job\022*\n\007_result\030\001 \002"
    "(\0162\031.client_baseserver.result\"M\n\016guild_a"
    "dd_hire\022*\n\007_result\030\001 \002(\0162\031.client_basese"
    "rver.result\022\017\n\007_income\030\002 \002(\r\"y\n\016guild_de"
    "l_hire\022*\n\007_result\030\001 \002(\0162\031.client_baseser"
    "ver.result\022\024\n\014_hire_reward\030\002 \001(\r\022\024\n\014_sta"
    "y_reward\030\003 \001(\r\022\017\n\007_heroid\030\004 \001(\r\"\210\001\n\021guil"
    "d_query_hires\0222\n\006_users\030\001 \003(\0132\".client_b"
    "aseserver.guild_hire_user\022\022\n\n_hire_uids\030"
    "\002 \003(\r\022+\n\005_from\030\003 \002(\0162\034.client_baseserver"
    ".hire_from\"\206\001\n\017guild_hire_user\022\014\n\004_uid\030\001"
    " \002(\r\022\r\n\005_name\030\002 \002(\t\022\016\n\006_level\030\003 \002(\r\022\017\n\007_"
    "avatar\030\004 \002(\r\0225\n\007_heroes\030\005 \003(\0132$.client_b"
    "aseserver.hire_hero_summary\"u\n\021hire_hero"
    "_summary\022.\n\005_hero\030\001 \002(\0132\037.client_baseser"
    "ver.hero_summary\022\r\n\005_cost\030\002 \002(\r\022\017\n\007_inco"
    "me\030\003 \002(\r\022\020\n\010_hire_ts\030\004 \002(\r\"\245\001\n\017guild_hir"
    "e_hero\022/\n\007_result\030\001 \002(\0162\036.client_baseser"
    "ver.hire_result\022+\n\005_from\030\002 \001(\0162\034.client_"
    "baseserver.hire_from\022\014\n\004_uid\030\003 \001(\r\022&\n\005_h"
    "ero\030\004 \001(\0132\027.client_baseserver.hero\"\?\n\021gu"
    "ild_worship_req\022*\n\007_result\030\001 \002(\0162\031.clien"
    "t_baseserver.result\"y\n\026guild_worship_wit"
    "hdraw\022*\n\007_result\030\001 \002(\0162\031.client_baseserv"
    "er.result\0223\n\010_rewards\030\002 \003(\0132!.client_bas"
    "eserver.worship_reward\"\?\n\025guild_qurey_hh"
    "_detail\022&\n\005_hero\030\001 \001(\0132\027.client_baseserv"
    "er.hero\"\210\001\n\016worship_reward\0225\n\005_type\030\001 \002("
    "\0162&.client_baseserver.worship_reward.typ"
    "e\022\017\n\007_param1\030\002 \001(\r\022\017\n\007_param2\030\003 \001(\r\"\035\n\004t"
    "ype\022\010\n\004gold\020\001\022\013\n\007diamond\020\002\"\246\001\n\017activity_"
    "reward\0226\n\005_type\030\001 \001(\0162\'.client_baseserve"
    "r.activity_reward.type\022\013\n\003_id\030\002 \001(\r\022\017\n\007_"
    "amount\030\003 \001(\r\"=\n\004type\022\007\n\003rmb\020\001\022\t\n\005money\020\002"
    "\022\010\n\004item\020\003\022\010\n\004hero\020\004\022\r\n\trand_soul\020\005\"J\n\016a"
    "ctivity_infos\0228\n\016_activity_info\030\001 \003(\0132 ."
    "client_baseserver.activity_info\"\211\001\n\020acti"
    "vity_rewards\022\017\n\007_amount\030\001 \001(\r\0224\n\010_reward"
    "s\030\002 \003(\0132\".client_baseserver.activity_rew"
    "ard\022.\n\t_dailyjob\030\003 \001(\0132\033.client_baseserv"
    "er.dailyjob\"\375\002\n\ractivity_info\022\013\n\003_id\030\001 \001"
    "(\r\0224\n\005_type\030\002 \001(\0162%.client_baseserver.ac"
    "tivity_info.type\022\023\n\013_start_time\030\003 \001(\r\022\021\n"
    "\t_end_time\030\004 \001(\r\0225\n\010_rewards\030\005 \003(\0132#.cli"
    "ent_baseserver.activity_rewards\022\016\n\006_titl"
    "e\030\006 \001(\t\022\r\n\005_desc\030\007 \001(\t\022\016\n\006_rules\030\010 \001(\t\"\232"
    "\001\n\004type\022\024\n\020single_br_tavern\020\001\022\023\n\017combo_b"
    "r_tavern\020\002\022\024\n\020single_gd_tavern\020\003\022\023\n\017comb"
    "o_gd_tavern\020\004\022\025\n\021magic_soul_tavern\020\005\022\020\n\014"
    "rmb_recharge\020\006\022\023\n\017diamond_consume\020\007\"\317\001\n\020"
    "cdkey_gift_reply\022A\n\007_result\030\001 \002(\01620.clie"
    "nt_baseserver.cdkey_gift_reply.cdkey_res"
    "ult\022*\n\005_pack\030\002 \001(\0132\033.client_baseserver.r"
    "es_pack\"L\n\014cdkey_result\022\013\n\007success\020\000\022\020\n\014"
    "already_used\020\001\022\016\n\nnot_exists\020\002\022\r\n\tonce_o"
    "nly\020\003\"\231\001\n\010res_pack\022\016\n\006_money\030\001 \001(\r\022\020\n\010_d"
    "iamond\030\002 \001(\r\022\016\n\006_items\030\003 \003(\r\022(\n\007_heroes\030"
    "\004 \003(\0132\027.client_baseserver.hero\0221\n\013_month"
    "_card\030\005 \001(\0132\034.client_baseserver.monthcar"
    "d\"\"\n\023ask_magicsoul_reply\022\013\n\003_id\030\001 \003(\r\"h\n"
    "\016important_data\022\016\n\006_money\030\001 \002(\r\022\014\n\004_rmb\030"
    "\002 \002(\r\022(\n\007_heroes\030\003 \003(\0132\027.client_baseserv"
    "er.hero\022\016\n\006_items\030\004 \003(\r\".\n\tmonthcard\022\013\n\003"
    "_id\030\001 \002(\r\022\024\n\014_expire_time\030\002 \002(\r\"\270\010\n\016exca"
    "vate_reply\022H\n\026_search_excavate_reply\030\001 \001"
    "(\0132(.client_baseserver.search_excavate_r"
    "eply\022P\n\032_query_excavate_data_reply\030\002 \001(\013"
    "2,.client_baseserver.query_excavate_data"
    "_reply\022V\n\035_query_excavate_history_reply\030"
    "\003 \001(\0132/.client_baseserver.query_excavate"
    "_history_reply\022T\n\034_query_excavate_battle"
    "_reply\030\004 \001(\0132..client_baseserver.query_e"
    "xcavate_battle_reply\022L\n\030_set_excavate_te"
    "am_reply\030\005 \001(\0132*.client_baseserver.set_e"
    "xcavate_team_reply\022T\n\034_excavate_start_ba"
    "ttle_reply\030\006 \001(\0132..client_baseserver.exc"
    "avate_start_battle_reply\022P\n\032_excavate_en"
    "d_battle_reply\030\007 \001(\0132,.client_baseserver"
    ".excavate_end_battle_reply\022N\n\031_query_exc"
    "avate_def_reply\030\010 \001(\0132+.client_baseserve"
    "r.query_excavate_def_reply\022T\n\034_clear_exc"
    "avate_battle_reply\030\t \001(\0132..client_basese"
    "rver.clear_excavate_battle_reply\022T\n\034_dra"
    "w_excavate_def_rwd_reply\030\n \001(\0132..client_"
    "baseserver.draw_excavate_def_rwd_reply\022J"
    "\n\027_revenge_excavate_reply\030\013 \001(\0132).client"
    "_baseserver.revenge_excavate_reply\022F\n\025_d"
    "raw_excav_res_reply\030\014 \001(\0132\'.client_bases"
    "erver.draw_excav_res_reply\022V\n\035_withdraw_"
    "excavate_hero_reply\030\r \001(\0132/.client_bases"
    "erver.withdraw_excavate_hero_reply\"H\n\026re"
    "venge_excavate_reply\022.\n\t_excavate\030\001 \001(\0132"
    "\033.client_baseserver.excavate\"\312\001\n\025search_"
    "excavate_reply\022G\n\007_result\030\001 \002(\01626.client"
    "_baseserver.search_excavate_reply.search"
    "_result\022.\n\t_excavate\030\002 \001(\0132\033.client_base"
    "server.excavate\"8\n\rsearch_result\022\013\n\007succ"
    "ess\020\000\022\n\n\006failed\020\001\022\016\n\nlack_money\020\002\"\300\002\n\031qu"
    "ery_excavate_data_reply\022.\n\t_excavate\030\001 \003"
    "(\0132\033.client_baseserver.excavate\022\024\n\014_sear"
    "ched_id\030\002 \002(\r\022\025\n\r_search_times\030\003 \002(\r\022\027\n\017"
    "_last_search_ts\030\004 \002(\r\022\025\n\r_attacking_id\030\005"
    " \001(\r\022:\n\013_bat_heroes\030\006 \003(\0132%.client_bases"
    "erver.excavate_self_hero\022-\n\004_cfg\030\007 \001(\0132\037"
    ".client_baseserver.excavate_cfg\022+\n\005_hire"
    "\030\010 \001(\0132\034.client_baseserver.hire_data\"S\n\022"
    "excavate_self_hero\022\020\n\010_hero_id\030\001 \002(\r\022+\n\005"
    "_dyna\030\002 \002(\0132\034.client_baseserver.hero_dyn"
    "a\"\'\n\014excavate_cfg\022\027\n\017_attack_timeout\030\001 \001"
    "(\r\"\276\002\n\rexcavate_team\022\020\n\010_team_id\030\001 \002(\r\0220"
    "\n\007_player\030\002 \001(\0132\037.client_baseserver.user"
    "_summary\0224\n\013_hero_bases\030\003 \003(\0132\037.client_b"
    "aseserver.hero_summary\0221\n\013_hero_dynas\030\004 "
    "\003(\0132\034.client_baseserver.hero_dyna\022\020\n\010_re"
    "s_got\030\005 \002(\r\022\017\n\007_svr_id\030\006 \001(\r\022\027\n\017_display"
    "_svr_id\030\007 \001(\r\022\021\n\t_svr_name\030\010 \001(\t\022\020\n\010_tea"
    "m_gs\030\t \001(\r\022\016\n\006_speed\030\n \001(\r\022\017\n\007_robbed\030\013 "
    "\001(\r\"\351\002\n\010excavate\0221\n\006_owner\030\001 \002(\0162!.clien"
    "t_baseserver.excavate.owner\022\013\n\003_id\030\002 \002(\r"
    "\022\020\n\010_type_id\030\003 \002(\r\022/\n\005_team\030\004 \003(\0132 .clie"
    "nt_baseserver.excavate_team\0221\n\006_state\030\005 "
    "\002(\0162!.client_baseserver.excavate.state\022\025"
    "\n\r_state_end_ts\030\006 \001(\r\022\024\n\014_create_time\030\007 "
    "\001(\r\"(\n\005owner\022\010\n\004mine\020\000\022\n\n\006others\020\001\022\t\n\005ro"
    "bot\020\002\"P\n\005state\022\014\n\010searched\020\001\022\n\n\006battle\020\002"
    "\022\n\n\006shield\020\003\022\n\n\006occupy\020\004\022\013\n\007protect\020\005\022\010\n"
    "\004dead\020\006\"\261\002\n\020excavate_history\022\013\n\003_id\030\001 \002("
    "\t\022\024\n\014_excavate_id\030\002 \002(\r\022\?\n\007_result\030\003 \002(\016"
    "2..client_baseserver.excavate_history.de"
    "f_result\022\023\n\013_enemy_name\030\004 \002(\t\022\024\n\014_enemy_"
    "svrid\030\005 \001(\r\022\026\n\016_enemy_svrname\030\006 \001(\t\022\r\n\005_"
    "time\030\007 \002(\r\022\021\n\t_vatility\030\010 \001(\r\0223\n\007_reward"
    "\030\t \003(\0132\".client_baseserver.excavate_rewa"
    "rd\"\037\n\ndef_result\022\007\n\003win\020\000\022\010\n\004fail\020\001\"z\n\034q"
    "uery_excavate_history_reply\022>\n\021_excavate"
    "_history\030\001 \003(\0132#.client_baseserver.excav"
    "ate_history\022\032\n\022_draw_def_vitality\030\002 \001(\r\""
    "s\n\024excavate_battle_hero\022.\n\005_base\030\001 \002(\0132\037"
    ".client_baseserver.hero_summary\022+\n\005_dyna"
    "\030\002 \002(\0132\034.client_baseserver.hero_dyna\"\200\001\n"
    "\024excavate_battle_team\0220\n\007_player\030\001 \002(\0132\037"
    ".client_baseserver.user_summary\0226\n\005_hero"
    "\030\002 \003(\0132\'.client_baseserver.excavate_batt"
    "le_hero\"\351\001\n\017excavate_battle\022;\n\n_self_tea"
    "m\030\001 \002(\0132\'.client_baseserver.excavate_bat"
    "tle_team\022;\n\n_oppo_team\030\002 \002(\0132\'.client_ba"
    "seserver.excavate_battle_team\0221\n\007_result"
    "\030\003 \002(\0162 .client_baseserver.battle_result"
    "\022\022\n\n_record_id\030\004 \002(\r\022\025\n\r_record_svrid\030\005 "
    "\002(\r\"S\n\033query_excavate_battle_reply\0224\n\010_b"
    "attles\030\001 \003(\0132\".client_baseserver.excavat"
    "e_battle\"\303\001\n\027set_excavate_team_reply\022B\n\007"
    "_result\030\001 \002(\01621.client_baseserver.set_ex"
    "cavate_team_reply.result\022*\n\005_mine\030\002 \001(\0132"
    "\033.client_baseserver.excavate\"8\n\006result\022\013"
    "\n\007success\020\000\022\n\n\006failed\020\001\022\013\n\007expired\020\002\022\010\n\004"
    "fall\020\003\"\303\001\n\033excavate_start_battle_reply\0223"
    "\n\007_result\030\001 \002(\0162\031.client_baseserver.resu"
    "lt:\007success\022\016\n\006_rseed\030\002 \002(\r\022,\n\013_hero_bas"
    "es\030\003 \003(\0132\027.client_baseserver.hero\0221\n\013_he"
    "ro_dynas\030\004 \003(\0132\034.client_baseserver.hero_"
    "dyna\"\323\002\n\031excavate_end_battle_reply\022:\n\007_r"
    "esult\030\001 \001(\0162 .client_baseserver.battle_r"
    "esult:\007victory\022.\n\t_excavate\030\002 \001(\0132\033.clie"
    "nt_baseserver.excavate\0223\n\007_reward\030\003 \003(\0132"
    "\".client_baseserver.excavate_reward\022e\n\023_"
    "mine_battle_result\030\004 \001(\0162\?.client_basese"
    "rver.excavate_end_battle_reply.mine_batt"
    "le_result:\007success\".\n\022mine_battle_result"
    "\022\013\n\007success\020\000\022\013\n\007timeout\020\001\"]\n\024draw_excav"
    "_res_reply\022\020\n\010_diamond\030\001 \001(\r\0223\n\007_reward\030"
    "\002 \003(\0132\".client_baseserver.excavate_rewar"
    "d\"\307\001\n\017excavate_reward\0226\n\005_type\030\001 \002(\0162\'.c"
    "lient_baseserver.excavate_reward.type\022\020\n"
    "\010_team_id\030\002 \001(\r\022\017\n\007_param1\030\003 \001(\r\022\017\n\007_par"
    "am2\030\004 \001(\r\"H\n\004type\022\010\n\004gold\020\001\022\013\n\007diamond\020\002"
    "\022\010\n\004item\020\003\022\010\n\004wood\020\004\022\010\n\004iron\020\005\022\013\n\007crysta"
    "l\020\006\"J\n\030query_excavate_def_reply\022.\n\t_exca"
    "vate\030\001 \001(\0132\033.client_baseserver.excavate\""
    "R\n\033clear_excavate_battle_reply\0223\n\007_resul"
    "t\030\001 \002(\0162\031.client_baseserver.result:\007succ"
    "ess\"S\n\034withdraw_excavate_hero_reply\0223\n\007_"
    "result\030\001 \002(\0162\031.client_baseserver.result:"
    "\007success\"j\n\033draw_excavate_def_rwd_reply\022"
    "3\n\007_result\030\001 \002(\0162\031.client_baseserver.res"
    "ult:\007success\022\026\n\016_draw_vitality\030\002 \001(\r\"\177\n\023"
    "drop_excavate_reply\0223\n\007_result\030\001 \002(\0162\031.c"
    "lient_baseserver.result:\007success\0223\n\007_rew"
    "ard\030\002 \001(\0132\".client_baseserver.excavate_r"
    "eward\"\202\001\n\023change_server_reply\0225\n\007_result"
    "\030\001 \002(\0162$.client_baseserver.server_opt_re"
    "sult\0224\n\014_server_info\030\002 \003(\0132\036.client_base"
    "server.server_info\"d\n\013server_info\022\022\n\n_se"
    "rver_id\030\001 \002(\r\022\024\n\014_server_name\030\002 \002(\t\022\024\n\014_"
    "player_name\030\003 \001(\t\022\025\n\r_player_level\030\004 \001(\r"
    "\"\361\001\n\024guild_instance_query\022\030\n\020_current_ra"
    "id_id\030\001 \002(\r\022;\n\010_summary\030\002 \003(\0132).client_b"
    "aseserver.guild_instance_summary\022\023\n\013_sta"
    "ge_pass\030\003 \001(\r\022I\n\014_is_can_jump\030\004 \002(\01623.cl"
    "ient_baseserver.guild_instance_query.is_"
    "can_jump\"\"\n\013is_can_jump\022\010\n\004true\020\001\022\t\n\005fal"
    "se\020\002\"p\n\rguild_chapter\022\013\n\003_id\030\001 \002(\r\022\021\n\t_p"
    "rogress\030\002 \002(\r\022\023\n\013_begin_time\030\003 \002(\r\022\023\n\013_r"
    "est_times\030\004 \002(\r\022\025\n\r_cur_stage_id\030\005 \002(\r\"\276"
    "\002\n\025guild_instance_detail\022\016\n\006_stage\030\001 \002(\r"
    "\022\r\n\005_wave\030\002 \002(\r\022\013\n\003_hp\030\003 \003(\r\0229\n\007_record\030"
    "\004 \003(\0132(.client_baseserver.guild_instance"
    "_record\0228\n\013_challenger\030\005 \001(\0132#.client_ba"
    "seserver.guild_challenger\022V\n\022_challenger"
    "_status\030\006 \001(\0162:.client_baseserver.guild_"
    "instance_detail.challenger_status\",\n\021cha"
    "llenger_status\022\n\n\006battle\020\001\022\013\n\007prepare\020\002\""
    "E\n\020guild_challenger\0221\n\010_summary\030\001 \002(\0132\037."
    "client_baseserver.user_summary\"b\n\025guild_"
    "instance_record\0228\n\013_challenger\030\001 \002(\0132#.c"
    "lient_baseserver.guild_challenger\022\017\n\007_da"
    "mage\030\002 \002(\r\"\246\001\n\026guild_instance_summary\022\013\n"
    "\003_id\030\001 \002(\r\022\021\n\t_stage_id\030\002 \002(\r\022\022\n\n_left_t"
    "ime\030\003 \002(\r\022\023\n\013_start_time\030\004 \002(\r\022\021\n\t_progr"
    "ess\030\005 \002(\r\022\027\n\017_stage_progress\030\006 \002(\r\022\027\n\017_b"
    "attle_user_id\030\007 \001(\r\"\314\001\n\023guild_instance_i"
    "tem\022\020\n\010_item_id\030\001 \002(\r\022\014\n\004_num\030\002 \002(\r\022A\n\006_"
    "state\030\003 \002(\01621.client_baseserver.guild_in"
    "stance_item.drop_state\022\022\n\n_apply_num\030\004 \002"
    "(\r\022\027\n\017_able_app_count\030\005 \002(\r\"%\n\ndrop_stat"
    "e\022\014\n\010no_apply\020\001\022\t\n\005apply\020\002\"\206\001\n\023guild_ins"
    "tance_drop\0226\n\006_items\030\001 \003(\0132&.client_base"
    "server.guild_instance_item\022\020\n\010_raid_id\030\002"
    " \002(\r\022\026\n\016_apply_item_id\030\003 \001(\r\022\r\n\005_rank\030\004 "
    "\001(\r\"H\n\016splitable_hero\022\014\n\004_tid\030\001 \002(\r\022\024\n\014_"
    "split_times\030\002 \002(\r\022\022\n\n_end_point\030\003 \002(\r\"L\n"
    "\026query_split_data_reply\0222\n\007_heroes\030\001 \003(\013"
    "2!.client_baseserver.splitable_hero\"O\n\030q"
    "uery_split_return_reply\022\016\n\006_items\030\001 \003(\r\022"
    "\r\n\005_gold\030\002 \002(\r\022\024\n\014_skill_point\030\003 \002(\r\"f\n\020"
    "split_hero_reply\022*\n\007_result\030\001 \002(\0162\031.clie"
    "nt_baseserver.result\022&\n\005_hero\030\002 \001(\0132\027.cl"
    "ient_baseserver.hero\"\242\001\n\016worldcup_reply\022"
    "F\n\025_worldcup_query_reply\030\001 \001(\0132\'.client_"
    "baseserver.worldcup_query_reply\022H\n\026_worl"
    "dcup_submit_reply\030\002 \001(\0132(.client_baseser"
    "ver.worldcup_submit_reply\"2\n\017worldcup_re"
    "ward\022\r\n\005_gold\030\001 \001(\r\022\020\n\010_diamond\030\002 \001(\r\"d\n"
    "\rworldcup_comp\022\016\n\006_teams\030\001 \003(\r\0223\n\007_rewar"
    "d\030\002 \002(\0132\".client_baseserver.worldcup_rew"
    "ard\022\016\n\006_guess\030\003 \001(\r\"G\n\024worldcup_query_re"
    "ply\022/\n\005_comp\030\001 \003(\0132 .client_baseserver.w"
    "orldcup_comp\"C\n\025worldcup_submit_reply\022*\n"
    "\007_result\030\001 \002(\0162\031.client_baseserver.resul"
    "t\"%\n\021battle_check_fail\022\020\n\010_checkid\030\001 \002(\r"
    "\"*\n\nsuper_link\022\r\n\005_info\030\002 \002(\t\022\r\n\005_addr\030\001"
    " \002(\t\"\222\001\n\rranklist_item\0226\n\r_user_summary\030"
    "\001 \001(\0132\037.client_baseserver.user_summary\0228"
    "\n\016_guild_summary\030\002 \001(\0132 .client_baseserv"
    "er.guild_summary\022\017\n\007_param1\030\003 \001(\r\"\270\003\n\024qu"
    "ery_ranklist_reply\022E\n\n_rank_type\030\001 \002(\01621"
    ".client_baseserver.query_ranklist_reply."
    "rank_type\0228\n\016_ranklist_item\030\002 \003(\0132 .clie"
    "nt_baseserver.ranklist_item\022\025\n\r_self_ran"
    "king\030\003 \001(\r\0224\n\n_self_item\030\004 \001(\0132 .client_"
    "baseserver.ranklist_item\022\026\n\016_self_prev_p"
    "os\030\005 \001(\r\"\271\001\n\trank_type\022\021\n\rguildliveness\020"
    "\001\022\020\n\014excavate_rob\020\002\022\021\n\rexcavate_gold\020\003\022\020"
    "\n\014excavate_exp\020\004\022\n\n\006top_gs\020\005\022\020\n\014full_her"
    "o_gs\020\006\022\020\n\014hero_team_gs\020\007\022\021\n\rhero_evo_sta"
    "r\020\010\022\020\n\014hero_arousal\020\t\022\r\n\ttop_arena\020\n\"K\n\027"
    "request_guild_log_reply\0220\n\n_guild_log\030\001 "
    "\003(\0132\034.client_baseserver.guild_log\"i\n\tgui"
    "ld_log\022\013\n\003_id\030\001 \002(\r\022@\n\022_guild_log_conten"
    "t\030\002 \003(\0132$.client_baseserver.guild_log_co"
    "ntent\022\r\n\005_date\030\003 \002(\r\"4\n\021guild_log_conten"
    "t\022\r\n\005_time\030\001 \002(\r\022\020\n\010_content\030\002 \002(\t\")\n\025cl"
    "ient_update_version\022\020\n\010_version\030\001 \002(\r\"2\n"
    "\025query_act_stage_reply\022\031\n\021_opened_act_st"
    "age\030\001 \003(\r\"(\n\022fb_attention_reply\022\022\n\n_atte"
    "ntion\030\001 \002(\r\"4\n\022continue_pay_reply\022\r\n\005_ti"
    "me\030\001 \002(\r\022\017\n\007_status\030\002 \003(\r\"w\n\025recharge_re"
    "bate_reply\022\r\n\005_time\030\001 \002(\r\022\017\n\007_status\030\002 \002"
    "(\r\022\027\n\017_recharge_money\030\003 \002(\r\022\020\n\010_get_day\030"
    "\004 \001(\r\022\023\n\013_get_status\030\005 \001(\r\"\260\001\n\025every_day"
    "_happy_reply\022\017\n\007_status\030\005 \002(\r\022\030\n\020_goldca"
    "rd_number\030\001 \002(\r\022\032\n\022_silvercard_number\030\002 "
    "\002(\r\022\032\n\022_coppercard_number\030\003 \002(\r\0224\n\010_rewa"
    "rds\030\004 \003(\0132\".client_baseserver.activity_r"
    "eward*\037\n\006result\022\013\n\007success\020\000\022\010\n\004fail\020\001*C"
    "\n\rbattle_result\022\013\n\007victory\020\000\022\n\n\006defeat\020\001"
    "\022\014\n\010canceled\020\002\022\013\n\007timeout\020\003*D\n\nmoney_typ"
    "e\022\010\n\004gold\020\001\022\013\n\007diamond\020\002\022\r\n\ttbc_point\020\003\022"
    "\020\n\014ladder_point\020\004*-\n\013hero_status\022\010\n\004idle"
    "\020\000\022\010\n\004hire\020\001\022\n\n\006mining\020\002*;\n\021server_opt_r"
    "esult\022\n\n\006get_ok\020\000\022\r\n\tchange_ok\020\001\022\013\n\007fail"
    "_op\020\002*A\n\013hire_result\022\020\n\014success_hire\020\000\022\r"
    "\n\tfail_hire\020\001\022\021\n\rstage_invalid\020\002*5\n\thire"
    "_from\022\t\n\005guild\020\000\022\007\n\003tbc\020\001\022\t\n\005stage\020\002\022\t\n\005"
    "excav\020\003*5\n\014guild_join_t\022\r\n\tno_verify\020\001\022\n"
    "\n\006verify\020\002\022\n\n\006closed\020\003*2\n\013guild_job_t\022\014\n"
    "\010chairman\020\001\022\n\n\006member\020\002\022\t\n\005elder\020\003*J\n\014ch"
    "at_channel\022\021\n\rworld_channel\020\001\022\021\n\rguild_c"
    "hannel\020\002\022\024\n\020personal_channel\020\003", 41790);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cb.proto", &protobuf_RegisterTypes);
  Hello::default_instance_ = new Hello();
  HelloCB::default_instance_ = new HelloCB();
  Login::default_instance_ = new Login();
  LoginBaseappFailed::default_instance_ = new LoginBaseappFailed();
  CreatedProxies::default_instance_ = new CreatedProxies();
  hire_data::default_instance_ = new hire_data();
  hire_hero::default_instance_ = new hire_hero();
  down_msg::default_instance_ = new down_msg();
  system_setting_reply::default_instance_ = new system_setting_reply();
  system_setting_change::default_instance_ = new system_setting_change();
  system_setting_request::default_instance_ = new system_setting_request();
  system_setting_item::default_instance_ = new system_setting_item();
  global_config::default_instance_ = new global_config();
  login_reply::default_instance_ = new login_reply();
  sdk_login_reply::default_instance_ = new sdk_login_reply();
  user_check::default_instance_ = new user_check();
  reset::default_instance_ = new reset();
  enter_stage_reply::default_instance_ = new enter_stage_reply();
  activity_info_reply::default_instance_ = new activity_info_reply();
  last_activity_info::default_instance_ = new last_activity_info();
  activity_lotto_info_reply::default_instance_ = new activity_lotto_info_reply();
  activity_lotto_reward_reply::default_instance_ = new activity_lotto_reward_reply();
  activity_bigpackage_info_reply::default_instance_ = new activity_bigpackage_info_reply();
  activity_bigpackage_reward_reply::default_instance_ = new activity_bigpackage_reward_reply();
  activity_bigpackage_reset_reply::default_instance_ = new activity_bigpackage_reset_reply();
  exit_stage_reply::default_instance_ = new exit_stage_reply();
  hero_upgrade_reply::default_instance_ = new hero_upgrade_reply();
  equip_synthesis_reply::default_instance_ = new equip_synthesis_reply();
  wear_equip_reply::default_instance_ = new wear_equip_reply();
  sync_vitality_reply::default_instance_ = new sync_vitality_reply();
  consume_item_reply::default_instance_ = new consume_item_reply();
  user_shop::default_instance_ = new user_shop();
  star_shop::default_instance_ = new star_shop();
  shop_consume_reply::default_instance_ = new shop_consume_reply();
  skill_levelup_reply::default_instance_ = new skill_levelup_reply();
  sell_item_reply::default_instance_ = new sell_item_reply();
  fragment_compose_reply::default_instance_ = new fragment_compose_reply();
  hero_equip_upgrade_reply::default_instance_ = new hero_equip_upgrade_reply();
  tutorial_reply::default_instance_ = new tutorial_reply();
  error_info::default_instance_ = new error_info();
  goods::default_instance_ = new goods();
  star_goods::default_instance_ = new star_goods();
  user::default_instance_ = new user();
  user_summary::default_instance_ = new user_summary();
  name_card::default_instance_ = new name_card();
  daily_login::default_instance_ = new daily_login();
  ask_daily_login_reply::default_instance_ = new ask_daily_login_reply();
  hero_equip::default_instance_ = new hero_equip();
  hero::default_instance_ = new hero();
  hero_summary::default_instance_ = new hero_summary();
  hero_dyna::default_instance_ = new hero_dyna();
  skilllevelup::default_instance_ = new skilllevelup();
  usertask::default_instance_ = new usertask();
  dailyjob::default_instance_ = new dailyjob();
  sweeploot::default_instance_ = new sweeploot();
  tavern_record::default_instance_ = new tavern_record();
  usermidas::default_instance_ = new usermidas();
  trigger_task_reply::default_instance_ = new trigger_task_reply();
  require_rewards_reply::default_instance_ = new require_rewards_reply();
  trigger_job_reply::default_instance_ = new trigger_job_reply();
  dailyjob_reward::default_instance_ = new dailyjob_reward();
  job_rewards_reply::default_instance_ = new job_rewards_reply();
  tavern_draw_reply::default_instance_ = new tavern_draw_reply();
  reset_elite_reply::default_instance_ = new reset_elite_reply();
  sweep_stage_reply::default_instance_ = new sweep_stage_reply();
  sweep::default_instance_ = new sweep();
  sync_skill_stren_reply::default_instance_ = new sync_skill_stren_reply();
  hero_evolve_reply::default_instance_ = new hero_evolve_reply();
  vitality::default_instance_ = new vitality();
  userstage::default_instance_ = new userstage();
  act_daily_record::default_instance_ = new act_daily_record();
  ladder_reply::default_instance_ = new ladder_reply();
  open_panel::default_instance_ = new open_panel();
  apply_opponent::default_instance_ = new apply_opponent();
  start_battle::default_instance_ = new start_battle();
  end_battle::default_instance_ = new end_battle();
  set_lineup::default_instance_ = new set_lineup();
  query_records::default_instance_ = new query_records();
  query_replay::default_instance_ = new query_replay();
  pvp_record::default_instance_ = new pvp_record();
  query_rankboard::default_instance_ = new query_rankboard();
  query_oppo_info::default_instance_ = new query_oppo_info();
  clear_battle_cd::default_instance_ = new clear_battle_cd();
  rankboard_data::default_instance_ = new rankboard_data();
  ladder_record::default_instance_ = new ladder_record();
  ladder_opponent::default_instance_ = new ladder_opponent();
  ladder_rank_reward::default_instance_ = new ladder_rank_reward();
  draw_rank_reward::default_instance_ = new draw_rank_reward();
  buy_battle_chance::default_instance_ = new buy_battle_chance();
  set_name_reply::default_instance_ = new set_name_reply();
  set_avatar_reply::default_instance_ = new set_avatar_reply();
  query_data_reply::default_instance_ = new query_data_reply();
  midas_acquire::default_instance_ = new midas_acquire();
  midas_reply::default_instance_ = new midas_reply();
  open_shop_reply::default_instance_ = new open_shop_reply();
  charge_reply::default_instance_ = new charge_reply();
  notify_msg::default_instance_ = new notify_msg();
  ladder_notify::default_instance_ = new ladder_notify();
  tbc_reply::default_instance_ = new tbc_reply();
  tbc_self_hero::default_instance_ = new tbc_self_hero();
  tbc_oppo_hero::default_instance_ = new tbc_oppo_hero();
  tbc_reward::default_instance_ = new tbc_reward();
  tbc_stage::default_instance_ = new tbc_stage();
  tbc_info::default_instance_ = new tbc_info();
  tbc_open_panel::default_instance_ = new tbc_open_panel();
  tbc_query_oppo::default_instance_ = new tbc_query_oppo();
  tbc_start_battle::default_instance_ = new tbc_start_battle();
  tbc_end_battle::default_instance_ = new tbc_end_battle();
  tbc_reset::default_instance_ = new tbc_reset();
  tbc_draw_reward::default_instance_ = new tbc_draw_reward();
  get_maillist_reply::default_instance_ = new get_maillist_reply();
  sys_mail::default_instance_ = new sys_mail();
  mail_content::default_instance_ = new mail_content();
  plain_mail::default_instance_ = new plain_mail();
  format_mail::default_instance_ = new format_mail();
  mail_param::default_instance_ = new mail_param();
  user_point::default_instance_ = new user_point();
  read_mail_reply::default_instance_ = new read_mail_reply();
  get_vip_gift_reply::default_instance_ = new get_vip_gift_reply();
  chat_reply::default_instance_ = new chat_reply();
  chat_blacklist_user::default_instance_ = new chat_blacklist_user();
  chat_blacklist::default_instance_ = new chat_blacklist();
  chat_broad_say::default_instance_ = new chat_broad_say();
  chat_say::default_instance_ = new chat_say();
  chat_fresh::default_instance_ = new chat_fresh();
  chat_fetch::default_instance_ = new chat_fetch();
  chat_acc::default_instance_ = new chat_acc();
  chat_content::default_instance_ = new chat_content();
  chat_add_bl::default_instance_ = new chat_add_bl();
  chat_del_bl::default_instance_ = new chat_del_bl();
  chat::default_instance_ = new chat();
  user_guild::default_instance_ = new user_guild();
  guild_reply::default_instance_ = new guild_reply();
  guild_send_mail::default_instance_ = new guild_send_mail();
  guild_set_jump::default_instance_ = new guild_set_jump();
  guild_instance_prepare::default_instance_ = new guild_instance_prepare();
  dps_rank::default_instance_ = new dps_rank();
  dps_rank_array::default_instance_ = new dps_rank_array();
  guild_first_pass::default_instance_ = new guild_first_pass();
  guild_fast_pass::default_instance_ = new guild_fast_pass();
  guild_stage_rank::default_instance_ = new guild_stage_rank();
  guild_app_queue::default_instance_ = new guild_app_queue();
  guild_members::default_instance_ = new guild_members();
  guild_jump::default_instance_ = new guild_jump();
  guild_items_history::default_instance_ = new guild_items_history();
  guild_item_history::default_instance_ = new guild_item_history();
  guild_challenger_damage::default_instance_ = new guild_challenger_damage();
  guild_instance_damage::default_instance_ = new guild_instance_damage();
  guild_drop_give::default_instance_ = new guild_drop_give();
  guild_drop_item_info::default_instance_ = new guild_drop_item_info();
  guild_drop_item::default_instance_ = new guild_drop_item();
  guild_instance_dps::default_instance_ = new guild_instance_dps();
  guild_drop_info::default_instance_ = new guild_drop_info();
  guild_instance_apply::default_instance_ = new guild_instance_apply();
  guild_instance_info::default_instance_ = new guild_instance_info();
  guild_instance_start::default_instance_ = new guild_instance_start();
  guild_stage_hp_drop::default_instance_ = new guild_stage_hp_drop();
  hp_drop::default_instance_ = new hp_drop();
  guild_instance_end_down::default_instance_ = new guild_instance_end_down();
  break_history::default_instance_ = new break_history();
  guild_instance_open::default_instance_ = new guild_instance_open();
  guild_create::default_instance_ = new guild_create();
  guild_dismiss::default_instance_ = new guild_dismiss();
  guild_info::default_instance_ = new guild_info();
  guild_summary::default_instance_ = new guild_summary();
  guild_member::default_instance_ = new guild_member();
  guild_applier::default_instance_ = new guild_applier();
  guild_list::default_instance_ = new guild_list();
  guild_search::default_instance_ = new guild_search();
  guild_join::default_instance_ = new guild_join();
  guild_join_confirm::default_instance_ = new guild_join_confirm();
  guild_leave::default_instance_ = new guild_leave();
  guild_kick::default_instance_ = new guild_kick();
  guild_set::default_instance_ = new guild_set();
  guild_query::default_instance_ = new guild_query();
  guild_worship::default_instance_ = new guild_worship();
  guild_set_job::default_instance_ = new guild_set_job();
  guild_add_hire::default_instance_ = new guild_add_hire();
  guild_del_hire::default_instance_ = new guild_del_hire();
  guild_query_hires::default_instance_ = new guild_query_hires();
  guild_hire_user::default_instance_ = new guild_hire_user();
  hire_hero_summary::default_instance_ = new hire_hero_summary();
  guild_hire_hero::default_instance_ = new guild_hire_hero();
  guild_worship_req::default_instance_ = new guild_worship_req();
  guild_worship_withdraw::default_instance_ = new guild_worship_withdraw();
  guild_qurey_hh_detail::default_instance_ = new guild_qurey_hh_detail();
  worship_reward::default_instance_ = new worship_reward();
  activity_reward::default_instance_ = new activity_reward();
  activity_infos::default_instance_ = new activity_infos();
  activity_rewards::default_instance_ = new activity_rewards();
  activity_info::default_instance_ = new activity_info();
  cdkey_gift_reply::default_instance_ = new cdkey_gift_reply();
  res_pack::default_instance_ = new res_pack();
  ask_magicsoul_reply::default_instance_ = new ask_magicsoul_reply();
  important_data::default_instance_ = new important_data();
  monthcard::default_instance_ = new monthcard();
  excavate_reply::default_instance_ = new excavate_reply();
  revenge_excavate_reply::default_instance_ = new revenge_excavate_reply();
  search_excavate_reply::default_instance_ = new search_excavate_reply();
  query_excavate_data_reply::default_instance_ = new query_excavate_data_reply();
  excavate_self_hero::default_instance_ = new excavate_self_hero();
  excavate_cfg::default_instance_ = new excavate_cfg();
  excavate_team::default_instance_ = new excavate_team();
  excavate::default_instance_ = new excavate();
  excavate_history::default_instance_ = new excavate_history();
  query_excavate_history_reply::default_instance_ = new query_excavate_history_reply();
  excavate_battle_hero::default_instance_ = new excavate_battle_hero();
  excavate_battle_team::default_instance_ = new excavate_battle_team();
  excavate_battle::default_instance_ = new excavate_battle();
  query_excavate_battle_reply::default_instance_ = new query_excavate_battle_reply();
  set_excavate_team_reply::default_instance_ = new set_excavate_team_reply();
  excavate_start_battle_reply::default_instance_ = new excavate_start_battle_reply();
  excavate_end_battle_reply::default_instance_ = new excavate_end_battle_reply();
  draw_excav_res_reply::default_instance_ = new draw_excav_res_reply();
  excavate_reward::default_instance_ = new excavate_reward();
  query_excavate_def_reply::default_instance_ = new query_excavate_def_reply();
  clear_excavate_battle_reply::default_instance_ = new clear_excavate_battle_reply();
  withdraw_excavate_hero_reply::default_instance_ = new withdraw_excavate_hero_reply();
  draw_excavate_def_rwd_reply::default_instance_ = new draw_excavate_def_rwd_reply();
  drop_excavate_reply::default_instance_ = new drop_excavate_reply();
  change_server_reply::default_instance_ = new change_server_reply();
  server_info::default_instance_ = new server_info();
  guild_instance_query::default_instance_ = new guild_instance_query();
  guild_chapter::default_instance_ = new guild_chapter();
  guild_instance_detail::default_instance_ = new guild_instance_detail();
  guild_challenger::default_instance_ = new guild_challenger();
  guild_instance_record::default_instance_ = new guild_instance_record();
  guild_instance_summary::default_instance_ = new guild_instance_summary();
  guild_instance_item::default_instance_ = new guild_instance_item();
  guild_instance_drop::default_instance_ = new guild_instance_drop();
  splitable_hero::default_instance_ = new splitable_hero();
  query_split_data_reply::default_instance_ = new query_split_data_reply();
  query_split_return_reply::default_instance_ = new query_split_return_reply();
  split_hero_reply::default_instance_ = new split_hero_reply();
  worldcup_reply::default_instance_ = new worldcup_reply();
  worldcup_reward::default_instance_ = new worldcup_reward();
  worldcup_comp::default_instance_ = new worldcup_comp();
  worldcup_query_reply::default_instance_ = new worldcup_query_reply();
  worldcup_submit_reply::default_instance_ = new worldcup_submit_reply();
  battle_check_fail::default_instance_ = new battle_check_fail();
  super_link::default_instance_ = new super_link();
  ranklist_item::default_instance_ = new ranklist_item();
  query_ranklist_reply::default_instance_ = new query_ranklist_reply();
  request_guild_log_reply::default_instance_ = new request_guild_log_reply();
  guild_log::default_instance_ = new guild_log();
  guild_log_content::default_instance_ = new guild_log_content();
  client_update_version::default_instance_ = new client_update_version();
  query_act_stage_reply::default_instance_ = new query_act_stage_reply();
  fb_attention_reply::default_instance_ = new fb_attention_reply();
  continue_pay_reply::default_instance_ = new continue_pay_reply();
  recharge_rebate_reply::default_instance_ = new recharge_rebate_reply();
  every_day_happy_reply::default_instance_ = new every_day_happy_reply();
  Hello::default_instance_->InitAsDefaultInstance();
  HelloCB::default_instance_->InitAsDefaultInstance();
  Login::default_instance_->InitAsDefaultInstance();
  LoginBaseappFailed::default_instance_->InitAsDefaultInstance();
  CreatedProxies::default_instance_->InitAsDefaultInstance();
  hire_data::default_instance_->InitAsDefaultInstance();
  hire_hero::default_instance_->InitAsDefaultInstance();
  down_msg::default_instance_->InitAsDefaultInstance();
  system_setting_reply::default_instance_->InitAsDefaultInstance();
  system_setting_change::default_instance_->InitAsDefaultInstance();
  system_setting_request::default_instance_->InitAsDefaultInstance();
  system_setting_item::default_instance_->InitAsDefaultInstance();
  global_config::default_instance_->InitAsDefaultInstance();
  login_reply::default_instance_->InitAsDefaultInstance();
  sdk_login_reply::default_instance_->InitAsDefaultInstance();
  user_check::default_instance_->InitAsDefaultInstance();
  reset::default_instance_->InitAsDefaultInstance();
  enter_stage_reply::default_instance_->InitAsDefaultInstance();
  activity_info_reply::default_instance_->InitAsDefaultInstance();
  last_activity_info::default_instance_->InitAsDefaultInstance();
  activity_lotto_info_reply::default_instance_->InitAsDefaultInstance();
  activity_lotto_reward_reply::default_instance_->InitAsDefaultInstance();
  activity_bigpackage_info_reply::default_instance_->InitAsDefaultInstance();
  activity_bigpackage_reward_reply::default_instance_->InitAsDefaultInstance();
  activity_bigpackage_reset_reply::default_instance_->InitAsDefaultInstance();
  exit_stage_reply::default_instance_->InitAsDefaultInstance();
  hero_upgrade_reply::default_instance_->InitAsDefaultInstance();
  equip_synthesis_reply::default_instance_->InitAsDefaultInstance();
  wear_equip_reply::default_instance_->InitAsDefaultInstance();
  sync_vitality_reply::default_instance_->InitAsDefaultInstance();
  consume_item_reply::default_instance_->InitAsDefaultInstance();
  user_shop::default_instance_->InitAsDefaultInstance();
  star_shop::default_instance_->InitAsDefaultInstance();
  shop_consume_reply::default_instance_->InitAsDefaultInstance();
  skill_levelup_reply::default_instance_->InitAsDefaultInstance();
  sell_item_reply::default_instance_->InitAsDefaultInstance();
  fragment_compose_reply::default_instance_->InitAsDefaultInstance();
  hero_equip_upgrade_reply::default_instance_->InitAsDefaultInstance();
  tutorial_reply::default_instance_->InitAsDefaultInstance();
  error_info::default_instance_->InitAsDefaultInstance();
  goods::default_instance_->InitAsDefaultInstance();
  star_goods::default_instance_->InitAsDefaultInstance();
  user::default_instance_->InitAsDefaultInstance();
  user_summary::default_instance_->InitAsDefaultInstance();
  name_card::default_instance_->InitAsDefaultInstance();
  daily_login::default_instance_->InitAsDefaultInstance();
  ask_daily_login_reply::default_instance_->InitAsDefaultInstance();
  hero_equip::default_instance_->InitAsDefaultInstance();
  hero::default_instance_->InitAsDefaultInstance();
  hero_summary::default_instance_->InitAsDefaultInstance();
  hero_dyna::default_instance_->InitAsDefaultInstance();
  skilllevelup::default_instance_->InitAsDefaultInstance();
  usertask::default_instance_->InitAsDefaultInstance();
  dailyjob::default_instance_->InitAsDefaultInstance();
  sweeploot::default_instance_->InitAsDefaultInstance();
  tavern_record::default_instance_->InitAsDefaultInstance();
  usermidas::default_instance_->InitAsDefaultInstance();
  trigger_task_reply::default_instance_->InitAsDefaultInstance();
  require_rewards_reply::default_instance_->InitAsDefaultInstance();
  trigger_job_reply::default_instance_->InitAsDefaultInstance();
  dailyjob_reward::default_instance_->InitAsDefaultInstance();
  job_rewards_reply::default_instance_->InitAsDefaultInstance();
  tavern_draw_reply::default_instance_->InitAsDefaultInstance();
  reset_elite_reply::default_instance_->InitAsDefaultInstance();
  sweep_stage_reply::default_instance_->InitAsDefaultInstance();
  sweep::default_instance_->InitAsDefaultInstance();
  sync_skill_stren_reply::default_instance_->InitAsDefaultInstance();
  hero_evolve_reply::default_instance_->InitAsDefaultInstance();
  vitality::default_instance_->InitAsDefaultInstance();
  userstage::default_instance_->InitAsDefaultInstance();
  act_daily_record::default_instance_->InitAsDefaultInstance();
  ladder_reply::default_instance_->InitAsDefaultInstance();
  open_panel::default_instance_->InitAsDefaultInstance();
  apply_opponent::default_instance_->InitAsDefaultInstance();
  start_battle::default_instance_->InitAsDefaultInstance();
  end_battle::default_instance_->InitAsDefaultInstance();
  set_lineup::default_instance_->InitAsDefaultInstance();
  query_records::default_instance_->InitAsDefaultInstance();
  query_replay::default_instance_->InitAsDefaultInstance();
  pvp_record::default_instance_->InitAsDefaultInstance();
  query_rankboard::default_instance_->InitAsDefaultInstance();
  query_oppo_info::default_instance_->InitAsDefaultInstance();
  clear_battle_cd::default_instance_->InitAsDefaultInstance();
  rankboard_data::default_instance_->InitAsDefaultInstance();
  ladder_record::default_instance_->InitAsDefaultInstance();
  ladder_opponent::default_instance_->InitAsDefaultInstance();
  ladder_rank_reward::default_instance_->InitAsDefaultInstance();
  draw_rank_reward::default_instance_->InitAsDefaultInstance();
  buy_battle_chance::default_instance_->InitAsDefaultInstance();
  set_name_reply::default_instance_->InitAsDefaultInstance();
  set_avatar_reply::default_instance_->InitAsDefaultInstance();
  query_data_reply::default_instance_->InitAsDefaultInstance();
  midas_acquire::default_instance_->InitAsDefaultInstance();
  midas_reply::default_instance_->InitAsDefaultInstance();
  open_shop_reply::default_instance_->InitAsDefaultInstance();
  charge_reply::default_instance_->InitAsDefaultInstance();
  notify_msg::default_instance_->InitAsDefaultInstance();
  ladder_notify::default_instance_->InitAsDefaultInstance();
  tbc_reply::default_instance_->InitAsDefaultInstance();
  tbc_self_hero::default_instance_->InitAsDefaultInstance();
  tbc_oppo_hero::default_instance_->InitAsDefaultInstance();
  tbc_reward::default_instance_->InitAsDefaultInstance();
  tbc_stage::default_instance_->InitAsDefaultInstance();
  tbc_info::default_instance_->InitAsDefaultInstance();
  tbc_open_panel::default_instance_->InitAsDefaultInstance();
  tbc_query_oppo::default_instance_->InitAsDefaultInstance();
  tbc_start_battle::default_instance_->InitAsDefaultInstance();
  tbc_end_battle::default_instance_->InitAsDefaultInstance();
  tbc_reset::default_instance_->InitAsDefaultInstance();
  tbc_draw_reward::default_instance_->InitAsDefaultInstance();
  get_maillist_reply::default_instance_->InitAsDefaultInstance();
  sys_mail::default_instance_->InitAsDefaultInstance();
  mail_content::default_instance_->InitAsDefaultInstance();
  plain_mail::default_instance_->InitAsDefaultInstance();
  format_mail::default_instance_->InitAsDefaultInstance();
  mail_param::default_instance_->InitAsDefaultInstance();
  user_point::default_instance_->InitAsDefaultInstance();
  read_mail_reply::default_instance_->InitAsDefaultInstance();
  get_vip_gift_reply::default_instance_->InitAsDefaultInstance();
  chat_reply::default_instance_->InitAsDefaultInstance();
  chat_blacklist_user::default_instance_->InitAsDefaultInstance();
  chat_blacklist::default_instance_->InitAsDefaultInstance();
  chat_broad_say::default_instance_->InitAsDefaultInstance();
  chat_say::default_instance_->InitAsDefaultInstance();
  chat_fresh::default_instance_->InitAsDefaultInstance();
  chat_fetch::default_instance_->InitAsDefaultInstance();
  chat_acc::default_instance_->InitAsDefaultInstance();
  chat_content::default_instance_->InitAsDefaultInstance();
  chat_add_bl::default_instance_->InitAsDefaultInstance();
  chat_del_bl::default_instance_->InitAsDefaultInstance();
  chat::default_instance_->InitAsDefaultInstance();
  user_guild::default_instance_->InitAsDefaultInstance();
  guild_reply::default_instance_->InitAsDefaultInstance();
  guild_send_mail::default_instance_->InitAsDefaultInstance();
  guild_set_jump::default_instance_->InitAsDefaultInstance();
  guild_instance_prepare::default_instance_->InitAsDefaultInstance();
  dps_rank::default_instance_->InitAsDefaultInstance();
  dps_rank_array::default_instance_->InitAsDefaultInstance();
  guild_first_pass::default_instance_->InitAsDefaultInstance();
  guild_fast_pass::default_instance_->InitAsDefaultInstance();
  guild_stage_rank::default_instance_->InitAsDefaultInstance();
  guild_app_queue::default_instance_->InitAsDefaultInstance();
  guild_members::default_instance_->InitAsDefaultInstance();
  guild_jump::default_instance_->InitAsDefaultInstance();
  guild_items_history::default_instance_->InitAsDefaultInstance();
  guild_item_history::default_instance_->InitAsDefaultInstance();
  guild_challenger_damage::default_instance_->InitAsDefaultInstance();
  guild_instance_damage::default_instance_->InitAsDefaultInstance();
  guild_drop_give::default_instance_->InitAsDefaultInstance();
  guild_drop_item_info::default_instance_->InitAsDefaultInstance();
  guild_drop_item::default_instance_->InitAsDefaultInstance();
  guild_instance_dps::default_instance_->InitAsDefaultInstance();
  guild_drop_info::default_instance_->InitAsDefaultInstance();
  guild_instance_apply::default_instance_->InitAsDefaultInstance();
  guild_instance_info::default_instance_->InitAsDefaultInstance();
  guild_instance_start::default_instance_->InitAsDefaultInstance();
  guild_stage_hp_drop::default_instance_->InitAsDefaultInstance();
  hp_drop::default_instance_->InitAsDefaultInstance();
  guild_instance_end_down::default_instance_->InitAsDefaultInstance();
  break_history::default_instance_->InitAsDefaultInstance();
  guild_instance_open::default_instance_->InitAsDefaultInstance();
  guild_create::default_instance_->InitAsDefaultInstance();
  guild_dismiss::default_instance_->InitAsDefaultInstance();
  guild_info::default_instance_->InitAsDefaultInstance();
  guild_summary::default_instance_->InitAsDefaultInstance();
  guild_member::default_instance_->InitAsDefaultInstance();
  guild_applier::default_instance_->InitAsDefaultInstance();
  guild_list::default_instance_->InitAsDefaultInstance();
  guild_search::default_instance_->InitAsDefaultInstance();
  guild_join::default_instance_->InitAsDefaultInstance();
  guild_join_confirm::default_instance_->InitAsDefaultInstance();
  guild_leave::default_instance_->InitAsDefaultInstance();
  guild_kick::default_instance_->InitAsDefaultInstance();
  guild_set::default_instance_->InitAsDefaultInstance();
  guild_query::default_instance_->InitAsDefaultInstance();
  guild_worship::default_instance_->InitAsDefaultInstance();
  guild_set_job::default_instance_->InitAsDefaultInstance();
  guild_add_hire::default_instance_->InitAsDefaultInstance();
  guild_del_hire::default_instance_->InitAsDefaultInstance();
  guild_query_hires::default_instance_->InitAsDefaultInstance();
  guild_hire_user::default_instance_->InitAsDefaultInstance();
  hire_hero_summary::default_instance_->InitAsDefaultInstance();
  guild_hire_hero::default_instance_->InitAsDefaultInstance();
  guild_worship_req::default_instance_->InitAsDefaultInstance();
  guild_worship_withdraw::default_instance_->InitAsDefaultInstance();
  guild_qurey_hh_detail::default_instance_->InitAsDefaultInstance();
  worship_reward::default_instance_->InitAsDefaultInstance();
  activity_reward::default_instance_->InitAsDefaultInstance();
  activity_infos::default_instance_->InitAsDefaultInstance();
  activity_rewards::default_instance_->InitAsDefaultInstance();
  activity_info::default_instance_->InitAsDefaultInstance();
  cdkey_gift_reply::default_instance_->InitAsDefaultInstance();
  res_pack::default_instance_->InitAsDefaultInstance();
  ask_magicsoul_reply::default_instance_->InitAsDefaultInstance();
  important_data::default_instance_->InitAsDefaultInstance();
  monthcard::default_instance_->InitAsDefaultInstance();
  excavate_reply::default_instance_->InitAsDefaultInstance();
  revenge_excavate_reply::default_instance_->InitAsDefaultInstance();
  search_excavate_reply::default_instance_->InitAsDefaultInstance();
  query_excavate_data_reply::default_instance_->InitAsDefaultInstance();
  excavate_self_hero::default_instance_->InitAsDefaultInstance();
  excavate_cfg::default_instance_->InitAsDefaultInstance();
  excavate_team::default_instance_->InitAsDefaultInstance();
  excavate::default_instance_->InitAsDefaultInstance();
  excavate_history::default_instance_->InitAsDefaultInstance();
  query_excavate_history_reply::default_instance_->InitAsDefaultInstance();
  excavate_battle_hero::default_instance_->InitAsDefaultInstance();
  excavate_battle_team::default_instance_->InitAsDefaultInstance();
  excavate_battle::default_instance_->InitAsDefaultInstance();
  query_excavate_battle_reply::default_instance_->InitAsDefaultInstance();
  set_excavate_team_reply::default_instance_->InitAsDefaultInstance();
  excavate_start_battle_reply::default_instance_->InitAsDefaultInstance();
  excavate_end_battle_reply::default_instance_->InitAsDefaultInstance();
  draw_excav_res_reply::default_instance_->InitAsDefaultInstance();
  excavate_reward::default_instance_->InitAsDefaultInstance();
  query_excavate_def_reply::default_instance_->InitAsDefaultInstance();
  clear_excavate_battle_reply::default_instance_->InitAsDefaultInstance();
  withdraw_excavate_hero_reply::default_instance_->InitAsDefaultInstance();
  draw_excavate_def_rwd_reply::default_instance_->InitAsDefaultInstance();
  drop_excavate_reply::default_instance_->InitAsDefaultInstance();
  change_server_reply::default_instance_->InitAsDefaultInstance();
  server_info::default_instance_->InitAsDefaultInstance();
  guild_instance_query::default_instance_->InitAsDefaultInstance();
  guild_chapter::default_instance_->InitAsDefaultInstance();
  guild_instance_detail::default_instance_->InitAsDefaultInstance();
  guild_challenger::default_instance_->InitAsDefaultInstance();
  guild_instance_record::default_instance_->InitAsDefaultInstance();
  guild_instance_summary::default_instance_->InitAsDefaultInstance();
  guild_instance_item::default_instance_->InitAsDefaultInstance();
  guild_instance_drop::default_instance_->InitAsDefaultInstance();
  splitable_hero::default_instance_->InitAsDefaultInstance();
  query_split_data_reply::default_instance_->InitAsDefaultInstance();
  query_split_return_reply::default_instance_->InitAsDefaultInstance();
  split_hero_reply::default_instance_->InitAsDefaultInstance();
  worldcup_reply::default_instance_->InitAsDefaultInstance();
  worldcup_reward::default_instance_->InitAsDefaultInstance();
  worldcup_comp::default_instance_->InitAsDefaultInstance();
  worldcup_query_reply::default_instance_->InitAsDefaultInstance();
  worldcup_submit_reply::default_instance_->InitAsDefaultInstance();
  battle_check_fail::default_instance_->InitAsDefaultInstance();
  super_link::default_instance_->InitAsDefaultInstance();
  ranklist_item::default_instance_->InitAsDefaultInstance();
  query_ranklist_reply::default_instance_->InitAsDefaultInstance();
  request_guild_log_reply::default_instance_->InitAsDefaultInstance();
  guild_log::default_instance_->InitAsDefaultInstance();
  guild_log_content::default_instance_->InitAsDefaultInstance();
  client_update_version::default_instance_->InitAsDefaultInstance();
  query_act_stage_reply::default_instance_->InitAsDefaultInstance();
  fb_attention_reply::default_instance_->InitAsDefaultInstance();
  continue_pay_reply::default_instance_->InitAsDefaultInstance();
  recharge_rebate_reply::default_instance_->InitAsDefaultInstance();
  every_day_happy_reply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cb_2eproto {
  StaticDescriptorInitializer_cb_2eproto() {
    protobuf_AddDesc_cb_2eproto();
  }
} static_descriptor_initializer_cb_2eproto_;
const ::google::protobuf::EnumDescriptor* result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return result_descriptor_;
}
bool result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* battle_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_result_descriptor_;
}
bool battle_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* money_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return money_type_descriptor_;
}
bool money_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* hero_status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_status_descriptor_;
}
bool hero_status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* server_opt_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return server_opt_result_descriptor_;
}
bool server_opt_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* hire_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hire_result_descriptor_;
}
bool hire_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* hire_from_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hire_from_descriptor_;
}
bool hire_from_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* guild_join_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_join_t_descriptor_;
}
bool guild_join_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* guild_job_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_job_t_descriptor_;
}
bool guild_job_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* chat_channel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_channel_descriptor_;
}
bool chat_channel_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Hello::kVersionFieldNumber;
const int Hello::kExtraDataFieldNumber;
#endif  // !_MSC_VER

Hello::Hello()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.Hello)
}

void Hello::InitAsDefaultInstance() {
}

Hello::Hello(const Hello& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.Hello)
}

void Hello::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0u;
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hello::~Hello() {
  // @@protoc_insertion_point(destructor:client_baseserver.Hello)
  SharedDtor();
}

void Hello::SharedDtor() {
  if (extradata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void Hello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hello_descriptor_;
}

const Hello& Hello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

Hello* Hello::default_instance_ = NULL;

Hello* Hello::New() const {
  return new Hello;
}

void Hello::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    version_ = 0u;
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.Hello)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_extraData;
        break;
      }

      // optional string extraData = 2;
      case 2: {
        if (tag == 18) {
         parse_extraData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extradata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.Hello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.Hello)
  return false;
#undef DO_
}

void Hello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.Hello)
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional string extraData = 2;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extradata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.Hello)
}

::google::protobuf::uint8* Hello::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.Hello)
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional string extraData = 2;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extradata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.Hello)
  return target;
}

int Hello::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional string extraData = 2;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hello::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hello* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hello*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hello::MergeFrom(const Hello& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hello::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hello::CopyFrom(const Hello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hello::IsInitialized() const {

  return true;
}

void Hello::Swap(Hello* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hello_descriptor_;
  metadata.reflection = Hello_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HelloCB::kResultFieldNumber;
const int HelloCB::kVersionFieldNumber;
const int HelloCB::kExtraDataFieldNumber;
#endif  // !_MSC_VER

HelloCB::HelloCB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.HelloCB)
}

void HelloCB::InitAsDefaultInstance() {
}

HelloCB::HelloCB(const HelloCB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.HelloCB)
}

void HelloCB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0u;
  version_ = 0u;
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelloCB::~HelloCB() {
  // @@protoc_insertion_point(destructor:client_baseserver.HelloCB)
  SharedDtor();
}

void HelloCB::SharedDtor() {
  if (extradata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void HelloCB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelloCB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelloCB_descriptor_;
}

const HelloCB& HelloCB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

HelloCB* HelloCB::default_instance_ = NULL;

HelloCB* HelloCB::New() const {
  return new HelloCB;
}

void HelloCB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HelloCB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(result_, version_);
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extradata_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelloCB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.HelloCB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_extraData;
        break;
      }

      // optional string extraData = 3;
      case 3: {
        if (tag == 26) {
         parse_extraData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extradata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.HelloCB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.HelloCB)
  return false;
#undef DO_
}

void HelloCB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.HelloCB)
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // optional string extraData = 3;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extradata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.HelloCB)
}

::google::protobuf::uint8* HelloCB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.HelloCB)
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // optional string extraData = 3;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extradata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.HelloCB)
  return target;
}

int HelloCB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional string extraData = 3;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelloCB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelloCB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HelloCB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelloCB::MergeFrom(const HelloCB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelloCB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloCB::CopyFrom(const HelloCB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloCB::IsInitialized() const {

  return true;
}

void HelloCB::Swap(HelloCB* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(version_, other->version_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HelloCB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelloCB_descriptor_;
  metadata.reflection = HelloCB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login::kAccountFieldNumber;
const int Login::kPasswordFieldNumber;
#endif  // !_MSC_VER

Login::Login()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.Login)
}

void Login::InitAsDefaultInstance() {
}

Login::Login(const Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.Login)
}

void Login::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:client_baseserver.Login)
  SharedDtor();
}

void Login::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_descriptor_;
}

const Login& Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

Login* Login::default_instance_ = NULL;

Login* Login::New() const {
  return new Login;
}

void Login::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.Login)
  return false;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.Login)
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.Login)
}

::google::protobuf::uint8* Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.Login)
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.Login)
  return target;
}

int Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {

  return true;
}

void Login::Swap(Login* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_descriptor_;
  metadata.reflection = Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginBaseappFailed::kRetCodeFieldNumber;
#endif  // !_MSC_VER

LoginBaseappFailed::LoginBaseappFailed()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.LoginBaseappFailed)
}

void LoginBaseappFailed::InitAsDefaultInstance() {
}

LoginBaseappFailed::LoginBaseappFailed(const LoginBaseappFailed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.LoginBaseappFailed)
}

void LoginBaseappFailed::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginBaseappFailed::~LoginBaseappFailed() {
  // @@protoc_insertion_point(destructor:client_baseserver.LoginBaseappFailed)
  SharedDtor();
}

void LoginBaseappFailed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginBaseappFailed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginBaseappFailed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginBaseappFailed_descriptor_;
}

const LoginBaseappFailed& LoginBaseappFailed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

LoginBaseappFailed* LoginBaseappFailed::default_instance_ = NULL;

LoginBaseappFailed* LoginBaseappFailed::New() const {
  return new LoginBaseappFailed;
}

void LoginBaseappFailed::Clear() {
  retcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginBaseappFailed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.LoginBaseappFailed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 retCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.LoginBaseappFailed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.LoginBaseappFailed)
  return false;
#undef DO_
}

void LoginBaseappFailed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.LoginBaseappFailed)
  // optional uint32 retCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.LoginBaseappFailed)
}

::google::protobuf::uint8* LoginBaseappFailed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.LoginBaseappFailed)
  // optional uint32 retCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.LoginBaseappFailed)
  return target;
}

int LoginBaseappFailed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 retCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginBaseappFailed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginBaseappFailed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginBaseappFailed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginBaseappFailed::MergeFrom(const LoginBaseappFailed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginBaseappFailed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginBaseappFailed::CopyFrom(const LoginBaseappFailed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginBaseappFailed::IsInitialized() const {

  return true;
}

void LoginBaseappFailed::Swap(LoginBaseappFailed* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginBaseappFailed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginBaseappFailed_descriptor_;
  metadata.reflection = LoginBaseappFailed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatedProxies::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CreatedProxies::CreatedProxies()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.CreatedProxies)
}

void CreatedProxies::InitAsDefaultInstance() {
}

CreatedProxies::CreatedProxies(const CreatedProxies& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.CreatedProxies)
}

void CreatedProxies::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatedProxies::~CreatedProxies() {
  // @@protoc_insertion_point(destructor:client_baseserver.CreatedProxies)
  SharedDtor();
}

void CreatedProxies::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreatedProxies::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatedProxies::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatedProxies_descriptor_;
}

const CreatedProxies& CreatedProxies::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

CreatedProxies* CreatedProxies::default_instance_ = NULL;

CreatedProxies* CreatedProxies::New() const {
  return new CreatedProxies;
}

void CreatedProxies::Clear() {
  entityid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatedProxies::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.CreatedProxies)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entityID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entityid_)));
          set_has_entityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.CreatedProxies)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.CreatedProxies)
  return false;
#undef DO_
}

void CreatedProxies::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.CreatedProxies)
  // optional int32 entityID = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.CreatedProxies)
}

::google::protobuf::uint8* CreatedProxies::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.CreatedProxies)
  // optional int32 entityID = 1;
  if (has_entityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.CreatedProxies)
  return target;
}

int CreatedProxies::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 entityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatedProxies::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatedProxies* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatedProxies*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatedProxies::MergeFrom(const CreatedProxies& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatedProxies::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatedProxies::CopyFrom(const CreatedProxies& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatedProxies::IsInitialized() const {

  return true;
}

void CreatedProxies::Swap(CreatedProxies* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatedProxies::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatedProxies_descriptor_;
  metadata.reflection = CreatedProxies_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hire_data::kUidFieldNumber;
const int hire_data::kNameFieldNumber;
const int hire_data::kHeroFieldNumber;
#endif  // !_MSC_VER

hire_data::hire_data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.hire_data)
}

void hire_data::InitAsDefaultInstance() {
  _hero_ = const_cast< ::client_baseserver::hire_hero*>(&::client_baseserver::hire_hero::default_instance());
}

hire_data::hire_data(const hire_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.hire_data)
}

void hire_data::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _uid_ = 0u;
  _name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hire_data::~hire_data() {
  // @@protoc_insertion_point(destructor:client_baseserver.hire_data)
  SharedDtor();
}

void hire_data::SharedDtor() {
  if (_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _name_;
  }
  if (this != default_instance_) {
    delete _hero_;
  }
}

void hire_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hire_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hire_data_descriptor_;
}

const hire_data& hire_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

hire_data* hire_data::default_instance_ = NULL;

hire_data* hire_data::New() const {
  return new hire_data;
}

void hire_data::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    _uid_ = 0u;
    if (has__name()) {
      if (_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _name_->clear();
      }
    }
    if (has__hero()) {
      if (_hero_ != NULL) _hero_->::client_baseserver::hire_hero::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hire_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.hire_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_uid_)));
          set_has__uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__name;
        break;
      }

      // required string _name = 2;
      case 2: {
        if (tag == 18) {
         parse__name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_name().data(), this->_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__hero;
        break;
      }

      // required .client_baseserver.hire_hero _hero = 3;
      case 3: {
        if (tag == 26) {
         parse__hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.hire_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.hire_data)
  return false;
#undef DO_
}

void hire_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.hire_data)
  // required uint32 _uid = 1;
  if (has__uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_uid(), output);
  }

  // required string _name = 2;
  if (has__name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_name().data(), this->_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->_name(), output);
  }

  // required .client_baseserver.hire_hero _hero = 3;
  if (has__hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_hero(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.hire_data)
}

::google::protobuf::uint8* hire_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.hire_data)
  // required uint32 _uid = 1;
  if (has__uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_uid(), target);
  }

  // required string _name = 2;
  if (has__name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_name().data(), this->_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_name(), target);
  }

  // required .client_baseserver.hire_hero _hero = 3;
  if (has__hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_hero(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.hire_data)
  return target;
}

int hire_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _uid = 1;
    if (has__uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_uid());
    }

    // required string _name = 2;
    if (has__name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_name());
    }

    // required .client_baseserver.hire_hero _hero = 3;
    if (has__hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_hero());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hire_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hire_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hire_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hire_data::MergeFrom(const hire_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__uid()) {
      set__uid(from._uid());
    }
    if (from.has__name()) {
      set__name(from._name());
    }
    if (from.has__hero()) {
      mutable__hero()->::client_baseserver::hire_hero::MergeFrom(from._hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hire_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hire_data::CopyFrom(const hire_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hire_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has__hero()) {
    if (!this->_hero().IsInitialized()) return false;
  }
  return true;
}

void hire_data::Swap(hire_data* other) {
  if (other != this) {
    std::swap(_uid_, other->_uid_);
    std::swap(_name_, other->_name_);
    std::swap(_hero_, other->_hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hire_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hire_data_descriptor_;
  metadata.reflection = hire_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hire_hero::kBaseFieldNumber;
const int hire_hero::kDynaFieldNumber;
#endif  // !_MSC_VER

hire_hero::hire_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.hire_hero)
}

void hire_hero::InitAsDefaultInstance() {
  _base_ = const_cast< ::client_baseserver::hero*>(&::client_baseserver::hero::default_instance());
  _dyna_ = const_cast< ::client_baseserver::hero_dyna*>(&::client_baseserver::hero_dyna::default_instance());
}

hire_hero::hire_hero(const hire_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.hire_hero)
}

void hire_hero::SharedCtor() {
  _cached_size_ = 0;
  _base_ = NULL;
  _dyna_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hire_hero::~hire_hero() {
  // @@protoc_insertion_point(destructor:client_baseserver.hire_hero)
  SharedDtor();
}

void hire_hero::SharedDtor() {
  if (this != default_instance_) {
    delete _base_;
    delete _dyna_;
  }
}

void hire_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hire_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hire_hero_descriptor_;
}

const hire_hero& hire_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

hire_hero* hire_hero::default_instance_ = NULL;

hire_hero* hire_hero::New() const {
  return new hire_hero;
}

void hire_hero::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has__base()) {
      if (_base_ != NULL) _base_->::client_baseserver::hero::Clear();
    }
    if (has__dyna()) {
      if (_dyna_ != NULL) _dyna_->::client_baseserver::hero_dyna::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hire_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.hire_hero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.hero _base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__dyna;
        break;
      }

      // required .client_baseserver.hero_dyna _dyna = 2;
      case 2: {
        if (tag == 18) {
         parse__dyna:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__dyna()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.hire_hero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.hire_hero)
  return false;
#undef DO_
}

void hire_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.hire_hero)
  // required .client_baseserver.hero _base = 1;
  if (has__base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_base(), output);
  }

  // required .client_baseserver.hero_dyna _dyna = 2;
  if (has__dyna()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_dyna(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.hire_hero)
}

::google::protobuf::uint8* hire_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.hire_hero)
  // required .client_baseserver.hero _base = 1;
  if (has__base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_base(), target);
  }

  // required .client_baseserver.hero_dyna _dyna = 2;
  if (has__dyna()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_dyna(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.hire_hero)
  return target;
}

int hire_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.hero _base = 1;
    if (has__base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_base());
    }

    // required .client_baseserver.hero_dyna _dyna = 2;
    if (has__dyna()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_dyna());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hire_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hire_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hire_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hire_hero::MergeFrom(const hire_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__base()) {
      mutable__base()->::client_baseserver::hero::MergeFrom(from._base());
    }
    if (from.has__dyna()) {
      mutable__dyna()->::client_baseserver::hero_dyna::MergeFrom(from._dyna());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hire_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hire_hero::CopyFrom(const hire_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hire_hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has__base()) {
    if (!this->_base().IsInitialized()) return false;
  }
  if (has__dyna()) {
    if (!this->_dyna().IsInitialized()) return false;
  }
  return true;
}

void hire_hero::Swap(hire_hero* other) {
  if (other != this) {
    std::swap(_base_, other->_base_);
    std::swap(_dyna_, other->_dyna_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hire_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hire_hero_descriptor_;
  metadata.reflection = hire_hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int down_msg::kLoginReplyFieldNumber;
const int down_msg::kResetFieldNumber;
const int down_msg::kEnterStageReplyFieldNumber;
const int down_msg::kExitStageReplyFieldNumber;
const int down_msg::kHeroUpgradeReplyFieldNumber;
const int down_msg::kEquipSynthesisReplyFieldNumber;
const int down_msg::kWearEquipReplyFieldNumber;
const int down_msg::kConsumeItemReplyFieldNumber;
const int down_msg::kShopRefreshReplyFieldNumber;
const int down_msg::kShopConsumeReplyFieldNumber;
const int down_msg::kSkillLevelupReplyFieldNumber;
const int down_msg::kSellItemReplyFieldNumber;
const int down_msg::kFragmentComposeReplyFieldNumber;
const int down_msg::kHeroEquipUpgradeReplyFieldNumber;
const int down_msg::kTriggerTaskReplyFieldNumber;
const int down_msg::kRequireRewardsReplyFieldNumber;
const int down_msg::kTriggerJobReplyFieldNumber;
const int down_msg::kJobRewardsReplyFieldNumber;
const int down_msg::kResetEliteReplyFieldNumber;
const int down_msg::kSweepStageReplyFieldNumber;
const int down_msg::kTavernDrawReplyFieldNumber;
const int down_msg::kSyncSkillStrenReplyFieldNumber;
const int down_msg::kQueryDataReplyFieldNumber;
const int down_msg::kHeroEvolveReplyFieldNumber;
const int down_msg::kSyncVitalityReplyFieldNumber;
const int down_msg::kUserCheckFieldNumber;
const int down_msg::kTutorialReplyFieldNumber;
const int down_msg::kErrorInfoFieldNumber;
const int down_msg::kLadderReplyFieldNumber;
const int down_msg::kSetNameReplyFieldNumber;
const int down_msg::kMidasReplyFieldNumber;
const int down_msg::kOpenShopReplyFieldNumber;
const int down_msg::kChargeReplyFieldNumber;
const int down_msg::kSdkLoginReplyFieldNumber;
const int down_msg::kSetAvatarReplyFieldNumber;
const int down_msg::kNotifyMsgFieldNumber;
const int down_msg::kAskDailyLoginReplyFieldNumber;
const int down_msg::kTbcReplyFieldNumber;
const int down_msg::kGetMaillistReplyFieldNumber;
const int down_msg::kReadMailReplyFieldNumber;
const int down_msg::kSvrTimeFieldNumber;
const int down_msg::kGetVipGiftReplyFieldNumber;
const int down_msg::kChatReplyFieldNumber;
const int down_msg::kCdkeyGiftReplyFieldNumber;
const int down_msg::kGuildReplyFieldNumber;
const int down_msg::kAskMagicsoulReplyFieldNumber;
const int down_msg::kAskActivityInfoReplyFieldNumber;
const int down_msg::kExcavateReplyFieldNumber;
const int down_msg::kSystemSettingReplyFieldNumber;
const int down_msg::kQuerySplitDataReplyFieldNumber;
const int down_msg::kQuerySplitReturnReplyFieldNumber;
const int down_msg::kSplitHeroReplyFieldNumber;
const int down_msg::kWorldcupReplyFieldNumber;
const int down_msg::kBattleCheckFailFieldNumber;
const int down_msg::kQueryReplayFieldNumber;
const int down_msg::kSuperLinkFieldNumber;
const int down_msg::kQueryRanklistReplyFieldNumber;
const int down_msg::kRequestGuildLogReplyFieldNumber;
const int down_msg::kChangeServerReplyFieldNumber;
const int down_msg::kActivityInfoReplyFieldNumber;
const int down_msg::kActivityLottoInfoReplyFieldNumber;
const int down_msg::kActivityLottoRewardReplyFieldNumber;
const int down_msg::kActivityBigpackageInfoReplyFieldNumber;
const int down_msg::kActivityBigpackageRewardReplyFieldNumber;
const int down_msg::kActivityBigpackageResetReplyFieldNumber;
const int down_msg::kFbAttentionReplyFieldNumber;
const int down_msg::kContinuePayReplyFieldNumber;
const int down_msg::kRechargeRebateReplyFieldNumber;
const int down_msg::kEveryDayHappyReplyFieldNumber;
#endif  // !_MSC_VER

down_msg::down_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.down_msg)
}

void down_msg::InitAsDefaultInstance() {
  _login_reply_ = const_cast< ::client_baseserver::login_reply*>(&::client_baseserver::login_reply::default_instance());
  _reset_ = const_cast< ::client_baseserver::reset*>(&::client_baseserver::reset::default_instance());
  _enter_stage_reply_ = const_cast< ::client_baseserver::enter_stage_reply*>(&::client_baseserver::enter_stage_reply::default_instance());
  _exit_stage_reply_ = const_cast< ::client_baseserver::exit_stage_reply*>(&::client_baseserver::exit_stage_reply::default_instance());
  _hero_upgrade_reply_ = const_cast< ::client_baseserver::hero_upgrade_reply*>(&::client_baseserver::hero_upgrade_reply::default_instance());
  _equip_synthesis_reply_ = const_cast< ::client_baseserver::equip_synthesis_reply*>(&::client_baseserver::equip_synthesis_reply::default_instance());
  _wear_equip_reply_ = const_cast< ::client_baseserver::wear_equip_reply*>(&::client_baseserver::wear_equip_reply::default_instance());
  _consume_item_reply_ = const_cast< ::client_baseserver::consume_item_reply*>(&::client_baseserver::consume_item_reply::default_instance());
  _shop_refresh_reply_ = const_cast< ::client_baseserver::user_shop*>(&::client_baseserver::user_shop::default_instance());
  _shop_consume_reply_ = const_cast< ::client_baseserver::shop_consume_reply*>(&::client_baseserver::shop_consume_reply::default_instance());
  _skill_levelup_reply_ = const_cast< ::client_baseserver::skill_levelup_reply*>(&::client_baseserver::skill_levelup_reply::default_instance());
  _sell_item_reply_ = const_cast< ::client_baseserver::sell_item_reply*>(&::client_baseserver::sell_item_reply::default_instance());
  _fragment_compose_reply_ = const_cast< ::client_baseserver::fragment_compose_reply*>(&::client_baseserver::fragment_compose_reply::default_instance());
  _hero_equip_upgrade_reply_ = const_cast< ::client_baseserver::hero_equip_upgrade_reply*>(&::client_baseserver::hero_equip_upgrade_reply::default_instance());
  _trigger_task_reply_ = const_cast< ::client_baseserver::trigger_task_reply*>(&::client_baseserver::trigger_task_reply::default_instance());
  _require_rewards_reply_ = const_cast< ::client_baseserver::require_rewards_reply*>(&::client_baseserver::require_rewards_reply::default_instance());
  _trigger_job_reply_ = const_cast< ::client_baseserver::trigger_job_reply*>(&::client_baseserver::trigger_job_reply::default_instance());
  _job_rewards_reply_ = const_cast< ::client_baseserver::job_rewards_reply*>(&::client_baseserver::job_rewards_reply::default_instance());
  _reset_elite_reply_ = const_cast< ::client_baseserver::reset_elite_reply*>(&::client_baseserver::reset_elite_reply::default_instance());
  _sweep_stage_reply_ = const_cast< ::client_baseserver::sweep_stage_reply*>(&::client_baseserver::sweep_stage_reply::default_instance());
  _tavern_draw_reply_ = const_cast< ::client_baseserver::tavern_draw_reply*>(&::client_baseserver::tavern_draw_reply::default_instance());
  _sync_skill_stren_reply_ = const_cast< ::client_baseserver::sync_skill_stren_reply*>(&::client_baseserver::sync_skill_stren_reply::default_instance());
  _query_data_reply_ = const_cast< ::client_baseserver::query_data_reply*>(&::client_baseserver::query_data_reply::default_instance());
  _hero_evolve_reply_ = const_cast< ::client_baseserver::hero_evolve_reply*>(&::client_baseserver::hero_evolve_reply::default_instance());
  _sync_vitality_reply_ = const_cast< ::client_baseserver::sync_vitality_reply*>(&::client_baseserver::sync_vitality_reply::default_instance());
  _user_check_ = const_cast< ::client_baseserver::user_check*>(&::client_baseserver::user_check::default_instance());
  _tutorial_reply_ = const_cast< ::client_baseserver::tutorial_reply*>(&::client_baseserver::tutorial_reply::default_instance());
  _error_info_ = const_cast< ::client_baseserver::error_info*>(&::client_baseserver::error_info::default_instance());
  _ladder_reply_ = const_cast< ::client_baseserver::ladder_reply*>(&::client_baseserver::ladder_reply::default_instance());
  _set_name_reply_ = const_cast< ::client_baseserver::set_name_reply*>(&::client_baseserver::set_name_reply::default_instance());
  _midas_reply_ = const_cast< ::client_baseserver::midas_reply*>(&::client_baseserver::midas_reply::default_instance());
  _open_shop_reply_ = const_cast< ::client_baseserver::open_shop_reply*>(&::client_baseserver::open_shop_reply::default_instance());
  _charge_reply_ = const_cast< ::client_baseserver::charge_reply*>(&::client_baseserver::charge_reply::default_instance());
  _sdk_login_reply_ = const_cast< ::client_baseserver::sdk_login_reply*>(&::client_baseserver::sdk_login_reply::default_instance());
  _set_avatar_reply_ = const_cast< ::client_baseserver::set_avatar_reply*>(&::client_baseserver::set_avatar_reply::default_instance());
  _notify_msg_ = const_cast< ::client_baseserver::notify_msg*>(&::client_baseserver::notify_msg::default_instance());
  _ask_daily_login_reply_ = const_cast< ::client_baseserver::ask_daily_login_reply*>(&::client_baseserver::ask_daily_login_reply::default_instance());
  _tbc_reply_ = const_cast< ::client_baseserver::tbc_reply*>(&::client_baseserver::tbc_reply::default_instance());
  _get_maillist_reply_ = const_cast< ::client_baseserver::get_maillist_reply*>(&::client_baseserver::get_maillist_reply::default_instance());
  _read_mail_reply_ = const_cast< ::client_baseserver::read_mail_reply*>(&::client_baseserver::read_mail_reply::default_instance());
  _get_vip_gift_reply_ = const_cast< ::client_baseserver::get_vip_gift_reply*>(&::client_baseserver::get_vip_gift_reply::default_instance());
  _chat_reply_ = const_cast< ::client_baseserver::chat_reply*>(&::client_baseserver::chat_reply::default_instance());
  _cdkey_gift_reply_ = const_cast< ::client_baseserver::cdkey_gift_reply*>(&::client_baseserver::cdkey_gift_reply::default_instance());
  _guild_reply_ = const_cast< ::client_baseserver::guild_reply*>(&::client_baseserver::guild_reply::default_instance());
  _ask_magicsoul_reply_ = const_cast< ::client_baseserver::ask_magicsoul_reply*>(&::client_baseserver::ask_magicsoul_reply::default_instance());
  _ask_activity_info_reply_ = const_cast< ::client_baseserver::activity_infos*>(&::client_baseserver::activity_infos::default_instance());
  _excavate_reply_ = const_cast< ::client_baseserver::excavate_reply*>(&::client_baseserver::excavate_reply::default_instance());
  _system_setting_reply_ = const_cast< ::client_baseserver::system_setting_reply*>(&::client_baseserver::system_setting_reply::default_instance());
  _query_split_data_reply_ = const_cast< ::client_baseserver::query_split_data_reply*>(&::client_baseserver::query_split_data_reply::default_instance());
  _query_split_return_reply_ = const_cast< ::client_baseserver::query_split_return_reply*>(&::client_baseserver::query_split_return_reply::default_instance());
  _split_hero_reply_ = const_cast< ::client_baseserver::split_hero_reply*>(&::client_baseserver::split_hero_reply::default_instance());
  _worldcup_reply_ = const_cast< ::client_baseserver::worldcup_reply*>(&::client_baseserver::worldcup_reply::default_instance());
  _battle_check_fail_ = const_cast< ::client_baseserver::battle_check_fail*>(&::client_baseserver::battle_check_fail::default_instance());
  _query_replay_ = const_cast< ::client_baseserver::query_replay*>(&::client_baseserver::query_replay::default_instance());
  _super_link_ = const_cast< ::client_baseserver::super_link*>(&::client_baseserver::super_link::default_instance());
  _query_ranklist_reply_ = const_cast< ::client_baseserver::query_ranklist_reply*>(&::client_baseserver::query_ranklist_reply::default_instance());
  _request_guild_log_reply_ = const_cast< ::client_baseserver::request_guild_log_reply*>(&::client_baseserver::request_guild_log_reply::default_instance());
  _change_server_reply_ = const_cast< ::client_baseserver::change_server_reply*>(&::client_baseserver::change_server_reply::default_instance());
  _activity_info_reply_ = const_cast< ::client_baseserver::activity_info_reply*>(&::client_baseserver::activity_info_reply::default_instance());
  _activity_lotto_info_reply_ = const_cast< ::client_baseserver::activity_lotto_info_reply*>(&::client_baseserver::activity_lotto_info_reply::default_instance());
  _activity_lotto_reward_reply_ = const_cast< ::client_baseserver::activity_lotto_reward_reply*>(&::client_baseserver::activity_lotto_reward_reply::default_instance());
  _activity_bigpackage_info_reply_ = const_cast< ::client_baseserver::activity_bigpackage_info_reply*>(&::client_baseserver::activity_bigpackage_info_reply::default_instance());
  _activity_bigpackage_reward_reply_ = const_cast< ::client_baseserver::activity_bigpackage_reward_reply*>(&::client_baseserver::activity_bigpackage_reward_reply::default_instance());
  _activity_bigpackage_reset_reply_ = const_cast< ::client_baseserver::activity_bigpackage_reset_reply*>(&::client_baseserver::activity_bigpackage_reset_reply::default_instance());
  _fb_attention_reply_ = const_cast< ::client_baseserver::fb_attention_reply*>(&::client_baseserver::fb_attention_reply::default_instance());
  _continue_pay_reply_ = const_cast< ::client_baseserver::continue_pay_reply*>(&::client_baseserver::continue_pay_reply::default_instance());
  _recharge_rebate_reply_ = const_cast< ::client_baseserver::recharge_rebate_reply*>(&::client_baseserver::recharge_rebate_reply::default_instance());
  _every_day_happy_reply_ = const_cast< ::client_baseserver::every_day_happy_reply*>(&::client_baseserver::every_day_happy_reply::default_instance());
}

down_msg::down_msg(const down_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.down_msg)
}

void down_msg::SharedCtor() {
  _cached_size_ = 0;
  _login_reply_ = NULL;
  _reset_ = NULL;
  _enter_stage_reply_ = NULL;
  _exit_stage_reply_ = NULL;
  _hero_upgrade_reply_ = NULL;
  _equip_synthesis_reply_ = NULL;
  _wear_equip_reply_ = NULL;
  _consume_item_reply_ = NULL;
  _shop_refresh_reply_ = NULL;
  _shop_consume_reply_ = NULL;
  _skill_levelup_reply_ = NULL;
  _sell_item_reply_ = NULL;
  _fragment_compose_reply_ = NULL;
  _hero_equip_upgrade_reply_ = NULL;
  _trigger_task_reply_ = NULL;
  _require_rewards_reply_ = NULL;
  _trigger_job_reply_ = NULL;
  _job_rewards_reply_ = NULL;
  _reset_elite_reply_ = NULL;
  _sweep_stage_reply_ = NULL;
  _tavern_draw_reply_ = NULL;
  _sync_skill_stren_reply_ = NULL;
  _query_data_reply_ = NULL;
  _hero_evolve_reply_ = NULL;
  _sync_vitality_reply_ = NULL;
  _user_check_ = NULL;
  _tutorial_reply_ = NULL;
  _error_info_ = NULL;
  _ladder_reply_ = NULL;
  _set_name_reply_ = NULL;
  _midas_reply_ = NULL;
  _open_shop_reply_ = NULL;
  _charge_reply_ = NULL;
  _sdk_login_reply_ = NULL;
  _set_avatar_reply_ = NULL;
  _notify_msg_ = NULL;
  _ask_daily_login_reply_ = NULL;
  _tbc_reply_ = NULL;
  _get_maillist_reply_ = NULL;
  _read_mail_reply_ = NULL;
  _svr_time_ = 0u;
  _get_vip_gift_reply_ = NULL;
  _chat_reply_ = NULL;
  _cdkey_gift_reply_ = NULL;
  _guild_reply_ = NULL;
  _ask_magicsoul_reply_ = NULL;
  _ask_activity_info_reply_ = NULL;
  _excavate_reply_ = NULL;
  _system_setting_reply_ = NULL;
  _query_split_data_reply_ = NULL;
  _query_split_return_reply_ = NULL;
  _split_hero_reply_ = NULL;
  _worldcup_reply_ = NULL;
  _battle_check_fail_ = NULL;
  _query_replay_ = NULL;
  _super_link_ = NULL;
  _query_ranklist_reply_ = NULL;
  _request_guild_log_reply_ = NULL;
  _change_server_reply_ = NULL;
  _activity_info_reply_ = NULL;
  _activity_lotto_info_reply_ = NULL;
  _activity_lotto_reward_reply_ = NULL;
  _activity_bigpackage_info_reply_ = NULL;
  _activity_bigpackage_reward_reply_ = NULL;
  _activity_bigpackage_reset_reply_ = NULL;
  _fb_attention_reply_ = NULL;
  _continue_pay_reply_ = NULL;
  _recharge_rebate_reply_ = NULL;
  _every_day_happy_reply_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

down_msg::~down_msg() {
  // @@protoc_insertion_point(destructor:client_baseserver.down_msg)
  SharedDtor();
}

void down_msg::SharedDtor() {
  if (this != default_instance_) {
    delete _login_reply_;
    delete _reset_;
    delete _enter_stage_reply_;
    delete _exit_stage_reply_;
    delete _hero_upgrade_reply_;
    delete _equip_synthesis_reply_;
    delete _wear_equip_reply_;
    delete _consume_item_reply_;
    delete _shop_refresh_reply_;
    delete _shop_consume_reply_;
    delete _skill_levelup_reply_;
    delete _sell_item_reply_;
    delete _fragment_compose_reply_;
    delete _hero_equip_upgrade_reply_;
    delete _trigger_task_reply_;
    delete _require_rewards_reply_;
    delete _trigger_job_reply_;
    delete _job_rewards_reply_;
    delete _reset_elite_reply_;
    delete _sweep_stage_reply_;
    delete _tavern_draw_reply_;
    delete _sync_skill_stren_reply_;
    delete _query_data_reply_;
    delete _hero_evolve_reply_;
    delete _sync_vitality_reply_;
    delete _user_check_;
    delete _tutorial_reply_;
    delete _error_info_;
    delete _ladder_reply_;
    delete _set_name_reply_;
    delete _midas_reply_;
    delete _open_shop_reply_;
    delete _charge_reply_;
    delete _sdk_login_reply_;
    delete _set_avatar_reply_;
    delete _notify_msg_;
    delete _ask_daily_login_reply_;
    delete _tbc_reply_;
    delete _get_maillist_reply_;
    delete _read_mail_reply_;
    delete _get_vip_gift_reply_;
    delete _chat_reply_;
    delete _cdkey_gift_reply_;
    delete _guild_reply_;
    delete _ask_magicsoul_reply_;
    delete _ask_activity_info_reply_;
    delete _excavate_reply_;
    delete _system_setting_reply_;
    delete _query_split_data_reply_;
    delete _query_split_return_reply_;
    delete _split_hero_reply_;
    delete _worldcup_reply_;
    delete _battle_check_fail_;
    delete _query_replay_;
    delete _super_link_;
    delete _query_ranklist_reply_;
    delete _request_guild_log_reply_;
    delete _change_server_reply_;
    delete _activity_info_reply_;
    delete _activity_lotto_info_reply_;
    delete _activity_lotto_reward_reply_;
    delete _activity_bigpackage_info_reply_;
    delete _activity_bigpackage_reward_reply_;
    delete _activity_bigpackage_reset_reply_;
    delete _fb_attention_reply_;
    delete _continue_pay_reply_;
    delete _recharge_rebate_reply_;
    delete _every_day_happy_reply_;
  }
}

void down_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* down_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return down_msg_descriptor_;
}

const down_msg& down_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

down_msg* down_msg::default_instance_ = NULL;

down_msg* down_msg::New() const {
  return new down_msg;
}

void down_msg::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has__login_reply()) {
      if (_login_reply_ != NULL) _login_reply_->::client_baseserver::login_reply::Clear();
    }
    if (has__reset()) {
      if (_reset_ != NULL) _reset_->::client_baseserver::reset::Clear();
    }
    if (has__enter_stage_reply()) {
      if (_enter_stage_reply_ != NULL) _enter_stage_reply_->::client_baseserver::enter_stage_reply::Clear();
    }
    if (has__exit_stage_reply()) {
      if (_exit_stage_reply_ != NULL) _exit_stage_reply_->::client_baseserver::exit_stage_reply::Clear();
    }
    if (has__hero_upgrade_reply()) {
      if (_hero_upgrade_reply_ != NULL) _hero_upgrade_reply_->::client_baseserver::hero_upgrade_reply::Clear();
    }
    if (has__equip_synthesis_reply()) {
      if (_equip_synthesis_reply_ != NULL) _equip_synthesis_reply_->::client_baseserver::equip_synthesis_reply::Clear();
    }
    if (has__wear_equip_reply()) {
      if (_wear_equip_reply_ != NULL) _wear_equip_reply_->::client_baseserver::wear_equip_reply::Clear();
    }
    if (has__consume_item_reply()) {
      if (_consume_item_reply_ != NULL) _consume_item_reply_->::client_baseserver::consume_item_reply::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has__shop_refresh_reply()) {
      if (_shop_refresh_reply_ != NULL) _shop_refresh_reply_->::client_baseserver::user_shop::Clear();
    }
    if (has__shop_consume_reply()) {
      if (_shop_consume_reply_ != NULL) _shop_consume_reply_->::client_baseserver::shop_consume_reply::Clear();
    }
    if (has__skill_levelup_reply()) {
      if (_skill_levelup_reply_ != NULL) _skill_levelup_reply_->::client_baseserver::skill_levelup_reply::Clear();
    }
    if (has__sell_item_reply()) {
      if (_sell_item_reply_ != NULL) _sell_item_reply_->::client_baseserver::sell_item_reply::Clear();
    }
    if (has__fragment_compose_reply()) {
      if (_fragment_compose_reply_ != NULL) _fragment_compose_reply_->::client_baseserver::fragment_compose_reply::Clear();
    }
    if (has__hero_equip_upgrade_reply()) {
      if (_hero_equip_upgrade_reply_ != NULL) _hero_equip_upgrade_reply_->::client_baseserver::hero_equip_upgrade_reply::Clear();
    }
    if (has__trigger_task_reply()) {
      if (_trigger_task_reply_ != NULL) _trigger_task_reply_->::client_baseserver::trigger_task_reply::Clear();
    }
    if (has__require_rewards_reply()) {
      if (_require_rewards_reply_ != NULL) _require_rewards_reply_->::client_baseserver::require_rewards_reply::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has__trigger_job_reply()) {
      if (_trigger_job_reply_ != NULL) _trigger_job_reply_->::client_baseserver::trigger_job_reply::Clear();
    }
    if (has__job_rewards_reply()) {
      if (_job_rewards_reply_ != NULL) _job_rewards_reply_->::client_baseserver::job_rewards_reply::Clear();
    }
    if (has__reset_elite_reply()) {
      if (_reset_elite_reply_ != NULL) _reset_elite_reply_->::client_baseserver::reset_elite_reply::Clear();
    }
    if (has__sweep_stage_reply()) {
      if (_sweep_stage_reply_ != NULL) _sweep_stage_reply_->::client_baseserver::sweep_stage_reply::Clear();
    }
    if (has__tavern_draw_reply()) {
      if (_tavern_draw_reply_ != NULL) _tavern_draw_reply_->::client_baseserver::tavern_draw_reply::Clear();
    }
    if (has__sync_skill_stren_reply()) {
      if (_sync_skill_stren_reply_ != NULL) _sync_skill_stren_reply_->::client_baseserver::sync_skill_stren_reply::Clear();
    }
    if (has__query_data_reply()) {
      if (_query_data_reply_ != NULL) _query_data_reply_->::client_baseserver::query_data_reply::Clear();
    }
    if (has__hero_evolve_reply()) {
      if (_hero_evolve_reply_ != NULL) _hero_evolve_reply_->::client_baseserver::hero_evolve_reply::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    if (has__sync_vitality_reply()) {
      if (_sync_vitality_reply_ != NULL) _sync_vitality_reply_->::client_baseserver::sync_vitality_reply::Clear();
    }
    if (has__user_check()) {
      if (_user_check_ != NULL) _user_check_->::client_baseserver::user_check::Clear();
    }
    if (has__tutorial_reply()) {
      if (_tutorial_reply_ != NULL) _tutorial_reply_->::client_baseserver::tutorial_reply::Clear();
    }
    if (has__error_info()) {
      if (_error_info_ != NULL) _error_info_->::client_baseserver::error_info::Clear();
    }
    if (has__ladder_reply()) {
      if (_ladder_reply_ != NULL) _ladder_reply_->::client_baseserver::ladder_reply::Clear();
    }
    if (has__set_name_reply()) {
      if (_set_name_reply_ != NULL) _set_name_reply_->::client_baseserver::set_name_reply::Clear();
    }
    if (has__midas_reply()) {
      if (_midas_reply_ != NULL) _midas_reply_->::client_baseserver::midas_reply::Clear();
    }
    if (has__open_shop_reply()) {
      if (_open_shop_reply_ != NULL) _open_shop_reply_->::client_baseserver::open_shop_reply::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 255) {
    if (has__charge_reply()) {
      if (_charge_reply_ != NULL) _charge_reply_->::client_baseserver::charge_reply::Clear();
    }
    if (has__sdk_login_reply()) {
      if (_sdk_login_reply_ != NULL) _sdk_login_reply_->::client_baseserver::sdk_login_reply::Clear();
    }
    if (has__set_avatar_reply()) {
      if (_set_avatar_reply_ != NULL) _set_avatar_reply_->::client_baseserver::set_avatar_reply::Clear();
    }
    if (has__notify_msg()) {
      if (_notify_msg_ != NULL) _notify_msg_->::client_baseserver::notify_msg::Clear();
    }
    if (has__ask_daily_login_reply()) {
      if (_ask_daily_login_reply_ != NULL) _ask_daily_login_reply_->::client_baseserver::ask_daily_login_reply::Clear();
    }
    if (has__tbc_reply()) {
      if (_tbc_reply_ != NULL) _tbc_reply_->::client_baseserver::tbc_reply::Clear();
    }
    if (has__get_maillist_reply()) {
      if (_get_maillist_reply_ != NULL) _get_maillist_reply_->::client_baseserver::get_maillist_reply::Clear();
    }
    if (has__read_mail_reply()) {
      if (_read_mail_reply_ != NULL) _read_mail_reply_->::client_baseserver::read_mail_reply::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 65280) {
    _svr_time_ = 0u;
    if (has__get_vip_gift_reply()) {
      if (_get_vip_gift_reply_ != NULL) _get_vip_gift_reply_->::client_baseserver::get_vip_gift_reply::Clear();
    }
    if (has__chat_reply()) {
      if (_chat_reply_ != NULL) _chat_reply_->::client_baseserver::chat_reply::Clear();
    }
    if (has__cdkey_gift_reply()) {
      if (_cdkey_gift_reply_ != NULL) _cdkey_gift_reply_->::client_baseserver::cdkey_gift_reply::Clear();
    }
    if (has__guild_reply()) {
      if (_guild_reply_ != NULL) _guild_reply_->::client_baseserver::guild_reply::Clear();
    }
    if (has__ask_magicsoul_reply()) {
      if (_ask_magicsoul_reply_ != NULL) _ask_magicsoul_reply_->::client_baseserver::ask_magicsoul_reply::Clear();
    }
    if (has__ask_activity_info_reply()) {
      if (_ask_activity_info_reply_ != NULL) _ask_activity_info_reply_->::client_baseserver::activity_infos::Clear();
    }
    if (has__excavate_reply()) {
      if (_excavate_reply_ != NULL) _excavate_reply_->::client_baseserver::excavate_reply::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 16711680) {
    if (has__system_setting_reply()) {
      if (_system_setting_reply_ != NULL) _system_setting_reply_->::client_baseserver::system_setting_reply::Clear();
    }
    if (has__query_split_data_reply()) {
      if (_query_split_data_reply_ != NULL) _query_split_data_reply_->::client_baseserver::query_split_data_reply::Clear();
    }
    if (has__query_split_return_reply()) {
      if (_query_split_return_reply_ != NULL) _query_split_return_reply_->::client_baseserver::query_split_return_reply::Clear();
    }
    if (has__split_hero_reply()) {
      if (_split_hero_reply_ != NULL) _split_hero_reply_->::client_baseserver::split_hero_reply::Clear();
    }
    if (has__worldcup_reply()) {
      if (_worldcup_reply_ != NULL) _worldcup_reply_->::client_baseserver::worldcup_reply::Clear();
    }
    if (has__battle_check_fail()) {
      if (_battle_check_fail_ != NULL) _battle_check_fail_->::client_baseserver::battle_check_fail::Clear();
    }
    if (has__query_replay()) {
      if (_query_replay_ != NULL) _query_replay_->::client_baseserver::query_replay::Clear();
    }
    if (has__super_link()) {
      if (_super_link_ != NULL) _super_link_->::client_baseserver::super_link::Clear();
    }
  }
  if (_has_bits_[56 / 32] & 4278190080) {
    if (has__query_ranklist_reply()) {
      if (_query_ranklist_reply_ != NULL) _query_ranklist_reply_->::client_baseserver::query_ranklist_reply::Clear();
    }
    if (has__request_guild_log_reply()) {
      if (_request_guild_log_reply_ != NULL) _request_guild_log_reply_->::client_baseserver::request_guild_log_reply::Clear();
    }
    if (has__change_server_reply()) {
      if (_change_server_reply_ != NULL) _change_server_reply_->::client_baseserver::change_server_reply::Clear();
    }
    if (has__activity_info_reply()) {
      if (_activity_info_reply_ != NULL) _activity_info_reply_->::client_baseserver::activity_info_reply::Clear();
    }
    if (has__activity_lotto_info_reply()) {
      if (_activity_lotto_info_reply_ != NULL) _activity_lotto_info_reply_->::client_baseserver::activity_lotto_info_reply::Clear();
    }
    if (has__activity_lotto_reward_reply()) {
      if (_activity_lotto_reward_reply_ != NULL) _activity_lotto_reward_reply_->::client_baseserver::activity_lotto_reward_reply::Clear();
    }
    if (has__activity_bigpackage_info_reply()) {
      if (_activity_bigpackage_info_reply_ != NULL) _activity_bigpackage_info_reply_->::client_baseserver::activity_bigpackage_info_reply::Clear();
    }
    if (has__activity_bigpackage_reward_reply()) {
      if (_activity_bigpackage_reward_reply_ != NULL) _activity_bigpackage_reward_reply_->::client_baseserver::activity_bigpackage_reward_reply::Clear();
    }
  }
  if (_has_bits_[64 / 32] & 31) {
    if (has__activity_bigpackage_reset_reply()) {
      if (_activity_bigpackage_reset_reply_ != NULL) _activity_bigpackage_reset_reply_->::client_baseserver::activity_bigpackage_reset_reply::Clear();
    }
    if (has__fb_attention_reply()) {
      if (_fb_attention_reply_ != NULL) _fb_attention_reply_->::client_baseserver::fb_attention_reply::Clear();
    }
    if (has__continue_pay_reply()) {
      if (_continue_pay_reply_ != NULL) _continue_pay_reply_->::client_baseserver::continue_pay_reply::Clear();
    }
    if (has__recharge_rebate_reply()) {
      if (_recharge_rebate_reply_ != NULL) _recharge_rebate_reply_->::client_baseserver::recharge_rebate_reply::Clear();
    }
    if (has__every_day_happy_reply()) {
      if (_every_day_happy_reply_ != NULL) _every_day_happy_reply_->::client_baseserver::every_day_happy_reply::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool down_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.down_msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_baseserver.login_reply _login_reply = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__login_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__reset;
        break;
      }

      // optional .client_baseserver.reset _reset = 2;
      case 2: {
        if (tag == 18) {
         parse__reset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__reset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__enter_stage_reply;
        break;
      }

      // optional .client_baseserver.enter_stage_reply _enter_stage_reply = 3;
      case 3: {
        if (tag == 26) {
         parse__enter_stage_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__enter_stage_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__exit_stage_reply;
        break;
      }

      // optional .client_baseserver.exit_stage_reply _exit_stage_reply = 4;
      case 4: {
        if (tag == 34) {
         parse__exit_stage_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__exit_stage_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse__hero_upgrade_reply;
        break;
      }

      // optional .client_baseserver.hero_upgrade_reply _hero_upgrade_reply = 5;
      case 5: {
        if (tag == 42) {
         parse__hero_upgrade_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__hero_upgrade_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse__equip_synthesis_reply;
        break;
      }

      // optional .client_baseserver.equip_synthesis_reply _equip_synthesis_reply = 6;
      case 6: {
        if (tag == 50) {
         parse__equip_synthesis_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__equip_synthesis_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse__wear_equip_reply;
        break;
      }

      // optional .client_baseserver.wear_equip_reply _wear_equip_reply = 7;
      case 7: {
        if (tag == 58) {
         parse__wear_equip_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__wear_equip_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse__consume_item_reply;
        break;
      }

      // optional .client_baseserver.consume_item_reply _consume_item_reply = 8;
      case 8: {
        if (tag == 66) {
         parse__consume_item_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__consume_item_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse__shop_refresh_reply;
        break;
      }

      // optional .client_baseserver.user_shop _shop_refresh_reply = 9;
      case 9: {
        if (tag == 74) {
         parse__shop_refresh_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__shop_refresh_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse__shop_consume_reply;
        break;
      }

      // optional .client_baseserver.shop_consume_reply _shop_consume_reply = 10;
      case 10: {
        if (tag == 82) {
         parse__shop_consume_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__shop_consume_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse__skill_levelup_reply;
        break;
      }

      // optional .client_baseserver.skill_levelup_reply _skill_levelup_reply = 11;
      case 11: {
        if (tag == 90) {
         parse__skill_levelup_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__skill_levelup_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse__sell_item_reply;
        break;
      }

      // optional .client_baseserver.sell_item_reply _sell_item_reply = 12;
      case 12: {
        if (tag == 98) {
         parse__sell_item_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__sell_item_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse__fragment_compose_reply;
        break;
      }

      // optional .client_baseserver.fragment_compose_reply _fragment_compose_reply = 13;
      case 13: {
        if (tag == 106) {
         parse__fragment_compose_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__fragment_compose_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse__hero_equip_upgrade_reply;
        break;
      }

      // optional .client_baseserver.hero_equip_upgrade_reply _hero_equip_upgrade_reply = 14;
      case 14: {
        if (tag == 114) {
         parse__hero_equip_upgrade_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__hero_equip_upgrade_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse__trigger_task_reply;
        break;
      }

      // optional .client_baseserver.trigger_task_reply _trigger_task_reply = 15;
      case 15: {
        if (tag == 122) {
         parse__trigger_task_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__trigger_task_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse__require_rewards_reply;
        break;
      }

      // optional .client_baseserver.require_rewards_reply _require_rewards_reply = 16;
      case 16: {
        if (tag == 130) {
         parse__require_rewards_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__require_rewards_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse__trigger_job_reply;
        break;
      }

      // optional .client_baseserver.trigger_job_reply _trigger_job_reply = 17;
      case 17: {
        if (tag == 138) {
         parse__trigger_job_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__trigger_job_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse__job_rewards_reply;
        break;
      }

      // optional .client_baseserver.job_rewards_reply _job_rewards_reply = 18;
      case 18: {
        if (tag == 146) {
         parse__job_rewards_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__job_rewards_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse__reset_elite_reply;
        break;
      }

      // optional .client_baseserver.reset_elite_reply _reset_elite_reply = 19;
      case 19: {
        if (tag == 154) {
         parse__reset_elite_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__reset_elite_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse__sweep_stage_reply;
        break;
      }

      // optional .client_baseserver.sweep_stage_reply _sweep_stage_reply = 20;
      case 20: {
        if (tag == 162) {
         parse__sweep_stage_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__sweep_stage_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse__tavern_draw_reply;
        break;
      }

      // optional .client_baseserver.tavern_draw_reply _tavern_draw_reply = 21;
      case 21: {
        if (tag == 170) {
         parse__tavern_draw_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__tavern_draw_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse__sync_skill_stren_reply;
        break;
      }

      // optional .client_baseserver.sync_skill_stren_reply _sync_skill_stren_reply = 22;
      case 22: {
        if (tag == 178) {
         parse__sync_skill_stren_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__sync_skill_stren_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse__query_data_reply;
        break;
      }

      // optional .client_baseserver.query_data_reply _query_data_reply = 23;
      case 23: {
        if (tag == 186) {
         parse__query_data_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_data_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse__hero_evolve_reply;
        break;
      }

      // optional .client_baseserver.hero_evolve_reply _hero_evolve_reply = 24;
      case 24: {
        if (tag == 194) {
         parse__hero_evolve_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__hero_evolve_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse__sync_vitality_reply;
        break;
      }

      // optional .client_baseserver.sync_vitality_reply _sync_vitality_reply = 25;
      case 25: {
        if (tag == 202) {
         parse__sync_vitality_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__sync_vitality_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse__user_check;
        break;
      }

      // optional .client_baseserver.user_check _user_check = 26;
      case 26: {
        if (tag == 210) {
         parse__user_check:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__user_check()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse__tutorial_reply;
        break;
      }

      // optional .client_baseserver.tutorial_reply _tutorial_reply = 27;
      case 27: {
        if (tag == 218) {
         parse__tutorial_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__tutorial_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse__error_info;
        break;
      }

      // optional .client_baseserver.error_info _error_info = 28;
      case 28: {
        if (tag == 226) {
         parse__error_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__error_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse__ladder_reply;
        break;
      }

      // optional .client_baseserver.ladder_reply _ladder_reply = 29;
      case 29: {
        if (tag == 234) {
         parse__ladder_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__ladder_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse__set_name_reply;
        break;
      }

      // optional .client_baseserver.set_name_reply _set_name_reply = 30;
      case 30: {
        if (tag == 242) {
         parse__set_name_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__set_name_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse__midas_reply;
        break;
      }

      // optional .client_baseserver.midas_reply _midas_reply = 31;
      case 31: {
        if (tag == 250) {
         parse__midas_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__midas_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse__open_shop_reply;
        break;
      }

      // optional .client_baseserver.open_shop_reply _open_shop_reply = 32;
      case 32: {
        if (tag == 258) {
         parse__open_shop_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__open_shop_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse__charge_reply;
        break;
      }

      // optional .client_baseserver.charge_reply _charge_reply = 33;
      case 33: {
        if (tag == 266) {
         parse__charge_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__charge_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse__sdk_login_reply;
        break;
      }

      // optional .client_baseserver.sdk_login_reply _sdk_login_reply = 34;
      case 34: {
        if (tag == 274) {
         parse__sdk_login_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__sdk_login_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse__set_avatar_reply;
        break;
      }

      // optional .client_baseserver.set_avatar_reply _set_avatar_reply = 35;
      case 35: {
        if (tag == 282) {
         parse__set_avatar_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__set_avatar_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse__notify_msg;
        break;
      }

      // optional .client_baseserver.notify_msg _notify_msg = 36;
      case 36: {
        if (tag == 290) {
         parse__notify_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__notify_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse__ask_daily_login_reply;
        break;
      }

      // optional .client_baseserver.ask_daily_login_reply _ask_daily_login_reply = 37;
      case 37: {
        if (tag == 298) {
         parse__ask_daily_login_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__ask_daily_login_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse__tbc_reply;
        break;
      }

      // optional .client_baseserver.tbc_reply _tbc_reply = 38;
      case 38: {
        if (tag == 306) {
         parse__tbc_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__tbc_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse__get_maillist_reply;
        break;
      }

      // optional .client_baseserver.get_maillist_reply _get_maillist_reply = 39;
      case 39: {
        if (tag == 314) {
         parse__get_maillist_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__get_maillist_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse__read_mail_reply;
        break;
      }

      // optional .client_baseserver.read_mail_reply _read_mail_reply = 40;
      case 40: {
        if (tag == 322) {
         parse__read_mail_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__read_mail_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse__svr_time;
        break;
      }

      // optional uint32 _svr_time = 41;
      case 41: {
        if (tag == 328) {
         parse__svr_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_svr_time_)));
          set_has__svr_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse__get_vip_gift_reply;
        break;
      }

      // optional .client_baseserver.get_vip_gift_reply _get_vip_gift_reply = 42;
      case 42: {
        if (tag == 338) {
         parse__get_vip_gift_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__get_vip_gift_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse__chat_reply;
        break;
      }

      // optional .client_baseserver.chat_reply _chat_reply = 43;
      case 43: {
        if (tag == 346) {
         parse__chat_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__chat_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse__cdkey_gift_reply;
        break;
      }

      // optional .client_baseserver.cdkey_gift_reply _cdkey_gift_reply = 44;
      case 44: {
        if (tag == 354) {
         parse__cdkey_gift_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__cdkey_gift_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(362)) goto parse__guild_reply;
        break;
      }

      // optional .client_baseserver.guild_reply _guild_reply = 45;
      case 45: {
        if (tag == 362) {
         parse__guild_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__guild_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse__ask_magicsoul_reply;
        break;
      }

      // optional .client_baseserver.ask_magicsoul_reply _ask_magicsoul_reply = 46;
      case 46: {
        if (tag == 370) {
         parse__ask_magicsoul_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__ask_magicsoul_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse__ask_activity_info_reply;
        break;
      }

      // optional .client_baseserver.activity_infos _ask_activity_info_reply = 47;
      case 47: {
        if (tag == 378) {
         parse__ask_activity_info_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__ask_activity_info_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse__excavate_reply;
        break;
      }

      // optional .client_baseserver.excavate_reply _excavate_reply = 48;
      case 48: {
        if (tag == 386) {
         parse__excavate_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__excavate_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(394)) goto parse__system_setting_reply;
        break;
      }

      // optional .client_baseserver.system_setting_reply _system_setting_reply = 49;
      case 49: {
        if (tag == 394) {
         parse__system_setting_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__system_setting_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse__query_split_data_reply;
        break;
      }

      // optional .client_baseserver.query_split_data_reply _query_split_data_reply = 50;
      case 50: {
        if (tag == 402) {
         parse__query_split_data_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_split_data_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse__query_split_return_reply;
        break;
      }

      // optional .client_baseserver.query_split_return_reply _query_split_return_reply = 51;
      case 51: {
        if (tag == 410) {
         parse__query_split_return_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_split_return_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse__split_hero_reply;
        break;
      }

      // optional .client_baseserver.split_hero_reply _split_hero_reply = 52;
      case 52: {
        if (tag == 418) {
         parse__split_hero_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__split_hero_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(426)) goto parse__worldcup_reply;
        break;
      }

      // optional .client_baseserver.worldcup_reply _worldcup_reply = 53;
      case 53: {
        if (tag == 426) {
         parse__worldcup_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__worldcup_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse__battle_check_fail;
        break;
      }

      // optional .client_baseserver.battle_check_fail _battle_check_fail = 54;
      case 54: {
        if (tag == 434) {
         parse__battle_check_fail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__battle_check_fail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(442)) goto parse__query_replay;
        break;
      }

      // optional .client_baseserver.query_replay _query_replay = 55;
      case 55: {
        if (tag == 442) {
         parse__query_replay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_replay()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(450)) goto parse__super_link;
        break;
      }

      // optional .client_baseserver.super_link _super_link = 56;
      case 56: {
        if (tag == 450) {
         parse__super_link:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__super_link()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(458)) goto parse__query_ranklist_reply;
        break;
      }

      // optional .client_baseserver.query_ranklist_reply _query_ranklist_reply = 57;
      case 57: {
        if (tag == 458) {
         parse__query_ranklist_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_ranklist_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(466)) goto parse__change_server_reply;
        break;
      }

      // optional .client_baseserver.change_server_reply _change_server_reply = 58;
      case 58: {
        if (tag == 466) {
         parse__change_server_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__change_server_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(474)) goto parse__activity_info_reply;
        break;
      }

      // optional .client_baseserver.activity_info_reply _activity_info_reply = 59;
      case 59: {
        if (tag == 474) {
         parse__activity_info_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__activity_info_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse__activity_lotto_info_reply;
        break;
      }

      // optional .client_baseserver.activity_lotto_info_reply _activity_lotto_info_reply = 60;
      case 60: {
        if (tag == 482) {
         parse__activity_lotto_info_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__activity_lotto_info_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(490)) goto parse__activity_lotto_reward_reply;
        break;
      }

      // optional .client_baseserver.activity_lotto_reward_reply _activity_lotto_reward_reply = 61;
      case 61: {
        if (tag == 490) {
         parse__activity_lotto_reward_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__activity_lotto_reward_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(498)) goto parse__activity_bigpackage_info_reply;
        break;
      }

      // optional .client_baseserver.activity_bigpackage_info_reply _activity_bigpackage_info_reply = 62;
      case 62: {
        if (tag == 498) {
         parse__activity_bigpackage_info_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__activity_bigpackage_info_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(506)) goto parse__activity_bigpackage_reward_reply;
        break;
      }

      // optional .client_baseserver.activity_bigpackage_reward_reply _activity_bigpackage_reward_reply = 63;
      case 63: {
        if (tag == 506) {
         parse__activity_bigpackage_reward_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__activity_bigpackage_reward_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(514)) goto parse__activity_bigpackage_reset_reply;
        break;
      }

      // optional .client_baseserver.activity_bigpackage_reset_reply _activity_bigpackage_reset_reply = 64;
      case 64: {
        if (tag == 514) {
         parse__activity_bigpackage_reset_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__activity_bigpackage_reset_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(522)) goto parse__request_guild_log_reply;
        break;
      }

      // optional .client_baseserver.request_guild_log_reply _request_guild_log_reply = 65;
      case 65: {
        if (tag == 522) {
         parse__request_guild_log_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__request_guild_log_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2402)) goto parse__fb_attention_reply;
        break;
      }

      // optional .client_baseserver.fb_attention_reply _fb_attention_reply = 300;
      case 300: {
        if (tag == 2402) {
         parse__fb_attention_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__fb_attention_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2418)) goto parse__continue_pay_reply;
        break;
      }

      // optional .client_baseserver.continue_pay_reply _continue_pay_reply = 302;
      case 302: {
        if (tag == 2418) {
         parse__continue_pay_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__continue_pay_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2426)) goto parse__recharge_rebate_reply;
        break;
      }

      // optional .client_baseserver.recharge_rebate_reply _recharge_rebate_reply = 303;
      case 303: {
        if (tag == 2426) {
         parse__recharge_rebate_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__recharge_rebate_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2434)) goto parse__every_day_happy_reply;
        break;
      }

      // optional .client_baseserver.every_day_happy_reply _every_day_happy_reply = 304;
      case 304: {
        if (tag == 2434) {
         parse__every_day_happy_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__every_day_happy_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.down_msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.down_msg)
  return false;
#undef DO_
}

void down_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.down_msg)
  // optional .client_baseserver.login_reply _login_reply = 1;
  if (has__login_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_login_reply(), output);
  }

  // optional .client_baseserver.reset _reset = 2;
  if (has__reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_reset(), output);
  }

  // optional .client_baseserver.enter_stage_reply _enter_stage_reply = 3;
  if (has__enter_stage_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_enter_stage_reply(), output);
  }

  // optional .client_baseserver.exit_stage_reply _exit_stage_reply = 4;
  if (has__exit_stage_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_exit_stage_reply(), output);
  }

  // optional .client_baseserver.hero_upgrade_reply _hero_upgrade_reply = 5;
  if (has__hero_upgrade_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_hero_upgrade_reply(), output);
  }

  // optional .client_baseserver.equip_synthesis_reply _equip_synthesis_reply = 6;
  if (has__equip_synthesis_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_equip_synthesis_reply(), output);
  }

  // optional .client_baseserver.wear_equip_reply _wear_equip_reply = 7;
  if (has__wear_equip_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_wear_equip_reply(), output);
  }

  // optional .client_baseserver.consume_item_reply _consume_item_reply = 8;
  if (has__consume_item_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_consume_item_reply(), output);
  }

  // optional .client_baseserver.user_shop _shop_refresh_reply = 9;
  if (has__shop_refresh_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_shop_refresh_reply(), output);
  }

  // optional .client_baseserver.shop_consume_reply _shop_consume_reply = 10;
  if (has__shop_consume_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_shop_consume_reply(), output);
  }

  // optional .client_baseserver.skill_levelup_reply _skill_levelup_reply = 11;
  if (has__skill_levelup_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_skill_levelup_reply(), output);
  }

  // optional .client_baseserver.sell_item_reply _sell_item_reply = 12;
  if (has__sell_item_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_sell_item_reply(), output);
  }

  // optional .client_baseserver.fragment_compose_reply _fragment_compose_reply = 13;
  if (has__fragment_compose_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_fragment_compose_reply(), output);
  }

  // optional .client_baseserver.hero_equip_upgrade_reply _hero_equip_upgrade_reply = 14;
  if (has__hero_equip_upgrade_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_hero_equip_upgrade_reply(), output);
  }

  // optional .client_baseserver.trigger_task_reply _trigger_task_reply = 15;
  if (has__trigger_task_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_trigger_task_reply(), output);
  }

  // optional .client_baseserver.require_rewards_reply _require_rewards_reply = 16;
  if (has__require_rewards_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_require_rewards_reply(), output);
  }

  // optional .client_baseserver.trigger_job_reply _trigger_job_reply = 17;
  if (has__trigger_job_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_trigger_job_reply(), output);
  }

  // optional .client_baseserver.job_rewards_reply _job_rewards_reply = 18;
  if (has__job_rewards_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_job_rewards_reply(), output);
  }

  // optional .client_baseserver.reset_elite_reply _reset_elite_reply = 19;
  if (has__reset_elite_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_reset_elite_reply(), output);
  }

  // optional .client_baseserver.sweep_stage_reply _sweep_stage_reply = 20;
  if (has__sweep_stage_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_sweep_stage_reply(), output);
  }

  // optional .client_baseserver.tavern_draw_reply _tavern_draw_reply = 21;
  if (has__tavern_draw_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_tavern_draw_reply(), output);
  }

  // optional .client_baseserver.sync_skill_stren_reply _sync_skill_stren_reply = 22;
  if (has__sync_skill_stren_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->_sync_skill_stren_reply(), output);
  }

  // optional .client_baseserver.query_data_reply _query_data_reply = 23;
  if (has__query_data_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->_query_data_reply(), output);
  }

  // optional .client_baseserver.hero_evolve_reply _hero_evolve_reply = 24;
  if (has__hero_evolve_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->_hero_evolve_reply(), output);
  }

  // optional .client_baseserver.sync_vitality_reply _sync_vitality_reply = 25;
  if (has__sync_vitality_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->_sync_vitality_reply(), output);
  }

  // optional .client_baseserver.user_check _user_check = 26;
  if (has__user_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->_user_check(), output);
  }

  // optional .client_baseserver.tutorial_reply _tutorial_reply = 27;
  if (has__tutorial_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->_tutorial_reply(), output);
  }

  // optional .client_baseserver.error_info _error_info = 28;
  if (has__error_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->_error_info(), output);
  }

  // optional .client_baseserver.ladder_reply _ladder_reply = 29;
  if (has__ladder_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->_ladder_reply(), output);
  }

  // optional .client_baseserver.set_name_reply _set_name_reply = 30;
  if (has__set_name_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->_set_name_reply(), output);
  }

  // optional .client_baseserver.midas_reply _midas_reply = 31;
  if (has__midas_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->_midas_reply(), output);
  }

  // optional .client_baseserver.open_shop_reply _open_shop_reply = 32;
  if (has__open_shop_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->_open_shop_reply(), output);
  }

  // optional .client_baseserver.charge_reply _charge_reply = 33;
  if (has__charge_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->_charge_reply(), output);
  }

  // optional .client_baseserver.sdk_login_reply _sdk_login_reply = 34;
  if (has__sdk_login_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->_sdk_login_reply(), output);
  }

  // optional .client_baseserver.set_avatar_reply _set_avatar_reply = 35;
  if (has__set_avatar_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->_set_avatar_reply(), output);
  }

  // optional .client_baseserver.notify_msg _notify_msg = 36;
  if (has__notify_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->_notify_msg(), output);
  }

  // optional .client_baseserver.ask_daily_login_reply _ask_daily_login_reply = 37;
  if (has__ask_daily_login_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->_ask_daily_login_reply(), output);
  }

  // optional .client_baseserver.tbc_reply _tbc_reply = 38;
  if (has__tbc_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->_tbc_reply(), output);
  }

  // optional .client_baseserver.get_maillist_reply _get_maillist_reply = 39;
  if (has__get_maillist_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->_get_maillist_reply(), output);
  }

  // optional .client_baseserver.read_mail_reply _read_mail_reply = 40;
  if (has__read_mail_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->_read_mail_reply(), output);
  }

  // optional uint32 _svr_time = 41;
  if (has__svr_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->_svr_time(), output);
  }

  // optional .client_baseserver.get_vip_gift_reply _get_vip_gift_reply = 42;
  if (has__get_vip_gift_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->_get_vip_gift_reply(), output);
  }

  // optional .client_baseserver.chat_reply _chat_reply = 43;
  if (has__chat_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->_chat_reply(), output);
  }

  // optional .client_baseserver.cdkey_gift_reply _cdkey_gift_reply = 44;
  if (has__cdkey_gift_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->_cdkey_gift_reply(), output);
  }

  // optional .client_baseserver.guild_reply _guild_reply = 45;
  if (has__guild_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->_guild_reply(), output);
  }

  // optional .client_baseserver.ask_magicsoul_reply _ask_magicsoul_reply = 46;
  if (has__ask_magicsoul_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->_ask_magicsoul_reply(), output);
  }

  // optional .client_baseserver.activity_infos _ask_activity_info_reply = 47;
  if (has__ask_activity_info_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->_ask_activity_info_reply(), output);
  }

  // optional .client_baseserver.excavate_reply _excavate_reply = 48;
  if (has__excavate_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->_excavate_reply(), output);
  }

  // optional .client_baseserver.system_setting_reply _system_setting_reply = 49;
  if (has__system_setting_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, this->_system_setting_reply(), output);
  }

  // optional .client_baseserver.query_split_data_reply _query_split_data_reply = 50;
  if (has__query_split_data_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->_query_split_data_reply(), output);
  }

  // optional .client_baseserver.query_split_return_reply _query_split_return_reply = 51;
  if (has__query_split_return_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->_query_split_return_reply(), output);
  }

  // optional .client_baseserver.split_hero_reply _split_hero_reply = 52;
  if (has__split_hero_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->_split_hero_reply(), output);
  }

  // optional .client_baseserver.worldcup_reply _worldcup_reply = 53;
  if (has__worldcup_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->_worldcup_reply(), output);
  }

  // optional .client_baseserver.battle_check_fail _battle_check_fail = 54;
  if (has__battle_check_fail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->_battle_check_fail(), output);
  }

  // optional .client_baseserver.query_replay _query_replay = 55;
  if (has__query_replay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, this->_query_replay(), output);
  }

  // optional .client_baseserver.super_link _super_link = 56;
  if (has__super_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, this->_super_link(), output);
  }

  // optional .client_baseserver.query_ranklist_reply _query_ranklist_reply = 57;
  if (has__query_ranklist_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, this->_query_ranklist_reply(), output);
  }

  // optional .client_baseserver.change_server_reply _change_server_reply = 58;
  if (has__change_server_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->_change_server_reply(), output);
  }

  // optional .client_baseserver.activity_info_reply _activity_info_reply = 59;
  if (has__activity_info_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, this->_activity_info_reply(), output);
  }

  // optional .client_baseserver.activity_lotto_info_reply _activity_lotto_info_reply = 60;
  if (has__activity_lotto_info_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->_activity_lotto_info_reply(), output);
  }

  // optional .client_baseserver.activity_lotto_reward_reply _activity_lotto_reward_reply = 61;
  if (has__activity_lotto_reward_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->_activity_lotto_reward_reply(), output);
  }

  // optional .client_baseserver.activity_bigpackage_info_reply _activity_bigpackage_info_reply = 62;
  if (has__activity_bigpackage_info_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->_activity_bigpackage_info_reply(), output);
  }

  // optional .client_baseserver.activity_bigpackage_reward_reply _activity_bigpackage_reward_reply = 63;
  if (has__activity_bigpackage_reward_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->_activity_bigpackage_reward_reply(), output);
  }

  // optional .client_baseserver.activity_bigpackage_reset_reply _activity_bigpackage_reset_reply = 64;
  if (has__activity_bigpackage_reset_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, this->_activity_bigpackage_reset_reply(), output);
  }

  // optional .client_baseserver.request_guild_log_reply _request_guild_log_reply = 65;
  if (has__request_guild_log_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, this->_request_guild_log_reply(), output);
  }

  // optional .client_baseserver.fb_attention_reply _fb_attention_reply = 300;
  if (has__fb_attention_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      300, this->_fb_attention_reply(), output);
  }

  // optional .client_baseserver.continue_pay_reply _continue_pay_reply = 302;
  if (has__continue_pay_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      302, this->_continue_pay_reply(), output);
  }

  // optional .client_baseserver.recharge_rebate_reply _recharge_rebate_reply = 303;
  if (has__recharge_rebate_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      303, this->_recharge_rebate_reply(), output);
  }

  // optional .client_baseserver.every_day_happy_reply _every_day_happy_reply = 304;
  if (has__every_day_happy_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      304, this->_every_day_happy_reply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.down_msg)
}

::google::protobuf::uint8* down_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.down_msg)
  // optional .client_baseserver.login_reply _login_reply = 1;
  if (has__login_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_login_reply(), target);
  }

  // optional .client_baseserver.reset _reset = 2;
  if (has__reset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_reset(), target);
  }

  // optional .client_baseserver.enter_stage_reply _enter_stage_reply = 3;
  if (has__enter_stage_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_enter_stage_reply(), target);
  }

  // optional .client_baseserver.exit_stage_reply _exit_stage_reply = 4;
  if (has__exit_stage_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_exit_stage_reply(), target);
  }

  // optional .client_baseserver.hero_upgrade_reply _hero_upgrade_reply = 5;
  if (has__hero_upgrade_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_hero_upgrade_reply(), target);
  }

  // optional .client_baseserver.equip_synthesis_reply _equip_synthesis_reply = 6;
  if (has__equip_synthesis_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->_equip_synthesis_reply(), target);
  }

  // optional .client_baseserver.wear_equip_reply _wear_equip_reply = 7;
  if (has__wear_equip_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->_wear_equip_reply(), target);
  }

  // optional .client_baseserver.consume_item_reply _consume_item_reply = 8;
  if (has__consume_item_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->_consume_item_reply(), target);
  }

  // optional .client_baseserver.user_shop _shop_refresh_reply = 9;
  if (has__shop_refresh_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->_shop_refresh_reply(), target);
  }

  // optional .client_baseserver.shop_consume_reply _shop_consume_reply = 10;
  if (has__shop_consume_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->_shop_consume_reply(), target);
  }

  // optional .client_baseserver.skill_levelup_reply _skill_levelup_reply = 11;
  if (has__skill_levelup_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->_skill_levelup_reply(), target);
  }

  // optional .client_baseserver.sell_item_reply _sell_item_reply = 12;
  if (has__sell_item_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->_sell_item_reply(), target);
  }

  // optional .client_baseserver.fragment_compose_reply _fragment_compose_reply = 13;
  if (has__fragment_compose_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->_fragment_compose_reply(), target);
  }

  // optional .client_baseserver.hero_equip_upgrade_reply _hero_equip_upgrade_reply = 14;
  if (has__hero_equip_upgrade_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->_hero_equip_upgrade_reply(), target);
  }

  // optional .client_baseserver.trigger_task_reply _trigger_task_reply = 15;
  if (has__trigger_task_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->_trigger_task_reply(), target);
  }

  // optional .client_baseserver.require_rewards_reply _require_rewards_reply = 16;
  if (has__require_rewards_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->_require_rewards_reply(), target);
  }

  // optional .client_baseserver.trigger_job_reply _trigger_job_reply = 17;
  if (has__trigger_job_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->_trigger_job_reply(), target);
  }

  // optional .client_baseserver.job_rewards_reply _job_rewards_reply = 18;
  if (has__job_rewards_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->_job_rewards_reply(), target);
  }

  // optional .client_baseserver.reset_elite_reply _reset_elite_reply = 19;
  if (has__reset_elite_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->_reset_elite_reply(), target);
  }

  // optional .client_baseserver.sweep_stage_reply _sweep_stage_reply = 20;
  if (has__sweep_stage_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->_sweep_stage_reply(), target);
  }

  // optional .client_baseserver.tavern_draw_reply _tavern_draw_reply = 21;
  if (has__tavern_draw_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->_tavern_draw_reply(), target);
  }

  // optional .client_baseserver.sync_skill_stren_reply _sync_skill_stren_reply = 22;
  if (has__sync_skill_stren_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->_sync_skill_stren_reply(), target);
  }

  // optional .client_baseserver.query_data_reply _query_data_reply = 23;
  if (has__query_data_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->_query_data_reply(), target);
  }

  // optional .client_baseserver.hero_evolve_reply _hero_evolve_reply = 24;
  if (has__hero_evolve_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->_hero_evolve_reply(), target);
  }

  // optional .client_baseserver.sync_vitality_reply _sync_vitality_reply = 25;
  if (has__sync_vitality_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->_sync_vitality_reply(), target);
  }

  // optional .client_baseserver.user_check _user_check = 26;
  if (has__user_check()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->_user_check(), target);
  }

  // optional .client_baseserver.tutorial_reply _tutorial_reply = 27;
  if (has__tutorial_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->_tutorial_reply(), target);
  }

  // optional .client_baseserver.error_info _error_info = 28;
  if (has__error_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->_error_info(), target);
  }

  // optional .client_baseserver.ladder_reply _ladder_reply = 29;
  if (has__ladder_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->_ladder_reply(), target);
  }

  // optional .client_baseserver.set_name_reply _set_name_reply = 30;
  if (has__set_name_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->_set_name_reply(), target);
  }

  // optional .client_baseserver.midas_reply _midas_reply = 31;
  if (has__midas_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->_midas_reply(), target);
  }

  // optional .client_baseserver.open_shop_reply _open_shop_reply = 32;
  if (has__open_shop_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->_open_shop_reply(), target);
  }

  // optional .client_baseserver.charge_reply _charge_reply = 33;
  if (has__charge_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->_charge_reply(), target);
  }

  // optional .client_baseserver.sdk_login_reply _sdk_login_reply = 34;
  if (has__sdk_login_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->_sdk_login_reply(), target);
  }

  // optional .client_baseserver.set_avatar_reply _set_avatar_reply = 35;
  if (has__set_avatar_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->_set_avatar_reply(), target);
  }

  // optional .client_baseserver.notify_msg _notify_msg = 36;
  if (has__notify_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->_notify_msg(), target);
  }

  // optional .client_baseserver.ask_daily_login_reply _ask_daily_login_reply = 37;
  if (has__ask_daily_login_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->_ask_daily_login_reply(), target);
  }

  // optional .client_baseserver.tbc_reply _tbc_reply = 38;
  if (has__tbc_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->_tbc_reply(), target);
  }

  // optional .client_baseserver.get_maillist_reply _get_maillist_reply = 39;
  if (has__get_maillist_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->_get_maillist_reply(), target);
  }

  // optional .client_baseserver.read_mail_reply _read_mail_reply = 40;
  if (has__read_mail_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->_read_mail_reply(), target);
  }

  // optional uint32 _svr_time = 41;
  if (has__svr_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->_svr_time(), target);
  }

  // optional .client_baseserver.get_vip_gift_reply _get_vip_gift_reply = 42;
  if (has__get_vip_gift_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->_get_vip_gift_reply(), target);
  }

  // optional .client_baseserver.chat_reply _chat_reply = 43;
  if (has__chat_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->_chat_reply(), target);
  }

  // optional .client_baseserver.cdkey_gift_reply _cdkey_gift_reply = 44;
  if (has__cdkey_gift_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->_cdkey_gift_reply(), target);
  }

  // optional .client_baseserver.guild_reply _guild_reply = 45;
  if (has__guild_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->_guild_reply(), target);
  }

  // optional .client_baseserver.ask_magicsoul_reply _ask_magicsoul_reply = 46;
  if (has__ask_magicsoul_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->_ask_magicsoul_reply(), target);
  }

  // optional .client_baseserver.activity_infos _ask_activity_info_reply = 47;
  if (has__ask_activity_info_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->_ask_activity_info_reply(), target);
  }

  // optional .client_baseserver.excavate_reply _excavate_reply = 48;
  if (has__excavate_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->_excavate_reply(), target);
  }

  // optional .client_baseserver.system_setting_reply _system_setting_reply = 49;
  if (has__system_setting_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, this->_system_setting_reply(), target);
  }

  // optional .client_baseserver.query_split_data_reply _query_split_data_reply = 50;
  if (has__query_split_data_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->_query_split_data_reply(), target);
  }

  // optional .client_baseserver.query_split_return_reply _query_split_return_reply = 51;
  if (has__query_split_return_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->_query_split_return_reply(), target);
  }

  // optional .client_baseserver.split_hero_reply _split_hero_reply = 52;
  if (has__split_hero_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->_split_hero_reply(), target);
  }

  // optional .client_baseserver.worldcup_reply _worldcup_reply = 53;
  if (has__worldcup_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->_worldcup_reply(), target);
  }

  // optional .client_baseserver.battle_check_fail _battle_check_fail = 54;
  if (has__battle_check_fail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->_battle_check_fail(), target);
  }

  // optional .client_baseserver.query_replay _query_replay = 55;
  if (has__query_replay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, this->_query_replay(), target);
  }

  // optional .client_baseserver.super_link _super_link = 56;
  if (has__super_link()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        56, this->_super_link(), target);
  }

  // optional .client_baseserver.query_ranklist_reply _query_ranklist_reply = 57;
  if (has__query_ranklist_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, this->_query_ranklist_reply(), target);
  }

  // optional .client_baseserver.change_server_reply _change_server_reply = 58;
  if (has__change_server_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->_change_server_reply(), target);
  }

  // optional .client_baseserver.activity_info_reply _activity_info_reply = 59;
  if (has__activity_info_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, this->_activity_info_reply(), target);
  }

  // optional .client_baseserver.activity_lotto_info_reply _activity_lotto_info_reply = 60;
  if (has__activity_lotto_info_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->_activity_lotto_info_reply(), target);
  }

  // optional .client_baseserver.activity_lotto_reward_reply _activity_lotto_reward_reply = 61;
  if (has__activity_lotto_reward_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, this->_activity_lotto_reward_reply(), target);
  }

  // optional .client_baseserver.activity_bigpackage_info_reply _activity_bigpackage_info_reply = 62;
  if (has__activity_bigpackage_info_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->_activity_bigpackage_info_reply(), target);
  }

  // optional .client_baseserver.activity_bigpackage_reward_reply _activity_bigpackage_reward_reply = 63;
  if (has__activity_bigpackage_reward_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, this->_activity_bigpackage_reward_reply(), target);
  }

  // optional .client_baseserver.activity_bigpackage_reset_reply _activity_bigpackage_reset_reply = 64;
  if (has__activity_bigpackage_reset_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        64, this->_activity_bigpackage_reset_reply(), target);
  }

  // optional .client_baseserver.request_guild_log_reply _request_guild_log_reply = 65;
  if (has__request_guild_log_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        65, this->_request_guild_log_reply(), target);
  }

  // optional .client_baseserver.fb_attention_reply _fb_attention_reply = 300;
  if (has__fb_attention_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        300, this->_fb_attention_reply(), target);
  }

  // optional .client_baseserver.continue_pay_reply _continue_pay_reply = 302;
  if (has__continue_pay_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        302, this->_continue_pay_reply(), target);
  }

  // optional .client_baseserver.recharge_rebate_reply _recharge_rebate_reply = 303;
  if (has__recharge_rebate_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        303, this->_recharge_rebate_reply(), target);
  }

  // optional .client_baseserver.every_day_happy_reply _every_day_happy_reply = 304;
  if (has__every_day_happy_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        304, this->_every_day_happy_reply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.down_msg)
  return target;
}

int down_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_baseserver.login_reply _login_reply = 1;
    if (has__login_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_login_reply());
    }

    // optional .client_baseserver.reset _reset = 2;
    if (has__reset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_reset());
    }

    // optional .client_baseserver.enter_stage_reply _enter_stage_reply = 3;
    if (has__enter_stage_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_enter_stage_reply());
    }

    // optional .client_baseserver.exit_stage_reply _exit_stage_reply = 4;
    if (has__exit_stage_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_exit_stage_reply());
    }

    // optional .client_baseserver.hero_upgrade_reply _hero_upgrade_reply = 5;
    if (has__hero_upgrade_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_hero_upgrade_reply());
    }

    // optional .client_baseserver.equip_synthesis_reply _equip_synthesis_reply = 6;
    if (has__equip_synthesis_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_equip_synthesis_reply());
    }

    // optional .client_baseserver.wear_equip_reply _wear_equip_reply = 7;
    if (has__wear_equip_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_wear_equip_reply());
    }

    // optional .client_baseserver.consume_item_reply _consume_item_reply = 8;
    if (has__consume_item_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_consume_item_reply());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .client_baseserver.user_shop _shop_refresh_reply = 9;
    if (has__shop_refresh_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_shop_refresh_reply());
    }

    // optional .client_baseserver.shop_consume_reply _shop_consume_reply = 10;
    if (has__shop_consume_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_shop_consume_reply());
    }

    // optional .client_baseserver.skill_levelup_reply _skill_levelup_reply = 11;
    if (has__skill_levelup_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_skill_levelup_reply());
    }

    // optional .client_baseserver.sell_item_reply _sell_item_reply = 12;
    if (has__sell_item_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_sell_item_reply());
    }

    // optional .client_baseserver.fragment_compose_reply _fragment_compose_reply = 13;
    if (has__fragment_compose_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_fragment_compose_reply());
    }

    // optional .client_baseserver.hero_equip_upgrade_reply _hero_equip_upgrade_reply = 14;
    if (has__hero_equip_upgrade_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_hero_equip_upgrade_reply());
    }

    // optional .client_baseserver.trigger_task_reply _trigger_task_reply = 15;
    if (has__trigger_task_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_trigger_task_reply());
    }

    // optional .client_baseserver.require_rewards_reply _require_rewards_reply = 16;
    if (has__require_rewards_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_require_rewards_reply());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .client_baseserver.trigger_job_reply _trigger_job_reply = 17;
    if (has__trigger_job_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_trigger_job_reply());
    }

    // optional .client_baseserver.job_rewards_reply _job_rewards_reply = 18;
    if (has__job_rewards_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_job_rewards_reply());
    }

    // optional .client_baseserver.reset_elite_reply _reset_elite_reply = 19;
    if (has__reset_elite_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_reset_elite_reply());
    }

    // optional .client_baseserver.sweep_stage_reply _sweep_stage_reply = 20;
    if (has__sweep_stage_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_sweep_stage_reply());
    }

    // optional .client_baseserver.tavern_draw_reply _tavern_draw_reply = 21;
    if (has__tavern_draw_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_tavern_draw_reply());
    }

    // optional .client_baseserver.sync_skill_stren_reply _sync_skill_stren_reply = 22;
    if (has__sync_skill_stren_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_sync_skill_stren_reply());
    }

    // optional .client_baseserver.query_data_reply _query_data_reply = 23;
    if (has__query_data_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_data_reply());
    }

    // optional .client_baseserver.hero_evolve_reply _hero_evolve_reply = 24;
    if (has__hero_evolve_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_hero_evolve_reply());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .client_baseserver.sync_vitality_reply _sync_vitality_reply = 25;
    if (has__sync_vitality_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_sync_vitality_reply());
    }

    // optional .client_baseserver.user_check _user_check = 26;
    if (has__user_check()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_user_check());
    }

    // optional .client_baseserver.tutorial_reply _tutorial_reply = 27;
    if (has__tutorial_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_tutorial_reply());
    }

    // optional .client_baseserver.error_info _error_info = 28;
    if (has__error_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_error_info());
    }

    // optional .client_baseserver.ladder_reply _ladder_reply = 29;
    if (has__ladder_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_ladder_reply());
    }

    // optional .client_baseserver.set_name_reply _set_name_reply = 30;
    if (has__set_name_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_set_name_reply());
    }

    // optional .client_baseserver.midas_reply _midas_reply = 31;
    if (has__midas_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_midas_reply());
    }

    // optional .client_baseserver.open_shop_reply _open_shop_reply = 32;
    if (has__open_shop_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_open_shop_reply());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .client_baseserver.charge_reply _charge_reply = 33;
    if (has__charge_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_charge_reply());
    }

    // optional .client_baseserver.sdk_login_reply _sdk_login_reply = 34;
    if (has__sdk_login_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_sdk_login_reply());
    }

    // optional .client_baseserver.set_avatar_reply _set_avatar_reply = 35;
    if (has__set_avatar_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_set_avatar_reply());
    }

    // optional .client_baseserver.notify_msg _notify_msg = 36;
    if (has__notify_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_notify_msg());
    }

    // optional .client_baseserver.ask_daily_login_reply _ask_daily_login_reply = 37;
    if (has__ask_daily_login_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_ask_daily_login_reply());
    }

    // optional .client_baseserver.tbc_reply _tbc_reply = 38;
    if (has__tbc_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_tbc_reply());
    }

    // optional .client_baseserver.get_maillist_reply _get_maillist_reply = 39;
    if (has__get_maillist_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_get_maillist_reply());
    }

    // optional .client_baseserver.read_mail_reply _read_mail_reply = 40;
    if (has__read_mail_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_read_mail_reply());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 _svr_time = 41;
    if (has__svr_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_svr_time());
    }

    // optional .client_baseserver.get_vip_gift_reply _get_vip_gift_reply = 42;
    if (has__get_vip_gift_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_get_vip_gift_reply());
    }

    // optional .client_baseserver.chat_reply _chat_reply = 43;
    if (has__chat_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_chat_reply());
    }

    // optional .client_baseserver.cdkey_gift_reply _cdkey_gift_reply = 44;
    if (has__cdkey_gift_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_cdkey_gift_reply());
    }

    // optional .client_baseserver.guild_reply _guild_reply = 45;
    if (has__guild_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_guild_reply());
    }

    // optional .client_baseserver.ask_magicsoul_reply _ask_magicsoul_reply = 46;
    if (has__ask_magicsoul_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_ask_magicsoul_reply());
    }

    // optional .client_baseserver.activity_infos _ask_activity_info_reply = 47;
    if (has__ask_activity_info_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_ask_activity_info_reply());
    }

    // optional .client_baseserver.excavate_reply _excavate_reply = 48;
    if (has__excavate_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_excavate_reply());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .client_baseserver.system_setting_reply _system_setting_reply = 49;
    if (has__system_setting_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_system_setting_reply());
    }

    // optional .client_baseserver.query_split_data_reply _query_split_data_reply = 50;
    if (has__query_split_data_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_split_data_reply());
    }

    // optional .client_baseserver.query_split_return_reply _query_split_return_reply = 51;
    if (has__query_split_return_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_split_return_reply());
    }

    // optional .client_baseserver.split_hero_reply _split_hero_reply = 52;
    if (has__split_hero_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_split_hero_reply());
    }

    // optional .client_baseserver.worldcup_reply _worldcup_reply = 53;
    if (has__worldcup_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_worldcup_reply());
    }

    // optional .client_baseserver.battle_check_fail _battle_check_fail = 54;
    if (has__battle_check_fail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_battle_check_fail());
    }

    // optional .client_baseserver.query_replay _query_replay = 55;
    if (has__query_replay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_replay());
    }

    // optional .client_baseserver.super_link _super_link = 56;
    if (has__super_link()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_super_link());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .client_baseserver.query_ranklist_reply _query_ranklist_reply = 57;
    if (has__query_ranklist_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_ranklist_reply());
    }

    // optional .client_baseserver.request_guild_log_reply _request_guild_log_reply = 65;
    if (has__request_guild_log_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_request_guild_log_reply());
    }

    // optional .client_baseserver.change_server_reply _change_server_reply = 58;
    if (has__change_server_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_change_server_reply());
    }

    // optional .client_baseserver.activity_info_reply _activity_info_reply = 59;
    if (has__activity_info_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_activity_info_reply());
    }

    // optional .client_baseserver.activity_lotto_info_reply _activity_lotto_info_reply = 60;
    if (has__activity_lotto_info_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_activity_lotto_info_reply());
    }

    // optional .client_baseserver.activity_lotto_reward_reply _activity_lotto_reward_reply = 61;
    if (has__activity_lotto_reward_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_activity_lotto_reward_reply());
    }

    // optional .client_baseserver.activity_bigpackage_info_reply _activity_bigpackage_info_reply = 62;
    if (has__activity_bigpackage_info_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_activity_bigpackage_info_reply());
    }

    // optional .client_baseserver.activity_bigpackage_reward_reply _activity_bigpackage_reward_reply = 63;
    if (has__activity_bigpackage_reward_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_activity_bigpackage_reward_reply());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional .client_baseserver.activity_bigpackage_reset_reply _activity_bigpackage_reset_reply = 64;
    if (has__activity_bigpackage_reset_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_activity_bigpackage_reset_reply());
    }

    // optional .client_baseserver.fb_attention_reply _fb_attention_reply = 300;
    if (has__fb_attention_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_fb_attention_reply());
    }

    // optional .client_baseserver.continue_pay_reply _continue_pay_reply = 302;
    if (has__continue_pay_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_continue_pay_reply());
    }

    // optional .client_baseserver.recharge_rebate_reply _recharge_rebate_reply = 303;
    if (has__recharge_rebate_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_recharge_rebate_reply());
    }

    // optional .client_baseserver.every_day_happy_reply _every_day_happy_reply = 304;
    if (has__every_day_happy_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_every_day_happy_reply());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void down_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const down_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const down_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void down_msg::MergeFrom(const down_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__login_reply()) {
      mutable__login_reply()->::client_baseserver::login_reply::MergeFrom(from._login_reply());
    }
    if (from.has__reset()) {
      mutable__reset()->::client_baseserver::reset::MergeFrom(from._reset());
    }
    if (from.has__enter_stage_reply()) {
      mutable__enter_stage_reply()->::client_baseserver::enter_stage_reply::MergeFrom(from._enter_stage_reply());
    }
    if (from.has__exit_stage_reply()) {
      mutable__exit_stage_reply()->::client_baseserver::exit_stage_reply::MergeFrom(from._exit_stage_reply());
    }
    if (from.has__hero_upgrade_reply()) {
      mutable__hero_upgrade_reply()->::client_baseserver::hero_upgrade_reply::MergeFrom(from._hero_upgrade_reply());
    }
    if (from.has__equip_synthesis_reply()) {
      mutable__equip_synthesis_reply()->::client_baseserver::equip_synthesis_reply::MergeFrom(from._equip_synthesis_reply());
    }
    if (from.has__wear_equip_reply()) {
      mutable__wear_equip_reply()->::client_baseserver::wear_equip_reply::MergeFrom(from._wear_equip_reply());
    }
    if (from.has__consume_item_reply()) {
      mutable__consume_item_reply()->::client_baseserver::consume_item_reply::MergeFrom(from._consume_item_reply());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has__shop_refresh_reply()) {
      mutable__shop_refresh_reply()->::client_baseserver::user_shop::MergeFrom(from._shop_refresh_reply());
    }
    if (from.has__shop_consume_reply()) {
      mutable__shop_consume_reply()->::client_baseserver::shop_consume_reply::MergeFrom(from._shop_consume_reply());
    }
    if (from.has__skill_levelup_reply()) {
      mutable__skill_levelup_reply()->::client_baseserver::skill_levelup_reply::MergeFrom(from._skill_levelup_reply());
    }
    if (from.has__sell_item_reply()) {
      mutable__sell_item_reply()->::client_baseserver::sell_item_reply::MergeFrom(from._sell_item_reply());
    }
    if (from.has__fragment_compose_reply()) {
      mutable__fragment_compose_reply()->::client_baseserver::fragment_compose_reply::MergeFrom(from._fragment_compose_reply());
    }
    if (from.has__hero_equip_upgrade_reply()) {
      mutable__hero_equip_upgrade_reply()->::client_baseserver::hero_equip_upgrade_reply::MergeFrom(from._hero_equip_upgrade_reply());
    }
    if (from.has__trigger_task_reply()) {
      mutable__trigger_task_reply()->::client_baseserver::trigger_task_reply::MergeFrom(from._trigger_task_reply());
    }
    if (from.has__require_rewards_reply()) {
      mutable__require_rewards_reply()->::client_baseserver::require_rewards_reply::MergeFrom(from._require_rewards_reply());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has__trigger_job_reply()) {
      mutable__trigger_job_reply()->::client_baseserver::trigger_job_reply::MergeFrom(from._trigger_job_reply());
    }
    if (from.has__job_rewards_reply()) {
      mutable__job_rewards_reply()->::client_baseserver::job_rewards_reply::MergeFrom(from._job_rewards_reply());
    }
    if (from.has__reset_elite_reply()) {
      mutable__reset_elite_reply()->::client_baseserver::reset_elite_reply::MergeFrom(from._reset_elite_reply());
    }
    if (from.has__sweep_stage_reply()) {
      mutable__sweep_stage_reply()->::client_baseserver::sweep_stage_reply::MergeFrom(from._sweep_stage_reply());
    }
    if (from.has__tavern_draw_reply()) {
      mutable__tavern_draw_reply()->::client_baseserver::tavern_draw_reply::MergeFrom(from._tavern_draw_reply());
    }
    if (from.has__sync_skill_stren_reply()) {
      mutable__sync_skill_stren_reply()->::client_baseserver::sync_skill_stren_reply::MergeFrom(from._sync_skill_stren_reply());
    }
    if (from.has__query_data_reply()) {
      mutable__query_data_reply()->::client_baseserver::query_data_reply::MergeFrom(from._query_data_reply());
    }
    if (from.has__hero_evolve_reply()) {
      mutable__hero_evolve_reply()->::client_baseserver::hero_evolve_reply::MergeFrom(from._hero_evolve_reply());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has__sync_vitality_reply()) {
      mutable__sync_vitality_reply()->::client_baseserver::sync_vitality_reply::MergeFrom(from._sync_vitality_reply());
    }
    if (from.has__user_check()) {
      mutable__user_check()->::client_baseserver::user_check::MergeFrom(from._user_check());
    }
    if (from.has__tutorial_reply()) {
      mutable__tutorial_reply()->::client_baseserver::tutorial_reply::MergeFrom(from._tutorial_reply());
    }
    if (from.has__error_info()) {
      mutable__error_info()->::client_baseserver::error_info::MergeFrom(from._error_info());
    }
    if (from.has__ladder_reply()) {
      mutable__ladder_reply()->::client_baseserver::ladder_reply::MergeFrom(from._ladder_reply());
    }
    if (from.has__set_name_reply()) {
      mutable__set_name_reply()->::client_baseserver::set_name_reply::MergeFrom(from._set_name_reply());
    }
    if (from.has__midas_reply()) {
      mutable__midas_reply()->::client_baseserver::midas_reply::MergeFrom(from._midas_reply());
    }
    if (from.has__open_shop_reply()) {
      mutable__open_shop_reply()->::client_baseserver::open_shop_reply::MergeFrom(from._open_shop_reply());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has__charge_reply()) {
      mutable__charge_reply()->::client_baseserver::charge_reply::MergeFrom(from._charge_reply());
    }
    if (from.has__sdk_login_reply()) {
      mutable__sdk_login_reply()->::client_baseserver::sdk_login_reply::MergeFrom(from._sdk_login_reply());
    }
    if (from.has__set_avatar_reply()) {
      mutable__set_avatar_reply()->::client_baseserver::set_avatar_reply::MergeFrom(from._set_avatar_reply());
    }
    if (from.has__notify_msg()) {
      mutable__notify_msg()->::client_baseserver::notify_msg::MergeFrom(from._notify_msg());
    }
    if (from.has__ask_daily_login_reply()) {
      mutable__ask_daily_login_reply()->::client_baseserver::ask_daily_login_reply::MergeFrom(from._ask_daily_login_reply());
    }
    if (from.has__tbc_reply()) {
      mutable__tbc_reply()->::client_baseserver::tbc_reply::MergeFrom(from._tbc_reply());
    }
    if (from.has__get_maillist_reply()) {
      mutable__get_maillist_reply()->::client_baseserver::get_maillist_reply::MergeFrom(from._get_maillist_reply());
    }
    if (from.has__read_mail_reply()) {
      mutable__read_mail_reply()->::client_baseserver::read_mail_reply::MergeFrom(from._read_mail_reply());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has__svr_time()) {
      set__svr_time(from._svr_time());
    }
    if (from.has__get_vip_gift_reply()) {
      mutable__get_vip_gift_reply()->::client_baseserver::get_vip_gift_reply::MergeFrom(from._get_vip_gift_reply());
    }
    if (from.has__chat_reply()) {
      mutable__chat_reply()->::client_baseserver::chat_reply::MergeFrom(from._chat_reply());
    }
    if (from.has__cdkey_gift_reply()) {
      mutable__cdkey_gift_reply()->::client_baseserver::cdkey_gift_reply::MergeFrom(from._cdkey_gift_reply());
    }
    if (from.has__guild_reply()) {
      mutable__guild_reply()->::client_baseserver::guild_reply::MergeFrom(from._guild_reply());
    }
    if (from.has__ask_magicsoul_reply()) {
      mutable__ask_magicsoul_reply()->::client_baseserver::ask_magicsoul_reply::MergeFrom(from._ask_magicsoul_reply());
    }
    if (from.has__ask_activity_info_reply()) {
      mutable__ask_activity_info_reply()->::client_baseserver::activity_infos::MergeFrom(from._ask_activity_info_reply());
    }
    if (from.has__excavate_reply()) {
      mutable__excavate_reply()->::client_baseserver::excavate_reply::MergeFrom(from._excavate_reply());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has__system_setting_reply()) {
      mutable__system_setting_reply()->::client_baseserver::system_setting_reply::MergeFrom(from._system_setting_reply());
    }
    if (from.has__query_split_data_reply()) {
      mutable__query_split_data_reply()->::client_baseserver::query_split_data_reply::MergeFrom(from._query_split_data_reply());
    }
    if (from.has__query_split_return_reply()) {
      mutable__query_split_return_reply()->::client_baseserver::query_split_return_reply::MergeFrom(from._query_split_return_reply());
    }
    if (from.has__split_hero_reply()) {
      mutable__split_hero_reply()->::client_baseserver::split_hero_reply::MergeFrom(from._split_hero_reply());
    }
    if (from.has__worldcup_reply()) {
      mutable__worldcup_reply()->::client_baseserver::worldcup_reply::MergeFrom(from._worldcup_reply());
    }
    if (from.has__battle_check_fail()) {
      mutable__battle_check_fail()->::client_baseserver::battle_check_fail::MergeFrom(from._battle_check_fail());
    }
    if (from.has__query_replay()) {
      mutable__query_replay()->::client_baseserver::query_replay::MergeFrom(from._query_replay());
    }
    if (from.has__super_link()) {
      mutable__super_link()->::client_baseserver::super_link::MergeFrom(from._super_link());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has__query_ranklist_reply()) {
      mutable__query_ranklist_reply()->::client_baseserver::query_ranklist_reply::MergeFrom(from._query_ranklist_reply());
    }
    if (from.has__request_guild_log_reply()) {
      mutable__request_guild_log_reply()->::client_baseserver::request_guild_log_reply::MergeFrom(from._request_guild_log_reply());
    }
    if (from.has__change_server_reply()) {
      mutable__change_server_reply()->::client_baseserver::change_server_reply::MergeFrom(from._change_server_reply());
    }
    if (from.has__activity_info_reply()) {
      mutable__activity_info_reply()->::client_baseserver::activity_info_reply::MergeFrom(from._activity_info_reply());
    }
    if (from.has__activity_lotto_info_reply()) {
      mutable__activity_lotto_info_reply()->::client_baseserver::activity_lotto_info_reply::MergeFrom(from._activity_lotto_info_reply());
    }
    if (from.has__activity_lotto_reward_reply()) {
      mutable__activity_lotto_reward_reply()->::client_baseserver::activity_lotto_reward_reply::MergeFrom(from._activity_lotto_reward_reply());
    }
    if (from.has__activity_bigpackage_info_reply()) {
      mutable__activity_bigpackage_info_reply()->::client_baseserver::activity_bigpackage_info_reply::MergeFrom(from._activity_bigpackage_info_reply());
    }
    if (from.has__activity_bigpackage_reward_reply()) {
      mutable__activity_bigpackage_reward_reply()->::client_baseserver::activity_bigpackage_reward_reply::MergeFrom(from._activity_bigpackage_reward_reply());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has__activity_bigpackage_reset_reply()) {
      mutable__activity_bigpackage_reset_reply()->::client_baseserver::activity_bigpackage_reset_reply::MergeFrom(from._activity_bigpackage_reset_reply());
    }
    if (from.has__fb_attention_reply()) {
      mutable__fb_attention_reply()->::client_baseserver::fb_attention_reply::MergeFrom(from._fb_attention_reply());
    }
    if (from.has__continue_pay_reply()) {
      mutable__continue_pay_reply()->::client_baseserver::continue_pay_reply::MergeFrom(from._continue_pay_reply());
    }
    if (from.has__recharge_rebate_reply()) {
      mutable__recharge_rebate_reply()->::client_baseserver::recharge_rebate_reply::MergeFrom(from._recharge_rebate_reply());
    }
    if (from.has__every_day_happy_reply()) {
      mutable__every_day_happy_reply()->::client_baseserver::every_day_happy_reply::MergeFrom(from._every_day_happy_reply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void down_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void down_msg::CopyFrom(const down_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool down_msg::IsInitialized() const {

  if (has__login_reply()) {
    if (!this->_login_reply().IsInitialized()) return false;
  }
  if (has__reset()) {
    if (!this->_reset().IsInitialized()) return false;
  }
  if (has__enter_stage_reply()) {
    if (!this->_enter_stage_reply().IsInitialized()) return false;
  }
  if (has__exit_stage_reply()) {
    if (!this->_exit_stage_reply().IsInitialized()) return false;
  }
  if (has__hero_upgrade_reply()) {
    if (!this->_hero_upgrade_reply().IsInitialized()) return false;
  }
  if (has__equip_synthesis_reply()) {
    if (!this->_equip_synthesis_reply().IsInitialized()) return false;
  }
  if (has__wear_equip_reply()) {
    if (!this->_wear_equip_reply().IsInitialized()) return false;
  }
  if (has__consume_item_reply()) {
    if (!this->_consume_item_reply().IsInitialized()) return false;
  }
  if (has__shop_refresh_reply()) {
    if (!this->_shop_refresh_reply().IsInitialized()) return false;
  }
  if (has__shop_consume_reply()) {
    if (!this->_shop_consume_reply().IsInitialized()) return false;
  }
  if (has__skill_levelup_reply()) {
    if (!this->_skill_levelup_reply().IsInitialized()) return false;
  }
  if (has__sell_item_reply()) {
    if (!this->_sell_item_reply().IsInitialized()) return false;
  }
  if (has__fragment_compose_reply()) {
    if (!this->_fragment_compose_reply().IsInitialized()) return false;
  }
  if (has__hero_equip_upgrade_reply()) {
    if (!this->_hero_equip_upgrade_reply().IsInitialized()) return false;
  }
  if (has__require_rewards_reply()) {
    if (!this->_require_rewards_reply().IsInitialized()) return false;
  }
  if (has__job_rewards_reply()) {
    if (!this->_job_rewards_reply().IsInitialized()) return false;
  }
  if (has__reset_elite_reply()) {
    if (!this->_reset_elite_reply().IsInitialized()) return false;
  }
  if (has__sweep_stage_reply()) {
    if (!this->_sweep_stage_reply().IsInitialized()) return false;
  }
  if (has__tavern_draw_reply()) {
    if (!this->_tavern_draw_reply().IsInitialized()) return false;
  }
  if (has__sync_skill_stren_reply()) {
    if (!this->_sync_skill_stren_reply().IsInitialized()) return false;
  }
  if (has__query_data_reply()) {
    if (!this->_query_data_reply().IsInitialized()) return false;
  }
  if (has__hero_evolve_reply()) {
    if (!this->_hero_evolve_reply().IsInitialized()) return false;
  }
  if (has__sync_vitality_reply()) {
    if (!this->_sync_vitality_reply().IsInitialized()) return false;
  }
  if (has__user_check()) {
    if (!this->_user_check().IsInitialized()) return false;
  }
  if (has__tutorial_reply()) {
    if (!this->_tutorial_reply().IsInitialized()) return false;
  }
  if (has__error_info()) {
    if (!this->_error_info().IsInitialized()) return false;
  }
  if (has__ladder_reply()) {
    if (!this->_ladder_reply().IsInitialized()) return false;
  }
  if (has__set_name_reply()) {
    if (!this->_set_name_reply().IsInitialized()) return false;
  }
  if (has__midas_reply()) {
    if (!this->_midas_reply().IsInitialized()) return false;
  }
  if (has__open_shop_reply()) {
    if (!this->_open_shop_reply().IsInitialized()) return false;
  }
  if (has__charge_reply()) {
    if (!this->_charge_reply().IsInitialized()) return false;
  }
  if (has__sdk_login_reply()) {
    if (!this->_sdk_login_reply().IsInitialized()) return false;
  }
  if (has__set_avatar_reply()) {
    if (!this->_set_avatar_reply().IsInitialized()) return false;
  }
  if (has__ask_daily_login_reply()) {
    if (!this->_ask_daily_login_reply().IsInitialized()) return false;
  }
  if (has__tbc_reply()) {
    if (!this->_tbc_reply().IsInitialized()) return false;
  }
  if (has__get_maillist_reply()) {
    if (!this->_get_maillist_reply().IsInitialized()) return false;
  }
  if (has__read_mail_reply()) {
    if (!this->_read_mail_reply().IsInitialized()) return false;
  }
  if (has__get_vip_gift_reply()) {
    if (!this->_get_vip_gift_reply().IsInitialized()) return false;
  }
  if (has__chat_reply()) {
    if (!this->_chat_reply().IsInitialized()) return false;
  }
  if (has__cdkey_gift_reply()) {
    if (!this->_cdkey_gift_reply().IsInitialized()) return false;
  }
  if (has__guild_reply()) {
    if (!this->_guild_reply().IsInitialized()) return false;
  }
  if (has__ask_activity_info_reply()) {
    if (!this->_ask_activity_info_reply().IsInitialized()) return false;
  }
  if (has__excavate_reply()) {
    if (!this->_excavate_reply().IsInitialized()) return false;
  }
  if (has__system_setting_reply()) {
    if (!this->_system_setting_reply().IsInitialized()) return false;
  }
  if (has__query_split_data_reply()) {
    if (!this->_query_split_data_reply().IsInitialized()) return false;
  }
  if (has__query_split_return_reply()) {
    if (!this->_query_split_return_reply().IsInitialized()) return false;
  }
  if (has__split_hero_reply()) {
    if (!this->_split_hero_reply().IsInitialized()) return false;
  }
  if (has__worldcup_reply()) {
    if (!this->_worldcup_reply().IsInitialized()) return false;
  }
  if (has__battle_check_fail()) {
    if (!this->_battle_check_fail().IsInitialized()) return false;
  }
  if (has__query_replay()) {
    if (!this->_query_replay().IsInitialized()) return false;
  }
  if (has__super_link()) {
    if (!this->_super_link().IsInitialized()) return false;
  }
  if (has__query_ranklist_reply()) {
    if (!this->_query_ranklist_reply().IsInitialized()) return false;
  }
  if (has__request_guild_log_reply()) {
    if (!this->_request_guild_log_reply().IsInitialized()) return false;
  }
  if (has__change_server_reply()) {
    if (!this->_change_server_reply().IsInitialized()) return false;
  }
  if (has__activity_info_reply()) {
    if (!this->_activity_info_reply().IsInitialized()) return false;
  }
  if (has__activity_lotto_info_reply()) {
    if (!this->_activity_lotto_info_reply().IsInitialized()) return false;
  }
  if (has__activity_lotto_reward_reply()) {
    if (!this->_activity_lotto_reward_reply().IsInitialized()) return false;
  }
  if (has__activity_bigpackage_info_reply()) {
    if (!this->_activity_bigpackage_info_reply().IsInitialized()) return false;
  }
  if (has__activity_bigpackage_reward_reply()) {
    if (!this->_activity_bigpackage_reward_reply().IsInitialized()) return false;
  }
  if (has__activity_bigpackage_reset_reply()) {
    if (!this->_activity_bigpackage_reset_reply().IsInitialized()) return false;
  }
  if (has__fb_attention_reply()) {
    if (!this->_fb_attention_reply().IsInitialized()) return false;
  }
  if (has__continue_pay_reply()) {
    if (!this->_continue_pay_reply().IsInitialized()) return false;
  }
  if (has__recharge_rebate_reply()) {
    if (!this->_recharge_rebate_reply().IsInitialized()) return false;
  }
  if (has__every_day_happy_reply()) {
    if (!this->_every_day_happy_reply().IsInitialized()) return false;
  }
  return true;
}

void down_msg::Swap(down_msg* other) {
  if (other != this) {
    std::swap(_login_reply_, other->_login_reply_);
    std::swap(_reset_, other->_reset_);
    std::swap(_enter_stage_reply_, other->_enter_stage_reply_);
    std::swap(_exit_stage_reply_, other->_exit_stage_reply_);
    std::swap(_hero_upgrade_reply_, other->_hero_upgrade_reply_);
    std::swap(_equip_synthesis_reply_, other->_equip_synthesis_reply_);
    std::swap(_wear_equip_reply_, other->_wear_equip_reply_);
    std::swap(_consume_item_reply_, other->_consume_item_reply_);
    std::swap(_shop_refresh_reply_, other->_shop_refresh_reply_);
    std::swap(_shop_consume_reply_, other->_shop_consume_reply_);
    std::swap(_skill_levelup_reply_, other->_skill_levelup_reply_);
    std::swap(_sell_item_reply_, other->_sell_item_reply_);
    std::swap(_fragment_compose_reply_, other->_fragment_compose_reply_);
    std::swap(_hero_equip_upgrade_reply_, other->_hero_equip_upgrade_reply_);
    std::swap(_trigger_task_reply_, other->_trigger_task_reply_);
    std::swap(_require_rewards_reply_, other->_require_rewards_reply_);
    std::swap(_trigger_job_reply_, other->_trigger_job_reply_);
    std::swap(_job_rewards_reply_, other->_job_rewards_reply_);
    std::swap(_reset_elite_reply_, other->_reset_elite_reply_);
    std::swap(_sweep_stage_reply_, other->_sweep_stage_reply_);
    std::swap(_tavern_draw_reply_, other->_tavern_draw_reply_);
    std::swap(_sync_skill_stren_reply_, other->_sync_skill_stren_reply_);
    std::swap(_query_data_reply_, other->_query_data_reply_);
    std::swap(_hero_evolve_reply_, other->_hero_evolve_reply_);
    std::swap(_sync_vitality_reply_, other->_sync_vitality_reply_);
    std::swap(_user_check_, other->_user_check_);
    std::swap(_tutorial_reply_, other->_tutorial_reply_);
    std::swap(_error_info_, other->_error_info_);
    std::swap(_ladder_reply_, other->_ladder_reply_);
    std::swap(_set_name_reply_, other->_set_name_reply_);
    std::swap(_midas_reply_, other->_midas_reply_);
    std::swap(_open_shop_reply_, other->_open_shop_reply_);
    std::swap(_charge_reply_, other->_charge_reply_);
    std::swap(_sdk_login_reply_, other->_sdk_login_reply_);
    std::swap(_set_avatar_reply_, other->_set_avatar_reply_);
    std::swap(_notify_msg_, other->_notify_msg_);
    std::swap(_ask_daily_login_reply_, other->_ask_daily_login_reply_);
    std::swap(_tbc_reply_, other->_tbc_reply_);
    std::swap(_get_maillist_reply_, other->_get_maillist_reply_);
    std::swap(_read_mail_reply_, other->_read_mail_reply_);
    std::swap(_svr_time_, other->_svr_time_);
    std::swap(_get_vip_gift_reply_, other->_get_vip_gift_reply_);
    std::swap(_chat_reply_, other->_chat_reply_);
    std::swap(_cdkey_gift_reply_, other->_cdkey_gift_reply_);
    std::swap(_guild_reply_, other->_guild_reply_);
    std::swap(_ask_magicsoul_reply_, other->_ask_magicsoul_reply_);
    std::swap(_ask_activity_info_reply_, other->_ask_activity_info_reply_);
    std::swap(_excavate_reply_, other->_excavate_reply_);
    std::swap(_system_setting_reply_, other->_system_setting_reply_);
    std::swap(_query_split_data_reply_, other->_query_split_data_reply_);
    std::swap(_query_split_return_reply_, other->_query_split_return_reply_);
    std::swap(_split_hero_reply_, other->_split_hero_reply_);
    std::swap(_worldcup_reply_, other->_worldcup_reply_);
    std::swap(_battle_check_fail_, other->_battle_check_fail_);
    std::swap(_query_replay_, other->_query_replay_);
    std::swap(_super_link_, other->_super_link_);
    std::swap(_query_ranklist_reply_, other->_query_ranklist_reply_);
    std::swap(_request_guild_log_reply_, other->_request_guild_log_reply_);
    std::swap(_change_server_reply_, other->_change_server_reply_);
    std::swap(_activity_info_reply_, other->_activity_info_reply_);
    std::swap(_activity_lotto_info_reply_, other->_activity_lotto_info_reply_);
    std::swap(_activity_lotto_reward_reply_, other->_activity_lotto_reward_reply_);
    std::swap(_activity_bigpackage_info_reply_, other->_activity_bigpackage_info_reply_);
    std::swap(_activity_bigpackage_reward_reply_, other->_activity_bigpackage_reward_reply_);
    std::swap(_activity_bigpackage_reset_reply_, other->_activity_bigpackage_reset_reply_);
    std::swap(_fb_attention_reply_, other->_fb_attention_reply_);
    std::swap(_continue_pay_reply_, other->_continue_pay_reply_);
    std::swap(_recharge_rebate_reply_, other->_recharge_rebate_reply_);
    std::swap(_every_day_happy_reply_, other->_every_day_happy_reply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata down_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = down_msg_descriptor_;
  metadata.reflection = down_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int system_setting_reply::kRequestFieldNumber;
const int system_setting_reply::kChangeFieldNumber;
#endif  // !_MSC_VER

system_setting_reply::system_setting_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.system_setting_reply)
}

void system_setting_reply::InitAsDefaultInstance() {
  _request_ = const_cast< ::client_baseserver::system_setting_request*>(&::client_baseserver::system_setting_request::default_instance());
  _change_ = const_cast< ::client_baseserver::system_setting_change*>(&::client_baseserver::system_setting_change::default_instance());
}

system_setting_reply::system_setting_reply(const system_setting_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.system_setting_reply)
}

void system_setting_reply::SharedCtor() {
  _cached_size_ = 0;
  _request_ = NULL;
  _change_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

system_setting_reply::~system_setting_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.system_setting_reply)
  SharedDtor();
}

void system_setting_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _request_;
    delete _change_;
  }
}

void system_setting_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* system_setting_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return system_setting_reply_descriptor_;
}

const system_setting_reply& system_setting_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

system_setting_reply* system_setting_reply::default_instance_ = NULL;

system_setting_reply* system_setting_reply::New() const {
  return new system_setting_reply;
}

void system_setting_reply::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has__request()) {
      if (_request_ != NULL) _request_->::client_baseserver::system_setting_request::Clear();
    }
    if (has__change()) {
      if (_change_ != NULL) _change_->::client_baseserver::system_setting_change::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool system_setting_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.system_setting_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_baseserver.system_setting_request _request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__change;
        break;
      }

      // optional .client_baseserver.system_setting_change _change = 2;
      case 2: {
        if (tag == 18) {
         parse__change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__change()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.system_setting_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.system_setting_reply)
  return false;
#undef DO_
}

void system_setting_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.system_setting_reply)
  // optional .client_baseserver.system_setting_request _request = 1;
  if (has__request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_request(), output);
  }

  // optional .client_baseserver.system_setting_change _change = 2;
  if (has__change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_change(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.system_setting_reply)
}

::google::protobuf::uint8* system_setting_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.system_setting_reply)
  // optional .client_baseserver.system_setting_request _request = 1;
  if (has__request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_request(), target);
  }

  // optional .client_baseserver.system_setting_change _change = 2;
  if (has__change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_change(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.system_setting_reply)
  return target;
}

int system_setting_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_baseserver.system_setting_request _request = 1;
    if (has__request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_request());
    }

    // optional .client_baseserver.system_setting_change _change = 2;
    if (has__change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_change());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void system_setting_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const system_setting_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const system_setting_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void system_setting_reply::MergeFrom(const system_setting_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__request()) {
      mutable__request()->::client_baseserver::system_setting_request::MergeFrom(from._request());
    }
    if (from.has__change()) {
      mutable__change()->::client_baseserver::system_setting_change::MergeFrom(from._change());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void system_setting_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void system_setting_reply::CopyFrom(const system_setting_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool system_setting_reply::IsInitialized() const {

  if (has__request()) {
    if (!this->_request().IsInitialized()) return false;
  }
  if (has__change()) {
    if (!this->_change().IsInitialized()) return false;
  }
  return true;
}

void system_setting_reply::Swap(system_setting_reply* other) {
  if (other != this) {
    std::swap(_request_, other->_request_);
    std::swap(_change_, other->_change_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata system_setting_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = system_setting_reply_descriptor_;
  metadata.reflection = system_setting_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int system_setting_change::kResultFieldNumber;
#endif  // !_MSC_VER

system_setting_change::system_setting_change()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.system_setting_change)
}

void system_setting_change::InitAsDefaultInstance() {
}

system_setting_change::system_setting_change(const system_setting_change& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.system_setting_change)
}

void system_setting_change::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

system_setting_change::~system_setting_change() {
  // @@protoc_insertion_point(destructor:client_baseserver.system_setting_change)
  SharedDtor();
}

void system_setting_change::SharedDtor() {
  if (this != default_instance_) {
  }
}

void system_setting_change::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* system_setting_change::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return system_setting_change_descriptor_;
}

const system_setting_change& system_setting_change::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

system_setting_change* system_setting_change::default_instance_ = NULL;

system_setting_change* system_setting_change::New() const {
  return new system_setting_change;
}

void system_setting_change::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool system_setting_change::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.system_setting_change)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.system_setting_change)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.system_setting_change)
  return false;
#undef DO_
}

void system_setting_change::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.system_setting_change)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.system_setting_change)
}

::google::protobuf::uint8* system_setting_change::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.system_setting_change)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.system_setting_change)
  return target;
}

int system_setting_change::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void system_setting_change::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const system_setting_change* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const system_setting_change*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void system_setting_change::MergeFrom(const system_setting_change& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void system_setting_change::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void system_setting_change::CopyFrom(const system_setting_change& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool system_setting_change::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void system_setting_change::Swap(system_setting_change* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata system_setting_change::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = system_setting_change_descriptor_;
  metadata.reflection = system_setting_change_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int system_setting_request::kSystemSettingItemFieldNumber;
#endif  // !_MSC_VER

system_setting_request::system_setting_request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.system_setting_request)
}

void system_setting_request::InitAsDefaultInstance() {
}

system_setting_request::system_setting_request(const system_setting_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.system_setting_request)
}

void system_setting_request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

system_setting_request::~system_setting_request() {
  // @@protoc_insertion_point(destructor:client_baseserver.system_setting_request)
  SharedDtor();
}

void system_setting_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void system_setting_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* system_setting_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return system_setting_request_descriptor_;
}

const system_setting_request& system_setting_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

system_setting_request* system_setting_request::default_instance_ = NULL;

system_setting_request* system_setting_request::New() const {
  return new system_setting_request;
}

void system_setting_request::Clear() {
  _system_setting_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool system_setting_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.system_setting_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.system_setting_item _system_setting_item = 1;
      case 1: {
        if (tag == 10) {
         parse__system_setting_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__system_setting_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__system_setting_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.system_setting_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.system_setting_request)
  return false;
#undef DO_
}

void system_setting_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.system_setting_request)
  // repeated .client_baseserver.system_setting_item _system_setting_item = 1;
  for (int i = 0; i < this->_system_setting_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_system_setting_item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.system_setting_request)
}

::google::protobuf::uint8* system_setting_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.system_setting_request)
  // repeated .client_baseserver.system_setting_item _system_setting_item = 1;
  for (int i = 0; i < this->_system_setting_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_system_setting_item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.system_setting_request)
  return target;
}

int system_setting_request::ByteSize() const {
  int total_size = 0;

  // repeated .client_baseserver.system_setting_item _system_setting_item = 1;
  total_size += 1 * this->_system_setting_item_size();
  for (int i = 0; i < this->_system_setting_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_system_setting_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void system_setting_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const system_setting_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const system_setting_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void system_setting_request::MergeFrom(const system_setting_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  _system_setting_item_.MergeFrom(from._system_setting_item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void system_setting_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void system_setting_request::CopyFrom(const system_setting_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool system_setting_request::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_system_setting_item())) return false;
  return true;
}

void system_setting_request::Swap(system_setting_request* other) {
  if (other != this) {
    _system_setting_item_.Swap(&other->_system_setting_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata system_setting_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = system_setting_request_descriptor_;
  metadata.reflection = system_setting_request_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* system_setting_item_setting_status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return system_setting_item_setting_status_descriptor_;
}
bool system_setting_item_setting_status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const system_setting_item_setting_status system_setting_item::on;
const system_setting_item_setting_status system_setting_item::off;
const system_setting_item_setting_status system_setting_item::setting_status_MIN;
const system_setting_item_setting_status system_setting_item::setting_status_MAX;
const int system_setting_item::setting_status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int system_setting_item::kKeyFieldNumber;
const int system_setting_item::kValueFieldNumber;
#endif  // !_MSC_VER

system_setting_item::system_setting_item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.system_setting_item)
}

void system_setting_item::InitAsDefaultInstance() {
}

system_setting_item::system_setting_item(const system_setting_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.system_setting_item)
}

void system_setting_item::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

system_setting_item::~system_setting_item() {
  // @@protoc_insertion_point(destructor:client_baseserver.system_setting_item)
  SharedDtor();
}

void system_setting_item::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void system_setting_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* system_setting_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return system_setting_item_descriptor_;
}

const system_setting_item& system_setting_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

system_setting_item* system_setting_item::default_instance_ = NULL;

system_setting_item* system_setting_item::New() const {
  return new system_setting_item;
}

void system_setting_item::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    value_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool system_setting_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.system_setting_item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required .client_baseserver.system_setting_item.setting_status value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::system_setting_item_setting_status_IsValid(value)) {
            set_value(static_cast< ::client_baseserver::system_setting_item_setting_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.system_setting_item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.system_setting_item)
  return false;
#undef DO_
}

void system_setting_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.system_setting_item)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required .client_baseserver.system_setting_item.setting_status value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.system_setting_item)
}

::google::protobuf::uint8* system_setting_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.system_setting_item)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required .client_baseserver.system_setting_item.setting_status value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.system_setting_item)
  return target;
}

int system_setting_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required .client_baseserver.system_setting_item.setting_status value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void system_setting_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const system_setting_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const system_setting_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void system_setting_item::MergeFrom(const system_setting_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void system_setting_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void system_setting_item::CopyFrom(const system_setting_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool system_setting_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void system_setting_item::Swap(system_setting_item* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata system_setting_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = system_setting_item_descriptor_;
  metadata.reflection = system_setting_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int global_config::kHeroSplitEndingFieldNumber;
#endif  // !_MSC_VER

global_config::global_config()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.global_config)
}

void global_config::InitAsDefaultInstance() {
}

global_config::global_config(const global_config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.global_config)
}

void global_config::SharedCtor() {
  _cached_size_ = 0;
  _hero_split_ending_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

global_config::~global_config() {
  // @@protoc_insertion_point(destructor:client_baseserver.global_config)
  SharedDtor();
}

void global_config::SharedDtor() {
  if (this != default_instance_) {
  }
}

void global_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* global_config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return global_config_descriptor_;
}

const global_config& global_config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

global_config* global_config::default_instance_ = NULL;

global_config* global_config::New() const {
  return new global_config;
}

void global_config::Clear() {
  _hero_split_ending_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool global_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.global_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 _hero_split_ending = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_hero_split_ending_)));
          set_has__hero_split_ending();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.global_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.global_config)
  return false;
#undef DO_
}

void global_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.global_config)
  // optional uint32 _hero_split_ending = 1;
  if (has__hero_split_ending()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_hero_split_ending(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.global_config)
}

::google::protobuf::uint8* global_config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.global_config)
  // optional uint32 _hero_split_ending = 1;
  if (has__hero_split_ending()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_hero_split_ending(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.global_config)
  return target;
}

int global_config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 _hero_split_ending = 1;
    if (has__hero_split_ending()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_hero_split_ending());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void global_config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const global_config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const global_config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void global_config::MergeFrom(const global_config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__hero_split_ending()) {
      set__hero_split_ending(from._hero_split_ending());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void global_config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void global_config::CopyFrom(const global_config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool global_config::IsInitialized() const {

  return true;
}

void global_config::Swap(global_config* other) {
  if (other != this) {
    std::swap(_hero_split_ending_, other->_hero_split_ending_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata global_config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = global_config_descriptor_;
  metadata.reflection = global_config_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int login_reply::kResultFieldNumber;
const int login_reply::kUserFieldNumber;
const int login_reply::kTimeZoneFieldNumber;
#endif  // !_MSC_VER

login_reply::login_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.login_reply)
}

void login_reply::InitAsDefaultInstance() {
  _user_ = const_cast< ::client_baseserver::user*>(&::client_baseserver::user::default_instance());
}

login_reply::login_reply(const login_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.login_reply)
}

void login_reply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _result_ = 0;
  _user_ = NULL;
  _time_zone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login_reply::~login_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.login_reply)
  SharedDtor();
}

void login_reply::SharedDtor() {
  if (_time_zone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _time_zone_;
  }
  if (this != default_instance_) {
    delete _user_;
  }
}

void login_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_reply_descriptor_;
}

const login_reply& login_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

login_reply* login_reply::default_instance_ = NULL;

login_reply* login_reply::New() const {
  return new login_reply;
}

void login_reply::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    _result_ = 0;
    if (has__user()) {
      if (_user_ != NULL) _user_->::client_baseserver::user::Clear();
    }
    if (has__time_zone()) {
      if (_time_zone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _time_zone_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool login_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.login_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__user;
        break;
      }

      // optional .client_baseserver.user _user = 2;
      case 2: {
        if (tag == 18) {
         parse__user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__time_zone;
        break;
      }

      // required string _time_zone = 3;
      case 3: {
        if (tag == 26) {
         parse__time_zone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__time_zone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_time_zone().data(), this->_time_zone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_time_zone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.login_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.login_reply)
  return false;
#undef DO_
}

void login_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.login_reply)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // optional .client_baseserver.user _user = 2;
  if (has__user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_user(), output);
  }

  // required string _time_zone = 3;
  if (has__time_zone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_time_zone().data(), this->_time_zone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_time_zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->_time_zone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.login_reply)
}

::google::protobuf::uint8* login_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.login_reply)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // optional .client_baseserver.user _user = 2;
  if (has__user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_user(), target);
  }

  // required string _time_zone = 3;
  if (has__time_zone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_time_zone().data(), this->_time_zone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_time_zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->_time_zone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.login_reply)
  return target;
}

int login_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional .client_baseserver.user _user = 2;
    if (has__user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_user());
    }

    // required string _time_zone = 3;
    if (has__time_zone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_time_zone());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const login_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login_reply::MergeFrom(const login_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__user()) {
      mutable__user()->::client_baseserver::user::MergeFrom(from._user());
    }
    if (from.has__time_zone()) {
      set__time_zone(from._time_zone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void login_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_reply::CopyFrom(const login_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has__user()) {
    if (!this->_user().IsInitialized()) return false;
  }
  return true;
}

void login_reply::Swap(login_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_user_, other->_user_);
    std::swap(_time_zone_, other->_time_zone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata login_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_reply_descriptor_;
  metadata.reflection = login_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sdk_login_reply::kResultFieldNumber;
const int sdk_login_reply::kUinFieldNumber;
const int sdk_login_reply::kAccessTokenFieldNumber;
const int sdk_login_reply::kRechargeUrlFieldNumber;
#endif  // !_MSC_VER

sdk_login_reply::sdk_login_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.sdk_login_reply)
}

void sdk_login_reply::InitAsDefaultInstance() {
}

sdk_login_reply::sdk_login_reply(const sdk_login_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.sdk_login_reply)
}

void sdk_login_reply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _result_ = 1;
  _uin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _recharge_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sdk_login_reply::~sdk_login_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.sdk_login_reply)
  SharedDtor();
}

void sdk_login_reply::SharedDtor() {
  if (_uin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _uin_;
  }
  if (_access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _access_token_;
  }
  if (_recharge_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _recharge_url_;
  }
  if (this != default_instance_) {
  }
}

void sdk_login_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sdk_login_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sdk_login_reply_descriptor_;
}

const sdk_login_reply& sdk_login_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

sdk_login_reply* sdk_login_reply::default_instance_ = NULL;

sdk_login_reply* sdk_login_reply::New() const {
  return new sdk_login_reply;
}

void sdk_login_reply::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    _result_ = 1;
    if (has__uin()) {
      if (_uin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _uin_->clear();
      }
    }
    if (has__access_token()) {
      if (_access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _access_token_->clear();
      }
    }
    if (has__recharge_url()) {
      if (_recharge_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _recharge_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sdk_login_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.sdk_login_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1 [default = fail];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__uin;
        break;
      }

      // required string _uin = 2;
      case 2: {
        if (tag == 18) {
         parse__uin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__uin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_uin().data(), this->_uin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_uin");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__access_token;
        break;
      }

      // optional string _access_token = 3;
      case 3: {
        if (tag == 26) {
         parse__access_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_access_token().data(), this->_access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__recharge_url;
        break;
      }

      // optional string _recharge_url = 4;
      case 4: {
        if (tag == 34) {
         parse__recharge_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__recharge_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_recharge_url().data(), this->_recharge_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_recharge_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.sdk_login_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.sdk_login_reply)
  return false;
#undef DO_
}

void sdk_login_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.sdk_login_reply)
  // required .client_baseserver.result _result = 1 [default = fail];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // required string _uin = 2;
  if (has__uin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_uin().data(), this->_uin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_uin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->_uin(), output);
  }

  // optional string _access_token = 3;
  if (has__access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_access_token().data(), this->_access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->_access_token(), output);
  }

  // optional string _recharge_url = 4;
  if (has__recharge_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_recharge_url().data(), this->_recharge_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_recharge_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->_recharge_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.sdk_login_reply)
}

::google::protobuf::uint8* sdk_login_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.sdk_login_reply)
  // required .client_baseserver.result _result = 1 [default = fail];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // required string _uin = 2;
  if (has__uin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_uin().data(), this->_uin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_uin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_uin(), target);
  }

  // optional string _access_token = 3;
  if (has__access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_access_token().data(), this->_access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->_access_token(), target);
  }

  // optional string _recharge_url = 4;
  if (has__recharge_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_recharge_url().data(), this->_recharge_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_recharge_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->_recharge_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.sdk_login_reply)
  return target;
}

int sdk_login_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1 [default = fail];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // required string _uin = 2;
    if (has__uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_uin());
    }

    // optional string _access_token = 3;
    if (has__access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_access_token());
    }

    // optional string _recharge_url = 4;
    if (has__recharge_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_recharge_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sdk_login_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sdk_login_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sdk_login_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sdk_login_reply::MergeFrom(const sdk_login_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__uin()) {
      set__uin(from._uin());
    }
    if (from.has__access_token()) {
      set__access_token(from._access_token());
    }
    if (from.has__recharge_url()) {
      set__recharge_url(from._recharge_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sdk_login_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sdk_login_reply::CopyFrom(const sdk_login_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sdk_login_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sdk_login_reply::Swap(sdk_login_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_uin_, other->_uin_);
    std::swap(_access_token_, other->_access_token_);
    std::swap(_recharge_url_, other->_recharge_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sdk_login_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sdk_login_reply_descriptor_;
  metadata.reflection = sdk_login_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_check::kUserFieldNumber;
#endif  // !_MSC_VER

user_check::user_check()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.user_check)
}

void user_check::InitAsDefaultInstance() {
  _user_ = const_cast< ::client_baseserver::user*>(&::client_baseserver::user::default_instance());
}

user_check::user_check(const user_check& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.user_check)
}

void user_check::SharedCtor() {
  _cached_size_ = 0;
  _user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_check::~user_check() {
  // @@protoc_insertion_point(destructor:client_baseserver.user_check)
  SharedDtor();
}

void user_check::SharedDtor() {
  if (this != default_instance_) {
    delete _user_;
  }
}

void user_check::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_check::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_check_descriptor_;
}

const user_check& user_check::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

user_check* user_check::default_instance_ = NULL;

user_check* user_check::New() const {
  return new user_check;
}

void user_check::Clear() {
  if (has__user()) {
    if (_user_ != NULL) _user_->::client_baseserver::user::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_check::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.user_check)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.user _user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.user_check)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.user_check)
  return false;
#undef DO_
}

void user_check::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.user_check)
  // required .client_baseserver.user _user = 1;
  if (has__user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.user_check)
}

::google::protobuf::uint8* user_check::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.user_check)
  // required .client_baseserver.user _user = 1;
  if (has__user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.user_check)
  return target;
}

int user_check::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.user _user = 1;
    if (has__user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_check::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_check* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_check*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_check::MergeFrom(const user_check& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__user()) {
      mutable__user()->::client_baseserver::user::MergeFrom(from._user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_check::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_check::CopyFrom(const user_check& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_check::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__user()) {
    if (!this->_user().IsInitialized()) return false;
  }
  return true;
}

void user_check::Swap(user_check* other) {
  if (other != this) {
    std::swap(_user_, other->_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_check::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_check_descriptor_;
  metadata.reflection = user_check_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reset::kUserFieldNumber;
#endif  // !_MSC_VER

reset::reset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.reset)
}

void reset::InitAsDefaultInstance() {
  _user_ = const_cast< ::client_baseserver::user*>(&::client_baseserver::user::default_instance());
}

reset::reset(const reset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.reset)
}

void reset::SharedCtor() {
  _cached_size_ = 0;
  _user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reset::~reset() {
  // @@protoc_insertion_point(destructor:client_baseserver.reset)
  SharedDtor();
}

void reset::SharedDtor() {
  if (this != default_instance_) {
    delete _user_;
  }
}

void reset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reset_descriptor_;
}

const reset& reset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

reset* reset::default_instance_ = NULL;

reset* reset::New() const {
  return new reset;
}

void reset::Clear() {
  if (has__user()) {
    if (_user_ != NULL) _user_->::client_baseserver::user::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.reset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.user _user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.reset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.reset)
  return false;
#undef DO_
}

void reset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.reset)
  // required .client_baseserver.user _user = 1;
  if (has__user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.reset)
}

::google::protobuf::uint8* reset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.reset)
  // required .client_baseserver.user _user = 1;
  if (has__user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.reset)
  return target;
}

int reset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.user _user = 1;
    if (has__user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reset::MergeFrom(const reset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__user()) {
      mutable__user()->::client_baseserver::user::MergeFrom(from._user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reset::CopyFrom(const reset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__user()) {
    if (!this->_user().IsInitialized()) return false;
  }
  return true;
}

void reset::Swap(reset* other) {
  if (other != this) {
    std::swap(_user_, other->_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reset_descriptor_;
  metadata.reflection = reset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int enter_stage_reply::kRseedFieldNumber;
const int enter_stage_reply::kLootsFieldNumber;
#endif  // !_MSC_VER

enter_stage_reply::enter_stage_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.enter_stage_reply)
}

void enter_stage_reply::InitAsDefaultInstance() {
}

enter_stage_reply::enter_stage_reply(const enter_stage_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.enter_stage_reply)
}

void enter_stage_reply::SharedCtor() {
  _cached_size_ = 0;
  _rseed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_stage_reply::~enter_stage_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.enter_stage_reply)
  SharedDtor();
}

void enter_stage_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void enter_stage_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_stage_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_stage_reply_descriptor_;
}

const enter_stage_reply& enter_stage_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

enter_stage_reply* enter_stage_reply::default_instance_ = NULL;

enter_stage_reply* enter_stage_reply::New() const {
  return new enter_stage_reply;
}

void enter_stage_reply::Clear() {
  _rseed_ = 0u;
  _loots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_stage_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.enter_stage_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _rseed = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_rseed_)));
          set_has__rseed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__loots;
        break;
      }

      // repeated uint32 _loots = 2;
      case 2: {
        if (tag == 16) {
         parse__loots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable__loots())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__loots())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__loots;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.enter_stage_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.enter_stage_reply)
  return false;
#undef DO_
}

void enter_stage_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.enter_stage_reply)
  // required uint32 _rseed = 1;
  if (has__rseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_rseed(), output);
  }

  // repeated uint32 _loots = 2;
  for (int i = 0; i < this->_loots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->_loots(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.enter_stage_reply)
}

::google::protobuf::uint8* enter_stage_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.enter_stage_reply)
  // required uint32 _rseed = 1;
  if (has__rseed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_rseed(), target);
  }

  // repeated uint32 _loots = 2;
  for (int i = 0; i < this->_loots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->_loots(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.enter_stage_reply)
  return target;
}

int enter_stage_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _rseed = 1;
    if (has__rseed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_rseed());
    }

  }
  // repeated uint32 _loots = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->_loots_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_loots(i));
    }
    total_size += 1 * this->_loots_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_stage_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_stage_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_stage_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_stage_reply::MergeFrom(const enter_stage_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _loots_.MergeFrom(from._loots_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__rseed()) {
      set__rseed(from._rseed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_stage_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_stage_reply::CopyFrom(const enter_stage_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_stage_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void enter_stage_reply::Swap(enter_stage_reply* other) {
  if (other != this) {
    std::swap(_rseed_, other->_rseed_);
    _loots_.Swap(&other->_loots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_stage_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_stage_reply_descriptor_;
  metadata.reflection = enter_stage_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_info_reply::kLastActivityInfoFieldNumber;
#endif  // !_MSC_VER

activity_info_reply::activity_info_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.activity_info_reply)
}

void activity_info_reply::InitAsDefaultInstance() {
}

activity_info_reply::activity_info_reply(const activity_info_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.activity_info_reply)
}

void activity_info_reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_info_reply::~activity_info_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.activity_info_reply)
  SharedDtor();
}

void activity_info_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_info_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_info_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_info_reply_descriptor_;
}

const activity_info_reply& activity_info_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

activity_info_reply* activity_info_reply::default_instance_ = NULL;

activity_info_reply* activity_info_reply::New() const {
  return new activity_info_reply;
}

void activity_info_reply::Clear() {
  _last_activity_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_info_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.activity_info_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.last_activity_info _last_activity_info = 1;
      case 1: {
        if (tag == 10) {
         parse__last_activity_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__last_activity_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__last_activity_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.activity_info_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.activity_info_reply)
  return false;
#undef DO_
}

void activity_info_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.activity_info_reply)
  // repeated .client_baseserver.last_activity_info _last_activity_info = 1;
  for (int i = 0; i < this->_last_activity_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_last_activity_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.activity_info_reply)
}

::google::protobuf::uint8* activity_info_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.activity_info_reply)
  // repeated .client_baseserver.last_activity_info _last_activity_info = 1;
  for (int i = 0; i < this->_last_activity_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_last_activity_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.activity_info_reply)
  return target;
}

int activity_info_reply::ByteSize() const {
  int total_size = 0;

  // repeated .client_baseserver.last_activity_info _last_activity_info = 1;
  total_size += 1 * this->_last_activity_info_size();
  for (int i = 0; i < this->_last_activity_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_last_activity_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_info_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_info_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_info_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_info_reply::MergeFrom(const activity_info_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _last_activity_info_.MergeFrom(from._last_activity_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_info_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_info_reply::CopyFrom(const activity_info_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_info_reply::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_last_activity_info())) return false;
  return true;
}

void activity_info_reply::Swap(activity_info_reply* other) {
  if (other != this) {
    _last_activity_info_.Swap(&other->_last_activity_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_info_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_info_reply_descriptor_;
  metadata.reflection = activity_info_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int last_activity_info::kGroupIdFieldNumber;
const int last_activity_info::kActivityIdsFieldNumber;
#endif  // !_MSC_VER

last_activity_info::last_activity_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.last_activity_info)
}

void last_activity_info::InitAsDefaultInstance() {
}

last_activity_info::last_activity_info(const last_activity_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.last_activity_info)
}

void last_activity_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

last_activity_info::~last_activity_info() {
  // @@protoc_insertion_point(destructor:client_baseserver.last_activity_info)
  SharedDtor();
}

void last_activity_info::SharedDtor() {
  if (_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _group_id_;
  }
  if (this != default_instance_) {
  }
}

void last_activity_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* last_activity_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return last_activity_info_descriptor_;
}

const last_activity_info& last_activity_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

last_activity_info* last_activity_info::default_instance_ = NULL;

last_activity_info* last_activity_info::New() const {
  return new last_activity_info;
}

void last_activity_info::Clear() {
  if (has__group_id()) {
    if (_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      _group_id_->clear();
    }
  }
  _activity_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool last_activity_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.last_activity_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_group_id().data(), this->_group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_group_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__activity_ids;
        break;
      }

      // repeated uint32 _activity_ids = 2;
      case 2: {
        if (tag == 16) {
         parse__activity_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable__activity_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__activity_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__activity_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.last_activity_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.last_activity_info)
  return false;
#undef DO_
}

void last_activity_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.last_activity_info)
  // required string _group_id = 1;
  if (has__group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_group_id().data(), this->_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->_group_id(), output);
  }

  // repeated uint32 _activity_ids = 2;
  for (int i = 0; i < this->_activity_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->_activity_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.last_activity_info)
}

::google::protobuf::uint8* last_activity_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.last_activity_info)
  // required string _group_id = 1;
  if (has__group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_group_id().data(), this->_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_group_id(), target);
  }

  // repeated uint32 _activity_ids = 2;
  for (int i = 0; i < this->_activity_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->_activity_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.last_activity_info)
  return target;
}

int last_activity_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _group_id = 1;
    if (has__group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_group_id());
    }

  }
  // repeated uint32 _activity_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->_activity_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_activity_ids(i));
    }
    total_size += 1 * this->_activity_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void last_activity_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const last_activity_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const last_activity_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void last_activity_info::MergeFrom(const last_activity_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  _activity_ids_.MergeFrom(from._activity_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__group_id()) {
      set__group_id(from._group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void last_activity_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void last_activity_info::CopyFrom(const last_activity_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool last_activity_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void last_activity_info::Swap(last_activity_info* other) {
  if (other != this) {
    std::swap(_group_id_, other->_group_id_);
    _activity_ids_.Swap(&other->_activity_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata last_activity_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = last_activity_info_descriptor_;
  metadata.reflection = last_activity_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_lotto_info_reply::kDiamondNumFieldNumber;
const int activity_lotto_info_reply::kCurrentStepFieldNumber;
const int activity_lotto_info_reply::kNeedDiamondNumFieldNumber;
const int activity_lotto_info_reply::kWinDiamondNumFieldNumber;
const int activity_lotto_info_reply::kRemainTimeFieldNumber;
const int activity_lotto_info_reply::kBroadcastTextsFieldNumber;
#endif  // !_MSC_VER

activity_lotto_info_reply::activity_lotto_info_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.activity_lotto_info_reply)
}

void activity_lotto_info_reply::InitAsDefaultInstance() {
}

activity_lotto_info_reply::activity_lotto_info_reply(const activity_lotto_info_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.activity_lotto_info_reply)
}

void activity_lotto_info_reply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _diamond_num_ = 0u;
  _current_step_ = 0u;
  _need_diamond_num_ = 0u;
  _win_diamond_num_ = 0u;
  _remain_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_lotto_info_reply::~activity_lotto_info_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.activity_lotto_info_reply)
  SharedDtor();
}

void activity_lotto_info_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_lotto_info_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_lotto_info_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_lotto_info_reply_descriptor_;
}

const activity_lotto_info_reply& activity_lotto_info_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

activity_lotto_info_reply* activity_lotto_info_reply::default_instance_ = NULL;

activity_lotto_info_reply* activity_lotto_info_reply::New() const {
  return new activity_lotto_info_reply;
}

void activity_lotto_info_reply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<activity_lotto_info_reply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(_diamond_num_, _win_diamond_num_);
    _remain_time_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _broadcast_texts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_lotto_info_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.activity_lotto_info_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _diamond_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_diamond_num_)));
          set_has__diamond_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__current_step;
        break;
      }

      // required uint32 _current_step = 2;
      case 2: {
        if (tag == 16) {
         parse__current_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_current_step_)));
          set_has__current_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__need_diamond_num;
        break;
      }

      // required uint32 _need_diamond_num = 3;
      case 3: {
        if (tag == 24) {
         parse__need_diamond_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_need_diamond_num_)));
          set_has__need_diamond_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__win_diamond_num;
        break;
      }

      // required uint32 _win_diamond_num = 4;
      case 4: {
        if (tag == 32) {
         parse__win_diamond_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_win_diamond_num_)));
          set_has__win_diamond_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__remain_time;
        break;
      }

      // required uint32 _remain_time = 5;
      case 5: {
        if (tag == 40) {
         parse__remain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_remain_time_)));
          set_has__remain_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse__broadcast_texts;
        break;
      }

      // repeated string _broadcast_texts = 6;
      case 6: {
        if (tag == 50) {
         parse__broadcast_texts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add__broadcast_texts()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_broadcast_texts(this->_broadcast_texts_size() - 1).data(),
            this->_broadcast_texts(this->_broadcast_texts_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_broadcast_texts");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse__broadcast_texts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.activity_lotto_info_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.activity_lotto_info_reply)
  return false;
#undef DO_
}

void activity_lotto_info_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.activity_lotto_info_reply)
  // required uint32 _diamond_num = 1;
  if (has__diamond_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_diamond_num(), output);
  }

  // required uint32 _current_step = 2;
  if (has__current_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_current_step(), output);
  }

  // required uint32 _need_diamond_num = 3;
  if (has__need_diamond_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_need_diamond_num(), output);
  }

  // required uint32 _win_diamond_num = 4;
  if (has__win_diamond_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_win_diamond_num(), output);
  }

  // required uint32 _remain_time = 5;
  if (has__remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_remain_time(), output);
  }

  // repeated string _broadcast_texts = 6;
  for (int i = 0; i < this->_broadcast_texts_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->_broadcast_texts(i).data(), this->_broadcast_texts(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "_broadcast_texts");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->_broadcast_texts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.activity_lotto_info_reply)
}

::google::protobuf::uint8* activity_lotto_info_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.activity_lotto_info_reply)
  // required uint32 _diamond_num = 1;
  if (has__diamond_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_diamond_num(), target);
  }

  // required uint32 _current_step = 2;
  if (has__current_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_current_step(), target);
  }

  // required uint32 _need_diamond_num = 3;
  if (has__need_diamond_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_need_diamond_num(), target);
  }

  // required uint32 _win_diamond_num = 4;
  if (has__win_diamond_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_win_diamond_num(), target);
  }

  // required uint32 _remain_time = 5;
  if (has__remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_remain_time(), target);
  }

  // repeated string _broadcast_texts = 6;
  for (int i = 0; i < this->_broadcast_texts_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_broadcast_texts(i).data(), this->_broadcast_texts(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_broadcast_texts");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->_broadcast_texts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.activity_lotto_info_reply)
  return target;
}

int activity_lotto_info_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _diamond_num = 1;
    if (has__diamond_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_diamond_num());
    }

    // required uint32 _current_step = 2;
    if (has__current_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_current_step());
    }

    // required uint32 _need_diamond_num = 3;
    if (has__need_diamond_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_need_diamond_num());
    }

    // required uint32 _win_diamond_num = 4;
    if (has__win_diamond_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_win_diamond_num());
    }

    // required uint32 _remain_time = 5;
    if (has__remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_remain_time());
    }

  }
  // repeated string _broadcast_texts = 6;
  total_size += 1 * this->_broadcast_texts_size();
  for (int i = 0; i < this->_broadcast_texts_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->_broadcast_texts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_lotto_info_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_lotto_info_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_lotto_info_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_lotto_info_reply::MergeFrom(const activity_lotto_info_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _broadcast_texts_.MergeFrom(from._broadcast_texts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__diamond_num()) {
      set__diamond_num(from._diamond_num());
    }
    if (from.has__current_step()) {
      set__current_step(from._current_step());
    }
    if (from.has__need_diamond_num()) {
      set__need_diamond_num(from._need_diamond_num());
    }
    if (from.has__win_diamond_num()) {
      set__win_diamond_num(from._win_diamond_num());
    }
    if (from.has__remain_time()) {
      set__remain_time(from._remain_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_lotto_info_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_lotto_info_reply::CopyFrom(const activity_lotto_info_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_lotto_info_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void activity_lotto_info_reply::Swap(activity_lotto_info_reply* other) {
  if (other != this) {
    std::swap(_diamond_num_, other->_diamond_num_);
    std::swap(_current_step_, other->_current_step_);
    std::swap(_need_diamond_num_, other->_need_diamond_num_);
    std::swap(_win_diamond_num_, other->_win_diamond_num_);
    std::swap(_remain_time_, other->_remain_time_);
    _broadcast_texts_.Swap(&other->_broadcast_texts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_lotto_info_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_lotto_info_reply_descriptor_;
  metadata.reflection = activity_lotto_info_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_lotto_reward_reply::kStatusFieldNumber;
const int activity_lotto_reward_reply::kRewardDiamonNumFieldNumber;
const int activity_lotto_reward_reply::kHaveNextRoundFieldNumber;
const int activity_lotto_reward_reply::kNeedDiamondNumFieldNumber;
const int activity_lotto_reward_reply::kDiamondNumFieldNumber;
#endif  // !_MSC_VER

activity_lotto_reward_reply::activity_lotto_reward_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.activity_lotto_reward_reply)
}

void activity_lotto_reward_reply::InitAsDefaultInstance() {
}

activity_lotto_reward_reply::activity_lotto_reward_reply(const activity_lotto_reward_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.activity_lotto_reward_reply)
}

void activity_lotto_reward_reply::SharedCtor() {
  _cached_size_ = 0;
  _status_ = 0u;
  _reward_diamon_num_ = 0u;
  _have_next_round_ = 0u;
  _need_diamond_num_ = 0u;
  _diamond_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_lotto_reward_reply::~activity_lotto_reward_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.activity_lotto_reward_reply)
  SharedDtor();
}

void activity_lotto_reward_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_lotto_reward_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_lotto_reward_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_lotto_reward_reply_descriptor_;
}

const activity_lotto_reward_reply& activity_lotto_reward_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

activity_lotto_reward_reply* activity_lotto_reward_reply::default_instance_ = NULL;

activity_lotto_reward_reply* activity_lotto_reward_reply::New() const {
  return new activity_lotto_reward_reply;
}

void activity_lotto_reward_reply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<activity_lotto_reward_reply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(_status_, _diamond_num_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_lotto_reward_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.activity_lotto_reward_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_status_)));
          set_has__status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__reward_diamon_num;
        break;
      }

      // required uint32 _reward_diamon_num = 2;
      case 2: {
        if (tag == 16) {
         parse__reward_diamon_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_reward_diamon_num_)));
          set_has__reward_diamon_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__have_next_round;
        break;
      }

      // required uint32 _have_next_round = 3;
      case 3: {
        if (tag == 24) {
         parse__have_next_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_have_next_round_)));
          set_has__have_next_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__need_diamond_num;
        break;
      }

      // optional uint32 _need_diamond_num = 4;
      case 4: {
        if (tag == 32) {
         parse__need_diamond_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_need_diamond_num_)));
          set_has__need_diamond_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__diamond_num;
        break;
      }

      // required uint32 _diamond_num = 5;
      case 5: {
        if (tag == 40) {
         parse__diamond_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_diamond_num_)));
          set_has__diamond_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.activity_lotto_reward_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.activity_lotto_reward_reply)
  return false;
#undef DO_
}

void activity_lotto_reward_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.activity_lotto_reward_reply)
  // required uint32 _status = 1;
  if (has__status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_status(), output);
  }

  // required uint32 _reward_diamon_num = 2;
  if (has__reward_diamon_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_reward_diamon_num(), output);
  }

  // required uint32 _have_next_round = 3;
  if (has__have_next_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_have_next_round(), output);
  }

  // optional uint32 _need_diamond_num = 4;
  if (has__need_diamond_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_need_diamond_num(), output);
  }

  // required uint32 _diamond_num = 5;
  if (has__diamond_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_diamond_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.activity_lotto_reward_reply)
}

::google::protobuf::uint8* activity_lotto_reward_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.activity_lotto_reward_reply)
  // required uint32 _status = 1;
  if (has__status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_status(), target);
  }

  // required uint32 _reward_diamon_num = 2;
  if (has__reward_diamon_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_reward_diamon_num(), target);
  }

  // required uint32 _have_next_round = 3;
  if (has__have_next_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_have_next_round(), target);
  }

  // optional uint32 _need_diamond_num = 4;
  if (has__need_diamond_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_need_diamond_num(), target);
  }

  // required uint32 _diamond_num = 5;
  if (has__diamond_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_diamond_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.activity_lotto_reward_reply)
  return target;
}

int activity_lotto_reward_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _status = 1;
    if (has__status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_status());
    }

    // required uint32 _reward_diamon_num = 2;
    if (has__reward_diamon_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_reward_diamon_num());
    }

    // required uint32 _have_next_round = 3;
    if (has__have_next_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_have_next_round());
    }

    // optional uint32 _need_diamond_num = 4;
    if (has__need_diamond_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_need_diamond_num());
    }

    // required uint32 _diamond_num = 5;
    if (has__diamond_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_diamond_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_lotto_reward_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_lotto_reward_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_lotto_reward_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_lotto_reward_reply::MergeFrom(const activity_lotto_reward_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__status()) {
      set__status(from._status());
    }
    if (from.has__reward_diamon_num()) {
      set__reward_diamon_num(from._reward_diamon_num());
    }
    if (from.has__have_next_round()) {
      set__have_next_round(from._have_next_round());
    }
    if (from.has__need_diamond_num()) {
      set__need_diamond_num(from._need_diamond_num());
    }
    if (from.has__diamond_num()) {
      set__diamond_num(from._diamond_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_lotto_reward_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_lotto_reward_reply::CopyFrom(const activity_lotto_reward_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_lotto_reward_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void activity_lotto_reward_reply::Swap(activity_lotto_reward_reply* other) {
  if (other != this) {
    std::swap(_status_, other->_status_);
    std::swap(_reward_diamon_num_, other->_reward_diamon_num_);
    std::swap(_have_next_round_, other->_have_next_round_);
    std::swap(_need_diamond_num_, other->_need_diamond_num_);
    std::swap(_diamond_num_, other->_diamond_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_lotto_reward_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_lotto_reward_reply_descriptor_;
  metadata.reflection = activity_lotto_reward_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_bigpackage_info_reply::kPeopleCountFieldNumber;
const int activity_bigpackage_info_reply::kRemainTimesFieldNumber;
const int activity_bigpackage_info_reply::kNextResetPriceFieldNumber;
const int activity_bigpackage_info_reply::kCurrentRankingFieldNumber;
const int activity_bigpackage_info_reply::kGetBoxIdsFieldNumber;
const int activity_bigpackage_info_reply::kDistanceScore20FieldNumber;
#endif  // !_MSC_VER

activity_bigpackage_info_reply::activity_bigpackage_info_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.activity_bigpackage_info_reply)
}

void activity_bigpackage_info_reply::InitAsDefaultInstance() {
}

activity_bigpackage_info_reply::activity_bigpackage_info_reply(const activity_bigpackage_info_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.activity_bigpackage_info_reply)
}

void activity_bigpackage_info_reply::SharedCtor() {
  _cached_size_ = 0;
  _people_count_ = 0u;
  _remain_times_ = 0u;
  _next_reset_price_ = 0u;
  _current_ranking_ = 0u;
  _distance_score_20_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_bigpackage_info_reply::~activity_bigpackage_info_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.activity_bigpackage_info_reply)
  SharedDtor();
}

void activity_bigpackage_info_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_bigpackage_info_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_bigpackage_info_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_bigpackage_info_reply_descriptor_;
}

const activity_bigpackage_info_reply& activity_bigpackage_info_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

activity_bigpackage_info_reply* activity_bigpackage_info_reply::default_instance_ = NULL;

activity_bigpackage_info_reply* activity_bigpackage_info_reply::New() const {
  return new activity_bigpackage_info_reply;
}

void activity_bigpackage_info_reply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<activity_bigpackage_info_reply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(_people_count_, _current_ranking_);
    _distance_score_20_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _get_box_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_bigpackage_info_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.activity_bigpackage_info_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _people_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_people_count_)));
          set_has__people_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__remain_times;
        break;
      }

      // required uint32 _remain_times = 2;
      case 2: {
        if (tag == 16) {
         parse__remain_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_remain_times_)));
          set_has__remain_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__next_reset_price;
        break;
      }

      // required uint32 _next_reset_price = 3;
      case 3: {
        if (tag == 24) {
         parse__next_reset_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_next_reset_price_)));
          set_has__next_reset_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__current_ranking;
        break;
      }

      // required uint32 _current_ranking = 4;
      case 4: {
        if (tag == 32) {
         parse__current_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_current_ranking_)));
          set_has__current_ranking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__get_box_ids;
        break;
      }

      // repeated uint32 _get_box_ids = 5;
      case 5: {
        if (tag == 40) {
         parse__get_box_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable__get_box_ids())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__get_box_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__get_box_ids;
        if (input->ExpectTag(48)) goto parse__distance_score_20;
        break;
      }

      // required uint32 _distance_score_20 = 6;
      case 6: {
        if (tag == 48) {
         parse__distance_score_20:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_distance_score_20_)));
          set_has__distance_score_20();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.activity_bigpackage_info_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.activity_bigpackage_info_reply)
  return false;
#undef DO_
}

void activity_bigpackage_info_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.activity_bigpackage_info_reply)
  // required uint32 _people_count = 1;
  if (has__people_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_people_count(), output);
  }

  // required uint32 _remain_times = 2;
  if (has__remain_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_remain_times(), output);
  }

  // required uint32 _next_reset_price = 3;
  if (has__next_reset_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_next_reset_price(), output);
  }

  // required uint32 _current_ranking = 4;
  if (has__current_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_current_ranking(), output);
  }

  // repeated uint32 _get_box_ids = 5;
  for (int i = 0; i < this->_get_box_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->_get_box_ids(i), output);
  }

  // required uint32 _distance_score_20 = 6;
  if (has__distance_score_20()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_distance_score_20(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.activity_bigpackage_info_reply)
}

::google::protobuf::uint8* activity_bigpackage_info_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.activity_bigpackage_info_reply)
  // required uint32 _people_count = 1;
  if (has__people_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_people_count(), target);
  }

  // required uint32 _remain_times = 2;
  if (has__remain_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_remain_times(), target);
  }

  // required uint32 _next_reset_price = 3;
  if (has__next_reset_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_next_reset_price(), target);
  }

  // required uint32 _current_ranking = 4;
  if (has__current_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_current_ranking(), target);
  }

  // repeated uint32 _get_box_ids = 5;
  for (int i = 0; i < this->_get_box_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->_get_box_ids(i), target);
  }

  // required uint32 _distance_score_20 = 6;
  if (has__distance_score_20()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_distance_score_20(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.activity_bigpackage_info_reply)
  return target;
}

int activity_bigpackage_info_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _people_count = 1;
    if (has__people_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_people_count());
    }

    // required uint32 _remain_times = 2;
    if (has__remain_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_remain_times());
    }

    // required uint32 _next_reset_price = 3;
    if (has__next_reset_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_next_reset_price());
    }

    // required uint32 _current_ranking = 4;
    if (has__current_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_current_ranking());
    }

    // required uint32 _distance_score_20 = 6;
    if (has__distance_score_20()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_distance_score_20());
    }

  }
  // repeated uint32 _get_box_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->_get_box_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_get_box_ids(i));
    }
    total_size += 1 * this->_get_box_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_bigpackage_info_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_bigpackage_info_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_bigpackage_info_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_bigpackage_info_reply::MergeFrom(const activity_bigpackage_info_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _get_box_ids_.MergeFrom(from._get_box_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__people_count()) {
      set__people_count(from._people_count());
    }
    if (from.has__remain_times()) {
      set__remain_times(from._remain_times());
    }
    if (from.has__next_reset_price()) {
      set__next_reset_price(from._next_reset_price());
    }
    if (from.has__current_ranking()) {
      set__current_ranking(from._current_ranking());
    }
    if (from.has__distance_score_20()) {
      set__distance_score_20(from._distance_score_20());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_bigpackage_info_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_bigpackage_info_reply::CopyFrom(const activity_bigpackage_info_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_bigpackage_info_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;

  return true;
}

void activity_bigpackage_info_reply::Swap(activity_bigpackage_info_reply* other) {
  if (other != this) {
    std::swap(_people_count_, other->_people_count_);
    std::swap(_remain_times_, other->_remain_times_);
    std::swap(_next_reset_price_, other->_next_reset_price_);
    std::swap(_current_ranking_, other->_current_ranking_);
    _get_box_ids_.Swap(&other->_get_box_ids_);
    std::swap(_distance_score_20_, other->_distance_score_20_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_bigpackage_info_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_bigpackage_info_reply_descriptor_;
  metadata.reflection = activity_bigpackage_info_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_bigpackage_reward_reply::kStatusFieldNumber;
const int activity_bigpackage_reward_reply::kRewardsFieldNumber;
const int activity_bigpackage_reward_reply::kItemIdsFieldNumber;
const int activity_bigpackage_reward_reply::kPeopleCountFieldNumber;
const int activity_bigpackage_reward_reply::kCurrentRankingFieldNumber;
const int activity_bigpackage_reward_reply::kDistanceScore20FieldNumber;
#endif  // !_MSC_VER

activity_bigpackage_reward_reply::activity_bigpackage_reward_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.activity_bigpackage_reward_reply)
}

void activity_bigpackage_reward_reply::InitAsDefaultInstance() {
}

activity_bigpackage_reward_reply::activity_bigpackage_reward_reply(const activity_bigpackage_reward_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.activity_bigpackage_reward_reply)
}

void activity_bigpackage_reward_reply::SharedCtor() {
  _cached_size_ = 0;
  _status_ = 0u;
  _people_count_ = 0u;
  _current_ranking_ = 0u;
  _distance_score_20_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_bigpackage_reward_reply::~activity_bigpackage_reward_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.activity_bigpackage_reward_reply)
  SharedDtor();
}

void activity_bigpackage_reward_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_bigpackage_reward_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_bigpackage_reward_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_bigpackage_reward_reply_descriptor_;
}

const activity_bigpackage_reward_reply& activity_bigpackage_reward_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

activity_bigpackage_reward_reply* activity_bigpackage_reward_reply::default_instance_ = NULL;

activity_bigpackage_reward_reply* activity_bigpackage_reward_reply::New() const {
  return new activity_bigpackage_reward_reply;
}

void activity_bigpackage_reward_reply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<activity_bigpackage_reward_reply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_status_, _people_count_);
  ZR_(_current_ranking_, _distance_score_20_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  _rewards_.Clear();
  _item_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_bigpackage_reward_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.activity_bigpackage_reward_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_status_)));
          set_has__status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__rewards;
        break;
      }

      // repeated .client_baseserver.activity_reward _rewards = 2;
      case 2: {
        if (tag == 18) {
         parse__rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__rewards;
        if (input->ExpectTag(24)) goto parse__item_ids;
        break;
      }

      // repeated uint32 _item_ids = 3;
      case 3: {
        if (tag == 24) {
         parse__item_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable__item_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__item_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__item_ids;
        if (input->ExpectTag(32)) goto parse__people_count;
        break;
      }

      // required uint32 _people_count = 4;
      case 4: {
        if (tag == 32) {
         parse__people_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_people_count_)));
          set_has__people_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__current_ranking;
        break;
      }

      // required uint32 _current_ranking = 5;
      case 5: {
        if (tag == 40) {
         parse__current_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_current_ranking_)));
          set_has__current_ranking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse__distance_score_20;
        break;
      }

      // required uint32 _distance_score_20 = 6;
      case 6: {
        if (tag == 48) {
         parse__distance_score_20:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_distance_score_20_)));
          set_has__distance_score_20();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.activity_bigpackage_reward_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.activity_bigpackage_reward_reply)
  return false;
#undef DO_
}

void activity_bigpackage_reward_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.activity_bigpackage_reward_reply)
  // required uint32 _status = 1;
  if (has__status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_status(), output);
  }

  // repeated .client_baseserver.activity_reward _rewards = 2;
  for (int i = 0; i < this->_rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_rewards(i), output);
  }

  // repeated uint32 _item_ids = 3;
  for (int i = 0; i < this->_item_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->_item_ids(i), output);
  }

  // required uint32 _people_count = 4;
  if (has__people_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_people_count(), output);
  }

  // required uint32 _current_ranking = 5;
  if (has__current_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_current_ranking(), output);
  }

  // required uint32 _distance_score_20 = 6;
  if (has__distance_score_20()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_distance_score_20(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.activity_bigpackage_reward_reply)
}

::google::protobuf::uint8* activity_bigpackage_reward_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.activity_bigpackage_reward_reply)
  // required uint32 _status = 1;
  if (has__status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_status(), target);
  }

  // repeated .client_baseserver.activity_reward _rewards = 2;
  for (int i = 0; i < this->_rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_rewards(i), target);
  }

  // repeated uint32 _item_ids = 3;
  for (int i = 0; i < this->_item_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->_item_ids(i), target);
  }

  // required uint32 _people_count = 4;
  if (has__people_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_people_count(), target);
  }

  // required uint32 _current_ranking = 5;
  if (has__current_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_current_ranking(), target);
  }

  // required uint32 _distance_score_20 = 6;
  if (has__distance_score_20()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_distance_score_20(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.activity_bigpackage_reward_reply)
  return target;
}

int activity_bigpackage_reward_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _status = 1;
    if (has__status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_status());
    }

    // required uint32 _people_count = 4;
    if (has__people_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_people_count());
    }

    // required uint32 _current_ranking = 5;
    if (has__current_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_current_ranking());
    }

    // required uint32 _distance_score_20 = 6;
    if (has__distance_score_20()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_distance_score_20());
    }

  }
  // repeated .client_baseserver.activity_reward _rewards = 2;
  total_size += 1 * this->_rewards_size();
  for (int i = 0; i < this->_rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_rewards(i));
  }

  // repeated uint32 _item_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->_item_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_item_ids(i));
    }
    total_size += 1 * this->_item_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_bigpackage_reward_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_bigpackage_reward_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_bigpackage_reward_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_bigpackage_reward_reply::MergeFrom(const activity_bigpackage_reward_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _rewards_.MergeFrom(from._rewards_);
  _item_ids_.MergeFrom(from._item_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__status()) {
      set__status(from._status());
    }
    if (from.has__people_count()) {
      set__people_count(from._people_count());
    }
    if (from.has__current_ranking()) {
      set__current_ranking(from._current_ranking());
    }
    if (from.has__distance_score_20()) {
      set__distance_score_20(from._distance_score_20());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_bigpackage_reward_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_bigpackage_reward_reply::CopyFrom(const activity_bigpackage_reward_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_bigpackage_reward_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000039) != 0x00000039) return false;

  return true;
}

void activity_bigpackage_reward_reply::Swap(activity_bigpackage_reward_reply* other) {
  if (other != this) {
    std::swap(_status_, other->_status_);
    _rewards_.Swap(&other->_rewards_);
    _item_ids_.Swap(&other->_item_ids_);
    std::swap(_people_count_, other->_people_count_);
    std::swap(_current_ranking_, other->_current_ranking_);
    std::swap(_distance_score_20_, other->_distance_score_20_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_bigpackage_reward_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_bigpackage_reward_reply_descriptor_;
  metadata.reflection = activity_bigpackage_reward_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_bigpackage_reset_reply::kStatusFieldNumber;
const int activity_bigpackage_reset_reply::kNextResetPriceFieldNumber;
#endif  // !_MSC_VER

activity_bigpackage_reset_reply::activity_bigpackage_reset_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.activity_bigpackage_reset_reply)
}

void activity_bigpackage_reset_reply::InitAsDefaultInstance() {
}

activity_bigpackage_reset_reply::activity_bigpackage_reset_reply(const activity_bigpackage_reset_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.activity_bigpackage_reset_reply)
}

void activity_bigpackage_reset_reply::SharedCtor() {
  _cached_size_ = 0;
  _status_ = 0u;
  _next_reset_price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_bigpackage_reset_reply::~activity_bigpackage_reset_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.activity_bigpackage_reset_reply)
  SharedDtor();
}

void activity_bigpackage_reset_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_bigpackage_reset_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_bigpackage_reset_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_bigpackage_reset_reply_descriptor_;
}

const activity_bigpackage_reset_reply& activity_bigpackage_reset_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

activity_bigpackage_reset_reply* activity_bigpackage_reset_reply::default_instance_ = NULL;

activity_bigpackage_reset_reply* activity_bigpackage_reset_reply::New() const {
  return new activity_bigpackage_reset_reply;
}

void activity_bigpackage_reset_reply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<activity_bigpackage_reset_reply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_status_, _next_reset_price_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_bigpackage_reset_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.activity_bigpackage_reset_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_status_)));
          set_has__status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__next_reset_price;
        break;
      }

      // required uint32 _next_reset_price = 2;
      case 2: {
        if (tag == 16) {
         parse__next_reset_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_next_reset_price_)));
          set_has__next_reset_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.activity_bigpackage_reset_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.activity_bigpackage_reset_reply)
  return false;
#undef DO_
}

void activity_bigpackage_reset_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.activity_bigpackage_reset_reply)
  // required uint32 _status = 1;
  if (has__status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_status(), output);
  }

  // required uint32 _next_reset_price = 2;
  if (has__next_reset_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_next_reset_price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.activity_bigpackage_reset_reply)
}

::google::protobuf::uint8* activity_bigpackage_reset_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.activity_bigpackage_reset_reply)
  // required uint32 _status = 1;
  if (has__status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_status(), target);
  }

  // required uint32 _next_reset_price = 2;
  if (has__next_reset_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_next_reset_price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.activity_bigpackage_reset_reply)
  return target;
}

int activity_bigpackage_reset_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _status = 1;
    if (has__status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_status());
    }

    // required uint32 _next_reset_price = 2;
    if (has__next_reset_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_next_reset_price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_bigpackage_reset_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_bigpackage_reset_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_bigpackage_reset_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_bigpackage_reset_reply::MergeFrom(const activity_bigpackage_reset_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__status()) {
      set__status(from._status());
    }
    if (from.has__next_reset_price()) {
      set__next_reset_price(from._next_reset_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_bigpackage_reset_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_bigpackage_reset_reply::CopyFrom(const activity_bigpackage_reset_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_bigpackage_reset_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void activity_bigpackage_reset_reply::Swap(activity_bigpackage_reset_reply* other) {
  if (other != this) {
    std::swap(_status_, other->_status_);
    std::swap(_next_reset_price_, other->_next_reset_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_bigpackage_reset_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_bigpackage_reset_reply_descriptor_;
  metadata.reflection = activity_bigpackage_reset_reply_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* exit_stage_reply_exit_stage_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return exit_stage_reply_exit_stage_result_descriptor_;
}
bool exit_stage_reply_exit_stage_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const exit_stage_reply_exit_stage_result exit_stage_reply::known;
const exit_stage_reply_exit_stage_result exit_stage_reply::unknown;
const exit_stage_reply_exit_stage_result exit_stage_reply::exit_stage_result_MIN;
const exit_stage_reply_exit_stage_result exit_stage_reply::exit_stage_result_MAX;
const int exit_stage_reply::exit_stage_result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int exit_stage_reply::kResultFieldNumber;
const int exit_stage_reply::kShopFieldNumber;
const int exit_stage_reply::kSshopFieldNumber;
#endif  // !_MSC_VER

exit_stage_reply::exit_stage_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.exit_stage_reply)
}

void exit_stage_reply::InitAsDefaultInstance() {
  _shop_ = const_cast< ::client_baseserver::user_shop*>(&::client_baseserver::user_shop::default_instance());
  _sshop_ = const_cast< ::client_baseserver::star_shop*>(&::client_baseserver::star_shop::default_instance());
}

exit_stage_reply::exit_stage_reply(const exit_stage_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.exit_stage_reply)
}

void exit_stage_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _shop_ = NULL;
  _sshop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

exit_stage_reply::~exit_stage_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.exit_stage_reply)
  SharedDtor();
}

void exit_stage_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _shop_;
    delete _sshop_;
  }
}

void exit_stage_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* exit_stage_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return exit_stage_reply_descriptor_;
}

const exit_stage_reply& exit_stage_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

exit_stage_reply* exit_stage_reply::default_instance_ = NULL;

exit_stage_reply* exit_stage_reply::New() const {
  return new exit_stage_reply;
}

void exit_stage_reply::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    _result_ = 0;
    if (has__shop()) {
      if (_shop_ != NULL) _shop_->::client_baseserver::user_shop::Clear();
    }
    if (has__sshop()) {
      if (_sshop_ != NULL) _sshop_->::client_baseserver::star_shop::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool exit_stage_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.exit_stage_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.exit_stage_reply.exit_stage_result _result = 1 [default = known];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::exit_stage_reply_exit_stage_result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::exit_stage_reply_exit_stage_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__shop;
        break;
      }

      // optional .client_baseserver.user_shop _shop = 2;
      case 2: {
        if (tag == 18) {
         parse__shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__shop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__sshop;
        break;
      }

      // optional .client_baseserver.star_shop _sshop = 3;
      case 3: {
        if (tag == 26) {
         parse__sshop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__sshop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.exit_stage_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.exit_stage_reply)
  return false;
#undef DO_
}

void exit_stage_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.exit_stage_reply)
  // required .client_baseserver.exit_stage_reply.exit_stage_result _result = 1 [default = known];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // optional .client_baseserver.user_shop _shop = 2;
  if (has__shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_shop(), output);
  }

  // optional .client_baseserver.star_shop _sshop = 3;
  if (has__sshop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_sshop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.exit_stage_reply)
}

::google::protobuf::uint8* exit_stage_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.exit_stage_reply)
  // required .client_baseserver.exit_stage_reply.exit_stage_result _result = 1 [default = known];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // optional .client_baseserver.user_shop _shop = 2;
  if (has__shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_shop(), target);
  }

  // optional .client_baseserver.star_shop _sshop = 3;
  if (has__sshop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_sshop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.exit_stage_reply)
  return target;
}

int exit_stage_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.exit_stage_reply.exit_stage_result _result = 1 [default = known];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional .client_baseserver.user_shop _shop = 2;
    if (has__shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_shop());
    }

    // optional .client_baseserver.star_shop _sshop = 3;
    if (has__sshop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_sshop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void exit_stage_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const exit_stage_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const exit_stage_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void exit_stage_reply::MergeFrom(const exit_stage_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__shop()) {
      mutable__shop()->::client_baseserver::user_shop::MergeFrom(from._shop());
    }
    if (from.has__sshop()) {
      mutable__sshop()->::client_baseserver::star_shop::MergeFrom(from._sshop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void exit_stage_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exit_stage_reply::CopyFrom(const exit_stage_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exit_stage_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__shop()) {
    if (!this->_shop().IsInitialized()) return false;
  }
  if (has__sshop()) {
    if (!this->_sshop().IsInitialized()) return false;
  }
  return true;
}

void exit_stage_reply::Swap(exit_stage_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_shop_, other->_shop_);
    std::swap(_sshop_, other->_sshop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata exit_stage_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = exit_stage_reply_descriptor_;
  metadata.reflection = exit_stage_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_upgrade_reply::kResultFieldNumber;
const int hero_upgrade_reply::kHeroFieldNumber;
const int hero_upgrade_reply::kItemsFieldNumber;
#endif  // !_MSC_VER

hero_upgrade_reply::hero_upgrade_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.hero_upgrade_reply)
}

void hero_upgrade_reply::InitAsDefaultInstance() {
  _hero_ = const_cast< ::client_baseserver::hero*>(&::client_baseserver::hero::default_instance());
}

hero_upgrade_reply::hero_upgrade_reply(const hero_upgrade_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.hero_upgrade_reply)
}

void hero_upgrade_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 1;
  _hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_upgrade_reply::~hero_upgrade_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.hero_upgrade_reply)
  SharedDtor();
}

void hero_upgrade_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _hero_;
  }
}

void hero_upgrade_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_upgrade_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_upgrade_reply_descriptor_;
}

const hero_upgrade_reply& hero_upgrade_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

hero_upgrade_reply* hero_upgrade_reply::default_instance_ = NULL;

hero_upgrade_reply* hero_upgrade_reply::New() const {
  return new hero_upgrade_reply;
}

void hero_upgrade_reply::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _result_ = 1;
    if (has__hero()) {
      if (_hero_ != NULL) _hero_->::client_baseserver::hero::Clear();
    }
  }
  _items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_upgrade_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.hero_upgrade_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1 [default = fail];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__hero;
        break;
      }

      // optional .client_baseserver.hero _hero = 2;
      case 2: {
        if (tag == 18) {
         parse__hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__items;
        break;
      }

      // repeated uint32 _items = 3;
      case 3: {
        if (tag == 24) {
         parse__items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable__items())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__items())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.hero_upgrade_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.hero_upgrade_reply)
  return false;
#undef DO_
}

void hero_upgrade_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.hero_upgrade_reply)
  // required .client_baseserver.result _result = 1 [default = fail];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // optional .client_baseserver.hero _hero = 2;
  if (has__hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_hero(), output);
  }

  // repeated uint32 _items = 3;
  for (int i = 0; i < this->_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.hero_upgrade_reply)
}

::google::protobuf::uint8* hero_upgrade_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.hero_upgrade_reply)
  // required .client_baseserver.result _result = 1 [default = fail];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // optional .client_baseserver.hero _hero = 2;
  if (has__hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_hero(), target);
  }

  // repeated uint32 _items = 3;
  for (int i = 0; i < this->_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.hero_upgrade_reply)
  return target;
}

int hero_upgrade_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1 [default = fail];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional .client_baseserver.hero _hero = 2;
    if (has__hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_hero());
    }

  }
  // repeated uint32 _items = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->_items_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_items(i));
    }
    total_size += 1 * this->_items_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_upgrade_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_upgrade_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_upgrade_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_upgrade_reply::MergeFrom(const hero_upgrade_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _items_.MergeFrom(from._items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__hero()) {
      mutable__hero()->::client_baseserver::hero::MergeFrom(from._hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_upgrade_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_upgrade_reply::CopyFrom(const hero_upgrade_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_upgrade_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__hero()) {
    if (!this->_hero().IsInitialized()) return false;
  }
  return true;
}

void hero_upgrade_reply::Swap(hero_upgrade_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_hero_, other->_hero_);
    _items_.Swap(&other->_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_upgrade_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_upgrade_reply_descriptor_;
  metadata.reflection = hero_upgrade_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equip_synthesis_reply::kResultFieldNumber;
#endif  // !_MSC_VER

equip_synthesis_reply::equip_synthesis_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.equip_synthesis_reply)
}

void equip_synthesis_reply::InitAsDefaultInstance() {
}

equip_synthesis_reply::equip_synthesis_reply(const equip_synthesis_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.equip_synthesis_reply)
}

void equip_synthesis_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equip_synthesis_reply::~equip_synthesis_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.equip_synthesis_reply)
  SharedDtor();
}

void equip_synthesis_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equip_synthesis_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equip_synthesis_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equip_synthesis_reply_descriptor_;
}

const equip_synthesis_reply& equip_synthesis_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

equip_synthesis_reply* equip_synthesis_reply::default_instance_ = NULL;

equip_synthesis_reply* equip_synthesis_reply::New() const {
  return new equip_synthesis_reply;
}

void equip_synthesis_reply::Clear() {
  _result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equip_synthesis_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.equip_synthesis_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1 [default = fail];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.equip_synthesis_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.equip_synthesis_reply)
  return false;
#undef DO_
}

void equip_synthesis_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.equip_synthesis_reply)
  // required .client_baseserver.result _result = 1 [default = fail];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.equip_synthesis_reply)
}

::google::protobuf::uint8* equip_synthesis_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.equip_synthesis_reply)
  // required .client_baseserver.result _result = 1 [default = fail];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.equip_synthesis_reply)
  return target;
}

int equip_synthesis_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1 [default = fail];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equip_synthesis_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equip_synthesis_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equip_synthesis_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equip_synthesis_reply::MergeFrom(const equip_synthesis_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equip_synthesis_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equip_synthesis_reply::CopyFrom(const equip_synthesis_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equip_synthesis_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void equip_synthesis_reply::Swap(equip_synthesis_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equip_synthesis_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equip_synthesis_reply_descriptor_;
  metadata.reflection = equip_synthesis_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wear_equip_reply::kResultFieldNumber;
const int wear_equip_reply::kGsFieldNumber;
#endif  // !_MSC_VER

wear_equip_reply::wear_equip_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.wear_equip_reply)
}

void wear_equip_reply::InitAsDefaultInstance() {
}

wear_equip_reply::wear_equip_reply(const wear_equip_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.wear_equip_reply)
}

void wear_equip_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 1;
  _gs_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wear_equip_reply::~wear_equip_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.wear_equip_reply)
  SharedDtor();
}

void wear_equip_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void wear_equip_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wear_equip_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wear_equip_reply_descriptor_;
}

const wear_equip_reply& wear_equip_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

wear_equip_reply* wear_equip_reply::default_instance_ = NULL;

wear_equip_reply* wear_equip_reply::New() const {
  return new wear_equip_reply;
}

void wear_equip_reply::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _result_ = 1;
    _gs_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wear_equip_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.wear_equip_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1 [default = fail];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__gs;
        break;
      }

      // required uint32 _gs = 2;
      case 2: {
        if (tag == 16) {
         parse__gs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_gs_)));
          set_has__gs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.wear_equip_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.wear_equip_reply)
  return false;
#undef DO_
}

void wear_equip_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.wear_equip_reply)
  // required .client_baseserver.result _result = 1 [default = fail];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // required uint32 _gs = 2;
  if (has__gs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_gs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.wear_equip_reply)
}

::google::protobuf::uint8* wear_equip_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.wear_equip_reply)
  // required .client_baseserver.result _result = 1 [default = fail];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // required uint32 _gs = 2;
  if (has__gs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_gs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.wear_equip_reply)
  return target;
}

int wear_equip_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1 [default = fail];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // required uint32 _gs = 2;
    if (has__gs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_gs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wear_equip_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wear_equip_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wear_equip_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wear_equip_reply::MergeFrom(const wear_equip_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__gs()) {
      set__gs(from._gs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wear_equip_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wear_equip_reply::CopyFrom(const wear_equip_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wear_equip_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void wear_equip_reply::Swap(wear_equip_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_gs_, other->_gs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wear_equip_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wear_equip_reply_descriptor_;
  metadata.reflection = wear_equip_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sync_vitality_reply::kVitalityFieldNumber;
const int sync_vitality_reply::kShadowRunesFieldNumber;
#endif  // !_MSC_VER

sync_vitality_reply::sync_vitality_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.sync_vitality_reply)
}

void sync_vitality_reply::InitAsDefaultInstance() {
  _vitality_ = const_cast< ::client_baseserver::vitality*>(&::client_baseserver::vitality::default_instance());
  _shadow_runes_ = const_cast< ::client_baseserver::vitality*>(&::client_baseserver::vitality::default_instance());
}

sync_vitality_reply::sync_vitality_reply(const sync_vitality_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.sync_vitality_reply)
}

void sync_vitality_reply::SharedCtor() {
  _cached_size_ = 0;
  _vitality_ = NULL;
  _shadow_runes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sync_vitality_reply::~sync_vitality_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.sync_vitality_reply)
  SharedDtor();
}

void sync_vitality_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _vitality_;
    delete _shadow_runes_;
  }
}

void sync_vitality_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sync_vitality_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sync_vitality_reply_descriptor_;
}

const sync_vitality_reply& sync_vitality_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

sync_vitality_reply* sync_vitality_reply::default_instance_ = NULL;

sync_vitality_reply* sync_vitality_reply::New() const {
  return new sync_vitality_reply;
}

void sync_vitality_reply::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has__vitality()) {
      if (_vitality_ != NULL) _vitality_->::client_baseserver::vitality::Clear();
    }
    if (has__shadow_runes()) {
      if (_shadow_runes_ != NULL) _shadow_runes_->::client_baseserver::vitality::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sync_vitality_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.sync_vitality_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.vitality _vitality = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__vitality()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__shadow_runes;
        break;
      }

      // required .client_baseserver.vitality _shadow_runes = 2;
      case 2: {
        if (tag == 18) {
         parse__shadow_runes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__shadow_runes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.sync_vitality_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.sync_vitality_reply)
  return false;
#undef DO_
}

void sync_vitality_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.sync_vitality_reply)
  // required .client_baseserver.vitality _vitality = 1;
  if (has__vitality()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_vitality(), output);
  }

  // required .client_baseserver.vitality _shadow_runes = 2;
  if (has__shadow_runes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_shadow_runes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.sync_vitality_reply)
}

::google::protobuf::uint8* sync_vitality_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.sync_vitality_reply)
  // required .client_baseserver.vitality _vitality = 1;
  if (has__vitality()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_vitality(), target);
  }

  // required .client_baseserver.vitality _shadow_runes = 2;
  if (has__shadow_runes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_shadow_runes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.sync_vitality_reply)
  return target;
}

int sync_vitality_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.vitality _vitality = 1;
    if (has__vitality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_vitality());
    }

    // required .client_baseserver.vitality _shadow_runes = 2;
    if (has__shadow_runes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_shadow_runes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sync_vitality_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sync_vitality_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sync_vitality_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sync_vitality_reply::MergeFrom(const sync_vitality_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__vitality()) {
      mutable__vitality()->::client_baseserver::vitality::MergeFrom(from._vitality());
    }
    if (from.has__shadow_runes()) {
      mutable__shadow_runes()->::client_baseserver::vitality::MergeFrom(from._shadow_runes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sync_vitality_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sync_vitality_reply::CopyFrom(const sync_vitality_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sync_vitality_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has__vitality()) {
    if (!this->_vitality().IsInitialized()) return false;
  }
  if (has__shadow_runes()) {
    if (!this->_shadow_runes().IsInitialized()) return false;
  }
  return true;
}

void sync_vitality_reply::Swap(sync_vitality_reply* other) {
  if (other != this) {
    std::swap(_vitality_, other->_vitality_);
    std::swap(_shadow_runes_, other->_shadow_runes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sync_vitality_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sync_vitality_reply_descriptor_;
  metadata.reflection = sync_vitality_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int consume_item_reply::kHeroFieldNumber;
#endif  // !_MSC_VER

consume_item_reply::consume_item_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.consume_item_reply)
}

void consume_item_reply::InitAsDefaultInstance() {
  _hero_ = const_cast< ::client_baseserver::hero*>(&::client_baseserver::hero::default_instance());
}

consume_item_reply::consume_item_reply(const consume_item_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.consume_item_reply)
}

void consume_item_reply::SharedCtor() {
  _cached_size_ = 0;
  _hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

consume_item_reply::~consume_item_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.consume_item_reply)
  SharedDtor();
}

void consume_item_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _hero_;
  }
}

void consume_item_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* consume_item_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return consume_item_reply_descriptor_;
}

const consume_item_reply& consume_item_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

consume_item_reply* consume_item_reply::default_instance_ = NULL;

consume_item_reply* consume_item_reply::New() const {
  return new consume_item_reply;
}

void consume_item_reply::Clear() {
  if (has__hero()) {
    if (_hero_ != NULL) _hero_->::client_baseserver::hero::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool consume_item_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.consume_item_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.hero _hero = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.consume_item_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.consume_item_reply)
  return false;
#undef DO_
}

void consume_item_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.consume_item_reply)
  // required .client_baseserver.hero _hero = 1;
  if (has__hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_hero(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.consume_item_reply)
}

::google::protobuf::uint8* consume_item_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.consume_item_reply)
  // required .client_baseserver.hero _hero = 1;
  if (has__hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_hero(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.consume_item_reply)
  return target;
}

int consume_item_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.hero _hero = 1;
    if (has__hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_hero());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void consume_item_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const consume_item_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const consume_item_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void consume_item_reply::MergeFrom(const consume_item_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__hero()) {
      mutable__hero()->::client_baseserver::hero::MergeFrom(from._hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void consume_item_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void consume_item_reply::CopyFrom(const consume_item_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool consume_item_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__hero()) {
    if (!this->_hero().IsInitialized()) return false;
  }
  return true;
}

void consume_item_reply::Swap(consume_item_reply* other) {
  if (other != this) {
    std::swap(_hero_, other->_hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata consume_item_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = consume_item_reply_descriptor_;
  metadata.reflection = consume_item_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_shop::kIdFieldNumber;
const int user_shop::kLastAutoRefreshTimeFieldNumber;
const int user_shop::kExpireTimeFieldNumber;
const int user_shop::kLastManualRefreshTimeFieldNumber;
const int user_shop::kTodayTimesFieldNumber;
const int user_shop::kCurrentGoodsFieldNumber;
#endif  // !_MSC_VER

user_shop::user_shop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.user_shop)
}

void user_shop::InitAsDefaultInstance() {
}

user_shop::user_shop(const user_shop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.user_shop)
}

void user_shop::SharedCtor() {
  _cached_size_ = 0;
  _id_ = 0u;
  _last_auto_refresh_time_ = 0u;
  _expire_time_ = 0u;
  _last_manual_refresh_time_ = 0u;
  _today_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_shop::~user_shop() {
  // @@protoc_insertion_point(destructor:client_baseserver.user_shop)
  SharedDtor();
}

void user_shop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_shop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_shop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_shop_descriptor_;
}

const user_shop& user_shop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

user_shop* user_shop::default_instance_ = NULL;

user_shop* user_shop::New() const {
  return new user_shop;
}

void user_shop::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_shop*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(_id_, _last_manual_refresh_time_);
    _today_times_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _current_goods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_shop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.user_shop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_id_)));
          set_has__id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__last_auto_refresh_time;
        break;
      }

      // optional uint32 _last_auto_refresh_time = 2;
      case 2: {
        if (tag == 16) {
         parse__last_auto_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_last_auto_refresh_time_)));
          set_has__last_auto_refresh_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__expire_time;
        break;
      }

      // optional uint32 _expire_time = 3;
      case 3: {
        if (tag == 24) {
         parse__expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_expire_time_)));
          set_has__expire_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__last_manual_refresh_time;
        break;
      }

      // optional uint32 _last_manual_refresh_time = 4;
      case 4: {
        if (tag == 32) {
         parse__last_manual_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_last_manual_refresh_time_)));
          set_has__last_manual_refresh_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__today_times;
        break;
      }

      // optional uint32 _today_times = 5;
      case 5: {
        if (tag == 40) {
         parse__today_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_today_times_)));
          set_has__today_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse__current_goods;
        break;
      }

      // repeated .client_baseserver.goods _current_goods = 6;
      case 6: {
        if (tag == 50) {
         parse__current_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__current_goods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse__current_goods;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.user_shop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.user_shop)
  return false;
#undef DO_
}

void user_shop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.user_shop)
  // required uint32 _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_id(), output);
  }

  // optional uint32 _last_auto_refresh_time = 2;
  if (has__last_auto_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_last_auto_refresh_time(), output);
  }

  // optional uint32 _expire_time = 3;
  if (has__expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_expire_time(), output);
  }

  // optional uint32 _last_manual_refresh_time = 4;
  if (has__last_manual_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_last_manual_refresh_time(), output);
  }

  // optional uint32 _today_times = 5;
  if (has__today_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_today_times(), output);
  }

  // repeated .client_baseserver.goods _current_goods = 6;
  for (int i = 0; i < this->_current_goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_current_goods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.user_shop)
}

::google::protobuf::uint8* user_shop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.user_shop)
  // required uint32 _id = 1;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_id(), target);
  }

  // optional uint32 _last_auto_refresh_time = 2;
  if (has__last_auto_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_last_auto_refresh_time(), target);
  }

  // optional uint32 _expire_time = 3;
  if (has__expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_expire_time(), target);
  }

  // optional uint32 _last_manual_refresh_time = 4;
  if (has__last_manual_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_last_manual_refresh_time(), target);
  }

  // optional uint32 _today_times = 5;
  if (has__today_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_today_times(), target);
  }

  // repeated .client_baseserver.goods _current_goods = 6;
  for (int i = 0; i < this->_current_goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->_current_goods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.user_shop)
  return target;
}

int user_shop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _id = 1;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_id());
    }

    // optional uint32 _last_auto_refresh_time = 2;
    if (has__last_auto_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_last_auto_refresh_time());
    }

    // optional uint32 _expire_time = 3;
    if (has__expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_expire_time());
    }

    // optional uint32 _last_manual_refresh_time = 4;
    if (has__last_manual_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_last_manual_refresh_time());
    }

    // optional uint32 _today_times = 5;
    if (has__today_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_today_times());
    }

  }
  // repeated .client_baseserver.goods _current_goods = 6;
  total_size += 1 * this->_current_goods_size();
  for (int i = 0; i < this->_current_goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_current_goods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_shop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_shop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_shop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_shop::MergeFrom(const user_shop& from) {
  GOOGLE_CHECK_NE(&from, this);
  _current_goods_.MergeFrom(from._current_goods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__id()) {
      set__id(from._id());
    }
    if (from.has__last_auto_refresh_time()) {
      set__last_auto_refresh_time(from._last_auto_refresh_time());
    }
    if (from.has__expire_time()) {
      set__expire_time(from._expire_time());
    }
    if (from.has__last_manual_refresh_time()) {
      set__last_manual_refresh_time(from._last_manual_refresh_time());
    }
    if (from.has__today_times()) {
      set__today_times(from._today_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_shop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_shop::CopyFrom(const user_shop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_shop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_current_goods())) return false;
  return true;
}

void user_shop::Swap(user_shop* other) {
  if (other != this) {
    std::swap(_id_, other->_id_);
    std::swap(_last_auto_refresh_time_, other->_last_auto_refresh_time_);
    std::swap(_expire_time_, other->_expire_time_);
    std::swap(_last_manual_refresh_time_, other->_last_manual_refresh_time_);
    std::swap(_today_times_, other->_today_times_);
    _current_goods_.Swap(&other->_current_goods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_shop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_shop_descriptor_;
  metadata.reflection = user_shop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int star_shop::kIdFieldNumber;
const int star_shop::kExpireTimeFieldNumber;
const int star_shop::kStarGoodsFieldNumber;
#endif  // !_MSC_VER

star_shop::star_shop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.star_shop)
}

void star_shop::InitAsDefaultInstance() {
}

star_shop::star_shop(const star_shop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.star_shop)
}

void star_shop::SharedCtor() {
  _cached_size_ = 0;
  _id_ = 0u;
  _expire_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

star_shop::~star_shop() {
  // @@protoc_insertion_point(destructor:client_baseserver.star_shop)
  SharedDtor();
}

void star_shop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void star_shop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* star_shop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return star_shop_descriptor_;
}

const star_shop& star_shop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

star_shop* star_shop::default_instance_ = NULL;

star_shop* star_shop::New() const {
  return new star_shop;
}

void star_shop::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<star_shop*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_id_, _expire_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  _star_goods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool star_shop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.star_shop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_id_)));
          set_has__id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__expire_time;
        break;
      }

      // optional uint32 _expire_time = 2;
      case 2: {
        if (tag == 16) {
         parse__expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_expire_time_)));
          set_has__expire_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__star_goods;
        break;
      }

      // repeated .client_baseserver.star_goods _star_goods = 3;
      case 3: {
        if (tag == 26) {
         parse__star_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__star_goods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__star_goods;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.star_shop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.star_shop)
  return false;
#undef DO_
}

void star_shop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.star_shop)
  // required uint32 _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_id(), output);
  }

  // optional uint32 _expire_time = 2;
  if (has__expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_expire_time(), output);
  }

  // repeated .client_baseserver.star_goods _star_goods = 3;
  for (int i = 0; i < this->_star_goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_star_goods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.star_shop)
}

::google::protobuf::uint8* star_shop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.star_shop)
  // required uint32 _id = 1;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_id(), target);
  }

  // optional uint32 _expire_time = 2;
  if (has__expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_expire_time(), target);
  }

  // repeated .client_baseserver.star_goods _star_goods = 3;
  for (int i = 0; i < this->_star_goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_star_goods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.star_shop)
  return target;
}

int star_shop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _id = 1;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_id());
    }

    // optional uint32 _expire_time = 2;
    if (has__expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_expire_time());
    }

  }
  // repeated .client_baseserver.star_goods _star_goods = 3;
  total_size += 1 * this->_star_goods_size();
  for (int i = 0; i < this->_star_goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_star_goods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void star_shop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const star_shop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const star_shop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void star_shop::MergeFrom(const star_shop& from) {
  GOOGLE_CHECK_NE(&from, this);
  _star_goods_.MergeFrom(from._star_goods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__id()) {
      set__id(from._id());
    }
    if (from.has__expire_time()) {
      set__expire_time(from._expire_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void star_shop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void star_shop::CopyFrom(const star_shop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool star_shop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_star_goods())) return false;
  return true;
}

void star_shop::Swap(star_shop* other) {
  if (other != this) {
    std::swap(_id_, other->_id_);
    std::swap(_expire_time_, other->_expire_time_);
    _star_goods_.Swap(&other->_star_goods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata star_shop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = star_shop_descriptor_;
  metadata.reflection = star_shop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shop_consume_reply::kResultFieldNumber;
#endif  // !_MSC_VER

shop_consume_reply::shop_consume_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.shop_consume_reply)
}

void shop_consume_reply::InitAsDefaultInstance() {
}

shop_consume_reply::shop_consume_reply(const shop_consume_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.shop_consume_reply)
}

void shop_consume_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shop_consume_reply::~shop_consume_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.shop_consume_reply)
  SharedDtor();
}

void shop_consume_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void shop_consume_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shop_consume_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shop_consume_reply_descriptor_;
}

const shop_consume_reply& shop_consume_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

shop_consume_reply* shop_consume_reply::default_instance_ = NULL;

shop_consume_reply* shop_consume_reply::New() const {
  return new shop_consume_reply;
}

void shop_consume_reply::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shop_consume_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.shop_consume_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1 [default = success];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.shop_consume_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.shop_consume_reply)
  return false;
#undef DO_
}

void shop_consume_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.shop_consume_reply)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.shop_consume_reply)
}

::google::protobuf::uint8* shop_consume_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.shop_consume_reply)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.shop_consume_reply)
  return target;
}

int shop_consume_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1 [default = success];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shop_consume_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shop_consume_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shop_consume_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shop_consume_reply::MergeFrom(const shop_consume_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shop_consume_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shop_consume_reply::CopyFrom(const shop_consume_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shop_consume_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void shop_consume_reply::Swap(shop_consume_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shop_consume_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shop_consume_reply_descriptor_;
  metadata.reflection = shop_consume_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int skill_levelup_reply::kResultFieldNumber;
const int skill_levelup_reply::kGsFieldNumber;
#endif  // !_MSC_VER

skill_levelup_reply::skill_levelup_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.skill_levelup_reply)
}

void skill_levelup_reply::InitAsDefaultInstance() {
}

skill_levelup_reply::skill_levelup_reply(const skill_levelup_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.skill_levelup_reply)
}

void skill_levelup_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 1;
  _gs_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skill_levelup_reply::~skill_levelup_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.skill_levelup_reply)
  SharedDtor();
}

void skill_levelup_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void skill_levelup_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* skill_levelup_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return skill_levelup_reply_descriptor_;
}

const skill_levelup_reply& skill_levelup_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

skill_levelup_reply* skill_levelup_reply::default_instance_ = NULL;

skill_levelup_reply* skill_levelup_reply::New() const {
  return new skill_levelup_reply;
}

void skill_levelup_reply::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _result_ = 1;
    _gs_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool skill_levelup_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.skill_levelup_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1 [default = fail];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__gs;
        break;
      }

      // required uint32 _gs = 2;
      case 2: {
        if (tag == 16) {
         parse__gs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_gs_)));
          set_has__gs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.skill_levelup_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.skill_levelup_reply)
  return false;
#undef DO_
}

void skill_levelup_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.skill_levelup_reply)
  // required .client_baseserver.result _result = 1 [default = fail];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // required uint32 _gs = 2;
  if (has__gs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_gs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.skill_levelup_reply)
}

::google::protobuf::uint8* skill_levelup_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.skill_levelup_reply)
  // required .client_baseserver.result _result = 1 [default = fail];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // required uint32 _gs = 2;
  if (has__gs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_gs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.skill_levelup_reply)
  return target;
}

int skill_levelup_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1 [default = fail];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // required uint32 _gs = 2;
    if (has__gs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_gs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skill_levelup_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const skill_levelup_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const skill_levelup_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void skill_levelup_reply::MergeFrom(const skill_levelup_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__gs()) {
      set__gs(from._gs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void skill_levelup_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void skill_levelup_reply::CopyFrom(const skill_levelup_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skill_levelup_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void skill_levelup_reply::Swap(skill_levelup_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_gs_, other->_gs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata skill_levelup_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = skill_levelup_reply_descriptor_;
  metadata.reflection = skill_levelup_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sell_item_reply::kResultFieldNumber;
#endif  // !_MSC_VER

sell_item_reply::sell_item_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.sell_item_reply)
}

void sell_item_reply::InitAsDefaultInstance() {
}

sell_item_reply::sell_item_reply(const sell_item_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.sell_item_reply)
}

void sell_item_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sell_item_reply::~sell_item_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.sell_item_reply)
  SharedDtor();
}

void sell_item_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sell_item_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sell_item_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sell_item_reply_descriptor_;
}

const sell_item_reply& sell_item_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

sell_item_reply* sell_item_reply::default_instance_ = NULL;

sell_item_reply* sell_item_reply::New() const {
  return new sell_item_reply;
}

void sell_item_reply::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sell_item_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.sell_item_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1 [default = success];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.sell_item_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.sell_item_reply)
  return false;
#undef DO_
}

void sell_item_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.sell_item_reply)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.sell_item_reply)
}

::google::protobuf::uint8* sell_item_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.sell_item_reply)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.sell_item_reply)
  return target;
}

int sell_item_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1 [default = success];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sell_item_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sell_item_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sell_item_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sell_item_reply::MergeFrom(const sell_item_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sell_item_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sell_item_reply::CopyFrom(const sell_item_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sell_item_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sell_item_reply::Swap(sell_item_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sell_item_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sell_item_reply_descriptor_;
  metadata.reflection = sell_item_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fragment_compose_reply::kResultFieldNumber;
#endif  // !_MSC_VER

fragment_compose_reply::fragment_compose_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.fragment_compose_reply)
}

void fragment_compose_reply::InitAsDefaultInstance() {
}

fragment_compose_reply::fragment_compose_reply(const fragment_compose_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.fragment_compose_reply)
}

void fragment_compose_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fragment_compose_reply::~fragment_compose_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.fragment_compose_reply)
  SharedDtor();
}

void fragment_compose_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fragment_compose_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fragment_compose_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fragment_compose_reply_descriptor_;
}

const fragment_compose_reply& fragment_compose_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

fragment_compose_reply* fragment_compose_reply::default_instance_ = NULL;

fragment_compose_reply* fragment_compose_reply::New() const {
  return new fragment_compose_reply;
}

void fragment_compose_reply::Clear() {
  _result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fragment_compose_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.fragment_compose_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1 [default = fail];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.fragment_compose_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.fragment_compose_reply)
  return false;
#undef DO_
}

void fragment_compose_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.fragment_compose_reply)
  // required .client_baseserver.result _result = 1 [default = fail];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.fragment_compose_reply)
}

::google::protobuf::uint8* fragment_compose_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.fragment_compose_reply)
  // required .client_baseserver.result _result = 1 [default = fail];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.fragment_compose_reply)
  return target;
}

int fragment_compose_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1 [default = fail];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fragment_compose_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fragment_compose_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fragment_compose_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fragment_compose_reply::MergeFrom(const fragment_compose_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fragment_compose_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fragment_compose_reply::CopyFrom(const fragment_compose_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fragment_compose_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void fragment_compose_reply::Swap(fragment_compose_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fragment_compose_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fragment_compose_reply_descriptor_;
  metadata.reflection = fragment_compose_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_equip_upgrade_reply::kResultFieldNumber;
const int hero_equip_upgrade_reply::kHeroFieldNumber;
#endif  // !_MSC_VER

hero_equip_upgrade_reply::hero_equip_upgrade_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.hero_equip_upgrade_reply)
}

void hero_equip_upgrade_reply::InitAsDefaultInstance() {
  _hero_ = const_cast< ::client_baseserver::hero*>(&::client_baseserver::hero::default_instance());
}

hero_equip_upgrade_reply::hero_equip_upgrade_reply(const hero_equip_upgrade_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.hero_equip_upgrade_reply)
}

void hero_equip_upgrade_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 1;
  _hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_equip_upgrade_reply::~hero_equip_upgrade_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.hero_equip_upgrade_reply)
  SharedDtor();
}

void hero_equip_upgrade_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _hero_;
  }
}

void hero_equip_upgrade_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_equip_upgrade_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_equip_upgrade_reply_descriptor_;
}

const hero_equip_upgrade_reply& hero_equip_upgrade_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

hero_equip_upgrade_reply* hero_equip_upgrade_reply::default_instance_ = NULL;

hero_equip_upgrade_reply* hero_equip_upgrade_reply::New() const {
  return new hero_equip_upgrade_reply;
}

void hero_equip_upgrade_reply::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _result_ = 1;
    if (has__hero()) {
      if (_hero_ != NULL) _hero_->::client_baseserver::hero::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_equip_upgrade_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.hero_equip_upgrade_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1 [default = fail];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__hero;
        break;
      }

      // optional .client_baseserver.hero _hero = 2;
      case 2: {
        if (tag == 18) {
         parse__hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.hero_equip_upgrade_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.hero_equip_upgrade_reply)
  return false;
#undef DO_
}

void hero_equip_upgrade_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.hero_equip_upgrade_reply)
  // required .client_baseserver.result _result = 1 [default = fail];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // optional .client_baseserver.hero _hero = 2;
  if (has__hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_hero(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.hero_equip_upgrade_reply)
}

::google::protobuf::uint8* hero_equip_upgrade_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.hero_equip_upgrade_reply)
  // required .client_baseserver.result _result = 1 [default = fail];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // optional .client_baseserver.hero _hero = 2;
  if (has__hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_hero(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.hero_equip_upgrade_reply)
  return target;
}

int hero_equip_upgrade_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1 [default = fail];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional .client_baseserver.hero _hero = 2;
    if (has__hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_hero());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_equip_upgrade_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_equip_upgrade_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_equip_upgrade_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_equip_upgrade_reply::MergeFrom(const hero_equip_upgrade_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__hero()) {
      mutable__hero()->::client_baseserver::hero::MergeFrom(from._hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_equip_upgrade_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_equip_upgrade_reply::CopyFrom(const hero_equip_upgrade_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_equip_upgrade_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__hero()) {
    if (!this->_hero().IsInitialized()) return false;
  }
  return true;
}

void hero_equip_upgrade_reply::Swap(hero_equip_upgrade_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_hero_, other->_hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_equip_upgrade_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_equip_upgrade_reply_descriptor_;
  metadata.reflection = hero_equip_upgrade_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tutorial_reply::kResultFieldNumber;
#endif  // !_MSC_VER

tutorial_reply::tutorial_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.tutorial_reply)
}

void tutorial_reply::InitAsDefaultInstance() {
}

tutorial_reply::tutorial_reply(const tutorial_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.tutorial_reply)
}

void tutorial_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tutorial_reply::~tutorial_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.tutorial_reply)
  SharedDtor();
}

void tutorial_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tutorial_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tutorial_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tutorial_reply_descriptor_;
}

const tutorial_reply& tutorial_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

tutorial_reply* tutorial_reply::default_instance_ = NULL;

tutorial_reply* tutorial_reply::New() const {
  return new tutorial_reply;
}

void tutorial_reply::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tutorial_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.tutorial_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1 [default = success];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.tutorial_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.tutorial_reply)
  return false;
#undef DO_
}

void tutorial_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.tutorial_reply)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.tutorial_reply)
}

::google::protobuf::uint8* tutorial_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.tutorial_reply)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.tutorial_reply)
  return target;
}

int tutorial_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1 [default = success];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tutorial_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tutorial_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tutorial_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tutorial_reply::MergeFrom(const tutorial_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tutorial_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tutorial_reply::CopyFrom(const tutorial_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tutorial_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tutorial_reply::Swap(tutorial_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tutorial_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tutorial_reply_descriptor_;
  metadata.reflection = tutorial_reply_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* error_info_exit_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return error_info_exit_descriptor_;
}
bool error_info_exit_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const error_info_exit error_info::noneed;
const error_info_exit error_info::force;
const error_info_exit error_info::exit_MIN;
const error_info_exit error_info::exit_MAX;
const int error_info::exit_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int error_info::kInfoFieldNumber;
const int error_info::kExitFieldNumber;
#endif  // !_MSC_VER

error_info::error_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.error_info)
}

void error_info::InitAsDefaultInstance() {
}

error_info::error_info(const error_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.error_info)
}

void error_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _exit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

error_info::~error_info() {
  // @@protoc_insertion_point(destructor:client_baseserver.error_info)
  SharedDtor();
}

void error_info::SharedDtor() {
  if (_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _info_;
  }
  if (this != default_instance_) {
  }
}

void error_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* error_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return error_info_descriptor_;
}

const error_info& error_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

error_info* error_info::default_instance_ = NULL;

error_info* error_info::New() const {
  return new error_info;
}

void error_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has__info()) {
      if (_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _info_->clear();
      }
    }
    _exit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool error_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.error_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_info().data(), this->_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__exit;
        break;
      }

      // optional .client_baseserver.error_info.exit _exit = 2 [default = noneed];
      case 2: {
        if (tag == 16) {
         parse__exit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::error_info_exit_IsValid(value)) {
            set__exit(static_cast< ::client_baseserver::error_info_exit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.error_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.error_info)
  return false;
#undef DO_
}

void error_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.error_info)
  // required string _info = 1;
  if (has__info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_info().data(), this->_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->_info(), output);
  }

  // optional .client_baseserver.error_info.exit _exit = 2 [default = noneed];
  if (has__exit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->_exit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.error_info)
}

::google::protobuf::uint8* error_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.error_info)
  // required string _info = 1;
  if (has__info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_info().data(), this->_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_info(), target);
  }

  // optional .client_baseserver.error_info.exit _exit = 2 [default = noneed];
  if (has__exit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->_exit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.error_info)
  return target;
}

int error_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _info = 1;
    if (has__info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_info());
    }

    // optional .client_baseserver.error_info.exit _exit = 2 [default = noneed];
    if (has__exit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_exit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void error_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const error_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const error_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void error_info::MergeFrom(const error_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__info()) {
      set__info(from._info());
    }
    if (from.has__exit()) {
      set__exit(from._exit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void error_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void error_info::CopyFrom(const error_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool error_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void error_info::Swap(error_info* other) {
  if (other != this) {
    std::swap(_info_, other->_info_);
    std::swap(_exit_, other->_exit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata error_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = error_info_descriptor_;
  metadata.reflection = error_info_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* goods_price_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return goods_price_type_descriptor_;
}
bool goods_price_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const goods_price_type goods::gold;
const goods_price_type goods::diamond;
const goods_price_type goods::crusadepoint;
const goods_price_type goods::arenapoint;
const goods_price_type goods::guildpoint;
const goods_price_type goods::price_type_MIN;
const goods_price_type goods::price_type_MAX;
const int goods::price_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int goods::kIdFieldNumber;
const int goods::kAmountFieldNumber;
const int goods::kTypeFieldNumber;
const int goods::kPriceFieldNumber;
const int goods::kIsSaleFieldNumber;
#endif  // !_MSC_VER

goods::goods()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.goods)
}

void goods::InitAsDefaultInstance() {
}

goods::goods(const goods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.goods)
}

void goods::SharedCtor() {
  _cached_size_ = 0;
  _id_ = 0u;
  _amount_ = 0u;
  _type_ = 0;
  _price_ = 0u;
  _is_sale_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

goods::~goods() {
  // @@protoc_insertion_point(destructor:client_baseserver.goods)
  SharedDtor();
}

void goods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void goods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* goods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return goods_descriptor_;
}

const goods& goods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

goods* goods::default_instance_ = NULL;

goods* goods::New() const {
  return new goods;
}

void goods::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<goods*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(_id_, _is_sale_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool goods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.goods)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_id_)));
          set_has__id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__amount;
        break;
      }

      // required uint32 _amount = 2;
      case 2: {
        if (tag == 16) {
         parse__amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_amount_)));
          set_has__amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__type;
        break;
      }

      // required .client_baseserver.goods.price_type _type = 3;
      case 3: {
        if (tag == 24) {
         parse__type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::goods_price_type_IsValid(value)) {
            set__type(static_cast< ::client_baseserver::goods_price_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__price;
        break;
      }

      // required uint32 _price = 4;
      case 4: {
        if (tag == 32) {
         parse__price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_price_)));
          set_has__price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__is_sale;
        break;
      }

      // required uint32 _is_sale = 5;
      case 5: {
        if (tag == 40) {
         parse__is_sale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_is_sale_)));
          set_has__is_sale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.goods)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.goods)
  return false;
#undef DO_
}

void goods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.goods)
  // required uint32 _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_id(), output);
  }

  // required uint32 _amount = 2;
  if (has__amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_amount(), output);
  }

  // required .client_baseserver.goods.price_type _type = 3;
  if (has__type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->_type(), output);
  }

  // required uint32 _price = 4;
  if (has__price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_price(), output);
  }

  // required uint32 _is_sale = 5;
  if (has__is_sale()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_is_sale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.goods)
}

::google::protobuf::uint8* goods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.goods)
  // required uint32 _id = 1;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_id(), target);
  }

  // required uint32 _amount = 2;
  if (has__amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_amount(), target);
  }

  // required .client_baseserver.goods.price_type _type = 3;
  if (has__type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->_type(), target);
  }

  // required uint32 _price = 4;
  if (has__price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_price(), target);
  }

  // required uint32 _is_sale = 5;
  if (has__is_sale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_is_sale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.goods)
  return target;
}

int goods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _id = 1;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_id());
    }

    // required uint32 _amount = 2;
    if (has__amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_amount());
    }

    // required .client_baseserver.goods.price_type _type = 3;
    if (has__type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_type());
    }

    // required uint32 _price = 4;
    if (has__price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_price());
    }

    // required uint32 _is_sale = 5;
    if (has__is_sale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_is_sale());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void goods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const goods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const goods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void goods::MergeFrom(const goods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__id()) {
      set__id(from._id());
    }
    if (from.has__amount()) {
      set__amount(from._amount());
    }
    if (from.has__type()) {
      set__type(from._type());
    }
    if (from.has__price()) {
      set__price(from._price());
    }
    if (from.has__is_sale()) {
      set__is_sale(from._is_sale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void goods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void goods::CopyFrom(const goods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool goods::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void goods::Swap(goods* other) {
  if (other != this) {
    std::swap(_id_, other->_id_);
    std::swap(_amount_, other->_amount_);
    std::swap(_type_, other->_type_);
    std::swap(_price_, other->_price_);
    std::swap(_is_sale_, other->_is_sale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata goods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = goods_descriptor_;
  metadata.reflection = goods_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* star_goods_box_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return star_goods_box_type_descriptor_;
}
bool star_goods_box_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const star_goods_box_type star_goods::stone_green;
const star_goods_box_type star_goods::stone_blue;
const star_goods_box_type star_goods::stone_purple;
const star_goods_box_type star_goods::box_type_MIN;
const star_goods_box_type star_goods::box_type_MAX;
const int star_goods::box_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int star_goods::kTypeFieldNumber;
const int star_goods::kAmountFieldNumber;
const int star_goods::kStoneIdFieldNumber;
const int star_goods::kStoneAmountFieldNumber;
#endif  // !_MSC_VER

star_goods::star_goods()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.star_goods)
}

void star_goods::InitAsDefaultInstance() {
}

star_goods::star_goods(const star_goods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.star_goods)
}

void star_goods::SharedCtor() {
  _cached_size_ = 0;
  _type_ = 0;
  _amount_ = 1u;
  _stone_id_ = 0u;
  _stone_amount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

star_goods::~star_goods() {
  // @@protoc_insertion_point(destructor:client_baseserver.star_goods)
  SharedDtor();
}

void star_goods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void star_goods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* star_goods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return star_goods_descriptor_;
}

const star_goods& star_goods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

star_goods* star_goods::default_instance_ = NULL;

star_goods* star_goods::New() const {
  return new star_goods;
}

void star_goods::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<star_goods*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(_stone_id_, _stone_amount_);
    _type_ = 0;
    _amount_ = 1u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool star_goods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.star_goods)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.star_goods.box_type _type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::star_goods_box_type_IsValid(value)) {
            set__type(static_cast< ::client_baseserver::star_goods_box_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__amount;
        break;
      }

      // required uint32 _amount = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse__amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_amount_)));
          set_has__amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__stone_id;
        break;
      }

      // required uint32 _stone_id = 3;
      case 3: {
        if (tag == 24) {
         parse__stone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stone_id_)));
          set_has__stone_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__stone_amount;
        break;
      }

      // required uint32 _stone_amount = 4;
      case 4: {
        if (tag == 32) {
         parse__stone_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stone_amount_)));
          set_has__stone_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.star_goods)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.star_goods)
  return false;
#undef DO_
}

void star_goods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.star_goods)
  // required .client_baseserver.star_goods.box_type _type = 1;
  if (has__type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_type(), output);
  }

  // required uint32 _amount = 2 [default = 1];
  if (has__amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_amount(), output);
  }

  // required uint32 _stone_id = 3;
  if (has__stone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_stone_id(), output);
  }

  // required uint32 _stone_amount = 4;
  if (has__stone_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_stone_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.star_goods)
}

::google::protobuf::uint8* star_goods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.star_goods)
  // required .client_baseserver.star_goods.box_type _type = 1;
  if (has__type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_type(), target);
  }

  // required uint32 _amount = 2 [default = 1];
  if (has__amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_amount(), target);
  }

  // required uint32 _stone_id = 3;
  if (has__stone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_stone_id(), target);
  }

  // required uint32 _stone_amount = 4;
  if (has__stone_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_stone_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.star_goods)
  return target;
}

int star_goods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.star_goods.box_type _type = 1;
    if (has__type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_type());
    }

    // required uint32 _amount = 2 [default = 1];
    if (has__amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_amount());
    }

    // required uint32 _stone_id = 3;
    if (has__stone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stone_id());
    }

    // required uint32 _stone_amount = 4;
    if (has__stone_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stone_amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void star_goods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const star_goods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const star_goods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void star_goods::MergeFrom(const star_goods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__type()) {
      set__type(from._type());
    }
    if (from.has__amount()) {
      set__amount(from._amount());
    }
    if (from.has__stone_id()) {
      set__stone_id(from._stone_id());
    }
    if (from.has__stone_amount()) {
      set__stone_amount(from._stone_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void star_goods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void star_goods::CopyFrom(const star_goods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool star_goods::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void star_goods::Swap(star_goods* other) {
  if (other != this) {
    std::swap(_type_, other->_type_);
    std::swap(_amount_, other->_amount_);
    std::swap(_stone_id_, other->_stone_id_);
    std::swap(_stone_amount_, other->_stone_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata star_goods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = star_goods_descriptor_;
  metadata.reflection = star_goods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user::kUseridFieldNumber;
const int user::kNameCardFieldNumber;
const int user::kLevelFieldNumber;
const int user::kRechargeSumFieldNumber;
const int user::kExpFieldNumber;
const int user::kMoneyFieldNumber;
const int user::kRmbFieldNumber;
const int user::kVitalityFieldNumber;
const int user::kHeroesFieldNumber;
const int user::kItemsFieldNumber;
const int user::kSkillLevelUpFieldNumber;
const int user::kUserstageFieldNumber;
const int user::kShopFieldNumber;
const int user::kTutorialFieldNumber;
const int user::kTaskFieldNumber;
const int user::kTaskFinishedFieldNumber;
const int user::kLastLoginFieldNumber;
const int user::kDailyjobFieldNumber;
const int user::kTavernRecordFieldNumber;
const int user::kUsermidasFieldNumber;
const int user::kDailyLoginFieldNumber;
const int user::kRechargeLimitFieldNumber;
const int user::kVipGiftsDrawFieldNumber;
const int user::kPointsFieldNumber;
const int user::kMonthCardFieldNumber;
const int user::kUserGuildFieldNumber;
const int user::kChatFieldNumber;
const int user::kSshopFieldNumber;
const int user::kFacebookFollowFieldNumber;
const int user::kPraiseFieldNumber;
const int user::kSessionidFieldNumber;
const int user::kShadowRunesFieldNumber;
#endif  // !_MSC_VER

user::user()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.user)
}

void user::InitAsDefaultInstance() {
  _name_card_ = const_cast< ::client_baseserver::name_card*>(&::client_baseserver::name_card::default_instance());
  _vitality_ = const_cast< ::client_baseserver::vitality*>(&::client_baseserver::vitality::default_instance());
  _skill_level_up_ = const_cast< ::client_baseserver::skilllevelup*>(&::client_baseserver::skilllevelup::default_instance());
  _userstage_ = const_cast< ::client_baseserver::userstage*>(&::client_baseserver::userstage::default_instance());
  _usermidas_ = const_cast< ::client_baseserver::usermidas*>(&::client_baseserver::usermidas::default_instance());
  _daily_login_ = const_cast< ::client_baseserver::daily_login*>(&::client_baseserver::daily_login::default_instance());
  _user_guild_ = const_cast< ::client_baseserver::user_guild*>(&::client_baseserver::user_guild::default_instance());
  _chat_ = const_cast< ::client_baseserver::chat*>(&::client_baseserver::chat::default_instance());
  _sshop_ = const_cast< ::client_baseserver::star_shop*>(&::client_baseserver::star_shop::default_instance());
  _shadow_runes_ = const_cast< ::client_baseserver::vitality*>(&::client_baseserver::vitality::default_instance());
}

user::user(const user& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.user)
}

void user::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _userid_ = 0u;
  _name_card_ = NULL;
  _level_ = 0u;
  _recharge_sum_ = 0u;
  _exp_ = 0u;
  _money_ = 0u;
  _rmb_ = 0u;
  _vitality_ = NULL;
  _skill_level_up_ = NULL;
  _userstage_ = NULL;
  _last_login_ = 0u;
  _usermidas_ = NULL;
  _daily_login_ = NULL;
  _user_guild_ = NULL;
  _chat_ = NULL;
  _sshop_ = NULL;
  _facebook_follow_ = 0u;
  _praise_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _sessionid_ = 0u;
  _shadow_runes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user::~user() {
  // @@protoc_insertion_point(destructor:client_baseserver.user)
  SharedDtor();
}

void user::SharedDtor() {
  if (_praise_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _praise_;
  }
  if (this != default_instance_) {
    delete _name_card_;
    delete _vitality_;
    delete _skill_level_up_;
    delete _userstage_;
    delete _usermidas_;
    delete _daily_login_;
    delete _user_guild_;
    delete _chat_;
    delete _sshop_;
    delete _shadow_runes_;
  }
}

void user::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_descriptor_;
}

const user& user::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

user* user::default_instance_ = NULL;

user* user::New() const {
  return new user;
}

void user::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(_userid_, _rmb_);
    if (has__name_card()) {
      if (_name_card_ != NULL) _name_card_->::client_baseserver::name_card::Clear();
    }
    if (has__vitality()) {
      if (_vitality_ != NULL) _vitality_->::client_baseserver::vitality::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3072) {
    if (has__skill_level_up()) {
      if (_skill_level_up_ != NULL) _skill_level_up_->::client_baseserver::skilllevelup::Clear();
    }
    if (has__userstage()) {
      if (_userstage_ != NULL) _userstage_->::client_baseserver::userstage::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 1638400) {
    _last_login_ = 0u;
    if (has__usermidas()) {
      if (_usermidas_ != NULL) _usermidas_->::client_baseserver::usermidas::Clear();
    }
    if (has__daily_login()) {
      if (_daily_login_ != NULL) _daily_login_->::client_baseserver::daily_login::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4261412864) {
    if (has__user_guild()) {
      if (_user_guild_ != NULL) _user_guild_->::client_baseserver::user_guild::Clear();
    }
    if (has__chat()) {
      if (_chat_ != NULL) _chat_->::client_baseserver::chat::Clear();
    }
    if (has__sshop()) {
      if (_sshop_ != NULL) _sshop_->::client_baseserver::star_shop::Clear();
    }
    _facebook_follow_ = 0u;
    if (has__praise()) {
      if (_praise_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _praise_->clear();
      }
    }
    _sessionid_ = 0u;
    if (has__shadow_runes()) {
      if (_shadow_runes_ != NULL) _shadow_runes_->::client_baseserver::vitality::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _heroes_.Clear();
  _items_.Clear();
  _shop_.Clear();
  _tutorial_.Clear();
  _task_.Clear();
  _task_finished_.Clear();
  _dailyjob_.Clear();
  _tavern_record_.Clear();
  _recharge_limit_.Clear();
  _vip_gifts_draw_.Clear();
  _points_.Clear();
  _month_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.user)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_userid_)));
          set_has__userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__name_card;
        break;
      }

      // required .client_baseserver.name_card _name_card = 2;
      case 2: {
        if (tag == 18) {
         parse__name_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__name_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__level;
        break;
      }

      // required uint32 _level = 3;
      case 3: {
        if (tag == 24) {
         parse__level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_level_)));
          set_has__level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__recharge_sum;
        break;
      }

      // required uint32 _recharge_sum = 4;
      case 4: {
        if (tag == 32) {
         parse__recharge_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_recharge_sum_)));
          set_has__recharge_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__exp;
        break;
      }

      // required uint32 _exp = 5;
      case 5: {
        if (tag == 40) {
         parse__exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_exp_)));
          set_has__exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse__money;
        break;
      }

      // required uint32 _money = 6;
      case 6: {
        if (tag == 48) {
         parse__money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_money_)));
          set_has__money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse__rmb;
        break;
      }

      // required uint32 _rmb = 7;
      case 7: {
        if (tag == 56) {
         parse__rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_rmb_)));
          set_has__rmb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse__vitality;
        break;
      }

      // required .client_baseserver.vitality _vitality = 8;
      case 8: {
        if (tag == 66) {
         parse__vitality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__vitality()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse__heroes;
        break;
      }

      // repeated .client_baseserver.hero _heroes = 10;
      case 10: {
        if (tag == 82) {
         parse__heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__heroes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse__heroes;
        if (input->ExpectTag(88)) goto parse__items;
        break;
      }

      // repeated uint32 _items = 11;
      case 11: {
        if (tag == 88) {
         parse__items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable__items())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__items())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse__items;
        if (input->ExpectTag(98)) goto parse__skill_level_up;
        break;
      }

      // required .client_baseserver.skilllevelup _skill_level_up = 12;
      case 12: {
        if (tag == 98) {
         parse__skill_level_up:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__skill_level_up()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse__userstage;
        break;
      }

      // required .client_baseserver.userstage _userstage = 15;
      case 15: {
        if (tag == 122) {
         parse__userstage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__userstage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse__shop;
        break;
      }

      // repeated .client_baseserver.user_shop _shop = 16;
      case 16: {
        if (tag == 130) {
         parse__shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__shop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse__shop;
        if (input->ExpectTag(136)) goto parse__tutorial;
        break;
      }

      // repeated uint32 _tutorial = 17;
      case 17: {
        if (tag == 136) {
         parse__tutorial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136, input, this->mutable__tutorial())));
        } else if (tag == 138) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__tutorial())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse__tutorial;
        if (input->ExpectTag(146)) goto parse__task;
        break;
      }

      // repeated .client_baseserver.usertask _task = 18;
      case 18: {
        if (tag == 146) {
         parse__task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse__task;
        if (input->ExpectTag(152)) goto parse__task_finished;
        break;
      }

      // repeated uint32 _task_finished = 19;
      case 19: {
        if (tag == 152) {
         parse__task_finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 152, input, this->mutable__task_finished())));
        } else if (tag == 154) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__task_finished())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse__task_finished;
        if (input->ExpectTag(160)) goto parse__last_login;
        break;
      }

      // optional uint32 _last_login = 20;
      case 20: {
        if (tag == 160) {
         parse__last_login:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_last_login_)));
          set_has__last_login();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse__dailyjob;
        break;
      }

      // repeated .client_baseserver.dailyjob _dailyjob = 21;
      case 21: {
        if (tag == 170) {
         parse__dailyjob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__dailyjob()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse__dailyjob;
        if (input->ExpectTag(178)) goto parse__tavern_record;
        break;
      }

      // repeated .client_baseserver.tavern_record _tavern_record = 22;
      case 22: {
        if (tag == 178) {
         parse__tavern_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__tavern_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse__tavern_record;
        if (input->ExpectTag(186)) goto parse__usermidas;
        break;
      }

      // required .client_baseserver.usermidas _usermidas = 23;
      case 23: {
        if (tag == 186) {
         parse__usermidas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__usermidas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse__daily_login;
        break;
      }

      // required .client_baseserver.daily_login _daily_login = 24;
      case 24: {
        if (tag == 194) {
         parse__daily_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__daily_login()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse__recharge_limit;
        break;
      }

      // repeated uint32 _recharge_limit = 25;
      case 25: {
        if (tag == 200) {
         parse__recharge_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 200, input, this->mutable__recharge_limit())));
        } else if (tag == 202) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__recharge_limit())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse__recharge_limit;
        if (input->ExpectTag(208)) goto parse__vip_gifts_draw;
        break;
      }

      // repeated uint32 _vip_gifts_draw = 26;
      case 26: {
        if (tag == 208) {
         parse__vip_gifts_draw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 208, input, this->mutable__vip_gifts_draw())));
        } else if (tag == 210) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__vip_gifts_draw())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse__vip_gifts_draw;
        if (input->ExpectTag(218)) goto parse__points;
        break;
      }

      // repeated .client_baseserver.user_point _points = 27;
      case 27: {
        if (tag == 218) {
         parse__points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse__points;
        if (input->ExpectTag(226)) goto parse__month_card;
        break;
      }

      // repeated .client_baseserver.monthcard _month_card = 28;
      case 28: {
        if (tag == 226) {
         parse__month_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__month_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse__month_card;
        if (input->ExpectTag(234)) goto parse__user_guild;
        break;
      }

      // required .client_baseserver.user_guild _user_guild = 29;
      case 29: {
        if (tag == 234) {
         parse__user_guild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__user_guild()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse__chat;
        break;
      }

      // required .client_baseserver.chat _chat = 30;
      case 30: {
        if (tag == 242) {
         parse__chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__chat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse__sshop;
        break;
      }

      // optional .client_baseserver.star_shop _sshop = 31;
      case 31: {
        if (tag == 250) {
         parse__sshop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__sshop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse__facebook_follow;
        break;
      }

      // optional uint32 _facebook_follow = 32;
      case 32: {
        if (tag == 256) {
         parse__facebook_follow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_facebook_follow_)));
          set_has__facebook_follow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse__praise;
        break;
      }

      // optional string _praise = 33;
      case 33: {
        if (tag == 266) {
         parse__praise:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__praise()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_praise().data(), this->_praise().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_praise");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse__sessionid;
        break;
      }

      // optional uint32 _sessionid = 34;
      case 34: {
        if (tag == 272) {
         parse__sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_sessionid_)));
          set_has__sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse__shadow_runes;
        break;
      }

      // optional .client_baseserver.vitality _shadow_runes = 35;
      case 35: {
        if (tag == 282) {
         parse__shadow_runes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__shadow_runes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.user)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.user)
  return false;
#undef DO_
}

void user::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.user)
  // required uint32 _userid = 1;
  if (has__userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_userid(), output);
  }

  // required .client_baseserver.name_card _name_card = 2;
  if (has__name_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_name_card(), output);
  }

  // required uint32 _level = 3;
  if (has__level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_level(), output);
  }

  // required uint32 _recharge_sum = 4;
  if (has__recharge_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_recharge_sum(), output);
  }

  // required uint32 _exp = 5;
  if (has__exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_exp(), output);
  }

  // required uint32 _money = 6;
  if (has__money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_money(), output);
  }

  // required uint32 _rmb = 7;
  if (has__rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->_rmb(), output);
  }

  // required .client_baseserver.vitality _vitality = 8;
  if (has__vitality()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_vitality(), output);
  }

  // repeated .client_baseserver.hero _heroes = 10;
  for (int i = 0; i < this->_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_heroes(i), output);
  }

  // repeated uint32 _items = 11;
  for (int i = 0; i < this->_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->_items(i), output);
  }

  // required .client_baseserver.skilllevelup _skill_level_up = 12;
  if (has__skill_level_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_skill_level_up(), output);
  }

  // required .client_baseserver.userstage _userstage = 15;
  if (has__userstage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_userstage(), output);
  }

  // repeated .client_baseserver.user_shop _shop = 16;
  for (int i = 0; i < this->_shop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_shop(i), output);
  }

  // repeated uint32 _tutorial = 17;
  for (int i = 0; i < this->_tutorial_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->_tutorial(i), output);
  }

  // repeated .client_baseserver.usertask _task = 18;
  for (int i = 0; i < this->_task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_task(i), output);
  }

  // repeated uint32 _task_finished = 19;
  for (int i = 0; i < this->_task_finished_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      19, this->_task_finished(i), output);
  }

  // optional uint32 _last_login = 20;
  if (has__last_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->_last_login(), output);
  }

  // repeated .client_baseserver.dailyjob _dailyjob = 21;
  for (int i = 0; i < this->_dailyjob_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_dailyjob(i), output);
  }

  // repeated .client_baseserver.tavern_record _tavern_record = 22;
  for (int i = 0; i < this->_tavern_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->_tavern_record(i), output);
  }

  // required .client_baseserver.usermidas _usermidas = 23;
  if (has__usermidas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->_usermidas(), output);
  }

  // required .client_baseserver.daily_login _daily_login = 24;
  if (has__daily_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->_daily_login(), output);
  }

  // repeated uint32 _recharge_limit = 25;
  for (int i = 0; i < this->_recharge_limit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      25, this->_recharge_limit(i), output);
  }

  // repeated uint32 _vip_gifts_draw = 26;
  for (int i = 0; i < this->_vip_gifts_draw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      26, this->_vip_gifts_draw(i), output);
  }

  // repeated .client_baseserver.user_point _points = 27;
  for (int i = 0; i < this->_points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->_points(i), output);
  }

  // repeated .client_baseserver.monthcard _month_card = 28;
  for (int i = 0; i < this->_month_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->_month_card(i), output);
  }

  // required .client_baseserver.user_guild _user_guild = 29;
  if (has__user_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->_user_guild(), output);
  }

  // required .client_baseserver.chat _chat = 30;
  if (has__chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->_chat(), output);
  }

  // optional .client_baseserver.star_shop _sshop = 31;
  if (has__sshop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->_sshop(), output);
  }

  // optional uint32 _facebook_follow = 32;
  if (has__facebook_follow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->_facebook_follow(), output);
  }

  // optional string _praise = 33;
  if (has__praise()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_praise().data(), this->_praise().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_praise");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->_praise(), output);
  }

  // optional uint32 _sessionid = 34;
  if (has__sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->_sessionid(), output);
  }

  // optional .client_baseserver.vitality _shadow_runes = 35;
  if (has__shadow_runes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->_shadow_runes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.user)
}

::google::protobuf::uint8* user::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.user)
  // required uint32 _userid = 1;
  if (has__userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_userid(), target);
  }

  // required .client_baseserver.name_card _name_card = 2;
  if (has__name_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_name_card(), target);
  }

  // required uint32 _level = 3;
  if (has__level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_level(), target);
  }

  // required uint32 _recharge_sum = 4;
  if (has__recharge_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_recharge_sum(), target);
  }

  // required uint32 _exp = 5;
  if (has__exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_exp(), target);
  }

  // required uint32 _money = 6;
  if (has__money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_money(), target);
  }

  // required uint32 _rmb = 7;
  if (has__rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->_rmb(), target);
  }

  // required .client_baseserver.vitality _vitality = 8;
  if (has__vitality()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->_vitality(), target);
  }

  // repeated .client_baseserver.hero _heroes = 10;
  for (int i = 0; i < this->_heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->_heroes(i), target);
  }

  // repeated uint32 _items = 11;
  for (int i = 0; i < this->_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(11, this->_items(i), target);
  }

  // required .client_baseserver.skilllevelup _skill_level_up = 12;
  if (has__skill_level_up()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->_skill_level_up(), target);
  }

  // required .client_baseserver.userstage _userstage = 15;
  if (has__userstage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->_userstage(), target);
  }

  // repeated .client_baseserver.user_shop _shop = 16;
  for (int i = 0; i < this->_shop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->_shop(i), target);
  }

  // repeated uint32 _tutorial = 17;
  for (int i = 0; i < this->_tutorial_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(17, this->_tutorial(i), target);
  }

  // repeated .client_baseserver.usertask _task = 18;
  for (int i = 0; i < this->_task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->_task(i), target);
  }

  // repeated uint32 _task_finished = 19;
  for (int i = 0; i < this->_task_finished_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(19, this->_task_finished(i), target);
  }

  // optional uint32 _last_login = 20;
  if (has__last_login()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->_last_login(), target);
  }

  // repeated .client_baseserver.dailyjob _dailyjob = 21;
  for (int i = 0; i < this->_dailyjob_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->_dailyjob(i), target);
  }

  // repeated .client_baseserver.tavern_record _tavern_record = 22;
  for (int i = 0; i < this->_tavern_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->_tavern_record(i), target);
  }

  // required .client_baseserver.usermidas _usermidas = 23;
  if (has__usermidas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->_usermidas(), target);
  }

  // required .client_baseserver.daily_login _daily_login = 24;
  if (has__daily_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->_daily_login(), target);
  }

  // repeated uint32 _recharge_limit = 25;
  for (int i = 0; i < this->_recharge_limit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(25, this->_recharge_limit(i), target);
  }

  // repeated uint32 _vip_gifts_draw = 26;
  for (int i = 0; i < this->_vip_gifts_draw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(26, this->_vip_gifts_draw(i), target);
  }

  // repeated .client_baseserver.user_point _points = 27;
  for (int i = 0; i < this->_points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->_points(i), target);
  }

  // repeated .client_baseserver.monthcard _month_card = 28;
  for (int i = 0; i < this->_month_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->_month_card(i), target);
  }

  // required .client_baseserver.user_guild _user_guild = 29;
  if (has__user_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->_user_guild(), target);
  }

  // required .client_baseserver.chat _chat = 30;
  if (has__chat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->_chat(), target);
  }

  // optional .client_baseserver.star_shop _sshop = 31;
  if (has__sshop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->_sshop(), target);
  }

  // optional uint32 _facebook_follow = 32;
  if (has__facebook_follow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->_facebook_follow(), target);
  }

  // optional string _praise = 33;
  if (has__praise()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_praise().data(), this->_praise().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_praise");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->_praise(), target);
  }

  // optional uint32 _sessionid = 34;
  if (has__sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->_sessionid(), target);
  }

  // optional .client_baseserver.vitality _shadow_runes = 35;
  if (has__shadow_runes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->_shadow_runes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.user)
  return target;
}

int user::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _userid = 1;
    if (has__userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_userid());
    }

    // required .client_baseserver.name_card _name_card = 2;
    if (has__name_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_name_card());
    }

    // required uint32 _level = 3;
    if (has__level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_level());
    }

    // required uint32 _recharge_sum = 4;
    if (has__recharge_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_recharge_sum());
    }

    // required uint32 _exp = 5;
    if (has__exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_exp());
    }

    // required uint32 _money = 6;
    if (has__money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_money());
    }

    // required uint32 _rmb = 7;
    if (has__rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_rmb());
    }

    // required .client_baseserver.vitality _vitality = 8;
    if (has__vitality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_vitality());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // required .client_baseserver.skilllevelup _skill_level_up = 12;
    if (has__skill_level_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_skill_level_up());
    }

    // required .client_baseserver.userstage _userstage = 15;
    if (has__userstage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_userstage());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 _last_login = 20;
    if (has__last_login()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_last_login());
    }

    // required .client_baseserver.usermidas _usermidas = 23;
    if (has__usermidas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_usermidas());
    }

    // required .client_baseserver.daily_login _daily_login = 24;
    if (has__daily_login()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_daily_login());
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // required .client_baseserver.user_guild _user_guild = 29;
    if (has__user_guild()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_user_guild());
    }

    // required .client_baseserver.chat _chat = 30;
    if (has__chat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_chat());
    }

    // optional .client_baseserver.star_shop _sshop = 31;
    if (has__sshop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_sshop());
    }

    // optional uint32 _facebook_follow = 32;
    if (has__facebook_follow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_facebook_follow());
    }

    // optional string _praise = 33;
    if (has__praise()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_praise());
    }

    // optional uint32 _sessionid = 34;
    if (has__sessionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_sessionid());
    }

    // optional .client_baseserver.vitality _shadow_runes = 35;
    if (has__shadow_runes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_shadow_runes());
    }

  }
  // repeated .client_baseserver.hero _heroes = 10;
  total_size += 1 * this->_heroes_size();
  for (int i = 0; i < this->_heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_heroes(i));
  }

  // repeated uint32 _items = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->_items_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_items(i));
    }
    total_size += 1 * this->_items_size() + data_size;
  }

  // repeated .client_baseserver.user_shop _shop = 16;
  total_size += 2 * this->_shop_size();
  for (int i = 0; i < this->_shop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_shop(i));
  }

  // repeated uint32 _tutorial = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->_tutorial_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_tutorial(i));
    }
    total_size += 2 * this->_tutorial_size() + data_size;
  }

  // repeated .client_baseserver.usertask _task = 18;
  total_size += 2 * this->_task_size();
  for (int i = 0; i < this->_task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_task(i));
  }

  // repeated uint32 _task_finished = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->_task_finished_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_task_finished(i));
    }
    total_size += 2 * this->_task_finished_size() + data_size;
  }

  // repeated .client_baseserver.dailyjob _dailyjob = 21;
  total_size += 2 * this->_dailyjob_size();
  for (int i = 0; i < this->_dailyjob_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_dailyjob(i));
  }

  // repeated .client_baseserver.tavern_record _tavern_record = 22;
  total_size += 2 * this->_tavern_record_size();
  for (int i = 0; i < this->_tavern_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_tavern_record(i));
  }

  // repeated uint32 _recharge_limit = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->_recharge_limit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_recharge_limit(i));
    }
    total_size += 2 * this->_recharge_limit_size() + data_size;
  }

  // repeated uint32 _vip_gifts_draw = 26;
  {
    int data_size = 0;
    for (int i = 0; i < this->_vip_gifts_draw_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_vip_gifts_draw(i));
    }
    total_size += 2 * this->_vip_gifts_draw_size() + data_size;
  }

  // repeated .client_baseserver.user_point _points = 27;
  total_size += 2 * this->_points_size();
  for (int i = 0; i < this->_points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_points(i));
  }

  // repeated .client_baseserver.monthcard _month_card = 28;
  total_size += 2 * this->_month_card_size();
  for (int i = 0; i < this->_month_card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_month_card(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user::MergeFrom(const user& from) {
  GOOGLE_CHECK_NE(&from, this);
  _heroes_.MergeFrom(from._heroes_);
  _items_.MergeFrom(from._items_);
  _shop_.MergeFrom(from._shop_);
  _tutorial_.MergeFrom(from._tutorial_);
  _task_.MergeFrom(from._task_);
  _task_finished_.MergeFrom(from._task_finished_);
  _dailyjob_.MergeFrom(from._dailyjob_);
  _tavern_record_.MergeFrom(from._tavern_record_);
  _recharge_limit_.MergeFrom(from._recharge_limit_);
  _vip_gifts_draw_.MergeFrom(from._vip_gifts_draw_);
  _points_.MergeFrom(from._points_);
  _month_card_.MergeFrom(from._month_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__userid()) {
      set__userid(from._userid());
    }
    if (from.has__name_card()) {
      mutable__name_card()->::client_baseserver::name_card::MergeFrom(from._name_card());
    }
    if (from.has__level()) {
      set__level(from._level());
    }
    if (from.has__recharge_sum()) {
      set__recharge_sum(from._recharge_sum());
    }
    if (from.has__exp()) {
      set__exp(from._exp());
    }
    if (from.has__money()) {
      set__money(from._money());
    }
    if (from.has__rmb()) {
      set__rmb(from._rmb());
    }
    if (from.has__vitality()) {
      mutable__vitality()->::client_baseserver::vitality::MergeFrom(from._vitality());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has__skill_level_up()) {
      mutable__skill_level_up()->::client_baseserver::skilllevelup::MergeFrom(from._skill_level_up());
    }
    if (from.has__userstage()) {
      mutable__userstage()->::client_baseserver::userstage::MergeFrom(from._userstage());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has__last_login()) {
      set__last_login(from._last_login());
    }
    if (from.has__usermidas()) {
      mutable__usermidas()->::client_baseserver::usermidas::MergeFrom(from._usermidas());
    }
    if (from.has__daily_login()) {
      mutable__daily_login()->::client_baseserver::daily_login::MergeFrom(from._daily_login());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has__user_guild()) {
      mutable__user_guild()->::client_baseserver::user_guild::MergeFrom(from._user_guild());
    }
    if (from.has__chat()) {
      mutable__chat()->::client_baseserver::chat::MergeFrom(from._chat());
    }
    if (from.has__sshop()) {
      mutable__sshop()->::client_baseserver::star_shop::MergeFrom(from._sshop());
    }
    if (from.has__facebook_follow()) {
      set__facebook_follow(from._facebook_follow());
    }
    if (from.has__praise()) {
      set__praise(from._praise());
    }
    if (from.has__sessionid()) {
      set__sessionid(from._sessionid());
    }
    if (from.has__shadow_runes()) {
      mutable__shadow_runes()->::client_baseserver::vitality::MergeFrom(from._shadow_runes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user::CopyFrom(const user& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user::IsInitialized() const {
  if ((_has_bits_[0] & 0x06180cff) != 0x06180cff) return false;

  if (has__name_card()) {
    if (!this->_name_card().IsInitialized()) return false;
  }
  if (has__vitality()) {
    if (!this->_vitality().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->_heroes())) return false;
  if (has__skill_level_up()) {
    if (!this->_skill_level_up().IsInitialized()) return false;
  }
  if (has__userstage()) {
    if (!this->_userstage().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->_shop())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->_task())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->_dailyjob())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->_tavern_record())) return false;
  if (has__usermidas()) {
    if (!this->_usermidas().IsInitialized()) return false;
  }
  if (has__daily_login()) {
    if (!this->_daily_login().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->_points())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->_month_card())) return false;
  if (has__user_guild()) {
    if (!this->_user_guild().IsInitialized()) return false;
  }
  if (has__chat()) {
    if (!this->_chat().IsInitialized()) return false;
  }
  if (has__sshop()) {
    if (!this->_sshop().IsInitialized()) return false;
  }
  if (has__shadow_runes()) {
    if (!this->_shadow_runes().IsInitialized()) return false;
  }
  return true;
}

void user::Swap(user* other) {
  if (other != this) {
    std::swap(_userid_, other->_userid_);
    std::swap(_name_card_, other->_name_card_);
    std::swap(_level_, other->_level_);
    std::swap(_recharge_sum_, other->_recharge_sum_);
    std::swap(_exp_, other->_exp_);
    std::swap(_money_, other->_money_);
    std::swap(_rmb_, other->_rmb_);
    std::swap(_vitality_, other->_vitality_);
    _heroes_.Swap(&other->_heroes_);
    _items_.Swap(&other->_items_);
    std::swap(_skill_level_up_, other->_skill_level_up_);
    std::swap(_userstage_, other->_userstage_);
    _shop_.Swap(&other->_shop_);
    _tutorial_.Swap(&other->_tutorial_);
    _task_.Swap(&other->_task_);
    _task_finished_.Swap(&other->_task_finished_);
    std::swap(_last_login_, other->_last_login_);
    _dailyjob_.Swap(&other->_dailyjob_);
    _tavern_record_.Swap(&other->_tavern_record_);
    std::swap(_usermidas_, other->_usermidas_);
    std::swap(_daily_login_, other->_daily_login_);
    _recharge_limit_.Swap(&other->_recharge_limit_);
    _vip_gifts_draw_.Swap(&other->_vip_gifts_draw_);
    _points_.Swap(&other->_points_);
    _month_card_.Swap(&other->_month_card_);
    std::swap(_user_guild_, other->_user_guild_);
    std::swap(_chat_, other->_chat_);
    std::swap(_sshop_, other->_sshop_);
    std::swap(_facebook_follow_, other->_facebook_follow_);
    std::swap(_praise_, other->_praise_);
    std::swap(_sessionid_, other->_sessionid_);
    std::swap(_shadow_runes_, other->_shadow_runes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_descriptor_;
  metadata.reflection = user_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_summary::kAvatarFieldNumber;
const int user_summary::kNameFieldNumber;
const int user_summary::kVipFieldNumber;
const int user_summary::kLevelFieldNumber;
const int user_summary::kGuildNameFieldNumber;
const int user_summary::kUserIdFieldNumber;
#endif  // !_MSC_VER

user_summary::user_summary()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.user_summary)
}

void user_summary::InitAsDefaultInstance() {
}

user_summary::user_summary(const user_summary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.user_summary)
}

void user_summary::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _avatar_ = 0u;
  _name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _vip_ = 0u;
  _level_ = 0u;
  _guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_summary::~user_summary() {
  // @@protoc_insertion_point(destructor:client_baseserver.user_summary)
  SharedDtor();
}

void user_summary::SharedDtor() {
  if (_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _name_;
  }
  if (_guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _guild_name_;
  }
  if (this != default_instance_) {
  }
}

void user_summary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_summary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_summary_descriptor_;
}

const user_summary& user_summary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

user_summary* user_summary::default_instance_ = NULL;

user_summary* user_summary::New() const {
  return new user_summary;
}

void user_summary::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_summary*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(_avatar_, _vip_);
    ZR_(_level_, _user_id_);
    if (has__name()) {
      if (_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _name_->clear();
      }
    }
    if (has__guild_name()) {
      if (_guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _guild_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_summary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.user_summary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _avatar = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_avatar_)));
          set_has__avatar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__name;
        break;
      }

      // required string _name = 2;
      case 2: {
        if (tag == 18) {
         parse__name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_name().data(), this->_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__vip;
        break;
      }

      // required uint32 _vip = 3;
      case 3: {
        if (tag == 24) {
         parse__vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_vip_)));
          set_has__vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__level;
        break;
      }

      // required uint32 _level = 4;
      case 4: {
        if (tag == 32) {
         parse__level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_level_)));
          set_has__level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse__guild_name;
        break;
      }

      // optional string _guild_name = 5;
      case 5: {
        if (tag == 42) {
         parse__guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_guild_name().data(), this->_guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_guild_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse__user_id;
        break;
      }

      // optional uint32 _user_id = 6;
      case 6: {
        if (tag == 48) {
         parse__user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_user_id_)));
          set_has__user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.user_summary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.user_summary)
  return false;
#undef DO_
}

void user_summary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.user_summary)
  // required uint32 _avatar = 1;
  if (has__avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_avatar(), output);
  }

  // required string _name = 2;
  if (has__name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_name().data(), this->_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->_name(), output);
  }

  // required uint32 _vip = 3;
  if (has__vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_vip(), output);
  }

  // required uint32 _level = 4;
  if (has__level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_level(), output);
  }

  // optional string _guild_name = 5;
  if (has__guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_guild_name().data(), this->_guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->_guild_name(), output);
  }

  // optional uint32 _user_id = 6;
  if (has__user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.user_summary)
}

::google::protobuf::uint8* user_summary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.user_summary)
  // required uint32 _avatar = 1;
  if (has__avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_avatar(), target);
  }

  // required string _name = 2;
  if (has__name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_name().data(), this->_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_name(), target);
  }

  // required uint32 _vip = 3;
  if (has__vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_vip(), target);
  }

  // required uint32 _level = 4;
  if (has__level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_level(), target);
  }

  // optional string _guild_name = 5;
  if (has__guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_guild_name().data(), this->_guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->_guild_name(), target);
  }

  // optional uint32 _user_id = 6;
  if (has__user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.user_summary)
  return target;
}

int user_summary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _avatar = 1;
    if (has__avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_avatar());
    }

    // required string _name = 2;
    if (has__name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_name());
    }

    // required uint32 _vip = 3;
    if (has__vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_vip());
    }

    // required uint32 _level = 4;
    if (has__level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_level());
    }

    // optional string _guild_name = 5;
    if (has__guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_guild_name());
    }

    // optional uint32 _user_id = 6;
    if (has__user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_summary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_summary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_summary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_summary::MergeFrom(const user_summary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__avatar()) {
      set__avatar(from._avatar());
    }
    if (from.has__name()) {
      set__name(from._name());
    }
    if (from.has__vip()) {
      set__vip(from._vip());
    }
    if (from.has__level()) {
      set__level(from._level());
    }
    if (from.has__guild_name()) {
      set__guild_name(from._guild_name());
    }
    if (from.has__user_id()) {
      set__user_id(from._user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_summary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_summary::CopyFrom(const user_summary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_summary::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void user_summary::Swap(user_summary* other) {
  if (other != this) {
    std::swap(_avatar_, other->_avatar_);
    std::swap(_name_, other->_name_);
    std::swap(_vip_, other->_vip_);
    std::swap(_level_, other->_level_);
    std::swap(_guild_name_, other->_guild_name_);
    std::swap(_user_id_, other->_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_summary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_summary_descriptor_;
  metadata.reflection = user_summary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int name_card::kNameFieldNumber;
const int name_card::kLastSetNameTimeFieldNumber;
const int name_card::kAvatarFieldNumber;
#endif  // !_MSC_VER

name_card::name_card()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.name_card)
}

void name_card::InitAsDefaultInstance() {
}

name_card::name_card(const name_card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.name_card)
}

void name_card::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _last_set_name_time_ = 0u;
  _avatar_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

name_card::~name_card() {
  // @@protoc_insertion_point(destructor:client_baseserver.name_card)
  SharedDtor();
}

void name_card::SharedDtor() {
  if (_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _name_;
  }
  if (this != default_instance_) {
  }
}

void name_card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* name_card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return name_card_descriptor_;
}

const name_card& name_card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

name_card* name_card::default_instance_ = NULL;

name_card* name_card::New() const {
  return new name_card;
}

void name_card::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<name_card*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(_last_set_name_time_, _avatar_);
    if (has__name()) {
      if (_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool name_card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.name_card)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_name().data(), this->_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__last_set_name_time;
        break;
      }

      // required uint32 _last_set_name_time = 2;
      case 2: {
        if (tag == 16) {
         parse__last_set_name_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_last_set_name_time_)));
          set_has__last_set_name_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__avatar;
        break;
      }

      // required uint32 _avatar = 3;
      case 3: {
        if (tag == 24) {
         parse__avatar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_avatar_)));
          set_has__avatar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.name_card)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.name_card)
  return false;
#undef DO_
}

void name_card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.name_card)
  // required string _name = 1;
  if (has__name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_name().data(), this->_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->_name(), output);
  }

  // required uint32 _last_set_name_time = 2;
  if (has__last_set_name_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_last_set_name_time(), output);
  }

  // required uint32 _avatar = 3;
  if (has__avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_avatar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.name_card)
}

::google::protobuf::uint8* name_card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.name_card)
  // required string _name = 1;
  if (has__name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_name().data(), this->_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_name(), target);
  }

  // required uint32 _last_set_name_time = 2;
  if (has__last_set_name_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_last_set_name_time(), target);
  }

  // required uint32 _avatar = 3;
  if (has__avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_avatar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.name_card)
  return target;
}

int name_card::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _name = 1;
    if (has__name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_name());
    }

    // required uint32 _last_set_name_time = 2;
    if (has__last_set_name_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_last_set_name_time());
    }

    // required uint32 _avatar = 3;
    if (has__avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_avatar());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void name_card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const name_card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const name_card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void name_card::MergeFrom(const name_card& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__name()) {
      set__name(from._name());
    }
    if (from.has__last_set_name_time()) {
      set__last_set_name_time(from._last_set_name_time());
    }
    if (from.has__avatar()) {
      set__avatar(from._avatar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void name_card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void name_card::CopyFrom(const name_card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool name_card::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void name_card::Swap(name_card* other) {
  if (other != this) {
    std::swap(_name_, other->_name_);
    std::swap(_last_set_name_time_, other->_last_set_name_time_);
    std::swap(_avatar_, other->_avatar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata name_card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = name_card_descriptor_;
  metadata.reflection = name_card_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* daily_login_dailylogin_status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return daily_login_dailylogin_status_descriptor_;
}
bool daily_login_dailylogin_status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const daily_login_dailylogin_status daily_login::all;
const daily_login_dailylogin_status daily_login::part;
const daily_login_dailylogin_status daily_login::nothing;
const daily_login_dailylogin_status daily_login::dailylogin_status_MIN;
const daily_login_dailylogin_status daily_login::dailylogin_status_MAX;
const int daily_login::dailylogin_status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int daily_login::kStatusFieldNumber;
const int daily_login::kFrequencyFieldNumber;
const int daily_login::kLastLoginDateFieldNumber;
#endif  // !_MSC_VER

daily_login::daily_login()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.daily_login)
}

void daily_login::InitAsDefaultInstance() {
}

daily_login::daily_login(const daily_login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.daily_login)
}

void daily_login::SharedCtor() {
  _cached_size_ = 0;
  _status_ = 1;
  _frequency_ = 0u;
  _last_login_date_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

daily_login::~daily_login() {
  // @@protoc_insertion_point(destructor:client_baseserver.daily_login)
  SharedDtor();
}

void daily_login::SharedDtor() {
  if (this != default_instance_) {
  }
}

void daily_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* daily_login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return daily_login_descriptor_;
}

const daily_login& daily_login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

daily_login* daily_login::default_instance_ = NULL;

daily_login* daily_login::New() const {
  return new daily_login;
}

void daily_login::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<daily_login*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(_frequency_, _last_login_date_);
    _status_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool daily_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.daily_login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.daily_login.dailylogin_status _status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::daily_login_dailylogin_status_IsValid(value)) {
            set__status(static_cast< ::client_baseserver::daily_login_dailylogin_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__frequency;
        break;
      }

      // required uint32 _frequency = 2;
      case 2: {
        if (tag == 16) {
         parse__frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_frequency_)));
          set_has__frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__last_login_date;
        break;
      }

      // required uint32 _last_login_date = 3;
      case 3: {
        if (tag == 24) {
         parse__last_login_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_last_login_date_)));
          set_has__last_login_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.daily_login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.daily_login)
  return false;
#undef DO_
}

void daily_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.daily_login)
  // required .client_baseserver.daily_login.dailylogin_status _status = 1;
  if (has__status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_status(), output);
  }

  // required uint32 _frequency = 2;
  if (has__frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_frequency(), output);
  }

  // required uint32 _last_login_date = 3;
  if (has__last_login_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_last_login_date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.daily_login)
}

::google::protobuf::uint8* daily_login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.daily_login)
  // required .client_baseserver.daily_login.dailylogin_status _status = 1;
  if (has__status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_status(), target);
  }

  // required uint32 _frequency = 2;
  if (has__frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_frequency(), target);
  }

  // required uint32 _last_login_date = 3;
  if (has__last_login_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_last_login_date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.daily_login)
  return target;
}

int daily_login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.daily_login.dailylogin_status _status = 1;
    if (has__status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_status());
    }

    // required uint32 _frequency = 2;
    if (has__frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_frequency());
    }

    // required uint32 _last_login_date = 3;
    if (has__last_login_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_last_login_date());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void daily_login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const daily_login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const daily_login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void daily_login::MergeFrom(const daily_login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__status()) {
      set__status(from._status());
    }
    if (from.has__frequency()) {
      set__frequency(from._frequency());
    }
    if (from.has__last_login_date()) {
      set__last_login_date(from._last_login_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void daily_login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void daily_login::CopyFrom(const daily_login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool daily_login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void daily_login::Swap(daily_login* other) {
  if (other != this) {
    std::swap(_status_, other->_status_);
    std::swap(_frequency_, other->_frequency_);
    std::swap(_last_login_date_, other->_last_login_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata daily_login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = daily_login_descriptor_;
  metadata.reflection = daily_login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ask_daily_login_reply::kResultFieldNumber;
const int ask_daily_login_reply::kItemsFieldNumber;
const int ask_daily_login_reply::kHeroFieldNumber;
const int ask_daily_login_reply::kDiamondFieldNumber;
#endif  // !_MSC_VER

ask_daily_login_reply::ask_daily_login_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.ask_daily_login_reply)
}

void ask_daily_login_reply::InitAsDefaultInstance() {
}

ask_daily_login_reply::ask_daily_login_reply(const ask_daily_login_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.ask_daily_login_reply)
}

void ask_daily_login_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _diamond_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ask_daily_login_reply::~ask_daily_login_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.ask_daily_login_reply)
  SharedDtor();
}

void ask_daily_login_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ask_daily_login_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ask_daily_login_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ask_daily_login_reply_descriptor_;
}

const ask_daily_login_reply& ask_daily_login_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

ask_daily_login_reply* ask_daily_login_reply::default_instance_ = NULL;

ask_daily_login_reply* ask_daily_login_reply::New() const {
  return new ask_daily_login_reply;
}

void ask_daily_login_reply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ask_daily_login_reply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_result_, _diamond_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  _items_.Clear();
  _hero_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ask_daily_login_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.ask_daily_login_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__items;
        break;
      }

      // repeated uint32 _items = 2;
      case 2: {
        if (tag == 16) {
         parse__items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable__items())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__items())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__items;
        if (input->ExpectTag(26)) goto parse__hero;
        break;
      }

      // repeated .client_baseserver.hero _hero = 3;
      case 3: {
        if (tag == 26) {
         parse__hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__hero;
        if (input->ExpectTag(32)) goto parse__diamond;
        break;
      }

      // optional uint32 _diamond = 4;
      case 4: {
        if (tag == 32) {
         parse__diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_diamond_)));
          set_has__diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.ask_daily_login_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.ask_daily_login_reply)
  return false;
#undef DO_
}

void ask_daily_login_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.ask_daily_login_reply)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // repeated uint32 _items = 2;
  for (int i = 0; i < this->_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->_items(i), output);
  }

  // repeated .client_baseserver.hero _hero = 3;
  for (int i = 0; i < this->_hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_hero(i), output);
  }

  // optional uint32 _diamond = 4;
  if (has__diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_diamond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.ask_daily_login_reply)
}

::google::protobuf::uint8* ask_daily_login_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.ask_daily_login_reply)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // repeated uint32 _items = 2;
  for (int i = 0; i < this->_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->_items(i), target);
  }

  // repeated .client_baseserver.hero _hero = 3;
  for (int i = 0; i < this->_hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_hero(i), target);
  }

  // optional uint32 _diamond = 4;
  if (has__diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_diamond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.ask_daily_login_reply)
  return target;
}

int ask_daily_login_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional uint32 _diamond = 4;
    if (has__diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_diamond());
    }

  }
  // repeated uint32 _items = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->_items_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_items(i));
    }
    total_size += 1 * this->_items_size() + data_size;
  }

  // repeated .client_baseserver.hero _hero = 3;
  total_size += 1 * this->_hero_size();
  for (int i = 0; i < this->_hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_hero(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ask_daily_login_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ask_daily_login_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ask_daily_login_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ask_daily_login_reply::MergeFrom(const ask_daily_login_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _items_.MergeFrom(from._items_);
  _hero_.MergeFrom(from._hero_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__diamond()) {
      set__diamond(from._diamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ask_daily_login_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ask_daily_login_reply::CopyFrom(const ask_daily_login_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ask_daily_login_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_hero())) return false;
  return true;
}

void ask_daily_login_reply::Swap(ask_daily_login_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    _items_.Swap(&other->_items_);
    _hero_.Swap(&other->_hero_);
    std::swap(_diamond_, other->_diamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ask_daily_login_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ask_daily_login_reply_descriptor_;
  metadata.reflection = ask_daily_login_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_equip::kIndexFieldNumber;
const int hero_equip::kItemIdFieldNumber;
const int hero_equip::kExpFieldNumber;
#endif  // !_MSC_VER

hero_equip::hero_equip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.hero_equip)
}

void hero_equip::InitAsDefaultInstance() {
}

hero_equip::hero_equip(const hero_equip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.hero_equip)
}

void hero_equip::SharedCtor() {
  _cached_size_ = 0;
  _index_ = 0u;
  _item_id_ = 0u;
  _exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_equip::~hero_equip() {
  // @@protoc_insertion_point(destructor:client_baseserver.hero_equip)
  SharedDtor();
}

void hero_equip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_equip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_equip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_equip_descriptor_;
}

const hero_equip& hero_equip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

hero_equip* hero_equip::default_instance_ = NULL;

hero_equip* hero_equip::New() const {
  return new hero_equip;
}

void hero_equip::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<hero_equip*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_index_, _exp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_equip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.hero_equip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_index_)));
          set_has__index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__item_id;
        break;
      }

      // required uint32 _item_id = 2;
      case 2: {
        if (tag == 16) {
         parse__item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_item_id_)));
          set_has__item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__exp;
        break;
      }

      // required uint32 _exp = 3;
      case 3: {
        if (tag == 24) {
         parse__exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_exp_)));
          set_has__exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.hero_equip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.hero_equip)
  return false;
#undef DO_
}

void hero_equip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.hero_equip)
  // required uint32 _index = 1;
  if (has__index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_index(), output);
  }

  // required uint32 _item_id = 2;
  if (has__item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_item_id(), output);
  }

  // required uint32 _exp = 3;
  if (has__exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.hero_equip)
}

::google::protobuf::uint8* hero_equip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.hero_equip)
  // required uint32 _index = 1;
  if (has__index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_index(), target);
  }

  // required uint32 _item_id = 2;
  if (has__item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_item_id(), target);
  }

  // required uint32 _exp = 3;
  if (has__exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.hero_equip)
  return target;
}

int hero_equip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _index = 1;
    if (has__index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_index());
    }

    // required uint32 _item_id = 2;
    if (has__item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_item_id());
    }

    // required uint32 _exp = 3;
    if (has__exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_equip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_equip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_equip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_equip::MergeFrom(const hero_equip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__index()) {
      set__index(from._index());
    }
    if (from.has__item_id()) {
      set__item_id(from._item_id());
    }
    if (from.has__exp()) {
      set__exp(from._exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_equip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_equip::CopyFrom(const hero_equip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_equip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void hero_equip::Swap(hero_equip* other) {
  if (other != this) {
    std::swap(_index_, other->_index_);
    std::swap(_item_id_, other->_item_id_);
    std::swap(_exp_, other->_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_equip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_equip_descriptor_;
  metadata.reflection = hero_equip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero::kTidFieldNumber;
const int hero::kRankFieldNumber;
const int hero::kLevelFieldNumber;
const int hero::kStarsFieldNumber;
const int hero::kExpFieldNumber;
const int hero::kGsFieldNumber;
const int hero::kStateFieldNumber;
const int hero::kSkillLevelsFieldNumber;
const int hero::kItemsFieldNumber;
#endif  // !_MSC_VER

hero::hero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.hero)
}

void hero::InitAsDefaultInstance() {
}

hero::hero(const hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.hero)
}

void hero::SharedCtor() {
  _cached_size_ = 0;
  _tid_ = 0u;
  _rank_ = 0u;
  _level_ = 0u;
  _stars_ = 0u;
  _exp_ = 0u;
  _gs_ = 0u;
  _state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero::~hero() {
  // @@protoc_insertion_point(destructor:client_baseserver.hero)
  SharedDtor();
}

void hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_descriptor_;
}

const hero& hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

hero* hero::default_instance_ = NULL;

hero* hero::New() const {
  return new hero;
}

void hero::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<hero*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(_tid_, _gs_);
    _state_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _skill_levels_.Clear();
  _items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.hero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_tid_)));
          set_has__tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__rank;
        break;
      }

      // optional uint32 _rank = 2;
      case 2: {
        if (tag == 16) {
         parse__rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_rank_)));
          set_has__rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__level;
        break;
      }

      // required uint32 _level = 3;
      case 3: {
        if (tag == 24) {
         parse__level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_level_)));
          set_has__level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__stars;
        break;
      }

      // required uint32 _stars = 4;
      case 4: {
        if (tag == 32) {
         parse__stars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stars_)));
          set_has__stars();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__exp;
        break;
      }

      // required uint32 _exp = 5;
      case 5: {
        if (tag == 40) {
         parse__exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_exp_)));
          set_has__exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse__gs;
        break;
      }

      // required uint32 _gs = 6;
      case 6: {
        if (tag == 48) {
         parse__gs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_gs_)));
          set_has__gs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse__state;
        break;
      }

      // required .client_baseserver.hero_status _state = 7;
      case 7: {
        if (tag == 56) {
         parse__state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::hero_status_IsValid(value)) {
            set__state(static_cast< ::client_baseserver::hero_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse__skill_levels;
        break;
      }

      // repeated uint32 _skill_levels = 8;
      case 8: {
        if (tag == 64) {
         parse__skill_levels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable__skill_levels())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__skill_levels())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse__skill_levels;
        if (input->ExpectTag(74)) goto parse__items;
        break;
      }

      // repeated .client_baseserver.hero_equip _items = 9;
      case 9: {
        if (tag == 74) {
         parse__items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse__items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.hero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.hero)
  return false;
#undef DO_
}

void hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.hero)
  // required uint32 _tid = 1;
  if (has__tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_tid(), output);
  }

  // optional uint32 _rank = 2;
  if (has__rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_rank(), output);
  }

  // required uint32 _level = 3;
  if (has__level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_level(), output);
  }

  // required uint32 _stars = 4;
  if (has__stars()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_stars(), output);
  }

  // required uint32 _exp = 5;
  if (has__exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_exp(), output);
  }

  // required uint32 _gs = 6;
  if (has__gs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_gs(), output);
  }

  // required .client_baseserver.hero_status _state = 7;
  if (has__state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->_state(), output);
  }

  // repeated uint32 _skill_levels = 8;
  for (int i = 0; i < this->_skill_levels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->_skill_levels(i), output);
  }

  // repeated .client_baseserver.hero_equip _items = 9;
  for (int i = 0; i < this->_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.hero)
}

::google::protobuf::uint8* hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.hero)
  // required uint32 _tid = 1;
  if (has__tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_tid(), target);
  }

  // optional uint32 _rank = 2;
  if (has__rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_rank(), target);
  }

  // required uint32 _level = 3;
  if (has__level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_level(), target);
  }

  // required uint32 _stars = 4;
  if (has__stars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_stars(), target);
  }

  // required uint32 _exp = 5;
  if (has__exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_exp(), target);
  }

  // required uint32 _gs = 6;
  if (has__gs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_gs(), target);
  }

  // required .client_baseserver.hero_status _state = 7;
  if (has__state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->_state(), target);
  }

  // repeated uint32 _skill_levels = 8;
  for (int i = 0; i < this->_skill_levels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->_skill_levels(i), target);
  }

  // repeated .client_baseserver.hero_equip _items = 9;
  for (int i = 0; i < this->_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.hero)
  return target;
}

int hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _tid = 1;
    if (has__tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_tid());
    }

    // optional uint32 _rank = 2;
    if (has__rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_rank());
    }

    // required uint32 _level = 3;
    if (has__level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_level());
    }

    // required uint32 _stars = 4;
    if (has__stars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stars());
    }

    // required uint32 _exp = 5;
    if (has__exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_exp());
    }

    // required uint32 _gs = 6;
    if (has__gs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_gs());
    }

    // required .client_baseserver.hero_status _state = 7;
    if (has__state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_state());
    }

  }
  // repeated uint32 _skill_levels = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->_skill_levels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_skill_levels(i));
    }
    total_size += 1 * this->_skill_levels_size() + data_size;
  }

  // repeated .client_baseserver.hero_equip _items = 9;
  total_size += 1 * this->_items_size();
  for (int i = 0; i < this->_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero::MergeFrom(const hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  _skill_levels_.MergeFrom(from._skill_levels_);
  _items_.MergeFrom(from._items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__tid()) {
      set__tid(from._tid());
    }
    if (from.has__rank()) {
      set__rank(from._rank());
    }
    if (from.has__level()) {
      set__level(from._level());
    }
    if (from.has__stars()) {
      set__stars(from._stars());
    }
    if (from.has__exp()) {
      set__exp(from._exp());
    }
    if (from.has__gs()) {
      set__gs(from._gs());
    }
    if (from.has__state()) {
      set__state(from._state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero::CopyFrom(const hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007d) != 0x0000007d) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_items())) return false;
  return true;
}

void hero::Swap(hero* other) {
  if (other != this) {
    std::swap(_tid_, other->_tid_);
    std::swap(_rank_, other->_rank_);
    std::swap(_level_, other->_level_);
    std::swap(_stars_, other->_stars_);
    std::swap(_exp_, other->_exp_);
    std::swap(_gs_, other->_gs_);
    std::swap(_state_, other->_state_);
    _skill_levels_.Swap(&other->_skill_levels_);
    _items_.Swap(&other->_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_descriptor_;
  metadata.reflection = hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_summary::kTidFieldNumber;
const int hero_summary::kRankFieldNumber;
const int hero_summary::kLevelFieldNumber;
const int hero_summary::kStarsFieldNumber;
const int hero_summary::kGsFieldNumber;
const int hero_summary::kStateFieldNumber;
#endif  // !_MSC_VER

hero_summary::hero_summary()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.hero_summary)
}

void hero_summary::InitAsDefaultInstance() {
}

hero_summary::hero_summary(const hero_summary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.hero_summary)
}

void hero_summary::SharedCtor() {
  _cached_size_ = 0;
  _tid_ = 0u;
  _rank_ = 0u;
  _level_ = 0u;
  _stars_ = 0u;
  _gs_ = 0u;
  _state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_summary::~hero_summary() {
  // @@protoc_insertion_point(destructor:client_baseserver.hero_summary)
  SharedDtor();
}

void hero_summary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_summary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_summary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_summary_descriptor_;
}

const hero_summary& hero_summary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

hero_summary* hero_summary::default_instance_ = NULL;

hero_summary* hero_summary::New() const {
  return new hero_summary;
}

void hero_summary::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<hero_summary*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(_tid_, _state_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_summary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.hero_summary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_tid_)));
          set_has__tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__rank;
        break;
      }

      // optional uint32 _rank = 2;
      case 2: {
        if (tag == 16) {
         parse__rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_rank_)));
          set_has__rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__level;
        break;
      }

      // required uint32 _level = 3;
      case 3: {
        if (tag == 24) {
         parse__level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_level_)));
          set_has__level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__stars;
        break;
      }

      // required uint32 _stars = 4;
      case 4: {
        if (tag == 32) {
         parse__stars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stars_)));
          set_has__stars();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__gs;
        break;
      }

      // optional uint32 _gs = 5;
      case 5: {
        if (tag == 40) {
         parse__gs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_gs_)));
          set_has__gs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse__state;
        break;
      }

      // optional .client_baseserver.hero_status _state = 6;
      case 6: {
        if (tag == 48) {
         parse__state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::hero_status_IsValid(value)) {
            set__state(static_cast< ::client_baseserver::hero_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.hero_summary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.hero_summary)
  return false;
#undef DO_
}

void hero_summary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.hero_summary)
  // required uint32 _tid = 1;
  if (has__tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_tid(), output);
  }

  // optional uint32 _rank = 2;
  if (has__rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_rank(), output);
  }

  // required uint32 _level = 3;
  if (has__level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_level(), output);
  }

  // required uint32 _stars = 4;
  if (has__stars()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_stars(), output);
  }

  // optional uint32 _gs = 5;
  if (has__gs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_gs(), output);
  }

  // optional .client_baseserver.hero_status _state = 6;
  if (has__state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.hero_summary)
}

::google::protobuf::uint8* hero_summary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.hero_summary)
  // required uint32 _tid = 1;
  if (has__tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_tid(), target);
  }

  // optional uint32 _rank = 2;
  if (has__rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_rank(), target);
  }

  // required uint32 _level = 3;
  if (has__level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_level(), target);
  }

  // required uint32 _stars = 4;
  if (has__stars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_stars(), target);
  }

  // optional uint32 _gs = 5;
  if (has__gs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_gs(), target);
  }

  // optional .client_baseserver.hero_status _state = 6;
  if (has__state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.hero_summary)
  return target;
}

int hero_summary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _tid = 1;
    if (has__tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_tid());
    }

    // optional uint32 _rank = 2;
    if (has__rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_rank());
    }

    // required uint32 _level = 3;
    if (has__level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_level());
    }

    // required uint32 _stars = 4;
    if (has__stars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stars());
    }

    // optional uint32 _gs = 5;
    if (has__gs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_gs());
    }

    // optional .client_baseserver.hero_status _state = 6;
    if (has__state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_summary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_summary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_summary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_summary::MergeFrom(const hero_summary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__tid()) {
      set__tid(from._tid());
    }
    if (from.has__rank()) {
      set__rank(from._rank());
    }
    if (from.has__level()) {
      set__level(from._level());
    }
    if (from.has__stars()) {
      set__stars(from._stars());
    }
    if (from.has__gs()) {
      set__gs(from._gs());
    }
    if (from.has__state()) {
      set__state(from._state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_summary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_summary::CopyFrom(const hero_summary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_summary::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void hero_summary::Swap(hero_summary* other) {
  if (other != this) {
    std::swap(_tid_, other->_tid_);
    std::swap(_rank_, other->_rank_);
    std::swap(_level_, other->_level_);
    std::swap(_stars_, other->_stars_);
    std::swap(_gs_, other->_gs_);
    std::swap(_state_, other->_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_summary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_summary_descriptor_;
  metadata.reflection = hero_summary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_dyna::kHpPercFieldNumber;
const int hero_dyna::kMpPercFieldNumber;
const int hero_dyna::kCustomDataFieldNumber;
#endif  // !_MSC_VER

hero_dyna::hero_dyna()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.hero_dyna)
}

void hero_dyna::InitAsDefaultInstance() {
}

hero_dyna::hero_dyna(const hero_dyna& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.hero_dyna)
}

void hero_dyna::SharedCtor() {
  _cached_size_ = 0;
  _hp_perc_ = 0u;
  _mp_perc_ = 0u;
  _custom_data_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_dyna::~hero_dyna() {
  // @@protoc_insertion_point(destructor:client_baseserver.hero_dyna)
  SharedDtor();
}

void hero_dyna::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_dyna::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_dyna::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_dyna_descriptor_;
}

const hero_dyna& hero_dyna::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

hero_dyna* hero_dyna::default_instance_ = NULL;

hero_dyna* hero_dyna::New() const {
  return new hero_dyna;
}

void hero_dyna::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<hero_dyna*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_hp_perc_, _custom_data_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_dyna::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.hero_dyna)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _hp_perc = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_hp_perc_)));
          set_has__hp_perc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__mp_perc;
        break;
      }

      // required uint32 _mp_perc = 2;
      case 2: {
        if (tag == 16) {
         parse__mp_perc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_mp_perc_)));
          set_has__mp_perc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__custom_data;
        break;
      }

      // optional uint32 _custom_data = 3;
      case 3: {
        if (tag == 24) {
         parse__custom_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_custom_data_)));
          set_has__custom_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.hero_dyna)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.hero_dyna)
  return false;
#undef DO_
}

void hero_dyna::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.hero_dyna)
  // required uint32 _hp_perc = 1;
  if (has__hp_perc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_hp_perc(), output);
  }

  // required uint32 _mp_perc = 2;
  if (has__mp_perc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_mp_perc(), output);
  }

  // optional uint32 _custom_data = 3;
  if (has__custom_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_custom_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.hero_dyna)
}

::google::protobuf::uint8* hero_dyna::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.hero_dyna)
  // required uint32 _hp_perc = 1;
  if (has__hp_perc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_hp_perc(), target);
  }

  // required uint32 _mp_perc = 2;
  if (has__mp_perc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_mp_perc(), target);
  }

  // optional uint32 _custom_data = 3;
  if (has__custom_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_custom_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.hero_dyna)
  return target;
}

int hero_dyna::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _hp_perc = 1;
    if (has__hp_perc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_hp_perc());
    }

    // required uint32 _mp_perc = 2;
    if (has__mp_perc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_mp_perc());
    }

    // optional uint32 _custom_data = 3;
    if (has__custom_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_custom_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_dyna::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_dyna* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_dyna*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_dyna::MergeFrom(const hero_dyna& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__hp_perc()) {
      set__hp_perc(from._hp_perc());
    }
    if (from.has__mp_perc()) {
      set__mp_perc(from._mp_perc());
    }
    if (from.has__custom_data()) {
      set__custom_data(from._custom_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_dyna::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_dyna::CopyFrom(const hero_dyna& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_dyna::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void hero_dyna::Swap(hero_dyna* other) {
  if (other != this) {
    std::swap(_hp_perc_, other->_hp_perc_);
    std::swap(_mp_perc_, other->_mp_perc_);
    std::swap(_custom_data_, other->_custom_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_dyna::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_dyna_descriptor_;
  metadata.reflection = hero_dyna_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int skilllevelup::kSkillLevelupChanceFieldNumber;
const int skilllevelup::kSkillLevelupCdFieldNumber;
const int skilllevelup::kResetTimesFieldNumber;
const int skilllevelup::kLastResetDateFieldNumber;
#endif  // !_MSC_VER

skilllevelup::skilllevelup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.skilllevelup)
}

void skilllevelup::InitAsDefaultInstance() {
}

skilllevelup::skilllevelup(const skilllevelup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.skilllevelup)
}

void skilllevelup::SharedCtor() {
  _cached_size_ = 0;
  _skill_levelup_chance_ = 0u;
  _skill_levelup_cd_ = 0u;
  _reset_times_ = 0u;
  _last_reset_date_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skilllevelup::~skilllevelup() {
  // @@protoc_insertion_point(destructor:client_baseserver.skilllevelup)
  SharedDtor();
}

void skilllevelup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void skilllevelup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* skilllevelup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return skilllevelup_descriptor_;
}

const skilllevelup& skilllevelup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

skilllevelup* skilllevelup::default_instance_ = NULL;

skilllevelup* skilllevelup::New() const {
  return new skilllevelup;
}

void skilllevelup::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<skilllevelup*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_skill_levelup_chance_, _last_reset_date_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool skilllevelup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.skilllevelup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _skill_levelup_chance = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_skill_levelup_chance_)));
          set_has__skill_levelup_chance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__skill_levelup_cd;
        break;
      }

      // required uint32 _skill_levelup_cd = 2;
      case 2: {
        if (tag == 16) {
         parse__skill_levelup_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_skill_levelup_cd_)));
          set_has__skill_levelup_cd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__reset_times;
        break;
      }

      // required uint32 _reset_times = 3;
      case 3: {
        if (tag == 24) {
         parse__reset_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_reset_times_)));
          set_has__reset_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__last_reset_date;
        break;
      }

      // required uint32 _last_reset_date = 4;
      case 4: {
        if (tag == 32) {
         parse__last_reset_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_last_reset_date_)));
          set_has__last_reset_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.skilllevelup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.skilllevelup)
  return false;
#undef DO_
}

void skilllevelup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.skilllevelup)
  // required uint32 _skill_levelup_chance = 1;
  if (has__skill_levelup_chance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_skill_levelup_chance(), output);
  }

  // required uint32 _skill_levelup_cd = 2;
  if (has__skill_levelup_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_skill_levelup_cd(), output);
  }

  // required uint32 _reset_times = 3;
  if (has__reset_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_reset_times(), output);
  }

  // required uint32 _last_reset_date = 4;
  if (has__last_reset_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_last_reset_date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.skilllevelup)
}

::google::protobuf::uint8* skilllevelup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.skilllevelup)
  // required uint32 _skill_levelup_chance = 1;
  if (has__skill_levelup_chance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_skill_levelup_chance(), target);
  }

  // required uint32 _skill_levelup_cd = 2;
  if (has__skill_levelup_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_skill_levelup_cd(), target);
  }

  // required uint32 _reset_times = 3;
  if (has__reset_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_reset_times(), target);
  }

  // required uint32 _last_reset_date = 4;
  if (has__last_reset_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_last_reset_date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.skilllevelup)
  return target;
}

int skilllevelup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _skill_levelup_chance = 1;
    if (has__skill_levelup_chance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_skill_levelup_chance());
    }

    // required uint32 _skill_levelup_cd = 2;
    if (has__skill_levelup_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_skill_levelup_cd());
    }

    // required uint32 _reset_times = 3;
    if (has__reset_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_reset_times());
    }

    // required uint32 _last_reset_date = 4;
    if (has__last_reset_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_last_reset_date());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skilllevelup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const skilllevelup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const skilllevelup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void skilllevelup::MergeFrom(const skilllevelup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__skill_levelup_chance()) {
      set__skill_levelup_chance(from._skill_levelup_chance());
    }
    if (from.has__skill_levelup_cd()) {
      set__skill_levelup_cd(from._skill_levelup_cd());
    }
    if (from.has__reset_times()) {
      set__reset_times(from._reset_times());
    }
    if (from.has__last_reset_date()) {
      set__last_reset_date(from._last_reset_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void skilllevelup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void skilllevelup::CopyFrom(const skilllevelup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skilllevelup::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void skilllevelup::Swap(skilllevelup* other) {
  if (other != this) {
    std::swap(_skill_levelup_chance_, other->_skill_levelup_chance_);
    std::swap(_skill_levelup_cd_, other->_skill_levelup_cd_);
    std::swap(_reset_times_, other->_reset_times_);
    std::swap(_last_reset_date_, other->_last_reset_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata skilllevelup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = skilllevelup_descriptor_;
  metadata.reflection = skilllevelup_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* usertask_status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return usertask_status_descriptor_;
}
bool usertask_status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const usertask_status usertask::finished;
const usertask_status usertask::working;
const usertask_status usertask::status_MIN;
const usertask_status usertask::status_MAX;
const int usertask::status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int usertask::kLineFieldNumber;
const int usertask::kIdFieldNumber;
const int usertask::kStatusFieldNumber;
const int usertask::kTaskTargetFieldNumber;
#endif  // !_MSC_VER

usertask::usertask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.usertask)
}

void usertask::InitAsDefaultInstance() {
}

usertask::usertask(const usertask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.usertask)
}

void usertask::SharedCtor() {
  _cached_size_ = 0;
  _line_ = 0u;
  _id_ = 0u;
  _status_ = 1;
  _task_target_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

usertask::~usertask() {
  // @@protoc_insertion_point(destructor:client_baseserver.usertask)
  SharedDtor();
}

void usertask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void usertask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* usertask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return usertask_descriptor_;
}

const usertask& usertask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

usertask* usertask::default_instance_ = NULL;

usertask* usertask::New() const {
  return new usertask;
}

void usertask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<usertask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(_line_, _id_);
    _status_ = 1;
    _task_target_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool usertask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.usertask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _line = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_line_)));
          set_has__line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__id;
        break;
      }

      // required uint32 _id = 2;
      case 2: {
        if (tag == 16) {
         parse__id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_id_)));
          set_has__id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__status;
        break;
      }

      // required .client_baseserver.usertask.status _status = 3 [default = working];
      case 3: {
        if (tag == 24) {
         parse__status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::usertask_status_IsValid(value)) {
            set__status(static_cast< ::client_baseserver::usertask_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__task_target;
        break;
      }

      // optional uint32 _task_target = 4;
      case 4: {
        if (tag == 32) {
         parse__task_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_task_target_)));
          set_has__task_target();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.usertask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.usertask)
  return false;
#undef DO_
}

void usertask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.usertask)
  // required uint32 _line = 1;
  if (has__line()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_line(), output);
  }

  // required uint32 _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_id(), output);
  }

  // required .client_baseserver.usertask.status _status = 3 [default = working];
  if (has__status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->_status(), output);
  }

  // optional uint32 _task_target = 4;
  if (has__task_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_task_target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.usertask)
}

::google::protobuf::uint8* usertask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.usertask)
  // required uint32 _line = 1;
  if (has__line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_line(), target);
  }

  // required uint32 _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_id(), target);
  }

  // required .client_baseserver.usertask.status _status = 3 [default = working];
  if (has__status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->_status(), target);
  }

  // optional uint32 _task_target = 4;
  if (has__task_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_task_target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.usertask)
  return target;
}

int usertask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _line = 1;
    if (has__line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_line());
    }

    // required uint32 _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_id());
    }

    // required .client_baseserver.usertask.status _status = 3 [default = working];
    if (has__status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_status());
    }

    // optional uint32 _task_target = 4;
    if (has__task_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_task_target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void usertask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const usertask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const usertask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void usertask::MergeFrom(const usertask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__line()) {
      set__line(from._line());
    }
    if (from.has__id()) {
      set__id(from._id());
    }
    if (from.has__status()) {
      set__status(from._status());
    }
    if (from.has__task_target()) {
      set__task_target(from._task_target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void usertask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void usertask::CopyFrom(const usertask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool usertask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void usertask::Swap(usertask* other) {
  if (other != this) {
    std::swap(_line_, other->_line_);
    std::swap(_id_, other->_id_);
    std::swap(_status_, other->_status_);
    std::swap(_task_target_, other->_task_target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata usertask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = usertask_descriptor_;
  metadata.reflection = usertask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dailyjob::kIdFieldNumber;
const int dailyjob::kLastRewardsTimeFieldNumber;
const int dailyjob::kTaskTargetFieldNumber;
#endif  // !_MSC_VER

dailyjob::dailyjob()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.dailyjob)
}

void dailyjob::InitAsDefaultInstance() {
}

dailyjob::dailyjob(const dailyjob& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.dailyjob)
}

void dailyjob::SharedCtor() {
  _cached_size_ = 0;
  _id_ = 0u;
  _last_rewards_time_ = 0u;
  _task_target_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dailyjob::~dailyjob() {
  // @@protoc_insertion_point(destructor:client_baseserver.dailyjob)
  SharedDtor();
}

void dailyjob::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dailyjob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dailyjob::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dailyjob_descriptor_;
}

const dailyjob& dailyjob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

dailyjob* dailyjob::default_instance_ = NULL;

dailyjob* dailyjob::New() const {
  return new dailyjob;
}

void dailyjob::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<dailyjob*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_id_, _task_target_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dailyjob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.dailyjob)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_id_)));
          set_has__id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__last_rewards_time;
        break;
      }

      // required uint32 _last_rewards_time = 2;
      case 2: {
        if (tag == 16) {
         parse__last_rewards_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_last_rewards_time_)));
          set_has__last_rewards_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__task_target;
        break;
      }

      // optional uint32 _task_target = 3;
      case 3: {
        if (tag == 24) {
         parse__task_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_task_target_)));
          set_has__task_target();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.dailyjob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.dailyjob)
  return false;
#undef DO_
}

void dailyjob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.dailyjob)
  // required uint32 _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_id(), output);
  }

  // required uint32 _last_rewards_time = 2;
  if (has__last_rewards_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_last_rewards_time(), output);
  }

  // optional uint32 _task_target = 3;
  if (has__task_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_task_target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.dailyjob)
}

::google::protobuf::uint8* dailyjob::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.dailyjob)
  // required uint32 _id = 1;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_id(), target);
  }

  // required uint32 _last_rewards_time = 2;
  if (has__last_rewards_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_last_rewards_time(), target);
  }

  // optional uint32 _task_target = 3;
  if (has__task_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_task_target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.dailyjob)
  return target;
}

int dailyjob::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _id = 1;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_id());
    }

    // required uint32 _last_rewards_time = 2;
    if (has__last_rewards_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_last_rewards_time());
    }

    // optional uint32 _task_target = 3;
    if (has__task_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_task_target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dailyjob::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dailyjob* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dailyjob*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dailyjob::MergeFrom(const dailyjob& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__id()) {
      set__id(from._id());
    }
    if (from.has__last_rewards_time()) {
      set__last_rewards_time(from._last_rewards_time());
    }
    if (from.has__task_target()) {
      set__task_target(from._task_target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dailyjob::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dailyjob::CopyFrom(const dailyjob& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dailyjob::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void dailyjob::Swap(dailyjob* other) {
  if (other != this) {
    std::swap(_id_, other->_id_);
    std::swap(_last_rewards_time_, other->_last_rewards_time_);
    std::swap(_task_target_, other->_task_target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dailyjob::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dailyjob_descriptor_;
  metadata.reflection = dailyjob_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sweeploot::kExpFieldNumber;
const int sweeploot::kMoneyFieldNumber;
const int sweeploot::kItemsFieldNumber;
#endif  // !_MSC_VER

sweeploot::sweeploot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.sweeploot)
}

void sweeploot::InitAsDefaultInstance() {
}

sweeploot::sweeploot(const sweeploot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.sweeploot)
}

void sweeploot::SharedCtor() {
  _cached_size_ = 0;
  _exp_ = 0u;
  _money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sweeploot::~sweeploot() {
  // @@protoc_insertion_point(destructor:client_baseserver.sweeploot)
  SharedDtor();
}

void sweeploot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sweeploot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sweeploot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sweeploot_descriptor_;
}

const sweeploot& sweeploot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

sweeploot* sweeploot::default_instance_ = NULL;

sweeploot* sweeploot::New() const {
  return new sweeploot;
}

void sweeploot::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<sweeploot*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_exp_, _money_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  _items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sweeploot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.sweeploot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _exp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_exp_)));
          set_has__exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__money;
        break;
      }

      // required uint32 _money = 2;
      case 2: {
        if (tag == 16) {
         parse__money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_money_)));
          set_has__money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__items;
        break;
      }

      // repeated uint32 _items = 3;
      case 3: {
        if (tag == 24) {
         parse__items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable__items())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__items())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.sweeploot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.sweeploot)
  return false;
#undef DO_
}

void sweeploot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.sweeploot)
  // required uint32 _exp = 1;
  if (has__exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_exp(), output);
  }

  // required uint32 _money = 2;
  if (has__money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_money(), output);
  }

  // repeated uint32 _items = 3;
  for (int i = 0; i < this->_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.sweeploot)
}

::google::protobuf::uint8* sweeploot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.sweeploot)
  // required uint32 _exp = 1;
  if (has__exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_exp(), target);
  }

  // required uint32 _money = 2;
  if (has__money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_money(), target);
  }

  // repeated uint32 _items = 3;
  for (int i = 0; i < this->_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.sweeploot)
  return target;
}

int sweeploot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _exp = 1;
    if (has__exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_exp());
    }

    // required uint32 _money = 2;
    if (has__money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_money());
    }

  }
  // repeated uint32 _items = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->_items_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_items(i));
    }
    total_size += 1 * this->_items_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sweeploot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sweeploot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sweeploot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sweeploot::MergeFrom(const sweeploot& from) {
  GOOGLE_CHECK_NE(&from, this);
  _items_.MergeFrom(from._items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__exp()) {
      set__exp(from._exp());
    }
    if (from.has__money()) {
      set__money(from._money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sweeploot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sweeploot::CopyFrom(const sweeploot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sweeploot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sweeploot::Swap(sweeploot* other) {
  if (other != this) {
    std::swap(_exp_, other->_exp_);
    std::swap(_money_, other->_money_);
    _items_.Swap(&other->_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sweeploot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sweeploot_descriptor_;
  metadata.reflection = sweeploot_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* tavern_record_box_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tavern_record_box_type_descriptor_;
}
bool tavern_record_box_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const tavern_record_box_type tavern_record::green;
const tavern_record_box_type tavern_record::blue;
const tavern_record_box_type tavern_record::purple;
const tavern_record_box_type tavern_record::magicsoul;
const tavern_record_box_type tavern_record::box_type_MIN;
const tavern_record_box_type tavern_record::box_type_MAX;
const int tavern_record::box_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int tavern_record::kBoxTypeFieldNumber;
const int tavern_record::kLeftCntFieldNumber;
const int tavern_record::kLastGetTimeFieldNumber;
const int tavern_record::kHasFirstDrawFieldNumber;
#endif  // !_MSC_VER

tavern_record::tavern_record()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.tavern_record)
}

void tavern_record::InitAsDefaultInstance() {
}

tavern_record::tavern_record(const tavern_record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.tavern_record)
}

void tavern_record::SharedCtor() {
  _cached_size_ = 0;
  _box_type_ = 1;
  _left_cnt_ = 0u;
  _last_get_time_ = 0u;
  _has_first_draw_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tavern_record::~tavern_record() {
  // @@protoc_insertion_point(destructor:client_baseserver.tavern_record)
  SharedDtor();
}

void tavern_record::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tavern_record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tavern_record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tavern_record_descriptor_;
}

const tavern_record& tavern_record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

tavern_record* tavern_record::default_instance_ = NULL;

tavern_record* tavern_record::New() const {
  return new tavern_record;
}

void tavern_record::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<tavern_record*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(_left_cnt_, _has_first_draw_);
    _box_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tavern_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.tavern_record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.tavern_record.box_type _box_type = 1 [default = green];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::tavern_record_box_type_IsValid(value)) {
            set__box_type(static_cast< ::client_baseserver::tavern_record_box_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__left_cnt;
        break;
      }

      // required uint32 _left_cnt = 2;
      case 2: {
        if (tag == 16) {
         parse__left_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_left_cnt_)));
          set_has__left_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__last_get_time;
        break;
      }

      // required uint32 _last_get_time = 3;
      case 3: {
        if (tag == 24) {
         parse__last_get_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_last_get_time_)));
          set_has__last_get_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__has_first_draw;
        break;
      }

      // required uint32 _has_first_draw = 4;
      case 4: {
        if (tag == 32) {
         parse__has_first_draw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_has_first_draw_)));
          set_has__has_first_draw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.tavern_record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.tavern_record)
  return false;
#undef DO_
}

void tavern_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.tavern_record)
  // required .client_baseserver.tavern_record.box_type _box_type = 1 [default = green];
  if (has__box_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_box_type(), output);
  }

  // required uint32 _left_cnt = 2;
  if (has__left_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_left_cnt(), output);
  }

  // required uint32 _last_get_time = 3;
  if (has__last_get_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_last_get_time(), output);
  }

  // required uint32 _has_first_draw = 4;
  if (has__has_first_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_has_first_draw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.tavern_record)
}

::google::protobuf::uint8* tavern_record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.tavern_record)
  // required .client_baseserver.tavern_record.box_type _box_type = 1 [default = green];
  if (has__box_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_box_type(), target);
  }

  // required uint32 _left_cnt = 2;
  if (has__left_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_left_cnt(), target);
  }

  // required uint32 _last_get_time = 3;
  if (has__last_get_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_last_get_time(), target);
  }

  // required uint32 _has_first_draw = 4;
  if (has__has_first_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_has_first_draw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.tavern_record)
  return target;
}

int tavern_record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.tavern_record.box_type _box_type = 1 [default = green];
    if (has__box_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_box_type());
    }

    // required uint32 _left_cnt = 2;
    if (has__left_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_left_cnt());
    }

    // required uint32 _last_get_time = 3;
    if (has__last_get_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_last_get_time());
    }

    // required uint32 _has_first_draw = 4;
    if (has__has_first_draw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_has_first_draw());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tavern_record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tavern_record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tavern_record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tavern_record::MergeFrom(const tavern_record& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__box_type()) {
      set__box_type(from._box_type());
    }
    if (from.has__left_cnt()) {
      set__left_cnt(from._left_cnt());
    }
    if (from.has__last_get_time()) {
      set__last_get_time(from._last_get_time());
    }
    if (from.has__has_first_draw()) {
      set__has_first_draw(from._has_first_draw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tavern_record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tavern_record::CopyFrom(const tavern_record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tavern_record::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void tavern_record::Swap(tavern_record* other) {
  if (other != this) {
    std::swap(_box_type_, other->_box_type_);
    std::swap(_left_cnt_, other->_left_cnt_);
    std::swap(_last_get_time_, other->_last_get_time_);
    std::swap(_has_first_draw_, other->_has_first_draw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tavern_record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tavern_record_descriptor_;
  metadata.reflection = tavern_record_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int usermidas::kLastChangeFieldNumber;
const int usermidas::kTodayTimesFieldNumber;
#endif  // !_MSC_VER

usermidas::usermidas()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.usermidas)
}

void usermidas::InitAsDefaultInstance() {
}

usermidas::usermidas(const usermidas& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.usermidas)
}

void usermidas::SharedCtor() {
  _cached_size_ = 0;
  _last_change_ = 0u;
  _today_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

usermidas::~usermidas() {
  // @@protoc_insertion_point(destructor:client_baseserver.usermidas)
  SharedDtor();
}

void usermidas::SharedDtor() {
  if (this != default_instance_) {
  }
}

void usermidas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* usermidas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return usermidas_descriptor_;
}

const usermidas& usermidas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

usermidas* usermidas::default_instance_ = NULL;

usermidas* usermidas::New() const {
  return new usermidas;
}

void usermidas::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<usermidas*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_last_change_, _today_times_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool usermidas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.usermidas)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _last_change = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_last_change_)));
          set_has__last_change();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__today_times;
        break;
      }

      // required uint32 _today_times = 2;
      case 2: {
        if (tag == 16) {
         parse__today_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_today_times_)));
          set_has__today_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.usermidas)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.usermidas)
  return false;
#undef DO_
}

void usermidas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.usermidas)
  // required uint32 _last_change = 1;
  if (has__last_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_last_change(), output);
  }

  // required uint32 _today_times = 2;
  if (has__today_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_today_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.usermidas)
}

::google::protobuf::uint8* usermidas::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.usermidas)
  // required uint32 _last_change = 1;
  if (has__last_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_last_change(), target);
  }

  // required uint32 _today_times = 2;
  if (has__today_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_today_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.usermidas)
  return target;
}

int usermidas::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _last_change = 1;
    if (has__last_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_last_change());
    }

    // required uint32 _today_times = 2;
    if (has__today_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_today_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void usermidas::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const usermidas* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const usermidas*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void usermidas::MergeFrom(const usermidas& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__last_change()) {
      set__last_change(from._last_change());
    }
    if (from.has__today_times()) {
      set__today_times(from._today_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void usermidas::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void usermidas::CopyFrom(const usermidas& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool usermidas::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void usermidas::Swap(usermidas* other) {
  if (other != this) {
    std::swap(_last_change_, other->_last_change_);
    std::swap(_today_times_, other->_today_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata usermidas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = usermidas_descriptor_;
  metadata.reflection = usermidas_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int trigger_task_reply::kResultFieldNumber;
#endif  // !_MSC_VER

trigger_task_reply::trigger_task_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.trigger_task_reply)
}

void trigger_task_reply::InitAsDefaultInstance() {
}

trigger_task_reply::trigger_task_reply(const trigger_task_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.trigger_task_reply)
}

void trigger_task_reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

trigger_task_reply::~trigger_task_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.trigger_task_reply)
  SharedDtor();
}

void trigger_task_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void trigger_task_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* trigger_task_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return trigger_task_reply_descriptor_;
}

const trigger_task_reply& trigger_task_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

trigger_task_reply* trigger_task_reply::default_instance_ = NULL;

trigger_task_reply* trigger_task_reply::New() const {
  return new trigger_task_reply;
}

void trigger_task_reply::Clear() {
  _result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool trigger_task_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.trigger_task_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
         parse__result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            add__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::client_baseserver::result_IsValid,
                 this->mutable__result())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse__result;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.trigger_task_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.trigger_task_reply)
  return false;
#undef DO_
}

void trigger_task_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.trigger_task_reply)
  // repeated .client_baseserver.result _result = 1;
  for (int i = 0; i < this->_result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.trigger_task_reply)
}

::google::protobuf::uint8* trigger_task_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.trigger_task_reply)
  // repeated .client_baseserver.result _result = 1;
  for (int i = 0; i < this->_result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.trigger_task_reply)
  return target;
}

int trigger_task_reply::ByteSize() const {
  int total_size = 0;

  // repeated .client_baseserver.result _result = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->_result_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->_result(i));
    }
    total_size += 1 * this->_result_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void trigger_task_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const trigger_task_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const trigger_task_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void trigger_task_reply::MergeFrom(const trigger_task_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _result_.MergeFrom(from._result_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void trigger_task_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trigger_task_reply::CopyFrom(const trigger_task_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trigger_task_reply::IsInitialized() const {

  return true;
}

void trigger_task_reply::Swap(trigger_task_reply* other) {
  if (other != this) {
    _result_.Swap(&other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata trigger_task_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = trigger_task_reply_descriptor_;
  metadata.reflection = trigger_task_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int require_rewards_reply::kResultFieldNumber;
#endif  // !_MSC_VER

require_rewards_reply::require_rewards_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.require_rewards_reply)
}

void require_rewards_reply::InitAsDefaultInstance() {
}

require_rewards_reply::require_rewards_reply(const require_rewards_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.require_rewards_reply)
}

void require_rewards_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

require_rewards_reply::~require_rewards_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.require_rewards_reply)
  SharedDtor();
}

void require_rewards_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void require_rewards_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* require_rewards_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return require_rewards_reply_descriptor_;
}

const require_rewards_reply& require_rewards_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

require_rewards_reply* require_rewards_reply::default_instance_ = NULL;

require_rewards_reply* require_rewards_reply::New() const {
  return new require_rewards_reply;
}

void require_rewards_reply::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool require_rewards_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.require_rewards_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.require_rewards_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.require_rewards_reply)
  return false;
#undef DO_
}

void require_rewards_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.require_rewards_reply)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.require_rewards_reply)
}

::google::protobuf::uint8* require_rewards_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.require_rewards_reply)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.require_rewards_reply)
  return target;
}

int require_rewards_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void require_rewards_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const require_rewards_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const require_rewards_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void require_rewards_reply::MergeFrom(const require_rewards_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void require_rewards_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void require_rewards_reply::CopyFrom(const require_rewards_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool require_rewards_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void require_rewards_reply::Swap(require_rewards_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata require_rewards_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = require_rewards_reply_descriptor_;
  metadata.reflection = require_rewards_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int trigger_job_reply::kResultFieldNumber;
#endif  // !_MSC_VER

trigger_job_reply::trigger_job_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.trigger_job_reply)
}

void trigger_job_reply::InitAsDefaultInstance() {
}

trigger_job_reply::trigger_job_reply(const trigger_job_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.trigger_job_reply)
}

void trigger_job_reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

trigger_job_reply::~trigger_job_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.trigger_job_reply)
  SharedDtor();
}

void trigger_job_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void trigger_job_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* trigger_job_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return trigger_job_reply_descriptor_;
}

const trigger_job_reply& trigger_job_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

trigger_job_reply* trigger_job_reply::default_instance_ = NULL;

trigger_job_reply* trigger_job_reply::New() const {
  return new trigger_job_reply;
}

void trigger_job_reply::Clear() {
  _result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool trigger_job_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.trigger_job_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
         parse__result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            add__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::client_baseserver::result_IsValid,
                 this->mutable__result())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse__result;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.trigger_job_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.trigger_job_reply)
  return false;
#undef DO_
}

void trigger_job_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.trigger_job_reply)
  // repeated .client_baseserver.result _result = 1;
  for (int i = 0; i < this->_result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.trigger_job_reply)
}

::google::protobuf::uint8* trigger_job_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.trigger_job_reply)
  // repeated .client_baseserver.result _result = 1;
  for (int i = 0; i < this->_result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.trigger_job_reply)
  return target;
}

int trigger_job_reply::ByteSize() const {
  int total_size = 0;

  // repeated .client_baseserver.result _result = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->_result_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->_result(i));
    }
    total_size += 1 * this->_result_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void trigger_job_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const trigger_job_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const trigger_job_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void trigger_job_reply::MergeFrom(const trigger_job_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _result_.MergeFrom(from._result_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void trigger_job_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trigger_job_reply::CopyFrom(const trigger_job_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trigger_job_reply::IsInitialized() const {

  return true;
}

void trigger_job_reply::Swap(trigger_job_reply* other) {
  if (other != this) {
    _result_.Swap(&other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata trigger_job_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = trigger_job_reply_descriptor_;
  metadata.reflection = trigger_job_reply_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* dailyjob_reward_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dailyjob_reward_type_descriptor_;
}
bool dailyjob_reward_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const dailyjob_reward_type dailyjob_reward::rmb;
const dailyjob_reward_type dailyjob_reward::money;
const dailyjob_reward_type dailyjob_reward::item;
const dailyjob_reward_type dailyjob_reward::hero;
const dailyjob_reward_type dailyjob_reward::vitality;
const dailyjob_reward_type dailyjob_reward::playerexp;
const dailyjob_reward_type dailyjob_reward::crusadepoint;
const dailyjob_reward_type dailyjob_reward::arenapoint;
const dailyjob_reward_type dailyjob_reward::guildpoint;
const dailyjob_reward_type dailyjob_reward::type_MIN;
const dailyjob_reward_type dailyjob_reward::type_MAX;
const int dailyjob_reward::type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int dailyjob_reward::kTypeFieldNumber;
const int dailyjob_reward::kIdFieldNumber;
const int dailyjob_reward::kAmountFieldNumber;
#endif  // !_MSC_VER

dailyjob_reward::dailyjob_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.dailyjob_reward)
}

void dailyjob_reward::InitAsDefaultInstance() {
}

dailyjob_reward::dailyjob_reward(const dailyjob_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.dailyjob_reward)
}

void dailyjob_reward::SharedCtor() {
  _cached_size_ = 0;
  _type_ = 1;
  _id_ = 0u;
  _amount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dailyjob_reward::~dailyjob_reward() {
  // @@protoc_insertion_point(destructor:client_baseserver.dailyjob_reward)
  SharedDtor();
}

void dailyjob_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dailyjob_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dailyjob_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dailyjob_reward_descriptor_;
}

const dailyjob_reward& dailyjob_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

dailyjob_reward* dailyjob_reward::default_instance_ = NULL;

dailyjob_reward* dailyjob_reward::New() const {
  return new dailyjob_reward;
}

void dailyjob_reward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<dailyjob_reward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(_id_, _amount_);
    _type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dailyjob_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.dailyjob_reward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_baseserver.dailyjob_reward.type _type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::dailyjob_reward_type_IsValid(value)) {
            set__type(static_cast< ::client_baseserver::dailyjob_reward_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__id;
        break;
      }

      // optional uint32 _id = 2;
      case 2: {
        if (tag == 16) {
         parse__id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_id_)));
          set_has__id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__amount;
        break;
      }

      // optional uint32 _amount = 3;
      case 3: {
        if (tag == 24) {
         parse__amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_amount_)));
          set_has__amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.dailyjob_reward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.dailyjob_reward)
  return false;
#undef DO_
}

void dailyjob_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.dailyjob_reward)
  // optional .client_baseserver.dailyjob_reward.type _type = 1;
  if (has__type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_type(), output);
  }

  // optional uint32 _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_id(), output);
  }

  // optional uint32 _amount = 3;
  if (has__amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.dailyjob_reward)
}

::google::protobuf::uint8* dailyjob_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.dailyjob_reward)
  // optional .client_baseserver.dailyjob_reward.type _type = 1;
  if (has__type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_type(), target);
  }

  // optional uint32 _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_id(), target);
  }

  // optional uint32 _amount = 3;
  if (has__amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.dailyjob_reward)
  return target;
}

int dailyjob_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_baseserver.dailyjob_reward.type _type = 1;
    if (has__type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_type());
    }

    // optional uint32 _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_id());
    }

    // optional uint32 _amount = 3;
    if (has__amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dailyjob_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dailyjob_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dailyjob_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dailyjob_reward::MergeFrom(const dailyjob_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__type()) {
      set__type(from._type());
    }
    if (from.has__id()) {
      set__id(from._id());
    }
    if (from.has__amount()) {
      set__amount(from._amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dailyjob_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dailyjob_reward::CopyFrom(const dailyjob_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dailyjob_reward::IsInitialized() const {

  return true;
}

void dailyjob_reward::Swap(dailyjob_reward* other) {
  if (other != this) {
    std::swap(_type_, other->_type_);
    std::swap(_id_, other->_id_);
    std::swap(_amount_, other->_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dailyjob_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dailyjob_reward_descriptor_;
  metadata.reflection = dailyjob_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int job_rewards_reply::kResultFieldNumber;
const int job_rewards_reply::kActivityRewardFieldNumber;
#endif  // !_MSC_VER

job_rewards_reply::job_rewards_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.job_rewards_reply)
}

void job_rewards_reply::InitAsDefaultInstance() {
}

job_rewards_reply::job_rewards_reply(const job_rewards_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.job_rewards_reply)
}

void job_rewards_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

job_rewards_reply::~job_rewards_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.job_rewards_reply)
  SharedDtor();
}

void job_rewards_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void job_rewards_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* job_rewards_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return job_rewards_reply_descriptor_;
}

const job_rewards_reply& job_rewards_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

job_rewards_reply* job_rewards_reply::default_instance_ = NULL;

job_rewards_reply* job_rewards_reply::New() const {
  return new job_rewards_reply;
}

void job_rewards_reply::Clear() {
  _result_ = 0;
  _activity_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool job_rewards_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.job_rewards_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1 [default = success];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__activity_reward;
        break;
      }

      // repeated .client_baseserver.dailyjob_reward _activity_reward = 2;
      case 2: {
        if (tag == 18) {
         parse__activity_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__activity_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__activity_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.job_rewards_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.job_rewards_reply)
  return false;
#undef DO_
}

void job_rewards_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.job_rewards_reply)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // repeated .client_baseserver.dailyjob_reward _activity_reward = 2;
  for (int i = 0; i < this->_activity_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_activity_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.job_rewards_reply)
}

::google::protobuf::uint8* job_rewards_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.job_rewards_reply)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // repeated .client_baseserver.dailyjob_reward _activity_reward = 2;
  for (int i = 0; i < this->_activity_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_activity_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.job_rewards_reply)
  return target;
}

int job_rewards_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1 [default = success];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  // repeated .client_baseserver.dailyjob_reward _activity_reward = 2;
  total_size += 1 * this->_activity_reward_size();
  for (int i = 0; i < this->_activity_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_activity_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void job_rewards_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const job_rewards_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const job_rewards_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void job_rewards_reply::MergeFrom(const job_rewards_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _activity_reward_.MergeFrom(from._activity_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void job_rewards_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void job_rewards_reply::CopyFrom(const job_rewards_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool job_rewards_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void job_rewards_reply::Swap(job_rewards_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    _activity_reward_.Swap(&other->_activity_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata job_rewards_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = job_rewards_reply_descriptor_;
  metadata.reflection = job_rewards_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tavern_draw_reply::kItemIdsFieldNumber;
const int tavern_draw_reply::kNewHeroesFieldNumber;
const int tavern_draw_reply::kSmashIdxFieldNumber;
#endif  // !_MSC_VER

tavern_draw_reply::tavern_draw_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.tavern_draw_reply)
}

void tavern_draw_reply::InitAsDefaultInstance() {
}

tavern_draw_reply::tavern_draw_reply(const tavern_draw_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.tavern_draw_reply)
}

void tavern_draw_reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tavern_draw_reply::~tavern_draw_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.tavern_draw_reply)
  SharedDtor();
}

void tavern_draw_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tavern_draw_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tavern_draw_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tavern_draw_reply_descriptor_;
}

const tavern_draw_reply& tavern_draw_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

tavern_draw_reply* tavern_draw_reply::default_instance_ = NULL;

tavern_draw_reply* tavern_draw_reply::New() const {
  return new tavern_draw_reply;
}

void tavern_draw_reply::Clear() {
  _item_ids_.Clear();
  _new_heroes_.Clear();
  _smash_idx_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tavern_draw_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.tavern_draw_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 _item_ids = 1;
      case 1: {
        if (tag == 8) {
         parse__item_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable__item_ids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__item_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse__item_ids;
        if (input->ExpectTag(18)) goto parse__new_heroes;
        break;
      }

      // repeated .client_baseserver.hero _new_heroes = 2;
      case 2: {
        if (tag == 18) {
         parse__new_heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__new_heroes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__new_heroes;
        if (input->ExpectTag(24)) goto parse__smash_idx;
        break;
      }

      // repeated uint32 _smash_idx = 3;
      case 3: {
        if (tag == 24) {
         parse__smash_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable__smash_idx())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__smash_idx())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__smash_idx;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.tavern_draw_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.tavern_draw_reply)
  return false;
#undef DO_
}

void tavern_draw_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.tavern_draw_reply)
  // repeated uint32 _item_ids = 1;
  for (int i = 0; i < this->_item_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->_item_ids(i), output);
  }

  // repeated .client_baseserver.hero _new_heroes = 2;
  for (int i = 0; i < this->_new_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_new_heroes(i), output);
  }

  // repeated uint32 _smash_idx = 3;
  for (int i = 0; i < this->_smash_idx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->_smash_idx(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.tavern_draw_reply)
}

::google::protobuf::uint8* tavern_draw_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.tavern_draw_reply)
  // repeated uint32 _item_ids = 1;
  for (int i = 0; i < this->_item_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->_item_ids(i), target);
  }

  // repeated .client_baseserver.hero _new_heroes = 2;
  for (int i = 0; i < this->_new_heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_new_heroes(i), target);
  }

  // repeated uint32 _smash_idx = 3;
  for (int i = 0; i < this->_smash_idx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->_smash_idx(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.tavern_draw_reply)
  return target;
}

int tavern_draw_reply::ByteSize() const {
  int total_size = 0;

  // repeated uint32 _item_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->_item_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_item_ids(i));
    }
    total_size += 1 * this->_item_ids_size() + data_size;
  }

  // repeated .client_baseserver.hero _new_heroes = 2;
  total_size += 1 * this->_new_heroes_size();
  for (int i = 0; i < this->_new_heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_new_heroes(i));
  }

  // repeated uint32 _smash_idx = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->_smash_idx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_smash_idx(i));
    }
    total_size += 1 * this->_smash_idx_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tavern_draw_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tavern_draw_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tavern_draw_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tavern_draw_reply::MergeFrom(const tavern_draw_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _item_ids_.MergeFrom(from._item_ids_);
  _new_heroes_.MergeFrom(from._new_heroes_);
  _smash_idx_.MergeFrom(from._smash_idx_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tavern_draw_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tavern_draw_reply::CopyFrom(const tavern_draw_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tavern_draw_reply::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_new_heroes())) return false;
  return true;
}

void tavern_draw_reply::Swap(tavern_draw_reply* other) {
  if (other != this) {
    _item_ids_.Swap(&other->_item_ids_);
    _new_heroes_.Swap(&other->_new_heroes_);
    _smash_idx_.Swap(&other->_smash_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tavern_draw_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tavern_draw_reply_descriptor_;
  metadata.reflection = tavern_draw_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reset_elite_reply::kResultFieldNumber;
#endif  // !_MSC_VER

reset_elite_reply::reset_elite_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.reset_elite_reply)
}

void reset_elite_reply::InitAsDefaultInstance() {
}

reset_elite_reply::reset_elite_reply(const reset_elite_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.reset_elite_reply)
}

void reset_elite_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reset_elite_reply::~reset_elite_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.reset_elite_reply)
  SharedDtor();
}

void reset_elite_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void reset_elite_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reset_elite_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reset_elite_reply_descriptor_;
}

const reset_elite_reply& reset_elite_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

reset_elite_reply* reset_elite_reply::default_instance_ = NULL;

reset_elite_reply* reset_elite_reply::New() const {
  return new reset_elite_reply;
}

void reset_elite_reply::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reset_elite_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.reset_elite_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1 [default = success];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.reset_elite_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.reset_elite_reply)
  return false;
#undef DO_
}

void reset_elite_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.reset_elite_reply)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.reset_elite_reply)
}

::google::protobuf::uint8* reset_elite_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.reset_elite_reply)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.reset_elite_reply)
  return target;
}

int reset_elite_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1 [default = success];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reset_elite_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reset_elite_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reset_elite_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reset_elite_reply::MergeFrom(const reset_elite_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reset_elite_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reset_elite_reply::CopyFrom(const reset_elite_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reset_elite_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void reset_elite_reply::Swap(reset_elite_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reset_elite_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reset_elite_reply_descriptor_;
  metadata.reflection = reset_elite_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sweep_stage_reply::kLootFieldNumber;
const int sweep_stage_reply::kItemsFieldNumber;
const int sweep_stage_reply::kShopFieldNumber;
const int sweep_stage_reply::kSshopFieldNumber;
#endif  // !_MSC_VER

sweep_stage_reply::sweep_stage_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.sweep_stage_reply)
}

void sweep_stage_reply::InitAsDefaultInstance() {
  _shop_ = const_cast< ::client_baseserver::user_shop*>(&::client_baseserver::user_shop::default_instance());
  _sshop_ = const_cast< ::client_baseserver::star_shop*>(&::client_baseserver::star_shop::default_instance());
}

sweep_stage_reply::sweep_stage_reply(const sweep_stage_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.sweep_stage_reply)
}

void sweep_stage_reply::SharedCtor() {
  _cached_size_ = 0;
  _shop_ = NULL;
  _sshop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sweep_stage_reply::~sweep_stage_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.sweep_stage_reply)
  SharedDtor();
}

void sweep_stage_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _shop_;
    delete _sshop_;
  }
}

void sweep_stage_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sweep_stage_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sweep_stage_reply_descriptor_;
}

const sweep_stage_reply& sweep_stage_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

sweep_stage_reply* sweep_stage_reply::default_instance_ = NULL;

sweep_stage_reply* sweep_stage_reply::New() const {
  return new sweep_stage_reply;
}

void sweep_stage_reply::Clear() {
  if (_has_bits_[0 / 32] & 12) {
    if (has__shop()) {
      if (_shop_ != NULL) _shop_->::client_baseserver::user_shop::Clear();
    }
    if (has__sshop()) {
      if (_sshop_ != NULL) _sshop_->::client_baseserver::star_shop::Clear();
    }
  }
  _loot_.Clear();
  _items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sweep_stage_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.sweep_stage_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.sweeploot _loot = 1;
      case 1: {
        if (tag == 10) {
         parse__loot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__loot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__loot;
        if (input->ExpectTag(16)) goto parse__items;
        break;
      }

      // repeated uint32 _items = 2;
      case 2: {
        if (tag == 16) {
         parse__items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable__items())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__items())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__items;
        if (input->ExpectTag(26)) goto parse__shop;
        break;
      }

      // optional .client_baseserver.user_shop _shop = 3;
      case 3: {
        if (tag == 26) {
         parse__shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__shop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__sshop;
        break;
      }

      // optional .client_baseserver.star_shop _sshop = 4;
      case 4: {
        if (tag == 34) {
         parse__sshop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__sshop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.sweep_stage_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.sweep_stage_reply)
  return false;
#undef DO_
}

void sweep_stage_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.sweep_stage_reply)
  // repeated .client_baseserver.sweeploot _loot = 1;
  for (int i = 0; i < this->_loot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_loot(i), output);
  }

  // repeated uint32 _items = 2;
  for (int i = 0; i < this->_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->_items(i), output);
  }

  // optional .client_baseserver.user_shop _shop = 3;
  if (has__shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_shop(), output);
  }

  // optional .client_baseserver.star_shop _sshop = 4;
  if (has__sshop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_sshop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.sweep_stage_reply)
}

::google::protobuf::uint8* sweep_stage_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.sweep_stage_reply)
  // repeated .client_baseserver.sweeploot _loot = 1;
  for (int i = 0; i < this->_loot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_loot(i), target);
  }

  // repeated uint32 _items = 2;
  for (int i = 0; i < this->_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->_items(i), target);
  }

  // optional .client_baseserver.user_shop _shop = 3;
  if (has__shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_shop(), target);
  }

  // optional .client_baseserver.star_shop _sshop = 4;
  if (has__sshop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_sshop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.sweep_stage_reply)
  return target;
}

int sweep_stage_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .client_baseserver.user_shop _shop = 3;
    if (has__shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_shop());
    }

    // optional .client_baseserver.star_shop _sshop = 4;
    if (has__sshop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_sshop());
    }

  }
  // repeated .client_baseserver.sweeploot _loot = 1;
  total_size += 1 * this->_loot_size();
  for (int i = 0; i < this->_loot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_loot(i));
  }

  // repeated uint32 _items = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->_items_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_items(i));
    }
    total_size += 1 * this->_items_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sweep_stage_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sweep_stage_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sweep_stage_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sweep_stage_reply::MergeFrom(const sweep_stage_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _loot_.MergeFrom(from._loot_);
  _items_.MergeFrom(from._items_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has__shop()) {
      mutable__shop()->::client_baseserver::user_shop::MergeFrom(from._shop());
    }
    if (from.has__sshop()) {
      mutable__sshop()->::client_baseserver::star_shop::MergeFrom(from._sshop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sweep_stage_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sweep_stage_reply::CopyFrom(const sweep_stage_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sweep_stage_reply::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_loot())) return false;
  if (has__shop()) {
    if (!this->_shop().IsInitialized()) return false;
  }
  if (has__sshop()) {
    if (!this->_sshop().IsInitialized()) return false;
  }
  return true;
}

void sweep_stage_reply::Swap(sweep_stage_reply* other) {
  if (other != this) {
    _loot_.Swap(&other->_loot_);
    _items_.Swap(&other->_items_);
    std::swap(_shop_, other->_shop_);
    std::swap(_sshop_, other->_sshop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sweep_stage_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sweep_stage_reply_descriptor_;
  metadata.reflection = sweep_stage_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sweep::kLastResetTimeFieldNumber;
const int sweep::kTodayFreeSweepTimesFieldNumber;
#endif  // !_MSC_VER

sweep::sweep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.sweep)
}

void sweep::InitAsDefaultInstance() {
}

sweep::sweep(const sweep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.sweep)
}

void sweep::SharedCtor() {
  _cached_size_ = 0;
  _last_reset_time_ = 0u;
  _today_free_sweep_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sweep::~sweep() {
  // @@protoc_insertion_point(destructor:client_baseserver.sweep)
  SharedDtor();
}

void sweep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sweep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sweep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sweep_descriptor_;
}

const sweep& sweep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

sweep* sweep::default_instance_ = NULL;

sweep* sweep::New() const {
  return new sweep;
}

void sweep::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<sweep*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_last_reset_time_, _today_free_sweep_times_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sweep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.sweep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _last_reset_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_last_reset_time_)));
          set_has__last_reset_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__today_free_sweep_times;
        break;
      }

      // required uint32 _today_free_sweep_times = 2;
      case 2: {
        if (tag == 16) {
         parse__today_free_sweep_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_today_free_sweep_times_)));
          set_has__today_free_sweep_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.sweep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.sweep)
  return false;
#undef DO_
}

void sweep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.sweep)
  // required uint32 _last_reset_time = 1;
  if (has__last_reset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_last_reset_time(), output);
  }

  // required uint32 _today_free_sweep_times = 2;
  if (has__today_free_sweep_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_today_free_sweep_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.sweep)
}

::google::protobuf::uint8* sweep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.sweep)
  // required uint32 _last_reset_time = 1;
  if (has__last_reset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_last_reset_time(), target);
  }

  // required uint32 _today_free_sweep_times = 2;
  if (has__today_free_sweep_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_today_free_sweep_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.sweep)
  return target;
}

int sweep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _last_reset_time = 1;
    if (has__last_reset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_last_reset_time());
    }

    // required uint32 _today_free_sweep_times = 2;
    if (has__today_free_sweep_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_today_free_sweep_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sweep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sweep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sweep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sweep::MergeFrom(const sweep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__last_reset_time()) {
      set__last_reset_time(from._last_reset_time());
    }
    if (from.has__today_free_sweep_times()) {
      set__today_free_sweep_times(from._today_free_sweep_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sweep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sweep::CopyFrom(const sweep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sweep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sweep::Swap(sweep* other) {
  if (other != this) {
    std::swap(_last_reset_time_, other->_last_reset_time_);
    std::swap(_today_free_sweep_times_, other->_today_free_sweep_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sweep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sweep_descriptor_;
  metadata.reflection = sweep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sync_skill_stren_reply::kSkillLevelUpFieldNumber;
#endif  // !_MSC_VER

sync_skill_stren_reply::sync_skill_stren_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.sync_skill_stren_reply)
}

void sync_skill_stren_reply::InitAsDefaultInstance() {
  _skill_level_up_ = const_cast< ::client_baseserver::skilllevelup*>(&::client_baseserver::skilllevelup::default_instance());
}

sync_skill_stren_reply::sync_skill_stren_reply(const sync_skill_stren_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.sync_skill_stren_reply)
}

void sync_skill_stren_reply::SharedCtor() {
  _cached_size_ = 0;
  _skill_level_up_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sync_skill_stren_reply::~sync_skill_stren_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.sync_skill_stren_reply)
  SharedDtor();
}

void sync_skill_stren_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _skill_level_up_;
  }
}

void sync_skill_stren_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sync_skill_stren_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sync_skill_stren_reply_descriptor_;
}

const sync_skill_stren_reply& sync_skill_stren_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

sync_skill_stren_reply* sync_skill_stren_reply::default_instance_ = NULL;

sync_skill_stren_reply* sync_skill_stren_reply::New() const {
  return new sync_skill_stren_reply;
}

void sync_skill_stren_reply::Clear() {
  if (has__skill_level_up()) {
    if (_skill_level_up_ != NULL) _skill_level_up_->::client_baseserver::skilllevelup::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sync_skill_stren_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.sync_skill_stren_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.skilllevelup _skill_level_up = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__skill_level_up()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.sync_skill_stren_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.sync_skill_stren_reply)
  return false;
#undef DO_
}

void sync_skill_stren_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.sync_skill_stren_reply)
  // required .client_baseserver.skilllevelup _skill_level_up = 1;
  if (has__skill_level_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_skill_level_up(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.sync_skill_stren_reply)
}

::google::protobuf::uint8* sync_skill_stren_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.sync_skill_stren_reply)
  // required .client_baseserver.skilllevelup _skill_level_up = 1;
  if (has__skill_level_up()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_skill_level_up(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.sync_skill_stren_reply)
  return target;
}

int sync_skill_stren_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.skilllevelup _skill_level_up = 1;
    if (has__skill_level_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_skill_level_up());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sync_skill_stren_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sync_skill_stren_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sync_skill_stren_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sync_skill_stren_reply::MergeFrom(const sync_skill_stren_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__skill_level_up()) {
      mutable__skill_level_up()->::client_baseserver::skilllevelup::MergeFrom(from._skill_level_up());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sync_skill_stren_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sync_skill_stren_reply::CopyFrom(const sync_skill_stren_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sync_skill_stren_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__skill_level_up()) {
    if (!this->_skill_level_up().IsInitialized()) return false;
  }
  return true;
}

void sync_skill_stren_reply::Swap(sync_skill_stren_reply* other) {
  if (other != this) {
    std::swap(_skill_level_up_, other->_skill_level_up_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sync_skill_stren_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sync_skill_stren_reply_descriptor_;
  metadata.reflection = sync_skill_stren_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_evolve_reply::kResultFieldNumber;
const int hero_evolve_reply::kHeroFieldNumber;
#endif  // !_MSC_VER

hero_evolve_reply::hero_evolve_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.hero_evolve_reply)
}

void hero_evolve_reply::InitAsDefaultInstance() {
  _hero_ = const_cast< ::client_baseserver::hero*>(&::client_baseserver::hero::default_instance());
}

hero_evolve_reply::hero_evolve_reply(const hero_evolve_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.hero_evolve_reply)
}

void hero_evolve_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_evolve_reply::~hero_evolve_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.hero_evolve_reply)
  SharedDtor();
}

void hero_evolve_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _hero_;
  }
}

void hero_evolve_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_evolve_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_evolve_reply_descriptor_;
}

const hero_evolve_reply& hero_evolve_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

hero_evolve_reply* hero_evolve_reply::default_instance_ = NULL;

hero_evolve_reply* hero_evolve_reply::New() const {
  return new hero_evolve_reply;
}

void hero_evolve_reply::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _result_ = 0;
    if (has__hero()) {
      if (_hero_ != NULL) _hero_->::client_baseserver::hero::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_evolve_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.hero_evolve_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1 [default = success];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__hero;
        break;
      }

      // optional .client_baseserver.hero _hero = 2;
      case 2: {
        if (tag == 18) {
         parse__hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.hero_evolve_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.hero_evolve_reply)
  return false;
#undef DO_
}

void hero_evolve_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.hero_evolve_reply)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // optional .client_baseserver.hero _hero = 2;
  if (has__hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_hero(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.hero_evolve_reply)
}

::google::protobuf::uint8* hero_evolve_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.hero_evolve_reply)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // optional .client_baseserver.hero _hero = 2;
  if (has__hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_hero(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.hero_evolve_reply)
  return target;
}

int hero_evolve_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1 [default = success];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional .client_baseserver.hero _hero = 2;
    if (has__hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_hero());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_evolve_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_evolve_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_evolve_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_evolve_reply::MergeFrom(const hero_evolve_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__hero()) {
      mutable__hero()->::client_baseserver::hero::MergeFrom(from._hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_evolve_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_evolve_reply::CopyFrom(const hero_evolve_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_evolve_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__hero()) {
    if (!this->_hero().IsInitialized()) return false;
  }
  return true;
}

void hero_evolve_reply::Swap(hero_evolve_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_hero_, other->_hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_evolve_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_evolve_reply_descriptor_;
  metadata.reflection = hero_evolve_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vitality::kCurrentFieldNumber;
const int vitality::kLastchangeFieldNumber;
const int vitality::kTodaybuyFieldNumber;
const int vitality::kLastbuyFieldNumber;
#endif  // !_MSC_VER

vitality::vitality()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.vitality)
}

void vitality::InitAsDefaultInstance() {
}

vitality::vitality(const vitality& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.vitality)
}

void vitality::SharedCtor() {
  _cached_size_ = 0;
  _current_ = 0u;
  _lastchange_ = 0u;
  _todaybuy_ = 0u;
  _lastbuy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vitality::~vitality() {
  // @@protoc_insertion_point(destructor:client_baseserver.vitality)
  SharedDtor();
}

void vitality::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vitality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vitality::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vitality_descriptor_;
}

const vitality& vitality::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

vitality* vitality::default_instance_ = NULL;

vitality* vitality::New() const {
  return new vitality;
}

void vitality::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<vitality*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_current_, _lastbuy_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vitality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.vitality)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _current = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_current_)));
          set_has__current();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__lastchange;
        break;
      }

      // required uint32 _lastchange = 2;
      case 2: {
        if (tag == 16) {
         parse__lastchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_lastchange_)));
          set_has__lastchange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__todaybuy;
        break;
      }

      // required uint32 _todaybuy = 3;
      case 3: {
        if (tag == 24) {
         parse__todaybuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_todaybuy_)));
          set_has__todaybuy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__lastbuy;
        break;
      }

      // required uint32 _lastbuy = 4;
      case 4: {
        if (tag == 32) {
         parse__lastbuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_lastbuy_)));
          set_has__lastbuy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.vitality)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.vitality)
  return false;
#undef DO_
}

void vitality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.vitality)
  // required uint32 _current = 1;
  if (has__current()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_current(), output);
  }

  // required uint32 _lastchange = 2;
  if (has__lastchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_lastchange(), output);
  }

  // required uint32 _todaybuy = 3;
  if (has__todaybuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_todaybuy(), output);
  }

  // required uint32 _lastbuy = 4;
  if (has__lastbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_lastbuy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.vitality)
}

::google::protobuf::uint8* vitality::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.vitality)
  // required uint32 _current = 1;
  if (has__current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_current(), target);
  }

  // required uint32 _lastchange = 2;
  if (has__lastchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_lastchange(), target);
  }

  // required uint32 _todaybuy = 3;
  if (has__todaybuy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_todaybuy(), target);
  }

  // required uint32 _lastbuy = 4;
  if (has__lastbuy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_lastbuy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.vitality)
  return target;
}

int vitality::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _current = 1;
    if (has__current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_current());
    }

    // required uint32 _lastchange = 2;
    if (has__lastchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_lastchange());
    }

    // required uint32 _todaybuy = 3;
    if (has__todaybuy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_todaybuy());
    }

    // required uint32 _lastbuy = 4;
    if (has__lastbuy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_lastbuy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vitality::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vitality* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vitality*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vitality::MergeFrom(const vitality& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__current()) {
      set__current(from._current());
    }
    if (from.has__lastchange()) {
      set__lastchange(from._lastchange());
    }
    if (from.has__todaybuy()) {
      set__todaybuy(from._todaybuy());
    }
    if (from.has__lastbuy()) {
      set__lastbuy(from._lastbuy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vitality::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vitality::CopyFrom(const vitality& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vitality::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void vitality::Swap(vitality* other) {
  if (other != this) {
    std::swap(_current_, other->_current_);
    std::swap(_lastchange_, other->_lastchange_);
    std::swap(_todaybuy_, other->_todaybuy_);
    std::swap(_lastbuy_, other->_lastbuy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vitality::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vitality_descriptor_;
  metadata.reflection = vitality_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int userstage::kNormalStageStarsFieldNumber;
const int userstage::kEliteStageStarsFieldNumber;
const int userstage::kEliteDailyRecordFieldNumber;
const int userstage::kEliteResetTimeFieldNumber;
const int userstage::kSweepFieldNumber;
const int userstage::kActDailyRecordFieldNumber;
const int userstage::kActResetTimeFieldNumber;
#endif  // !_MSC_VER

userstage::userstage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.userstage)
}

void userstage::InitAsDefaultInstance() {
  _sweep_ = const_cast< ::client_baseserver::sweep*>(&::client_baseserver::sweep::default_instance());
}

userstage::userstage(const userstage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.userstage)
}

void userstage::SharedCtor() {
  _cached_size_ = 0;
  _elite_reset_time_ = 0u;
  _sweep_ = NULL;
  _act_reset_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

userstage::~userstage() {
  // @@protoc_insertion_point(destructor:client_baseserver.userstage)
  SharedDtor();
}

void userstage::SharedDtor() {
  if (this != default_instance_) {
    delete _sweep_;
  }
}

void userstage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* userstage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return userstage_descriptor_;
}

const userstage& userstage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

userstage* userstage::default_instance_ = NULL;

userstage* userstage::New() const {
  return new userstage;
}

void userstage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<userstage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 88) {
    ZR_(_elite_reset_time_, _act_reset_time_);
    if (has__sweep()) {
      if (_sweep_ != NULL) _sweep_->::client_baseserver::sweep::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _normal_stage_stars_.Clear();
  _elite_stage_stars_.Clear();
  _elite_daily_record_.Clear();
  _act_daily_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool userstage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.userstage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 _normal_stage_stars = 1;
      case 1: {
        if (tag == 8) {
         parse__normal_stage_stars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable__normal_stage_stars())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__normal_stage_stars())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse__normal_stage_stars;
        if (input->ExpectTag(16)) goto parse__elite_stage_stars;
        break;
      }

      // repeated uint32 _elite_stage_stars = 2;
      case 2: {
        if (tag == 16) {
         parse__elite_stage_stars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable__elite_stage_stars())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__elite_stage_stars())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__elite_stage_stars;
        if (input->ExpectTag(24)) goto parse__elite_daily_record;
        break;
      }

      // repeated uint32 _elite_daily_record = 3;
      case 3: {
        if (tag == 24) {
         parse__elite_daily_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable__elite_daily_record())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__elite_daily_record())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__elite_daily_record;
        if (input->ExpectTag(32)) goto parse__elite_reset_time;
        break;
      }

      // required uint32 _elite_reset_time = 4;
      case 4: {
        if (tag == 32) {
         parse__elite_reset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_elite_reset_time_)));
          set_has__elite_reset_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse__sweep;
        break;
      }

      // required .client_baseserver.sweep _sweep = 5;
      case 5: {
        if (tag == 42) {
         parse__sweep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__sweep()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse__act_daily_record;
        break;
      }

      // repeated .client_baseserver.act_daily_record _act_daily_record = 6;
      case 6: {
        if (tag == 50) {
         parse__act_daily_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__act_daily_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse__act_daily_record;
        if (input->ExpectTag(56)) goto parse__act_reset_time;
        break;
      }

      // required uint32 _act_reset_time = 7;
      case 7: {
        if (tag == 56) {
         parse__act_reset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_act_reset_time_)));
          set_has__act_reset_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.userstage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.userstage)
  return false;
#undef DO_
}

void userstage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.userstage)
  // repeated uint32 _normal_stage_stars = 1;
  for (int i = 0; i < this->_normal_stage_stars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->_normal_stage_stars(i), output);
  }

  // repeated uint32 _elite_stage_stars = 2;
  for (int i = 0; i < this->_elite_stage_stars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->_elite_stage_stars(i), output);
  }

  // repeated uint32 _elite_daily_record = 3;
  for (int i = 0; i < this->_elite_daily_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->_elite_daily_record(i), output);
  }

  // required uint32 _elite_reset_time = 4;
  if (has__elite_reset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_elite_reset_time(), output);
  }

  // required .client_baseserver.sweep _sweep = 5;
  if (has__sweep()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_sweep(), output);
  }

  // repeated .client_baseserver.act_daily_record _act_daily_record = 6;
  for (int i = 0; i < this->_act_daily_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_act_daily_record(i), output);
  }

  // required uint32 _act_reset_time = 7;
  if (has__act_reset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->_act_reset_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.userstage)
}

::google::protobuf::uint8* userstage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.userstage)
  // repeated uint32 _normal_stage_stars = 1;
  for (int i = 0; i < this->_normal_stage_stars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->_normal_stage_stars(i), target);
  }

  // repeated uint32 _elite_stage_stars = 2;
  for (int i = 0; i < this->_elite_stage_stars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->_elite_stage_stars(i), target);
  }

  // repeated uint32 _elite_daily_record = 3;
  for (int i = 0; i < this->_elite_daily_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->_elite_daily_record(i), target);
  }

  // required uint32 _elite_reset_time = 4;
  if (has__elite_reset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_elite_reset_time(), target);
  }

  // required .client_baseserver.sweep _sweep = 5;
  if (has__sweep()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_sweep(), target);
  }

  // repeated .client_baseserver.act_daily_record _act_daily_record = 6;
  for (int i = 0; i < this->_act_daily_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->_act_daily_record(i), target);
  }

  // required uint32 _act_reset_time = 7;
  if (has__act_reset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->_act_reset_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.userstage)
  return target;
}

int userstage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // required uint32 _elite_reset_time = 4;
    if (has__elite_reset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_elite_reset_time());
    }

    // required .client_baseserver.sweep _sweep = 5;
    if (has__sweep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_sweep());
    }

    // required uint32 _act_reset_time = 7;
    if (has__act_reset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_act_reset_time());
    }

  }
  // repeated uint32 _normal_stage_stars = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->_normal_stage_stars_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_normal_stage_stars(i));
    }
    total_size += 1 * this->_normal_stage_stars_size() + data_size;
  }

  // repeated uint32 _elite_stage_stars = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->_elite_stage_stars_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_elite_stage_stars(i));
    }
    total_size += 1 * this->_elite_stage_stars_size() + data_size;
  }

  // repeated uint32 _elite_daily_record = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->_elite_daily_record_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_elite_daily_record(i));
    }
    total_size += 1 * this->_elite_daily_record_size() + data_size;
  }

  // repeated .client_baseserver.act_daily_record _act_daily_record = 6;
  total_size += 1 * this->_act_daily_record_size();
  for (int i = 0; i < this->_act_daily_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_act_daily_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void userstage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const userstage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const userstage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void userstage::MergeFrom(const userstage& from) {
  GOOGLE_CHECK_NE(&from, this);
  _normal_stage_stars_.MergeFrom(from._normal_stage_stars_);
  _elite_stage_stars_.MergeFrom(from._elite_stage_stars_);
  _elite_daily_record_.MergeFrom(from._elite_daily_record_);
  _act_daily_record_.MergeFrom(from._act_daily_record_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has__elite_reset_time()) {
      set__elite_reset_time(from._elite_reset_time());
    }
    if (from.has__sweep()) {
      mutable__sweep()->::client_baseserver::sweep::MergeFrom(from._sweep());
    }
    if (from.has__act_reset_time()) {
      set__act_reset_time(from._act_reset_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void userstage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void userstage::CopyFrom(const userstage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool userstage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000058) != 0x00000058) return false;

  if (has__sweep()) {
    if (!this->_sweep().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->_act_daily_record())) return false;
  return true;
}

void userstage::Swap(userstage* other) {
  if (other != this) {
    _normal_stage_stars_.Swap(&other->_normal_stage_stars_);
    _elite_stage_stars_.Swap(&other->_elite_stage_stars_);
    _elite_daily_record_.Swap(&other->_elite_daily_record_);
    std::swap(_elite_reset_time_, other->_elite_reset_time_);
    std::swap(_sweep_, other->_sweep_);
    _act_daily_record_.Swap(&other->_act_daily_record_);
    std::swap(_act_reset_time_, other->_act_reset_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata userstage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = userstage_descriptor_;
  metadata.reflection = userstage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int act_daily_record::kIdFieldNumber;
const int act_daily_record::kFrequencyFieldNumber;
const int act_daily_record::kLastChangeFieldNumber;
#endif  // !_MSC_VER

act_daily_record::act_daily_record()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.act_daily_record)
}

void act_daily_record::InitAsDefaultInstance() {
}

act_daily_record::act_daily_record(const act_daily_record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.act_daily_record)
}

void act_daily_record::SharedCtor() {
  _cached_size_ = 0;
  _id_ = 0u;
  _frequency_ = 0u;
  _last_change_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

act_daily_record::~act_daily_record() {
  // @@protoc_insertion_point(destructor:client_baseserver.act_daily_record)
  SharedDtor();
}

void act_daily_record::SharedDtor() {
  if (this != default_instance_) {
  }
}

void act_daily_record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* act_daily_record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return act_daily_record_descriptor_;
}

const act_daily_record& act_daily_record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

act_daily_record* act_daily_record::default_instance_ = NULL;

act_daily_record* act_daily_record::New() const {
  return new act_daily_record;
}

void act_daily_record::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<act_daily_record*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_id_, _last_change_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool act_daily_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.act_daily_record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_id_)));
          set_has__id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__frequency;
        break;
      }

      // required uint32 _frequency = 2;
      case 2: {
        if (tag == 16) {
         parse__frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_frequency_)));
          set_has__frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__last_change;
        break;
      }

      // required uint32 _last_change = 3;
      case 3: {
        if (tag == 24) {
         parse__last_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_last_change_)));
          set_has__last_change();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.act_daily_record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.act_daily_record)
  return false;
#undef DO_
}

void act_daily_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.act_daily_record)
  // required uint32 _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_id(), output);
  }

  // required uint32 _frequency = 2;
  if (has__frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_frequency(), output);
  }

  // required uint32 _last_change = 3;
  if (has__last_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_last_change(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.act_daily_record)
}

::google::protobuf::uint8* act_daily_record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.act_daily_record)
  // required uint32 _id = 1;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_id(), target);
  }

  // required uint32 _frequency = 2;
  if (has__frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_frequency(), target);
  }

  // required uint32 _last_change = 3;
  if (has__last_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_last_change(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.act_daily_record)
  return target;
}

int act_daily_record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _id = 1;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_id());
    }

    // required uint32 _frequency = 2;
    if (has__frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_frequency());
    }

    // required uint32 _last_change = 3;
    if (has__last_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_last_change());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void act_daily_record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const act_daily_record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const act_daily_record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void act_daily_record::MergeFrom(const act_daily_record& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__id()) {
      set__id(from._id());
    }
    if (from.has__frequency()) {
      set__frequency(from._frequency());
    }
    if (from.has__last_change()) {
      set__last_change(from._last_change());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void act_daily_record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void act_daily_record::CopyFrom(const act_daily_record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool act_daily_record::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void act_daily_record::Swap(act_daily_record* other) {
  if (other != this) {
    std::swap(_id_, other->_id_);
    std::swap(_frequency_, other->_frequency_);
    std::swap(_last_change_, other->_last_change_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata act_daily_record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = act_daily_record_descriptor_;
  metadata.reflection = act_daily_record_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ladder_reply::kOpenPanelFieldNumber;
const int ladder_reply::kApplyOppoFieldNumber;
const int ladder_reply::kStartBattleFieldNumber;
const int ladder_reply::kEndBattleFieldNumber;
const int ladder_reply::kSetLineupFieldNumber;
const int ladder_reply::kQueryRecordsFieldNumber;
const int ladder_reply::kQueryReplayFieldNumber;
const int ladder_reply::kQueryRankboradFieldNumber;
const int ladder_reply::kQueryOppoFieldNumber;
const int ladder_reply::kClearBattleCdFieldNumber;
const int ladder_reply::kDrawRankRewardFieldNumber;
const int ladder_reply::kBuyBattleChanceFieldNumber;
#endif  // !_MSC_VER

ladder_reply::ladder_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.ladder_reply)
}

void ladder_reply::InitAsDefaultInstance() {
  _open_panel_ = const_cast< ::client_baseserver::open_panel*>(&::client_baseserver::open_panel::default_instance());
  _apply_oppo_ = const_cast< ::client_baseserver::apply_opponent*>(&::client_baseserver::apply_opponent::default_instance());
  _start_battle_ = const_cast< ::client_baseserver::start_battle*>(&::client_baseserver::start_battle::default_instance());
  _end_battle_ = const_cast< ::client_baseserver::end_battle*>(&::client_baseserver::end_battle::default_instance());
  _set_lineup_ = const_cast< ::client_baseserver::set_lineup*>(&::client_baseserver::set_lineup::default_instance());
  _query_records_ = const_cast< ::client_baseserver::query_records*>(&::client_baseserver::query_records::default_instance());
  _query_replay_ = const_cast< ::client_baseserver::query_replay*>(&::client_baseserver::query_replay::default_instance());
  _query_rankborad_ = const_cast< ::client_baseserver::query_rankboard*>(&::client_baseserver::query_rankboard::default_instance());
  _query_oppo_ = const_cast< ::client_baseserver::query_oppo_info*>(&::client_baseserver::query_oppo_info::default_instance());
  _clear_battle_cd_ = const_cast< ::client_baseserver::clear_battle_cd*>(&::client_baseserver::clear_battle_cd::default_instance());
  _draw_rank_reward_ = const_cast< ::client_baseserver::draw_rank_reward*>(&::client_baseserver::draw_rank_reward::default_instance());
  _buy_battle_chance_ = const_cast< ::client_baseserver::buy_battle_chance*>(&::client_baseserver::buy_battle_chance::default_instance());
}

ladder_reply::ladder_reply(const ladder_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.ladder_reply)
}

void ladder_reply::SharedCtor() {
  _cached_size_ = 0;
  _open_panel_ = NULL;
  _apply_oppo_ = NULL;
  _start_battle_ = NULL;
  _end_battle_ = NULL;
  _set_lineup_ = NULL;
  _query_records_ = NULL;
  _query_replay_ = NULL;
  _query_rankborad_ = NULL;
  _query_oppo_ = NULL;
  _clear_battle_cd_ = NULL;
  _draw_rank_reward_ = NULL;
  _buy_battle_chance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ladder_reply::~ladder_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.ladder_reply)
  SharedDtor();
}

void ladder_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _open_panel_;
    delete _apply_oppo_;
    delete _start_battle_;
    delete _end_battle_;
    delete _set_lineup_;
    delete _query_records_;
    delete _query_replay_;
    delete _query_rankborad_;
    delete _query_oppo_;
    delete _clear_battle_cd_;
    delete _draw_rank_reward_;
    delete _buy_battle_chance_;
  }
}

void ladder_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ladder_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ladder_reply_descriptor_;
}

const ladder_reply& ladder_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

ladder_reply* ladder_reply::default_instance_ = NULL;

ladder_reply* ladder_reply::New() const {
  return new ladder_reply;
}

void ladder_reply::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has__open_panel()) {
      if (_open_panel_ != NULL) _open_panel_->::client_baseserver::open_panel::Clear();
    }
    if (has__apply_oppo()) {
      if (_apply_oppo_ != NULL) _apply_oppo_->::client_baseserver::apply_opponent::Clear();
    }
    if (has__start_battle()) {
      if (_start_battle_ != NULL) _start_battle_->::client_baseserver::start_battle::Clear();
    }
    if (has__end_battle()) {
      if (_end_battle_ != NULL) _end_battle_->::client_baseserver::end_battle::Clear();
    }
    if (has__set_lineup()) {
      if (_set_lineup_ != NULL) _set_lineup_->::client_baseserver::set_lineup::Clear();
    }
    if (has__query_records()) {
      if (_query_records_ != NULL) _query_records_->::client_baseserver::query_records::Clear();
    }
    if (has__query_replay()) {
      if (_query_replay_ != NULL) _query_replay_->::client_baseserver::query_replay::Clear();
    }
    if (has__query_rankborad()) {
      if (_query_rankborad_ != NULL) _query_rankborad_->::client_baseserver::query_rankboard::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has__query_oppo()) {
      if (_query_oppo_ != NULL) _query_oppo_->::client_baseserver::query_oppo_info::Clear();
    }
    if (has__clear_battle_cd()) {
      if (_clear_battle_cd_ != NULL) _clear_battle_cd_->::client_baseserver::clear_battle_cd::Clear();
    }
    if (has__draw_rank_reward()) {
      if (_draw_rank_reward_ != NULL) _draw_rank_reward_->::client_baseserver::draw_rank_reward::Clear();
    }
    if (has__buy_battle_chance()) {
      if (_buy_battle_chance_ != NULL) _buy_battle_chance_->::client_baseserver::buy_battle_chance::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ladder_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.ladder_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_baseserver.open_panel _open_panel = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__open_panel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__apply_oppo;
        break;
      }

      // optional .client_baseserver.apply_opponent _apply_oppo = 2;
      case 2: {
        if (tag == 18) {
         parse__apply_oppo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__apply_oppo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__start_battle;
        break;
      }

      // optional .client_baseserver.start_battle _start_battle = 3;
      case 3: {
        if (tag == 26) {
         parse__start_battle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__start_battle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__end_battle;
        break;
      }

      // optional .client_baseserver.end_battle _end_battle = 4;
      case 4: {
        if (tag == 34) {
         parse__end_battle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__end_battle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse__set_lineup;
        break;
      }

      // optional .client_baseserver.set_lineup _set_lineup = 5;
      case 5: {
        if (tag == 42) {
         parse__set_lineup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__set_lineup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse__query_records;
        break;
      }

      // optional .client_baseserver.query_records _query_records = 6;
      case 6: {
        if (tag == 50) {
         parse__query_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse__query_replay;
        break;
      }

      // optional .client_baseserver.query_replay _query_replay = 7;
      case 7: {
        if (tag == 58) {
         parse__query_replay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_replay()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse__query_rankborad;
        break;
      }

      // optional .client_baseserver.query_rankboard _query_rankborad = 8;
      case 8: {
        if (tag == 66) {
         parse__query_rankborad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_rankborad()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse__query_oppo;
        break;
      }

      // optional .client_baseserver.query_oppo_info _query_oppo = 9;
      case 9: {
        if (tag == 74) {
         parse__query_oppo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_oppo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse__clear_battle_cd;
        break;
      }

      // optional .client_baseserver.clear_battle_cd _clear_battle_cd = 10;
      case 10: {
        if (tag == 82) {
         parse__clear_battle_cd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__clear_battle_cd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse__draw_rank_reward;
        break;
      }

      // optional .client_baseserver.draw_rank_reward _draw_rank_reward = 11;
      case 11: {
        if (tag == 90) {
         parse__draw_rank_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__draw_rank_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse__buy_battle_chance;
        break;
      }

      // optional .client_baseserver.buy_battle_chance _buy_battle_chance = 12;
      case 12: {
        if (tag == 98) {
         parse__buy_battle_chance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__buy_battle_chance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.ladder_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.ladder_reply)
  return false;
#undef DO_
}

void ladder_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.ladder_reply)
  // optional .client_baseserver.open_panel _open_panel = 1;
  if (has__open_panel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_open_panel(), output);
  }

  // optional .client_baseserver.apply_opponent _apply_oppo = 2;
  if (has__apply_oppo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_apply_oppo(), output);
  }

  // optional .client_baseserver.start_battle _start_battle = 3;
  if (has__start_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_start_battle(), output);
  }

  // optional .client_baseserver.end_battle _end_battle = 4;
  if (has__end_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_end_battle(), output);
  }

  // optional .client_baseserver.set_lineup _set_lineup = 5;
  if (has__set_lineup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_set_lineup(), output);
  }

  // optional .client_baseserver.query_records _query_records = 6;
  if (has__query_records()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_query_records(), output);
  }

  // optional .client_baseserver.query_replay _query_replay = 7;
  if (has__query_replay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_query_replay(), output);
  }

  // optional .client_baseserver.query_rankboard _query_rankborad = 8;
  if (has__query_rankborad()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_query_rankborad(), output);
  }

  // optional .client_baseserver.query_oppo_info _query_oppo = 9;
  if (has__query_oppo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_query_oppo(), output);
  }

  // optional .client_baseserver.clear_battle_cd _clear_battle_cd = 10;
  if (has__clear_battle_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_clear_battle_cd(), output);
  }

  // optional .client_baseserver.draw_rank_reward _draw_rank_reward = 11;
  if (has__draw_rank_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_draw_rank_reward(), output);
  }

  // optional .client_baseserver.buy_battle_chance _buy_battle_chance = 12;
  if (has__buy_battle_chance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_buy_battle_chance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.ladder_reply)
}

::google::protobuf::uint8* ladder_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.ladder_reply)
  // optional .client_baseserver.open_panel _open_panel = 1;
  if (has__open_panel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_open_panel(), target);
  }

  // optional .client_baseserver.apply_opponent _apply_oppo = 2;
  if (has__apply_oppo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_apply_oppo(), target);
  }

  // optional .client_baseserver.start_battle _start_battle = 3;
  if (has__start_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_start_battle(), target);
  }

  // optional .client_baseserver.end_battle _end_battle = 4;
  if (has__end_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_end_battle(), target);
  }

  // optional .client_baseserver.set_lineup _set_lineup = 5;
  if (has__set_lineup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_set_lineup(), target);
  }

  // optional .client_baseserver.query_records _query_records = 6;
  if (has__query_records()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->_query_records(), target);
  }

  // optional .client_baseserver.query_replay _query_replay = 7;
  if (has__query_replay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->_query_replay(), target);
  }

  // optional .client_baseserver.query_rankboard _query_rankborad = 8;
  if (has__query_rankborad()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->_query_rankborad(), target);
  }

  // optional .client_baseserver.query_oppo_info _query_oppo = 9;
  if (has__query_oppo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->_query_oppo(), target);
  }

  // optional .client_baseserver.clear_battle_cd _clear_battle_cd = 10;
  if (has__clear_battle_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->_clear_battle_cd(), target);
  }

  // optional .client_baseserver.draw_rank_reward _draw_rank_reward = 11;
  if (has__draw_rank_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->_draw_rank_reward(), target);
  }

  // optional .client_baseserver.buy_battle_chance _buy_battle_chance = 12;
  if (has__buy_battle_chance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->_buy_battle_chance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.ladder_reply)
  return target;
}

int ladder_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_baseserver.open_panel _open_panel = 1;
    if (has__open_panel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_open_panel());
    }

    // optional .client_baseserver.apply_opponent _apply_oppo = 2;
    if (has__apply_oppo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_apply_oppo());
    }

    // optional .client_baseserver.start_battle _start_battle = 3;
    if (has__start_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_start_battle());
    }

    // optional .client_baseserver.end_battle _end_battle = 4;
    if (has__end_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_end_battle());
    }

    // optional .client_baseserver.set_lineup _set_lineup = 5;
    if (has__set_lineup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_set_lineup());
    }

    // optional .client_baseserver.query_records _query_records = 6;
    if (has__query_records()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_records());
    }

    // optional .client_baseserver.query_replay _query_replay = 7;
    if (has__query_replay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_replay());
    }

    // optional .client_baseserver.query_rankboard _query_rankborad = 8;
    if (has__query_rankborad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_rankborad());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .client_baseserver.query_oppo_info _query_oppo = 9;
    if (has__query_oppo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_oppo());
    }

    // optional .client_baseserver.clear_battle_cd _clear_battle_cd = 10;
    if (has__clear_battle_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_clear_battle_cd());
    }

    // optional .client_baseserver.draw_rank_reward _draw_rank_reward = 11;
    if (has__draw_rank_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_draw_rank_reward());
    }

    // optional .client_baseserver.buy_battle_chance _buy_battle_chance = 12;
    if (has__buy_battle_chance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_buy_battle_chance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ladder_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ladder_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ladder_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ladder_reply::MergeFrom(const ladder_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__open_panel()) {
      mutable__open_panel()->::client_baseserver::open_panel::MergeFrom(from._open_panel());
    }
    if (from.has__apply_oppo()) {
      mutable__apply_oppo()->::client_baseserver::apply_opponent::MergeFrom(from._apply_oppo());
    }
    if (from.has__start_battle()) {
      mutable__start_battle()->::client_baseserver::start_battle::MergeFrom(from._start_battle());
    }
    if (from.has__end_battle()) {
      mutable__end_battle()->::client_baseserver::end_battle::MergeFrom(from._end_battle());
    }
    if (from.has__set_lineup()) {
      mutable__set_lineup()->::client_baseserver::set_lineup::MergeFrom(from._set_lineup());
    }
    if (from.has__query_records()) {
      mutable__query_records()->::client_baseserver::query_records::MergeFrom(from._query_records());
    }
    if (from.has__query_replay()) {
      mutable__query_replay()->::client_baseserver::query_replay::MergeFrom(from._query_replay());
    }
    if (from.has__query_rankborad()) {
      mutable__query_rankborad()->::client_baseserver::query_rankboard::MergeFrom(from._query_rankborad());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has__query_oppo()) {
      mutable__query_oppo()->::client_baseserver::query_oppo_info::MergeFrom(from._query_oppo());
    }
    if (from.has__clear_battle_cd()) {
      mutable__clear_battle_cd()->::client_baseserver::clear_battle_cd::MergeFrom(from._clear_battle_cd());
    }
    if (from.has__draw_rank_reward()) {
      mutable__draw_rank_reward()->::client_baseserver::draw_rank_reward::MergeFrom(from._draw_rank_reward());
    }
    if (from.has__buy_battle_chance()) {
      mutable__buy_battle_chance()->::client_baseserver::buy_battle_chance::MergeFrom(from._buy_battle_chance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ladder_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ladder_reply::CopyFrom(const ladder_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ladder_reply::IsInitialized() const {

  if (has__open_panel()) {
    if (!this->_open_panel().IsInitialized()) return false;
  }
  if (has__apply_oppo()) {
    if (!this->_apply_oppo().IsInitialized()) return false;
  }
  if (has__start_battle()) {
    if (!this->_start_battle().IsInitialized()) return false;
  }
  if (has__end_battle()) {
    if (!this->_end_battle().IsInitialized()) return false;
  }
  if (has__set_lineup()) {
    if (!this->_set_lineup().IsInitialized()) return false;
  }
  if (has__query_records()) {
    if (!this->_query_records().IsInitialized()) return false;
  }
  if (has__query_replay()) {
    if (!this->_query_replay().IsInitialized()) return false;
  }
  if (has__query_rankborad()) {
    if (!this->_query_rankborad().IsInitialized()) return false;
  }
  if (has__query_oppo()) {
    if (!this->_query_oppo().IsInitialized()) return false;
  }
  if (has__clear_battle_cd()) {
    if (!this->_clear_battle_cd().IsInitialized()) return false;
  }
  if (has__draw_rank_reward()) {
    if (!this->_draw_rank_reward().IsInitialized()) return false;
  }
  if (has__buy_battle_chance()) {
    if (!this->_buy_battle_chance().IsInitialized()) return false;
  }
  return true;
}

void ladder_reply::Swap(ladder_reply* other) {
  if (other != this) {
    std::swap(_open_panel_, other->_open_panel_);
    std::swap(_apply_oppo_, other->_apply_oppo_);
    std::swap(_start_battle_, other->_start_battle_);
    std::swap(_end_battle_, other->_end_battle_);
    std::swap(_set_lineup_, other->_set_lineup_);
    std::swap(_query_records_, other->_query_records_);
    std::swap(_query_replay_, other->_query_replay_);
    std::swap(_query_rankborad_, other->_query_rankborad_);
    std::swap(_query_oppo_, other->_query_oppo_);
    std::swap(_clear_battle_cd_, other->_clear_battle_cd_);
    std::swap(_draw_rank_reward_, other->_draw_rank_reward_);
    std::swap(_buy_battle_chance_, other->_buy_battle_chance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ladder_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ladder_reply_descriptor_;
  metadata.reflection = ladder_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int open_panel::kRankFieldNumber;
const int open_panel::kLeftCountFieldNumber;
const int open_panel::kLastBtTimeFieldNumber;
const int open_panel::kBuyTimesFieldNumber;
const int open_panel::kLineupFieldNumber;
const int open_panel::kGsFieldNumber;
const int open_panel::kOpposFieldNumber;
#endif  // !_MSC_VER

open_panel::open_panel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.open_panel)
}

void open_panel::InitAsDefaultInstance() {
}

open_panel::open_panel(const open_panel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.open_panel)
}

void open_panel::SharedCtor() {
  _cached_size_ = 0;
  _rank_ = 0u;
  _left_count_ = 0u;
  _last_bt_time_ = 0u;
  _buy_times_ = 0u;
  _gs_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

open_panel::~open_panel() {
  // @@protoc_insertion_point(destructor:client_baseserver.open_panel)
  SharedDtor();
}

void open_panel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void open_panel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* open_panel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return open_panel_descriptor_;
}

const open_panel& open_panel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

open_panel* open_panel::default_instance_ = NULL;

open_panel* open_panel::New() const {
  return new open_panel;
}

void open_panel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<open_panel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(_rank_, _buy_times_);
    _gs_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _lineup_.Clear();
  _oppos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool open_panel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.open_panel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_rank_)));
          set_has__rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__left_count;
        break;
      }

      // required uint32 _left_count = 2;
      case 2: {
        if (tag == 16) {
         parse__left_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_left_count_)));
          set_has__left_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__last_bt_time;
        break;
      }

      // required uint32 _last_bt_time = 3;
      case 3: {
        if (tag == 24) {
         parse__last_bt_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_last_bt_time_)));
          set_has__last_bt_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__buy_times;
        break;
      }

      // required uint32 _buy_times = 4;
      case 4: {
        if (tag == 32) {
         parse__buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_buy_times_)));
          set_has__buy_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__lineup;
        break;
      }

      // repeated uint32 _lineup = 5;
      case 5: {
        if (tag == 40) {
         parse__lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable__lineup())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__lineup())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__lineup;
        if (input->ExpectTag(48)) goto parse__gs;
        break;
      }

      // required uint32 _gs = 6;
      case 6: {
        if (tag == 48) {
         parse__gs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_gs_)));
          set_has__gs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse__oppos;
        break;
      }

      // repeated .client_baseserver.ladder_opponent _oppos = 7;
      case 7: {
        if (tag == 58) {
         parse__oppos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__oppos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse__oppos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.open_panel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.open_panel)
  return false;
#undef DO_
}

void open_panel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.open_panel)
  // required uint32 _rank = 1;
  if (has__rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_rank(), output);
  }

  // required uint32 _left_count = 2;
  if (has__left_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_left_count(), output);
  }

  // required uint32 _last_bt_time = 3;
  if (has__last_bt_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_last_bt_time(), output);
  }

  // required uint32 _buy_times = 4;
  if (has__buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_buy_times(), output);
  }

  // repeated uint32 _lineup = 5;
  for (int i = 0; i < this->_lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->_lineup(i), output);
  }

  // required uint32 _gs = 6;
  if (has__gs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_gs(), output);
  }

  // repeated .client_baseserver.ladder_opponent _oppos = 7;
  for (int i = 0; i < this->_oppos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_oppos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.open_panel)
}

::google::protobuf::uint8* open_panel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.open_panel)
  // required uint32 _rank = 1;
  if (has__rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_rank(), target);
  }

  // required uint32 _left_count = 2;
  if (has__left_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_left_count(), target);
  }

  // required uint32 _last_bt_time = 3;
  if (has__last_bt_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_last_bt_time(), target);
  }

  // required uint32 _buy_times = 4;
  if (has__buy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_buy_times(), target);
  }

  // repeated uint32 _lineup = 5;
  for (int i = 0; i < this->_lineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->_lineup(i), target);
  }

  // required uint32 _gs = 6;
  if (has__gs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_gs(), target);
  }

  // repeated .client_baseserver.ladder_opponent _oppos = 7;
  for (int i = 0; i < this->_oppos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->_oppos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.open_panel)
  return target;
}

int open_panel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _rank = 1;
    if (has__rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_rank());
    }

    // required uint32 _left_count = 2;
    if (has__left_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_left_count());
    }

    // required uint32 _last_bt_time = 3;
    if (has__last_bt_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_last_bt_time());
    }

    // required uint32 _buy_times = 4;
    if (has__buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_buy_times());
    }

    // required uint32 _gs = 6;
    if (has__gs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_gs());
    }

  }
  // repeated uint32 _lineup = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->_lineup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_lineup(i));
    }
    total_size += 1 * this->_lineup_size() + data_size;
  }

  // repeated .client_baseserver.ladder_opponent _oppos = 7;
  total_size += 1 * this->_oppos_size();
  for (int i = 0; i < this->_oppos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_oppos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void open_panel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const open_panel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const open_panel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void open_panel::MergeFrom(const open_panel& from) {
  GOOGLE_CHECK_NE(&from, this);
  _lineup_.MergeFrom(from._lineup_);
  _oppos_.MergeFrom(from._oppos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__rank()) {
      set__rank(from._rank());
    }
    if (from.has__left_count()) {
      set__left_count(from._left_count());
    }
    if (from.has__last_bt_time()) {
      set__last_bt_time(from._last_bt_time());
    }
    if (from.has__buy_times()) {
      set__buy_times(from._buy_times());
    }
    if (from.has__gs()) {
      set__gs(from._gs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void open_panel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void open_panel::CopyFrom(const open_panel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool open_panel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_oppos())) return false;
  return true;
}

void open_panel::Swap(open_panel* other) {
  if (other != this) {
    std::swap(_rank_, other->_rank_);
    std::swap(_left_count_, other->_left_count_);
    std::swap(_last_bt_time_, other->_last_bt_time_);
    std::swap(_buy_times_, other->_buy_times_);
    _lineup_.Swap(&other->_lineup_);
    std::swap(_gs_, other->_gs_);
    _oppos_.Swap(&other->_oppos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata open_panel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = open_panel_descriptor_;
  metadata.reflection = open_panel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int apply_opponent::kOpposFieldNumber;
#endif  // !_MSC_VER

apply_opponent::apply_opponent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.apply_opponent)
}

void apply_opponent::InitAsDefaultInstance() {
}

apply_opponent::apply_opponent(const apply_opponent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.apply_opponent)
}

void apply_opponent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

apply_opponent::~apply_opponent() {
  // @@protoc_insertion_point(destructor:client_baseserver.apply_opponent)
  SharedDtor();
}

void apply_opponent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void apply_opponent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* apply_opponent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return apply_opponent_descriptor_;
}

const apply_opponent& apply_opponent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

apply_opponent* apply_opponent::default_instance_ = NULL;

apply_opponent* apply_opponent::New() const {
  return new apply_opponent;
}

void apply_opponent::Clear() {
  _oppos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool apply_opponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.apply_opponent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.ladder_opponent _oppos = 1;
      case 1: {
        if (tag == 10) {
         parse__oppos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__oppos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__oppos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.apply_opponent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.apply_opponent)
  return false;
#undef DO_
}

void apply_opponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.apply_opponent)
  // repeated .client_baseserver.ladder_opponent _oppos = 1;
  for (int i = 0; i < this->_oppos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_oppos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.apply_opponent)
}

::google::protobuf::uint8* apply_opponent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.apply_opponent)
  // repeated .client_baseserver.ladder_opponent _oppos = 1;
  for (int i = 0; i < this->_oppos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_oppos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.apply_opponent)
  return target;
}

int apply_opponent::ByteSize() const {
  int total_size = 0;

  // repeated .client_baseserver.ladder_opponent _oppos = 1;
  total_size += 1 * this->_oppos_size();
  for (int i = 0; i < this->_oppos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_oppos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void apply_opponent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const apply_opponent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const apply_opponent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void apply_opponent::MergeFrom(const apply_opponent& from) {
  GOOGLE_CHECK_NE(&from, this);
  _oppos_.MergeFrom(from._oppos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void apply_opponent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void apply_opponent::CopyFrom(const apply_opponent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_opponent::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_oppos())) return false;
  return true;
}

void apply_opponent::Swap(apply_opponent* other) {
  if (other != this) {
    _oppos_.Swap(&other->_oppos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata apply_opponent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = apply_opponent_descriptor_;
  metadata.reflection = apply_opponent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int start_battle::kResultFieldNumber;
const int start_battle::kRseedFieldNumber;
const int start_battle::kSelfHeroesFieldNumber;
const int start_battle::kHeroesFieldNumber;
const int start_battle::kIsRobotFieldNumber;
#endif  // !_MSC_VER

start_battle::start_battle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.start_battle)
}

void start_battle::InitAsDefaultInstance() {
}

start_battle::start_battle(const start_battle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.start_battle)
}

void start_battle::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _rseed_ = 0u;
  _is_robot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

start_battle::~start_battle() {
  // @@protoc_insertion_point(destructor:client_baseserver.start_battle)
  SharedDtor();
}

void start_battle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void start_battle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* start_battle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return start_battle_descriptor_;
}

const start_battle& start_battle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

start_battle* start_battle::default_instance_ = NULL;

start_battle* start_battle::New() const {
  return new start_battle;
}

void start_battle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<start_battle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 19) {
    ZR_(_result_, _rseed_);
    _is_robot_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _self_heroes_.Clear();
  _heroes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool start_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.start_battle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__rseed;
        break;
      }

      // required uint32 _rseed = 2;
      case 2: {
        if (tag == 16) {
         parse__rseed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_rseed_)));
          set_has__rseed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__self_heroes;
        break;
      }

      // repeated .client_baseserver.hero _self_heroes = 3;
      case 3: {
        if (tag == 26) {
         parse__self_heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__self_heroes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__self_heroes;
        if (input->ExpectTag(34)) goto parse__heroes;
        break;
      }

      // repeated .client_baseserver.hero _heroes = 4;
      case 4: {
        if (tag == 34) {
         parse__heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__heroes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__heroes;
        if (input->ExpectTag(40)) goto parse__is_robot;
        break;
      }

      // required uint32 _is_robot = 5;
      case 5: {
        if (tag == 40) {
         parse__is_robot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_is_robot_)));
          set_has__is_robot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.start_battle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.start_battle)
  return false;
#undef DO_
}

void start_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.start_battle)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // required uint32 _rseed = 2;
  if (has__rseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_rseed(), output);
  }

  // repeated .client_baseserver.hero _self_heroes = 3;
  for (int i = 0; i < this->_self_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_self_heroes(i), output);
  }

  // repeated .client_baseserver.hero _heroes = 4;
  for (int i = 0; i < this->_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_heroes(i), output);
  }

  // required uint32 _is_robot = 5;
  if (has__is_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_is_robot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.start_battle)
}

::google::protobuf::uint8* start_battle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.start_battle)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // required uint32 _rseed = 2;
  if (has__rseed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_rseed(), target);
  }

  // repeated .client_baseserver.hero _self_heroes = 3;
  for (int i = 0; i < this->_self_heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_self_heroes(i), target);
  }

  // repeated .client_baseserver.hero _heroes = 4;
  for (int i = 0; i < this->_heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_heroes(i), target);
  }

  // required uint32 _is_robot = 5;
  if (has__is_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_is_robot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.start_battle)
  return target;
}

int start_battle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // required uint32 _rseed = 2;
    if (has__rseed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_rseed());
    }

    // required uint32 _is_robot = 5;
    if (has__is_robot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_is_robot());
    }

  }
  // repeated .client_baseserver.hero _self_heroes = 3;
  total_size += 1 * this->_self_heroes_size();
  for (int i = 0; i < this->_self_heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_self_heroes(i));
  }

  // repeated .client_baseserver.hero _heroes = 4;
  total_size += 1 * this->_heroes_size();
  for (int i = 0; i < this->_heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_heroes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void start_battle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const start_battle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const start_battle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void start_battle::MergeFrom(const start_battle& from) {
  GOOGLE_CHECK_NE(&from, this);
  _self_heroes_.MergeFrom(from._self_heroes_);
  _heroes_.MergeFrom(from._heroes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__rseed()) {
      set__rseed(from._rseed());
    }
    if (from.has__is_robot()) {
      set__is_robot(from._is_robot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void start_battle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void start_battle::CopyFrom(const start_battle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool start_battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_self_heroes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->_heroes())) return false;
  return true;
}

void start_battle::Swap(start_battle* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_rseed_, other->_rseed_);
    _self_heroes_.Swap(&other->_self_heroes_);
    _heroes_.Swap(&other->_heroes_);
    std::swap(_is_robot_, other->_is_robot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata start_battle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = start_battle_descriptor_;
  metadata.reflection = start_battle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int end_battle::kResultFieldNumber;
const int end_battle::kBestRankRewardFieldNumber;
const int end_battle::kBestRankFieldNumber;
const int end_battle::kCurRankFieldNumber;
#endif  // !_MSC_VER

end_battle::end_battle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.end_battle)
}

void end_battle::InitAsDefaultInstance() {
}

end_battle::end_battle(const end_battle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.end_battle)
}

void end_battle::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _best_rank_reward_ = 0u;
  _best_rank_ = 0u;
  _cur_rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

end_battle::~end_battle() {
  // @@protoc_insertion_point(destructor:client_baseserver.end_battle)
  SharedDtor();
}

void end_battle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void end_battle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* end_battle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return end_battle_descriptor_;
}

const end_battle& end_battle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

end_battle* end_battle::default_instance_ = NULL;

end_battle* end_battle::New() const {
  return new end_battle;
}

void end_battle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<end_battle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_result_, _cur_rank_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool end_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.end_battle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.battle_result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::battle_result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::battle_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__best_rank_reward;
        break;
      }

      // required uint32 _best_rank_reward = 2;
      case 2: {
        if (tag == 16) {
         parse__best_rank_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_best_rank_reward_)));
          set_has__best_rank_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__best_rank;
        break;
      }

      // required uint32 _best_rank = 3;
      case 3: {
        if (tag == 24) {
         parse__best_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_best_rank_)));
          set_has__best_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__cur_rank;
        break;
      }

      // required uint32 _cur_rank = 4;
      case 4: {
        if (tag == 32) {
         parse__cur_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_cur_rank_)));
          set_has__cur_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.end_battle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.end_battle)
  return false;
#undef DO_
}

void end_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.end_battle)
  // required .client_baseserver.battle_result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // required uint32 _best_rank_reward = 2;
  if (has__best_rank_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_best_rank_reward(), output);
  }

  // required uint32 _best_rank = 3;
  if (has__best_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_best_rank(), output);
  }

  // required uint32 _cur_rank = 4;
  if (has__cur_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_cur_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.end_battle)
}

::google::protobuf::uint8* end_battle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.end_battle)
  // required .client_baseserver.battle_result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // required uint32 _best_rank_reward = 2;
  if (has__best_rank_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_best_rank_reward(), target);
  }

  // required uint32 _best_rank = 3;
  if (has__best_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_best_rank(), target);
  }

  // required uint32 _cur_rank = 4;
  if (has__cur_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_cur_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.end_battle)
  return target;
}

int end_battle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.battle_result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // required uint32 _best_rank_reward = 2;
    if (has__best_rank_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_best_rank_reward());
    }

    // required uint32 _best_rank = 3;
    if (has__best_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_best_rank());
    }

    // required uint32 _cur_rank = 4;
    if (has__cur_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_cur_rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void end_battle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const end_battle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const end_battle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void end_battle::MergeFrom(const end_battle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__best_rank_reward()) {
      set__best_rank_reward(from._best_rank_reward());
    }
    if (from.has__best_rank()) {
      set__best_rank(from._best_rank());
    }
    if (from.has__cur_rank()) {
      set__cur_rank(from._cur_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void end_battle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void end_battle::CopyFrom(const end_battle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool end_battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void end_battle::Swap(end_battle* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_best_rank_reward_, other->_best_rank_reward_);
    std::swap(_best_rank_, other->_best_rank_);
    std::swap(_cur_rank_, other->_cur_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata end_battle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = end_battle_descriptor_;
  metadata.reflection = end_battle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int set_lineup::kResultFieldNumber;
const int set_lineup::kLineupFieldNumber;
const int set_lineup::kGsFieldNumber;
#endif  // !_MSC_VER

set_lineup::set_lineup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.set_lineup)
}

void set_lineup::InitAsDefaultInstance() {
}

set_lineup::set_lineup(const set_lineup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.set_lineup)
}

void set_lineup::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _gs_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_lineup::~set_lineup() {
  // @@protoc_insertion_point(destructor:client_baseserver.set_lineup)
  SharedDtor();
}

void set_lineup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void set_lineup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_lineup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_lineup_descriptor_;
}

const set_lineup& set_lineup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

set_lineup* set_lineup::default_instance_ = NULL;

set_lineup* set_lineup::New() const {
  return new set_lineup;
}

void set_lineup::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<set_lineup*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_result_, _gs_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  _lineup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_lineup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.set_lineup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__lineup;
        break;
      }

      // repeated uint32 _lineup = 2;
      case 2: {
        if (tag == 16) {
         parse__lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable__lineup())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__lineup())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__lineup;
        if (input->ExpectTag(24)) goto parse__gs;
        break;
      }

      // required uint32 _gs = 3;
      case 3: {
        if (tag == 24) {
         parse__gs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_gs_)));
          set_has__gs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.set_lineup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.set_lineup)
  return false;
#undef DO_
}

void set_lineup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.set_lineup)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // repeated uint32 _lineup = 2;
  for (int i = 0; i < this->_lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->_lineup(i), output);
  }

  // required uint32 _gs = 3;
  if (has__gs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_gs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.set_lineup)
}

::google::protobuf::uint8* set_lineup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.set_lineup)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // repeated uint32 _lineup = 2;
  for (int i = 0; i < this->_lineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->_lineup(i), target);
  }

  // required uint32 _gs = 3;
  if (has__gs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_gs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.set_lineup)
  return target;
}

int set_lineup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // required uint32 _gs = 3;
    if (has__gs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_gs());
    }

  }
  // repeated uint32 _lineup = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->_lineup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_lineup(i));
    }
    total_size += 1 * this->_lineup_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_lineup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_lineup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_lineup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_lineup::MergeFrom(const set_lineup& from) {
  GOOGLE_CHECK_NE(&from, this);
  _lineup_.MergeFrom(from._lineup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__gs()) {
      set__gs(from._gs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_lineup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_lineup::CopyFrom(const set_lineup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_lineup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void set_lineup::Swap(set_lineup* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    _lineup_.Swap(&other->_lineup_);
    std::swap(_gs_, other->_gs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_lineup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_lineup_descriptor_;
  metadata.reflection = set_lineup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int query_records::kRecordsFieldNumber;
#endif  // !_MSC_VER

query_records::query_records()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.query_records)
}

void query_records::InitAsDefaultInstance() {
}

query_records::query_records(const query_records& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.query_records)
}

void query_records::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_records::~query_records() {
  // @@protoc_insertion_point(destructor:client_baseserver.query_records)
  SharedDtor();
}

void query_records::SharedDtor() {
  if (this != default_instance_) {
  }
}

void query_records::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_records::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_records_descriptor_;
}

const query_records& query_records::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

query_records* query_records::default_instance_ = NULL;

query_records* query_records::New() const {
  return new query_records;
}

void query_records::Clear() {
  _records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_records::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.query_records)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.ladder_record _records = 1;
      case 1: {
        if (tag == 10) {
         parse__records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__records;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.query_records)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.query_records)
  return false;
#undef DO_
}

void query_records::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.query_records)
  // repeated .client_baseserver.ladder_record _records = 1;
  for (int i = 0; i < this->_records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.query_records)
}

::google::protobuf::uint8* query_records::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.query_records)
  // repeated .client_baseserver.ladder_record _records = 1;
  for (int i = 0; i < this->_records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.query_records)
  return target;
}

int query_records::ByteSize() const {
  int total_size = 0;

  // repeated .client_baseserver.ladder_record _records = 1;
  total_size += 1 * this->_records_size();
  for (int i = 0; i < this->_records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_records::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_records* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_records*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_records::MergeFrom(const query_records& from) {
  GOOGLE_CHECK_NE(&from, this);
  _records_.MergeFrom(from._records_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_records::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_records::CopyFrom(const query_records& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_records::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_records())) return false;
  return true;
}

void query_records::Swap(query_records* other) {
  if (other != this) {
    _records_.Swap(&other->_records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_records::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_records_descriptor_;
  metadata.reflection = query_records_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int query_replay::kRecordFieldNumber;
#endif  // !_MSC_VER

query_replay::query_replay()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.query_replay)
}

void query_replay::InitAsDefaultInstance() {
  _record_ = const_cast< ::client_baseserver::pvp_record*>(&::client_baseserver::pvp_record::default_instance());
}

query_replay::query_replay(const query_replay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.query_replay)
}

void query_replay::SharedCtor() {
  _cached_size_ = 0;
  _record_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_replay::~query_replay() {
  // @@protoc_insertion_point(destructor:client_baseserver.query_replay)
  SharedDtor();
}

void query_replay::SharedDtor() {
  if (this != default_instance_) {
    delete _record_;
  }
}

void query_replay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_replay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_replay_descriptor_;
}

const query_replay& query_replay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

query_replay* query_replay::default_instance_ = NULL;

query_replay* query_replay::New() const {
  return new query_replay;
}

void query_replay::Clear() {
  if (has__record()) {
    if (_record_ != NULL) _record_->::client_baseserver::pvp_record::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_replay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.query_replay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.pvp_record _record = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.query_replay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.query_replay)
  return false;
#undef DO_
}

void query_replay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.query_replay)
  // required .client_baseserver.pvp_record _record = 1;
  if (has__record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_record(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.query_replay)
}

::google::protobuf::uint8* query_replay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.query_replay)
  // required .client_baseserver.pvp_record _record = 1;
  if (has__record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_record(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.query_replay)
  return target;
}

int query_replay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.pvp_record _record = 1;
    if (has__record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_record());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_replay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_replay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_replay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_replay::MergeFrom(const query_replay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__record()) {
      mutable__record()->::client_baseserver::pvp_record::MergeFrom(from._record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_replay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_replay::CopyFrom(const query_replay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_replay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__record()) {
    if (!this->_record().IsInitialized()) return false;
  }
  return true;
}

void query_replay::Swap(query_replay* other) {
  if (other != this) {
    std::swap(_record_, other->_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_replay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_replay_descriptor_;
  metadata.reflection = query_replay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pvp_record::kCheckidFieldNumber;
const int pvp_record::kUseridFieldNumber;
const int pvp_record::kUsernameFieldNumber;
const int pvp_record::kLevelFieldNumber;
const int pvp_record::kAvatarFieldNumber;
const int pvp_record::kVipFieldNumber;
const int pvp_record::kOppoUseridFieldNumber;
const int pvp_record::kOppoNameFieldNumber;
const int pvp_record::kOppoLevelFieldNumber;
const int pvp_record::kOppoAvatarFieldNumber;
const int pvp_record::kOppoVipFieldNumber;
const int pvp_record::kOppoRobotFieldNumber;
const int pvp_record::kResultFieldNumber;
const int pvp_record::kSelfHeroesFieldNumber;
const int pvp_record::kSelfDynasFieldNumber;
const int pvp_record::kOppoHeroesFieldNumber;
const int pvp_record::kOppoDynasFieldNumber;
const int pvp_record::kRseedFieldNumber;
const int pvp_record::kSelfRobotFieldNumber;
const int pvp_record::kParam1FieldNumber;
const int pvp_record::kOperationsFieldNumber;
#endif  // !_MSC_VER

pvp_record::pvp_record()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.pvp_record)
}

void pvp_record::InitAsDefaultInstance() {
}

pvp_record::pvp_record(const pvp_record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.pvp_record)
}

void pvp_record::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _checkid_ = 0u;
  _userid_ = 0u;
  _username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _level_ = 0u;
  _avatar_ = 0u;
  _vip_ = 0u;
  _oppo_userid_ = 0u;
  _oppo_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _oppo_level_ = 0u;
  _oppo_avatar_ = 0u;
  _oppo_vip_ = 0u;
  _oppo_robot_ = 0u;
  _result_ = 0;
  _rseed_ = 0u;
  _self_robot_ = 0u;
  _param1_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pvp_record::~pvp_record() {
  // @@protoc_insertion_point(destructor:client_baseserver.pvp_record)
  SharedDtor();
}

void pvp_record::SharedDtor() {
  if (_username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _username_;
  }
  if (_oppo_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _oppo_name_;
  }
  if (this != default_instance_) {
  }
}

void pvp_record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pvp_record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pvp_record_descriptor_;
}

const pvp_record& pvp_record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

pvp_record* pvp_record::default_instance_ = NULL;

pvp_record* pvp_record::New() const {
  return new pvp_record;
}

void pvp_record::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pvp_record*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(_checkid_, _userid_);
    ZR_(_level_, _oppo_userid_);
    if (has__username()) {
      if (_username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _username_->clear();
      }
    }
    if (has__oppo_name()) {
      if (_oppo_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _oppo_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(_oppo_level_, _oppo_robot_);
    _result_ = 0;
  }
  if (_has_bits_[16 / 32] & 917504) {
    ZR_(_self_robot_, _param1_);
    _rseed_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _self_heroes_.Clear();
  _self_dynas_.Clear();
  _oppo_heroes_.Clear();
  _oppo_dynas_.Clear();
  _operations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pvp_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.pvp_record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _checkid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_checkid_)));
          set_has__checkid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__userid;
        break;
      }

      // required uint32 _userid = 2;
      case 2: {
        if (tag == 16) {
         parse__userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_userid_)));
          set_has__userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__username;
        break;
      }

      // optional string _username = 3;
      case 3: {
        if (tag == 26) {
         parse__username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_username().data(), this->_username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__level;
        break;
      }

      // optional uint32 _level = 4;
      case 4: {
        if (tag == 32) {
         parse__level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_level_)));
          set_has__level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__avatar;
        break;
      }

      // optional uint32 _avatar = 5;
      case 5: {
        if (tag == 40) {
         parse__avatar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_avatar_)));
          set_has__avatar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse__vip;
        break;
      }

      // optional uint32 _vip = 6;
      case 6: {
        if (tag == 48) {
         parse__vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_vip_)));
          set_has__vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse__oppo_userid;
        break;
      }

      // required uint32 _oppo_userid = 7;
      case 7: {
        if (tag == 56) {
         parse__oppo_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_oppo_userid_)));
          set_has__oppo_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse__oppo_name;
        break;
      }

      // optional string _oppo_name = 8;
      case 8: {
        if (tag == 66) {
         parse__oppo_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__oppo_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_oppo_name().data(), this->_oppo_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_oppo_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse__oppo_level;
        break;
      }

      // optional uint32 _oppo_level = 9;
      case 9: {
        if (tag == 72) {
         parse__oppo_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_oppo_level_)));
          set_has__oppo_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse__oppo_avatar;
        break;
      }

      // optional uint32 _oppo_avatar = 10;
      case 10: {
        if (tag == 80) {
         parse__oppo_avatar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_oppo_avatar_)));
          set_has__oppo_avatar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse__oppo_vip;
        break;
      }

      // optional uint32 _oppo_vip = 11;
      case 11: {
        if (tag == 88) {
         parse__oppo_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_oppo_vip_)));
          set_has__oppo_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse__oppo_robot;
        break;
      }

      // optional uint32 _oppo_robot = 12;
      case 12: {
        if (tag == 96) {
         parse__oppo_robot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_oppo_robot_)));
          set_has__oppo_robot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse__result;
        break;
      }

      // optional .client_baseserver.battle_result _result = 13 [default = victory];
      case 13: {
        if (tag == 104) {
         parse__result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::battle_result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::battle_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse__self_heroes;
        break;
      }

      // repeated .client_baseserver.hero _self_heroes = 14;
      case 14: {
        if (tag == 114) {
         parse__self_heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__self_heroes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse__self_heroes;
        if (input->ExpectTag(122)) goto parse__self_dynas;
        break;
      }

      // repeated .client_baseserver.hero_dyna _self_dynas = 15;
      case 15: {
        if (tag == 122) {
         parse__self_dynas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__self_dynas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse__self_dynas;
        if (input->ExpectTag(130)) goto parse__oppo_heroes;
        break;
      }

      // repeated .client_baseserver.hero _oppo_heroes = 16;
      case 16: {
        if (tag == 130) {
         parse__oppo_heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__oppo_heroes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse__oppo_heroes;
        if (input->ExpectTag(138)) goto parse__oppo_dynas;
        break;
      }

      // repeated .client_baseserver.hero_dyna _oppo_dynas = 17;
      case 17: {
        if (tag == 138) {
         parse__oppo_dynas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__oppo_dynas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse__oppo_dynas;
        if (input->ExpectTag(144)) goto parse__rseed;
        break;
      }

      // required uint32 _rseed = 18;
      case 18: {
        if (tag == 144) {
         parse__rseed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_rseed_)));
          set_has__rseed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse__self_robot;
        break;
      }

      // optional uint32 _self_robot = 19;
      case 19: {
        if (tag == 152) {
         parse__self_robot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_self_robot_)));
          set_has__self_robot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse__param1;
        break;
      }

      // optional uint32 _param1 = 20;
      case 20: {
        if (tag == 160) {
         parse__param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_param1_)));
          set_has__param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse__operations;
        break;
      }

      // repeated uint32 _operations = 21;
      case 21: {
        if (tag == 168) {
         parse__operations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 168, input, this->mutable__operations())));
        } else if (tag == 170) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__operations())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse__operations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.pvp_record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.pvp_record)
  return false;
#undef DO_
}

void pvp_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.pvp_record)
  // required uint32 _checkid = 1;
  if (has__checkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_checkid(), output);
  }

  // required uint32 _userid = 2;
  if (has__userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_userid(), output);
  }

  // optional string _username = 3;
  if (has__username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_username().data(), this->_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->_username(), output);
  }

  // optional uint32 _level = 4;
  if (has__level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_level(), output);
  }

  // optional uint32 _avatar = 5;
  if (has__avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_avatar(), output);
  }

  // optional uint32 _vip = 6;
  if (has__vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_vip(), output);
  }

  // required uint32 _oppo_userid = 7;
  if (has__oppo_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->_oppo_userid(), output);
  }

  // optional string _oppo_name = 8;
  if (has__oppo_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_oppo_name().data(), this->_oppo_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_oppo_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->_oppo_name(), output);
  }

  // optional uint32 _oppo_level = 9;
  if (has__oppo_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->_oppo_level(), output);
  }

  // optional uint32 _oppo_avatar = 10;
  if (has__oppo_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->_oppo_avatar(), output);
  }

  // optional uint32 _oppo_vip = 11;
  if (has__oppo_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->_oppo_vip(), output);
  }

  // optional uint32 _oppo_robot = 12;
  if (has__oppo_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->_oppo_robot(), output);
  }

  // optional .client_baseserver.battle_result _result = 13 [default = victory];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->_result(), output);
  }

  // repeated .client_baseserver.hero _self_heroes = 14;
  for (int i = 0; i < this->_self_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_self_heroes(i), output);
  }

  // repeated .client_baseserver.hero_dyna _self_dynas = 15;
  for (int i = 0; i < this->_self_dynas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_self_dynas(i), output);
  }

  // repeated .client_baseserver.hero _oppo_heroes = 16;
  for (int i = 0; i < this->_oppo_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_oppo_heroes(i), output);
  }

  // repeated .client_baseserver.hero_dyna _oppo_dynas = 17;
  for (int i = 0; i < this->_oppo_dynas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_oppo_dynas(i), output);
  }

  // required uint32 _rseed = 18;
  if (has__rseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->_rseed(), output);
  }

  // optional uint32 _self_robot = 19;
  if (has__self_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->_self_robot(), output);
  }

  // optional uint32 _param1 = 20;
  if (has__param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->_param1(), output);
  }

  // repeated uint32 _operations = 21;
  for (int i = 0; i < this->_operations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      21, this->_operations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.pvp_record)
}

::google::protobuf::uint8* pvp_record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.pvp_record)
  // required uint32 _checkid = 1;
  if (has__checkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_checkid(), target);
  }

  // required uint32 _userid = 2;
  if (has__userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_userid(), target);
  }

  // optional string _username = 3;
  if (has__username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_username().data(), this->_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->_username(), target);
  }

  // optional uint32 _level = 4;
  if (has__level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_level(), target);
  }

  // optional uint32 _avatar = 5;
  if (has__avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_avatar(), target);
  }

  // optional uint32 _vip = 6;
  if (has__vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_vip(), target);
  }

  // required uint32 _oppo_userid = 7;
  if (has__oppo_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->_oppo_userid(), target);
  }

  // optional string _oppo_name = 8;
  if (has__oppo_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_oppo_name().data(), this->_oppo_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_oppo_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->_oppo_name(), target);
  }

  // optional uint32 _oppo_level = 9;
  if (has__oppo_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->_oppo_level(), target);
  }

  // optional uint32 _oppo_avatar = 10;
  if (has__oppo_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->_oppo_avatar(), target);
  }

  // optional uint32 _oppo_vip = 11;
  if (has__oppo_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->_oppo_vip(), target);
  }

  // optional uint32 _oppo_robot = 12;
  if (has__oppo_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->_oppo_robot(), target);
  }

  // optional .client_baseserver.battle_result _result = 13 [default = victory];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->_result(), target);
  }

  // repeated .client_baseserver.hero _self_heroes = 14;
  for (int i = 0; i < this->_self_heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->_self_heroes(i), target);
  }

  // repeated .client_baseserver.hero_dyna _self_dynas = 15;
  for (int i = 0; i < this->_self_dynas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->_self_dynas(i), target);
  }

  // repeated .client_baseserver.hero _oppo_heroes = 16;
  for (int i = 0; i < this->_oppo_heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->_oppo_heroes(i), target);
  }

  // repeated .client_baseserver.hero_dyna _oppo_dynas = 17;
  for (int i = 0; i < this->_oppo_dynas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->_oppo_dynas(i), target);
  }

  // required uint32 _rseed = 18;
  if (has__rseed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->_rseed(), target);
  }

  // optional uint32 _self_robot = 19;
  if (has__self_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->_self_robot(), target);
  }

  // optional uint32 _param1 = 20;
  if (has__param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->_param1(), target);
  }

  // repeated uint32 _operations = 21;
  for (int i = 0; i < this->_operations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(21, this->_operations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.pvp_record)
  return target;
}

int pvp_record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _checkid = 1;
    if (has__checkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_checkid());
    }

    // required uint32 _userid = 2;
    if (has__userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_userid());
    }

    // optional string _username = 3;
    if (has__username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_username());
    }

    // optional uint32 _level = 4;
    if (has__level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_level());
    }

    // optional uint32 _avatar = 5;
    if (has__avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_avatar());
    }

    // optional uint32 _vip = 6;
    if (has__vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_vip());
    }

    // required uint32 _oppo_userid = 7;
    if (has__oppo_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_oppo_userid());
    }

    // optional string _oppo_name = 8;
    if (has__oppo_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_oppo_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 _oppo_level = 9;
    if (has__oppo_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_oppo_level());
    }

    // optional uint32 _oppo_avatar = 10;
    if (has__oppo_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_oppo_avatar());
    }

    // optional uint32 _oppo_vip = 11;
    if (has__oppo_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_oppo_vip());
    }

    // optional uint32 _oppo_robot = 12;
    if (has__oppo_robot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_oppo_robot());
    }

    // optional .client_baseserver.battle_result _result = 13 [default = victory];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // required uint32 _rseed = 18;
    if (has__rseed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_rseed());
    }

    // optional uint32 _self_robot = 19;
    if (has__self_robot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_self_robot());
    }

    // optional uint32 _param1 = 20;
    if (has__param1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_param1());
    }

  }
  // repeated .client_baseserver.hero _self_heroes = 14;
  total_size += 1 * this->_self_heroes_size();
  for (int i = 0; i < this->_self_heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_self_heroes(i));
  }

  // repeated .client_baseserver.hero_dyna _self_dynas = 15;
  total_size += 1 * this->_self_dynas_size();
  for (int i = 0; i < this->_self_dynas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_self_dynas(i));
  }

  // repeated .client_baseserver.hero _oppo_heroes = 16;
  total_size += 2 * this->_oppo_heroes_size();
  for (int i = 0; i < this->_oppo_heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_oppo_heroes(i));
  }

  // repeated .client_baseserver.hero_dyna _oppo_dynas = 17;
  total_size += 2 * this->_oppo_dynas_size();
  for (int i = 0; i < this->_oppo_dynas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_oppo_dynas(i));
  }

  // repeated uint32 _operations = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->_operations_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_operations(i));
    }
    total_size += 2 * this->_operations_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pvp_record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pvp_record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pvp_record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pvp_record::MergeFrom(const pvp_record& from) {
  GOOGLE_CHECK_NE(&from, this);
  _self_heroes_.MergeFrom(from._self_heroes_);
  _self_dynas_.MergeFrom(from._self_dynas_);
  _oppo_heroes_.MergeFrom(from._oppo_heroes_);
  _oppo_dynas_.MergeFrom(from._oppo_dynas_);
  _operations_.MergeFrom(from._operations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__checkid()) {
      set__checkid(from._checkid());
    }
    if (from.has__userid()) {
      set__userid(from._userid());
    }
    if (from.has__username()) {
      set__username(from._username());
    }
    if (from.has__level()) {
      set__level(from._level());
    }
    if (from.has__avatar()) {
      set__avatar(from._avatar());
    }
    if (from.has__vip()) {
      set__vip(from._vip());
    }
    if (from.has__oppo_userid()) {
      set__oppo_userid(from._oppo_userid());
    }
    if (from.has__oppo_name()) {
      set__oppo_name(from._oppo_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has__oppo_level()) {
      set__oppo_level(from._oppo_level());
    }
    if (from.has__oppo_avatar()) {
      set__oppo_avatar(from._oppo_avatar());
    }
    if (from.has__oppo_vip()) {
      set__oppo_vip(from._oppo_vip());
    }
    if (from.has__oppo_robot()) {
      set__oppo_robot(from._oppo_robot());
    }
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has__rseed()) {
      set__rseed(from._rseed());
    }
    if (from.has__self_robot()) {
      set__self_robot(from._self_robot());
    }
    if (from.has__param1()) {
      set__param1(from._param1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pvp_record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pvp_record::CopyFrom(const pvp_record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pvp_record::IsInitialized() const {
  if ((_has_bits_[0] & 0x00020043) != 0x00020043) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_self_heroes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->_self_dynas())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->_oppo_heroes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->_oppo_dynas())) return false;
  return true;
}

void pvp_record::Swap(pvp_record* other) {
  if (other != this) {
    std::swap(_checkid_, other->_checkid_);
    std::swap(_userid_, other->_userid_);
    std::swap(_username_, other->_username_);
    std::swap(_level_, other->_level_);
    std::swap(_avatar_, other->_avatar_);
    std::swap(_vip_, other->_vip_);
    std::swap(_oppo_userid_, other->_oppo_userid_);
    std::swap(_oppo_name_, other->_oppo_name_);
    std::swap(_oppo_level_, other->_oppo_level_);
    std::swap(_oppo_avatar_, other->_oppo_avatar_);
    std::swap(_oppo_vip_, other->_oppo_vip_);
    std::swap(_oppo_robot_, other->_oppo_robot_);
    std::swap(_result_, other->_result_);
    _self_heroes_.Swap(&other->_self_heroes_);
    _self_dynas_.Swap(&other->_self_dynas_);
    _oppo_heroes_.Swap(&other->_oppo_heroes_);
    _oppo_dynas_.Swap(&other->_oppo_dynas_);
    std::swap(_rseed_, other->_rseed_);
    std::swap(_self_robot_, other->_self_robot_);
    std::swap(_param1_, other->_param1_);
    _operations_.Swap(&other->_operations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pvp_record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pvp_record_descriptor_;
  metadata.reflection = pvp_record_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int query_rankboard::kRankListFieldNumber;
const int query_rankboard::kSelfRankFieldNumber;
const int query_rankboard::kPosFieldNumber;
const int query_rankboard::kPrevPosFieldNumber;
#endif  // !_MSC_VER

query_rankboard::query_rankboard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.query_rankboard)
}

void query_rankboard::InitAsDefaultInstance() {
  _self_rank_ = const_cast< ::client_baseserver::rankboard_data*>(&::client_baseserver::rankboard_data::default_instance());
}

query_rankboard::query_rankboard(const query_rankboard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.query_rankboard)
}

void query_rankboard::SharedCtor() {
  _cached_size_ = 0;
  _self_rank_ = NULL;
  _pos_ = 0u;
  _prev_pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_rankboard::~query_rankboard() {
  // @@protoc_insertion_point(destructor:client_baseserver.query_rankboard)
  SharedDtor();
}

void query_rankboard::SharedDtor() {
  if (this != default_instance_) {
    delete _self_rank_;
  }
}

void query_rankboard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_rankboard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_rankboard_descriptor_;
}

const query_rankboard& query_rankboard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

query_rankboard* query_rankboard::default_instance_ = NULL;

query_rankboard* query_rankboard::New() const {
  return new query_rankboard;
}

void query_rankboard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<query_rankboard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 14) {
    ZR_(_pos_, _prev_pos_);
    if (has__self_rank()) {
      if (_self_rank_ != NULL) _self_rank_->::client_baseserver::rankboard_data::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _rank_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_rankboard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.query_rankboard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.rankboard_data _rank_list = 1;
      case 1: {
        if (tag == 10) {
         parse__rank_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__rank_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__rank_list;
        if (input->ExpectTag(18)) goto parse__self_rank;
        break;
      }

      // optional .client_baseserver.rankboard_data _self_rank = 2;
      case 2: {
        if (tag == 18) {
         parse__self_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__self_rank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__pos;
        break;
      }

      // optional uint32 _pos = 3;
      case 3: {
        if (tag == 24) {
         parse__pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_pos_)));
          set_has__pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__prev_pos;
        break;
      }

      // optional uint32 _prev_pos = 4;
      case 4: {
        if (tag == 32) {
         parse__prev_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_prev_pos_)));
          set_has__prev_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.query_rankboard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.query_rankboard)
  return false;
#undef DO_
}

void query_rankboard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.query_rankboard)
  // repeated .client_baseserver.rankboard_data _rank_list = 1;
  for (int i = 0; i < this->_rank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_rank_list(i), output);
  }

  // optional .client_baseserver.rankboard_data _self_rank = 2;
  if (has__self_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_self_rank(), output);
  }

  // optional uint32 _pos = 3;
  if (has__pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_pos(), output);
  }

  // optional uint32 _prev_pos = 4;
  if (has__prev_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_prev_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.query_rankboard)
}

::google::protobuf::uint8* query_rankboard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.query_rankboard)
  // repeated .client_baseserver.rankboard_data _rank_list = 1;
  for (int i = 0; i < this->_rank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_rank_list(i), target);
  }

  // optional .client_baseserver.rankboard_data _self_rank = 2;
  if (has__self_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_self_rank(), target);
  }

  // optional uint32 _pos = 3;
  if (has__pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_pos(), target);
  }

  // optional uint32 _prev_pos = 4;
  if (has__prev_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_prev_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.query_rankboard)
  return target;
}

int query_rankboard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .client_baseserver.rankboard_data _self_rank = 2;
    if (has__self_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_self_rank());
    }

    // optional uint32 _pos = 3;
    if (has__pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_pos());
    }

    // optional uint32 _prev_pos = 4;
    if (has__prev_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_prev_pos());
    }

  }
  // repeated .client_baseserver.rankboard_data _rank_list = 1;
  total_size += 1 * this->_rank_list_size();
  for (int i = 0; i < this->_rank_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_rank_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_rankboard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_rankboard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_rankboard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_rankboard::MergeFrom(const query_rankboard& from) {
  GOOGLE_CHECK_NE(&from, this);
  _rank_list_.MergeFrom(from._rank_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__self_rank()) {
      mutable__self_rank()->::client_baseserver::rankboard_data::MergeFrom(from._self_rank());
    }
    if (from.has__pos()) {
      set__pos(from._pos());
    }
    if (from.has__prev_pos()) {
      set__prev_pos(from._prev_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_rankboard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_rankboard::CopyFrom(const query_rankboard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_rankboard::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_rank_list())) return false;
  if (has__self_rank()) {
    if (!this->_self_rank().IsInitialized()) return false;
  }
  return true;
}

void query_rankboard::Swap(query_rankboard* other) {
  if (other != this) {
    _rank_list_.Swap(&other->_rank_list_);
    std::swap(_self_rank_, other->_self_rank_);
    std::swap(_pos_, other->_pos_);
    std::swap(_prev_pos_, other->_prev_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_rankboard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_rankboard_descriptor_;
  metadata.reflection = query_rankboard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int query_oppo_info::kUserFieldNumber;
#endif  // !_MSC_VER

query_oppo_info::query_oppo_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.query_oppo_info)
}

void query_oppo_info::InitAsDefaultInstance() {
  _user_ = const_cast< ::client_baseserver::ladder_opponent*>(&::client_baseserver::ladder_opponent::default_instance());
}

query_oppo_info::query_oppo_info(const query_oppo_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.query_oppo_info)
}

void query_oppo_info::SharedCtor() {
  _cached_size_ = 0;
  _user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_oppo_info::~query_oppo_info() {
  // @@protoc_insertion_point(destructor:client_baseserver.query_oppo_info)
  SharedDtor();
}

void query_oppo_info::SharedDtor() {
  if (this != default_instance_) {
    delete _user_;
  }
}

void query_oppo_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_oppo_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_oppo_info_descriptor_;
}

const query_oppo_info& query_oppo_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

query_oppo_info* query_oppo_info::default_instance_ = NULL;

query_oppo_info* query_oppo_info::New() const {
  return new query_oppo_info;
}

void query_oppo_info::Clear() {
  if (has__user()) {
    if (_user_ != NULL) _user_->::client_baseserver::ladder_opponent::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_oppo_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.query_oppo_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.ladder_opponent _user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.query_oppo_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.query_oppo_info)
  return false;
#undef DO_
}

void query_oppo_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.query_oppo_info)
  // required .client_baseserver.ladder_opponent _user = 1;
  if (has__user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.query_oppo_info)
}

::google::protobuf::uint8* query_oppo_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.query_oppo_info)
  // required .client_baseserver.ladder_opponent _user = 1;
  if (has__user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.query_oppo_info)
  return target;
}

int query_oppo_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.ladder_opponent _user = 1;
    if (has__user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_oppo_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_oppo_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_oppo_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_oppo_info::MergeFrom(const query_oppo_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__user()) {
      mutable__user()->::client_baseserver::ladder_opponent::MergeFrom(from._user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_oppo_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_oppo_info::CopyFrom(const query_oppo_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_oppo_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__user()) {
    if (!this->_user().IsInitialized()) return false;
  }
  return true;
}

void query_oppo_info::Swap(query_oppo_info* other) {
  if (other != this) {
    std::swap(_user_, other->_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_oppo_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_oppo_info_descriptor_;
  metadata.reflection = query_oppo_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int clear_battle_cd::kResultFieldNumber;
#endif  // !_MSC_VER

clear_battle_cd::clear_battle_cd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.clear_battle_cd)
}

void clear_battle_cd::InitAsDefaultInstance() {
}

clear_battle_cd::clear_battle_cd(const clear_battle_cd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.clear_battle_cd)
}

void clear_battle_cd::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

clear_battle_cd::~clear_battle_cd() {
  // @@protoc_insertion_point(destructor:client_baseserver.clear_battle_cd)
  SharedDtor();
}

void clear_battle_cd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void clear_battle_cd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* clear_battle_cd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return clear_battle_cd_descriptor_;
}

const clear_battle_cd& clear_battle_cd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

clear_battle_cd* clear_battle_cd::default_instance_ = NULL;

clear_battle_cd* clear_battle_cd::New() const {
  return new clear_battle_cd;
}

void clear_battle_cd::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool clear_battle_cd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.clear_battle_cd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.clear_battle_cd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.clear_battle_cd)
  return false;
#undef DO_
}

void clear_battle_cd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.clear_battle_cd)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.clear_battle_cd)
}

::google::protobuf::uint8* clear_battle_cd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.clear_battle_cd)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.clear_battle_cd)
  return target;
}

int clear_battle_cd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void clear_battle_cd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const clear_battle_cd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const clear_battle_cd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void clear_battle_cd::MergeFrom(const clear_battle_cd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void clear_battle_cd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void clear_battle_cd::CopyFrom(const clear_battle_cd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool clear_battle_cd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void clear_battle_cd::Swap(clear_battle_cd* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata clear_battle_cd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = clear_battle_cd_descriptor_;
  metadata.reflection = clear_battle_cd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rankboard_data::kUserIdFieldNumber;
const int rankboard_data::kSummaryFieldNumber;
#endif  // !_MSC_VER

rankboard_data::rankboard_data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.rankboard_data)
}

void rankboard_data::InitAsDefaultInstance() {
  _summary_ = const_cast< ::client_baseserver::user_summary*>(&::client_baseserver::user_summary::default_instance());
}

rankboard_data::rankboard_data(const rankboard_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.rankboard_data)
}

void rankboard_data::SharedCtor() {
  _cached_size_ = 0;
  _user_id_ = 0u;
  _summary_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rankboard_data::~rankboard_data() {
  // @@protoc_insertion_point(destructor:client_baseserver.rankboard_data)
  SharedDtor();
}

void rankboard_data::SharedDtor() {
  if (this != default_instance_) {
    delete _summary_;
  }
}

void rankboard_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rankboard_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rankboard_data_descriptor_;
}

const rankboard_data& rankboard_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

rankboard_data* rankboard_data::default_instance_ = NULL;

rankboard_data* rankboard_data::New() const {
  return new rankboard_data;
}

void rankboard_data::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _user_id_ = 0u;
    if (has__summary()) {
      if (_summary_ != NULL) _summary_->::client_baseserver::user_summary::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rankboard_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.rankboard_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_user_id_)));
          set_has__user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__summary;
        break;
      }

      // optional .client_baseserver.user_summary _summary = 2;
      case 2: {
        if (tag == 18) {
         parse__summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.rankboard_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.rankboard_data)
  return false;
#undef DO_
}

void rankboard_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.rankboard_data)
  // required uint32 _user_id = 1;
  if (has__user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_user_id(), output);
  }

  // optional .client_baseserver.user_summary _summary = 2;
  if (has__summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_summary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.rankboard_data)
}

::google::protobuf::uint8* rankboard_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.rankboard_data)
  // required uint32 _user_id = 1;
  if (has__user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_user_id(), target);
  }

  // optional .client_baseserver.user_summary _summary = 2;
  if (has__summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_summary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.rankboard_data)
  return target;
}

int rankboard_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _user_id = 1;
    if (has__user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_user_id());
    }

    // optional .client_baseserver.user_summary _summary = 2;
    if (has__summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_summary());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rankboard_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rankboard_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rankboard_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rankboard_data::MergeFrom(const rankboard_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__user_id()) {
      set__user_id(from._user_id());
    }
    if (from.has__summary()) {
      mutable__summary()->::client_baseserver::user_summary::MergeFrom(from._summary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rankboard_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rankboard_data::CopyFrom(const rankboard_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rankboard_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__summary()) {
    if (!this->_summary().IsInitialized()) return false;
  }
  return true;
}

void rankboard_data::Swap(rankboard_data* other) {
  if (other != this) {
    std::swap(_user_id_, other->_user_id_);
    std::swap(_summary_, other->_summary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rankboard_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rankboard_data_descriptor_;
  metadata.reflection = rankboard_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ladder_record::kUserIdFieldNumber;
const int ladder_record::kSummaryFieldNumber;
const int ladder_record::kDetaRankFieldNumber;
const int ladder_record::kBtTimeFieldNumber;
const int ladder_record::kBtResultFieldNumber;
const int ladder_record::kReplayIdFieldNumber;
#endif  // !_MSC_VER

ladder_record::ladder_record()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.ladder_record)
}

void ladder_record::InitAsDefaultInstance() {
  _summary_ = const_cast< ::client_baseserver::user_summary*>(&::client_baseserver::user_summary::default_instance());
}

ladder_record::ladder_record(const ladder_record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.ladder_record)
}

void ladder_record::SharedCtor() {
  _cached_size_ = 0;
  _user_id_ = 0u;
  _summary_ = NULL;
  _deta_rank_ = 0u;
  _bt_time_ = 0u;
  _bt_result_ = 0;
  _replay_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ladder_record::~ladder_record() {
  // @@protoc_insertion_point(destructor:client_baseserver.ladder_record)
  SharedDtor();
}

void ladder_record::SharedDtor() {
  if (this != default_instance_) {
    delete _summary_;
  }
}

void ladder_record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ladder_record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ladder_record_descriptor_;
}

const ladder_record& ladder_record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

ladder_record* ladder_record::default_instance_ = NULL;

ladder_record* ladder_record::New() const {
  return new ladder_record;
}

void ladder_record::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ladder_record*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(_user_id_, _replay_id_);
    if (has__summary()) {
      if (_summary_ != NULL) _summary_->::client_baseserver::user_summary::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ladder_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.ladder_record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_user_id_)));
          set_has__user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__summary;
        break;
      }

      // required .client_baseserver.user_summary _summary = 2;
      case 2: {
        if (tag == 18) {
         parse__summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__deta_rank;
        break;
      }

      // required uint32 _deta_rank = 3;
      case 3: {
        if (tag == 24) {
         parse__deta_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_deta_rank_)));
          set_has__deta_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__bt_time;
        break;
      }

      // required uint32 _bt_time = 4;
      case 4: {
        if (tag == 32) {
         parse__bt_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_bt_time_)));
          set_has__bt_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__bt_result;
        break;
      }

      // required .client_baseserver.battle_result _bt_result = 5;
      case 5: {
        if (tag == 40) {
         parse__bt_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::battle_result_IsValid(value)) {
            set__bt_result(static_cast< ::client_baseserver::battle_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse__replay_id;
        break;
      }

      // required uint32 _replay_id = 6;
      case 6: {
        if (tag == 48) {
         parse__replay_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_replay_id_)));
          set_has__replay_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.ladder_record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.ladder_record)
  return false;
#undef DO_
}

void ladder_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.ladder_record)
  // required uint32 _user_id = 1;
  if (has__user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_user_id(), output);
  }

  // required .client_baseserver.user_summary _summary = 2;
  if (has__summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_summary(), output);
  }

  // required uint32 _deta_rank = 3;
  if (has__deta_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_deta_rank(), output);
  }

  // required uint32 _bt_time = 4;
  if (has__bt_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_bt_time(), output);
  }

  // required .client_baseserver.battle_result _bt_result = 5;
  if (has__bt_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->_bt_result(), output);
  }

  // required uint32 _replay_id = 6;
  if (has__replay_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_replay_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.ladder_record)
}

::google::protobuf::uint8* ladder_record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.ladder_record)
  // required uint32 _user_id = 1;
  if (has__user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_user_id(), target);
  }

  // required .client_baseserver.user_summary _summary = 2;
  if (has__summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_summary(), target);
  }

  // required uint32 _deta_rank = 3;
  if (has__deta_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_deta_rank(), target);
  }

  // required uint32 _bt_time = 4;
  if (has__bt_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_bt_time(), target);
  }

  // required .client_baseserver.battle_result _bt_result = 5;
  if (has__bt_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->_bt_result(), target);
  }

  // required uint32 _replay_id = 6;
  if (has__replay_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_replay_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.ladder_record)
  return target;
}

int ladder_record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _user_id = 1;
    if (has__user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_user_id());
    }

    // required .client_baseserver.user_summary _summary = 2;
    if (has__summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_summary());
    }

    // required uint32 _deta_rank = 3;
    if (has__deta_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_deta_rank());
    }

    // required uint32 _bt_time = 4;
    if (has__bt_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_bt_time());
    }

    // required .client_baseserver.battle_result _bt_result = 5;
    if (has__bt_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_bt_result());
    }

    // required uint32 _replay_id = 6;
    if (has__replay_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_replay_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ladder_record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ladder_record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ladder_record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ladder_record::MergeFrom(const ladder_record& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__user_id()) {
      set__user_id(from._user_id());
    }
    if (from.has__summary()) {
      mutable__summary()->::client_baseserver::user_summary::MergeFrom(from._summary());
    }
    if (from.has__deta_rank()) {
      set__deta_rank(from._deta_rank());
    }
    if (from.has__bt_time()) {
      set__bt_time(from._bt_time());
    }
    if (from.has__bt_result()) {
      set__bt_result(from._bt_result());
    }
    if (from.has__replay_id()) {
      set__replay_id(from._replay_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ladder_record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ladder_record::CopyFrom(const ladder_record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ladder_record::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has__summary()) {
    if (!this->_summary().IsInitialized()) return false;
  }
  return true;
}

void ladder_record::Swap(ladder_record* other) {
  if (other != this) {
    std::swap(_user_id_, other->_user_id_);
    std::swap(_summary_, other->_summary_);
    std::swap(_deta_rank_, other->_deta_rank_);
    std::swap(_bt_time_, other->_bt_time_);
    std::swap(_bt_result_, other->_bt_result_);
    std::swap(_replay_id_, other->_replay_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ladder_record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ladder_record_descriptor_;
  metadata.reflection = ladder_record_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ladder_opponent::kUserIdFieldNumber;
const int ladder_opponent::kSummaryFieldNumber;
const int ladder_opponent::kRankFieldNumber;
const int ladder_opponent::kWinCntFieldNumber;
const int ladder_opponent::kGsFieldNumber;
const int ladder_opponent::kIsRobotFieldNumber;
const int ladder_opponent::kHerosFieldNumber;
#endif  // !_MSC_VER

ladder_opponent::ladder_opponent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.ladder_opponent)
}

void ladder_opponent::InitAsDefaultInstance() {
  _summary_ = const_cast< ::client_baseserver::user_summary*>(&::client_baseserver::user_summary::default_instance());
}

ladder_opponent::ladder_opponent(const ladder_opponent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.ladder_opponent)
}

void ladder_opponent::SharedCtor() {
  _cached_size_ = 0;
  _user_id_ = 0u;
  _summary_ = NULL;
  _rank_ = 0u;
  _win_cnt_ = 0u;
  _gs_ = 0u;
  _is_robot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ladder_opponent::~ladder_opponent() {
  // @@protoc_insertion_point(destructor:client_baseserver.ladder_opponent)
  SharedDtor();
}

void ladder_opponent::SharedDtor() {
  if (this != default_instance_) {
    delete _summary_;
  }
}

void ladder_opponent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ladder_opponent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ladder_opponent_descriptor_;
}

const ladder_opponent& ladder_opponent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

ladder_opponent* ladder_opponent::default_instance_ = NULL;

ladder_opponent* ladder_opponent::New() const {
  return new ladder_opponent;
}

void ladder_opponent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ladder_opponent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(_user_id_, _gs_);
    if (has__summary()) {
      if (_summary_ != NULL) _summary_->::client_baseserver::user_summary::Clear();
    }
    _is_robot_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ladder_opponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.ladder_opponent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_user_id_)));
          set_has__user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__summary;
        break;
      }

      // required .client_baseserver.user_summary _summary = 2;
      case 2: {
        if (tag == 18) {
         parse__summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__rank;
        break;
      }

      // required uint32 _rank = 3;
      case 3: {
        if (tag == 24) {
         parse__rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_rank_)));
          set_has__rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__win_cnt;
        break;
      }

      // required uint32 _win_cnt = 4;
      case 4: {
        if (tag == 32) {
         parse__win_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_win_cnt_)));
          set_has__win_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__gs;
        break;
      }

      // required uint32 _gs = 5;
      case 5: {
        if (tag == 40) {
         parse__gs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_gs_)));
          set_has__gs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse__is_robot;
        break;
      }

      // required uint32 _is_robot = 6;
      case 6: {
        if (tag == 48) {
         parse__is_robot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_is_robot_)));
          set_has__is_robot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse__heros;
        break;
      }

      // repeated .client_baseserver.hero_summary _heros = 7;
      case 7: {
        if (tag == 58) {
         parse__heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__heros()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse__heros;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.ladder_opponent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.ladder_opponent)
  return false;
#undef DO_
}

void ladder_opponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.ladder_opponent)
  // required uint32 _user_id = 1;
  if (has__user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_user_id(), output);
  }

  // required .client_baseserver.user_summary _summary = 2;
  if (has__summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_summary(), output);
  }

  // required uint32 _rank = 3;
  if (has__rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_rank(), output);
  }

  // required uint32 _win_cnt = 4;
  if (has__win_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_win_cnt(), output);
  }

  // required uint32 _gs = 5;
  if (has__gs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_gs(), output);
  }

  // required uint32 _is_robot = 6;
  if (has__is_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_is_robot(), output);
  }

  // repeated .client_baseserver.hero_summary _heros = 7;
  for (int i = 0; i < this->_heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.ladder_opponent)
}

::google::protobuf::uint8* ladder_opponent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.ladder_opponent)
  // required uint32 _user_id = 1;
  if (has__user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_user_id(), target);
  }

  // required .client_baseserver.user_summary _summary = 2;
  if (has__summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_summary(), target);
  }

  // required uint32 _rank = 3;
  if (has__rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_rank(), target);
  }

  // required uint32 _win_cnt = 4;
  if (has__win_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_win_cnt(), target);
  }

  // required uint32 _gs = 5;
  if (has__gs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_gs(), target);
  }

  // required uint32 _is_robot = 6;
  if (has__is_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_is_robot(), target);
  }

  // repeated .client_baseserver.hero_summary _heros = 7;
  for (int i = 0; i < this->_heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->_heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.ladder_opponent)
  return target;
}

int ladder_opponent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _user_id = 1;
    if (has__user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_user_id());
    }

    // required .client_baseserver.user_summary _summary = 2;
    if (has__summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_summary());
    }

    // required uint32 _rank = 3;
    if (has__rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_rank());
    }

    // required uint32 _win_cnt = 4;
    if (has__win_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_win_cnt());
    }

    // required uint32 _gs = 5;
    if (has__gs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_gs());
    }

    // required uint32 _is_robot = 6;
    if (has__is_robot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_is_robot());
    }

  }
  // repeated .client_baseserver.hero_summary _heros = 7;
  total_size += 1 * this->_heros_size();
  for (int i = 0; i < this->_heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ladder_opponent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ladder_opponent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ladder_opponent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ladder_opponent::MergeFrom(const ladder_opponent& from) {
  GOOGLE_CHECK_NE(&from, this);
  _heros_.MergeFrom(from._heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__user_id()) {
      set__user_id(from._user_id());
    }
    if (from.has__summary()) {
      mutable__summary()->::client_baseserver::user_summary::MergeFrom(from._summary());
    }
    if (from.has__rank()) {
      set__rank(from._rank());
    }
    if (from.has__win_cnt()) {
      set__win_cnt(from._win_cnt());
    }
    if (from.has__gs()) {
      set__gs(from._gs());
    }
    if (from.has__is_robot()) {
      set__is_robot(from._is_robot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ladder_opponent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ladder_opponent::CopyFrom(const ladder_opponent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ladder_opponent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has__summary()) {
    if (!this->_summary().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->_heros())) return false;
  return true;
}

void ladder_opponent::Swap(ladder_opponent* other) {
  if (other != this) {
    std::swap(_user_id_, other->_user_id_);
    std::swap(_summary_, other->_summary_);
    std::swap(_rank_, other->_rank_);
    std::swap(_win_cnt_, other->_win_cnt_);
    std::swap(_gs_, other->_gs_);
    std::swap(_is_robot_, other->_is_robot_);
    _heros_.Swap(&other->_heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ladder_opponent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ladder_opponent_descriptor_;
  metadata.reflection = ladder_opponent_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ladder_rank_reward_reward_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ladder_rank_reward_reward_type_descriptor_;
}
bool ladder_rank_reward_reward_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ladder_rank_reward_reward_type ladder_rank_reward::gold;
const ladder_rank_reward_reward_type ladder_rank_reward::diamond;
const ladder_rank_reward_reward_type ladder_rank_reward::item;
const ladder_rank_reward_reward_type ladder_rank_reward::arenapoint;
const ladder_rank_reward_reward_type ladder_rank_reward::reward_type_MIN;
const ladder_rank_reward_reward_type ladder_rank_reward::reward_type_MAX;
const int ladder_rank_reward::reward_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ladder_rank_reward::kTypeFieldNumber;
const int ladder_rank_reward::kParam1FieldNumber;
const int ladder_rank_reward::kParam2FieldNumber;
#endif  // !_MSC_VER

ladder_rank_reward::ladder_rank_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.ladder_rank_reward)
}

void ladder_rank_reward::InitAsDefaultInstance() {
}

ladder_rank_reward::ladder_rank_reward(const ladder_rank_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.ladder_rank_reward)
}

void ladder_rank_reward::SharedCtor() {
  _cached_size_ = 0;
  _type_ = 1;
  _param1_ = 0u;
  _param2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ladder_rank_reward::~ladder_rank_reward() {
  // @@protoc_insertion_point(destructor:client_baseserver.ladder_rank_reward)
  SharedDtor();
}

void ladder_rank_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ladder_rank_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ladder_rank_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ladder_rank_reward_descriptor_;
}

const ladder_rank_reward& ladder_rank_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

ladder_rank_reward* ladder_rank_reward::default_instance_ = NULL;

ladder_rank_reward* ladder_rank_reward::New() const {
  return new ladder_rank_reward;
}

void ladder_rank_reward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ladder_rank_reward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(_param1_, _param2_);
    _type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ladder_rank_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.ladder_rank_reward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.ladder_rank_reward.reward_type _type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::ladder_rank_reward_reward_type_IsValid(value)) {
            set__type(static_cast< ::client_baseserver::ladder_rank_reward_reward_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__param1;
        break;
      }

      // optional uint32 _param1 = 2;
      case 2: {
        if (tag == 16) {
         parse__param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_param1_)));
          set_has__param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__param2;
        break;
      }

      // optional uint32 _param2 = 3;
      case 3: {
        if (tag == 24) {
         parse__param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_param2_)));
          set_has__param2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.ladder_rank_reward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.ladder_rank_reward)
  return false;
#undef DO_
}

void ladder_rank_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.ladder_rank_reward)
  // required .client_baseserver.ladder_rank_reward.reward_type _type = 1;
  if (has__type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_type(), output);
  }

  // optional uint32 _param1 = 2;
  if (has__param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_param1(), output);
  }

  // optional uint32 _param2 = 3;
  if (has__param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_param2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.ladder_rank_reward)
}

::google::protobuf::uint8* ladder_rank_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.ladder_rank_reward)
  // required .client_baseserver.ladder_rank_reward.reward_type _type = 1;
  if (has__type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_type(), target);
  }

  // optional uint32 _param1 = 2;
  if (has__param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_param1(), target);
  }

  // optional uint32 _param2 = 3;
  if (has__param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_param2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.ladder_rank_reward)
  return target;
}

int ladder_rank_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.ladder_rank_reward.reward_type _type = 1;
    if (has__type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_type());
    }

    // optional uint32 _param1 = 2;
    if (has__param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_param1());
    }

    // optional uint32 _param2 = 3;
    if (has__param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_param2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ladder_rank_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ladder_rank_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ladder_rank_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ladder_rank_reward::MergeFrom(const ladder_rank_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__type()) {
      set__type(from._type());
    }
    if (from.has__param1()) {
      set__param1(from._param1());
    }
    if (from.has__param2()) {
      set__param2(from._param2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ladder_rank_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ladder_rank_reward::CopyFrom(const ladder_rank_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ladder_rank_reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ladder_rank_reward::Swap(ladder_rank_reward* other) {
  if (other != this) {
    std::swap(_type_, other->_type_);
    std::swap(_param1_, other->_param1_);
    std::swap(_param2_, other->_param2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ladder_rank_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ladder_rank_reward_descriptor_;
  metadata.reflection = ladder_rank_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int draw_rank_reward::kRewardsFieldNumber;
#endif  // !_MSC_VER

draw_rank_reward::draw_rank_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.draw_rank_reward)
}

void draw_rank_reward::InitAsDefaultInstance() {
}

draw_rank_reward::draw_rank_reward(const draw_rank_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.draw_rank_reward)
}

void draw_rank_reward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

draw_rank_reward::~draw_rank_reward() {
  // @@protoc_insertion_point(destructor:client_baseserver.draw_rank_reward)
  SharedDtor();
}

void draw_rank_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void draw_rank_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* draw_rank_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return draw_rank_reward_descriptor_;
}

const draw_rank_reward& draw_rank_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

draw_rank_reward* draw_rank_reward::default_instance_ = NULL;

draw_rank_reward* draw_rank_reward::New() const {
  return new draw_rank_reward;
}

void draw_rank_reward::Clear() {
  _rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool draw_rank_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.draw_rank_reward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.ladder_rank_reward _rewards = 1;
      case 1: {
        if (tag == 10) {
         parse__rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.draw_rank_reward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.draw_rank_reward)
  return false;
#undef DO_
}

void draw_rank_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.draw_rank_reward)
  // repeated .client_baseserver.ladder_rank_reward _rewards = 1;
  for (int i = 0; i < this->_rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.draw_rank_reward)
}

::google::protobuf::uint8* draw_rank_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.draw_rank_reward)
  // repeated .client_baseserver.ladder_rank_reward _rewards = 1;
  for (int i = 0; i < this->_rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.draw_rank_reward)
  return target;
}

int draw_rank_reward::ByteSize() const {
  int total_size = 0;

  // repeated .client_baseserver.ladder_rank_reward _rewards = 1;
  total_size += 1 * this->_rewards_size();
  for (int i = 0; i < this->_rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void draw_rank_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const draw_rank_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const draw_rank_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void draw_rank_reward::MergeFrom(const draw_rank_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  _rewards_.MergeFrom(from._rewards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void draw_rank_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void draw_rank_reward::CopyFrom(const draw_rank_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool draw_rank_reward::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_rewards())) return false;
  return true;
}

void draw_rank_reward::Swap(draw_rank_reward* other) {
  if (other != this) {
    _rewards_.Swap(&other->_rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata draw_rank_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = draw_rank_reward_descriptor_;
  metadata.reflection = draw_rank_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int buy_battle_chance::kResultFieldNumber;
const int buy_battle_chance::kBuyTimesFieldNumber;
#endif  // !_MSC_VER

buy_battle_chance::buy_battle_chance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.buy_battle_chance)
}

void buy_battle_chance::InitAsDefaultInstance() {
}

buy_battle_chance::buy_battle_chance(const buy_battle_chance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.buy_battle_chance)
}

void buy_battle_chance::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _buy_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buy_battle_chance::~buy_battle_chance() {
  // @@protoc_insertion_point(destructor:client_baseserver.buy_battle_chance)
  SharedDtor();
}

void buy_battle_chance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void buy_battle_chance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buy_battle_chance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buy_battle_chance_descriptor_;
}

const buy_battle_chance& buy_battle_chance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

buy_battle_chance* buy_battle_chance::default_instance_ = NULL;

buy_battle_chance* buy_battle_chance::New() const {
  return new buy_battle_chance;
}

void buy_battle_chance::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<buy_battle_chance*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_result_, _buy_times_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buy_battle_chance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.buy_battle_chance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1 [default = success];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__buy_times;
        break;
      }

      // optional uint32 _buy_times = 2;
      case 2: {
        if (tag == 16) {
         parse__buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_buy_times_)));
          set_has__buy_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.buy_battle_chance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.buy_battle_chance)
  return false;
#undef DO_
}

void buy_battle_chance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.buy_battle_chance)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // optional uint32 _buy_times = 2;
  if (has__buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_buy_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.buy_battle_chance)
}

::google::protobuf::uint8* buy_battle_chance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.buy_battle_chance)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // optional uint32 _buy_times = 2;
  if (has__buy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_buy_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.buy_battle_chance)
  return target;
}

int buy_battle_chance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1 [default = success];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional uint32 _buy_times = 2;
    if (has__buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_buy_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buy_battle_chance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buy_battle_chance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buy_battle_chance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buy_battle_chance::MergeFrom(const buy_battle_chance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__buy_times()) {
      set__buy_times(from._buy_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buy_battle_chance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buy_battle_chance::CopyFrom(const buy_battle_chance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buy_battle_chance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void buy_battle_chance::Swap(buy_battle_chance* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_buy_times_, other->_buy_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buy_battle_chance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buy_battle_chance_descriptor_;
  metadata.reflection = buy_battle_chance_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* set_name_reply_set_name_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_name_reply_set_name_result_descriptor_;
}
bool set_name_reply_set_name_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const set_name_reply_set_name_result set_name_reply::success;
const set_name_reply_set_name_result set_name_reply::exists;
const set_name_reply_set_name_result set_name_reply::dirty_word;
const set_name_reply_set_name_result set_name_reply::set_name_result_MIN;
const set_name_reply_set_name_result set_name_reply::set_name_result_MAX;
const int set_name_reply::set_name_result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int set_name_reply::kResultFieldNumber;
#endif  // !_MSC_VER

set_name_reply::set_name_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.set_name_reply)
}

void set_name_reply::InitAsDefaultInstance() {
}

set_name_reply::set_name_reply(const set_name_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.set_name_reply)
}

void set_name_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_name_reply::~set_name_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.set_name_reply)
  SharedDtor();
}

void set_name_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void set_name_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_name_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_name_reply_descriptor_;
}

const set_name_reply& set_name_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

set_name_reply* set_name_reply::default_instance_ = NULL;

set_name_reply* set_name_reply::New() const {
  return new set_name_reply;
}

void set_name_reply::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_name_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.set_name_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.set_name_reply.set_name_result _result = 1 [default = success];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::set_name_reply_set_name_result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::set_name_reply_set_name_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.set_name_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.set_name_reply)
  return false;
#undef DO_
}

void set_name_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.set_name_reply)
  // required .client_baseserver.set_name_reply.set_name_result _result = 1 [default = success];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.set_name_reply)
}

::google::protobuf::uint8* set_name_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.set_name_reply)
  // required .client_baseserver.set_name_reply.set_name_result _result = 1 [default = success];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.set_name_reply)
  return target;
}

int set_name_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.set_name_reply.set_name_result _result = 1 [default = success];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_name_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_name_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_name_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_name_reply::MergeFrom(const set_name_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_name_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_name_reply::CopyFrom(const set_name_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_name_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void set_name_reply::Swap(set_name_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_name_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_name_reply_descriptor_;
  metadata.reflection = set_name_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int set_avatar_reply::kResultFieldNumber;
#endif  // !_MSC_VER

set_avatar_reply::set_avatar_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.set_avatar_reply)
}

void set_avatar_reply::InitAsDefaultInstance() {
}

set_avatar_reply::set_avatar_reply(const set_avatar_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.set_avatar_reply)
}

void set_avatar_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_avatar_reply::~set_avatar_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.set_avatar_reply)
  SharedDtor();
}

void set_avatar_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void set_avatar_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_avatar_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_avatar_reply_descriptor_;
}

const set_avatar_reply& set_avatar_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

set_avatar_reply* set_avatar_reply::default_instance_ = NULL;

set_avatar_reply* set_avatar_reply::New() const {
  return new set_avatar_reply;
}

void set_avatar_reply::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_avatar_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.set_avatar_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.set_avatar_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.set_avatar_reply)
  return false;
#undef DO_
}

void set_avatar_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.set_avatar_reply)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.set_avatar_reply)
}

::google::protobuf::uint8* set_avatar_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.set_avatar_reply)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.set_avatar_reply)
  return target;
}

int set_avatar_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_avatar_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_avatar_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_avatar_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_avatar_reply::MergeFrom(const set_avatar_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_avatar_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_avatar_reply::CopyFrom(const set_avatar_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_avatar_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void set_avatar_reply::Swap(set_avatar_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_avatar_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_avatar_reply_descriptor_;
  metadata.reflection = set_avatar_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int query_data_reply::kRmbFieldNumber;
const int query_data_reply::kChargeSumFieldNumber;
const int query_data_reply::kHeroesFieldNumber;
const int query_data_reply::kRechargeLimitFieldNumber;
const int query_data_reply::kMonthCardFieldNumber;
#endif  // !_MSC_VER

query_data_reply::query_data_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.query_data_reply)
}

void query_data_reply::InitAsDefaultInstance() {
}

query_data_reply::query_data_reply(const query_data_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.query_data_reply)
}

void query_data_reply::SharedCtor() {
  _cached_size_ = 0;
  rmb_ = 0u;
  charge_sum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_data_reply::~query_data_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.query_data_reply)
  SharedDtor();
}

void query_data_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void query_data_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_data_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_data_reply_descriptor_;
}

const query_data_reply& query_data_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

query_data_reply* query_data_reply::default_instance_ = NULL;

query_data_reply* query_data_reply::New() const {
  return new query_data_reply;
}

void query_data_reply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<query_data_reply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rmb_, charge_sum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  heroes_.Clear();
  recharge_limit_.Clear();
  _month_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_data_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.query_data_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rmb = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charge_sum;
        break;
      }

      // optional uint32 charge_sum = 2;
      case 2: {
        if (tag == 16) {
         parse_charge_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charge_sum_)));
          set_has_charge_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_heroes;
        break;
      }

      // repeated .client_baseserver.hero heroes = 3;
      case 3: {
        if (tag == 26) {
         parse_heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heroes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_heroes;
        if (input->ExpectTag(32)) goto parse_recharge_limit;
        break;
      }

      // repeated uint32 recharge_limit = 4;
      case 4: {
        if (tag == 32) {
         parse_recharge_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_recharge_limit())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_recharge_limit())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_recharge_limit;
        if (input->ExpectTag(42)) goto parse__month_card;
        break;
      }

      // repeated .client_baseserver.monthcard _month_card = 5;
      case 5: {
        if (tag == 42) {
         parse__month_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__month_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse__month_card;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.query_data_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.query_data_reply)
  return false;
#undef DO_
}

void query_data_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.query_data_reply)
  // optional uint32 rmb = 1;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rmb(), output);
  }

  // optional uint32 charge_sum = 2;
  if (has_charge_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charge_sum(), output);
  }

  // repeated .client_baseserver.hero heroes = 3;
  for (int i = 0; i < this->heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->heroes(i), output);
  }

  // repeated uint32 recharge_limit = 4;
  for (int i = 0; i < this->recharge_limit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->recharge_limit(i), output);
  }

  // repeated .client_baseserver.monthcard _month_card = 5;
  for (int i = 0; i < this->_month_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_month_card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.query_data_reply)
}

::google::protobuf::uint8* query_data_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.query_data_reply)
  // optional uint32 rmb = 1;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rmb(), target);
  }

  // optional uint32 charge_sum = 2;
  if (has_charge_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charge_sum(), target);
  }

  // repeated .client_baseserver.hero heroes = 3;
  for (int i = 0; i < this->heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->heroes(i), target);
  }

  // repeated uint32 recharge_limit = 4;
  for (int i = 0; i < this->recharge_limit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->recharge_limit(i), target);
  }

  // repeated .client_baseserver.monthcard _month_card = 5;
  for (int i = 0; i < this->_month_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_month_card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.query_data_reply)
  return target;
}

int query_data_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rmb = 1;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rmb());
    }

    // optional uint32 charge_sum = 2;
    if (has_charge_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charge_sum());
    }

  }
  // repeated .client_baseserver.hero heroes = 3;
  total_size += 1 * this->heroes_size();
  for (int i = 0; i < this->heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroes(i));
  }

  // repeated uint32 recharge_limit = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->recharge_limit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->recharge_limit(i));
    }
    total_size += 1 * this->recharge_limit_size() + data_size;
  }

  // repeated .client_baseserver.monthcard _month_card = 5;
  total_size += 1 * this->_month_card_size();
  for (int i = 0; i < this->_month_card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_month_card(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_data_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_data_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_data_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_data_reply::MergeFrom(const query_data_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroes_.MergeFrom(from.heroes_);
  recharge_limit_.MergeFrom(from.recharge_limit_);
  _month_card_.MergeFrom(from._month_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_charge_sum()) {
      set_charge_sum(from.charge_sum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_data_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_data_reply::CopyFrom(const query_data_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_data_reply::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->heroes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->_month_card())) return false;
  return true;
}

void query_data_reply::Swap(query_data_reply* other) {
  if (other != this) {
    std::swap(rmb_, other->rmb_);
    std::swap(charge_sum_, other->charge_sum_);
    heroes_.Swap(&other->heroes_);
    recharge_limit_.Swap(&other->recharge_limit_);
    _month_card_.Swap(&other->_month_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_data_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_data_reply_descriptor_;
  metadata.reflection = query_data_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int midas_acquire::kTypeFieldNumber;
const int midas_acquire::kMoneyFieldNumber;
#endif  // !_MSC_VER

midas_acquire::midas_acquire()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.midas_acquire)
}

void midas_acquire::InitAsDefaultInstance() {
}

midas_acquire::midas_acquire(const midas_acquire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.midas_acquire)
}

void midas_acquire::SharedCtor() {
  _cached_size_ = 0;
  _type_ = 0u;
  _money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

midas_acquire::~midas_acquire() {
  // @@protoc_insertion_point(destructor:client_baseserver.midas_acquire)
  SharedDtor();
}

void midas_acquire::SharedDtor() {
  if (this != default_instance_) {
  }
}

void midas_acquire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* midas_acquire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return midas_acquire_descriptor_;
}

const midas_acquire& midas_acquire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

midas_acquire* midas_acquire::default_instance_ = NULL;

midas_acquire* midas_acquire::New() const {
  return new midas_acquire;
}

void midas_acquire::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<midas_acquire*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_type_, _money_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool midas_acquire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.midas_acquire)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_type_)));
          set_has__type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__money;
        break;
      }

      // required uint32 _money = 2;
      case 2: {
        if (tag == 16) {
         parse__money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_money_)));
          set_has__money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.midas_acquire)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.midas_acquire)
  return false;
#undef DO_
}

void midas_acquire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.midas_acquire)
  // required uint32 _type = 1;
  if (has__type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_type(), output);
  }

  // required uint32 _money = 2;
  if (has__money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.midas_acquire)
}

::google::protobuf::uint8* midas_acquire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.midas_acquire)
  // required uint32 _type = 1;
  if (has__type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_type(), target);
  }

  // required uint32 _money = 2;
  if (has__money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.midas_acquire)
  return target;
}

int midas_acquire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _type = 1;
    if (has__type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_type());
    }

    // required uint32 _money = 2;
    if (has__money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void midas_acquire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const midas_acquire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const midas_acquire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void midas_acquire::MergeFrom(const midas_acquire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__type()) {
      set__type(from._type());
    }
    if (from.has__money()) {
      set__money(from._money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void midas_acquire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void midas_acquire::CopyFrom(const midas_acquire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool midas_acquire::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void midas_acquire::Swap(midas_acquire* other) {
  if (other != this) {
    std::swap(_type_, other->_type_);
    std::swap(_money_, other->_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata midas_acquire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = midas_acquire_descriptor_;
  metadata.reflection = midas_acquire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int midas_reply::kAcquireFieldNumber;
#endif  // !_MSC_VER

midas_reply::midas_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.midas_reply)
}

void midas_reply::InitAsDefaultInstance() {
}

midas_reply::midas_reply(const midas_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.midas_reply)
}

void midas_reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

midas_reply::~midas_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.midas_reply)
  SharedDtor();
}

void midas_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void midas_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* midas_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return midas_reply_descriptor_;
}

const midas_reply& midas_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

midas_reply* midas_reply::default_instance_ = NULL;

midas_reply* midas_reply::New() const {
  return new midas_reply;
}

void midas_reply::Clear() {
  _acquire_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool midas_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.midas_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.midas_acquire _acquire = 1;
      case 1: {
        if (tag == 10) {
         parse__acquire:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__acquire()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__acquire;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.midas_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.midas_reply)
  return false;
#undef DO_
}

void midas_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.midas_reply)
  // repeated .client_baseserver.midas_acquire _acquire = 1;
  for (int i = 0; i < this->_acquire_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_acquire(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.midas_reply)
}

::google::protobuf::uint8* midas_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.midas_reply)
  // repeated .client_baseserver.midas_acquire _acquire = 1;
  for (int i = 0; i < this->_acquire_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_acquire(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.midas_reply)
  return target;
}

int midas_reply::ByteSize() const {
  int total_size = 0;

  // repeated .client_baseserver.midas_acquire _acquire = 1;
  total_size += 1 * this->_acquire_size();
  for (int i = 0; i < this->_acquire_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_acquire(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void midas_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const midas_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const midas_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void midas_reply::MergeFrom(const midas_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _acquire_.MergeFrom(from._acquire_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void midas_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void midas_reply::CopyFrom(const midas_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool midas_reply::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_acquire())) return false;
  return true;
}

void midas_reply::Swap(midas_reply* other) {
  if (other != this) {
    _acquire_.Swap(&other->_acquire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata midas_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = midas_reply_descriptor_;
  metadata.reflection = midas_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int open_shop_reply::kResultFieldNumber;
const int open_shop_reply::kShopFieldNumber;
#endif  // !_MSC_VER

open_shop_reply::open_shop_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.open_shop_reply)
}

void open_shop_reply::InitAsDefaultInstance() {
  _shop_ = const_cast< ::client_baseserver::user_shop*>(&::client_baseserver::user_shop::default_instance());
}

open_shop_reply::open_shop_reply(const open_shop_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.open_shop_reply)
}

void open_shop_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _shop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

open_shop_reply::~open_shop_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.open_shop_reply)
  SharedDtor();
}

void open_shop_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _shop_;
  }
}

void open_shop_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* open_shop_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return open_shop_reply_descriptor_;
}

const open_shop_reply& open_shop_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

open_shop_reply* open_shop_reply::default_instance_ = NULL;

open_shop_reply* open_shop_reply::New() const {
  return new open_shop_reply;
}

void open_shop_reply::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _result_ = 0;
    if (has__shop()) {
      if (_shop_ != NULL) _shop_->::client_baseserver::user_shop::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool open_shop_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.open_shop_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__shop;
        break;
      }

      // optional .client_baseserver.user_shop _shop = 2;
      case 2: {
        if (tag == 18) {
         parse__shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__shop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.open_shop_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.open_shop_reply)
  return false;
#undef DO_
}

void open_shop_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.open_shop_reply)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // optional .client_baseserver.user_shop _shop = 2;
  if (has__shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_shop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.open_shop_reply)
}

::google::protobuf::uint8* open_shop_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.open_shop_reply)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // optional .client_baseserver.user_shop _shop = 2;
  if (has__shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_shop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.open_shop_reply)
  return target;
}

int open_shop_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional .client_baseserver.user_shop _shop = 2;
    if (has__shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_shop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void open_shop_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const open_shop_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const open_shop_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void open_shop_reply::MergeFrom(const open_shop_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__shop()) {
      mutable__shop()->::client_baseserver::user_shop::MergeFrom(from._shop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void open_shop_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void open_shop_reply::CopyFrom(const open_shop_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool open_shop_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__shop()) {
    if (!this->_shop().IsInitialized()) return false;
  }
  return true;
}

void open_shop_reply::Swap(open_shop_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_shop_, other->_shop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata open_shop_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = open_shop_reply_descriptor_;
  metadata.reflection = open_shop_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int charge_reply::kSerialIdFieldNumber;
const int charge_reply::kChargeIdFieldNumber;
#endif  // !_MSC_VER

charge_reply::charge_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.charge_reply)
}

void charge_reply::InitAsDefaultInstance() {
}

charge_reply::charge_reply(const charge_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.charge_reply)
}

void charge_reply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _serial_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _charge_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

charge_reply::~charge_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.charge_reply)
  SharedDtor();
}

void charge_reply::SharedDtor() {
  if (_serial_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _serial_id_;
  }
  if (this != default_instance_) {
  }
}

void charge_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* charge_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return charge_reply_descriptor_;
}

const charge_reply& charge_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

charge_reply* charge_reply::default_instance_ = NULL;

charge_reply* charge_reply::New() const {
  return new charge_reply;
}

void charge_reply::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has__serial_id()) {
      if (_serial_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _serial_id_->clear();
      }
    }
    _charge_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool charge_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.charge_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _serial_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__serial_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_serial_id().data(), this->_serial_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_serial_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__charge_id;
        break;
      }

      // required uint32 _charge_id = 2;
      case 2: {
        if (tag == 16) {
         parse__charge_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_charge_id_)));
          set_has__charge_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.charge_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.charge_reply)
  return false;
#undef DO_
}

void charge_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.charge_reply)
  // required string _serial_id = 1;
  if (has__serial_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_serial_id().data(), this->_serial_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_serial_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->_serial_id(), output);
  }

  // required uint32 _charge_id = 2;
  if (has__charge_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_charge_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.charge_reply)
}

::google::protobuf::uint8* charge_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.charge_reply)
  // required string _serial_id = 1;
  if (has__serial_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_serial_id().data(), this->_serial_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_serial_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_serial_id(), target);
  }

  // required uint32 _charge_id = 2;
  if (has__charge_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_charge_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.charge_reply)
  return target;
}

int charge_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _serial_id = 1;
    if (has__serial_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_serial_id());
    }

    // required uint32 _charge_id = 2;
    if (has__charge_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_charge_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void charge_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const charge_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const charge_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void charge_reply::MergeFrom(const charge_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__serial_id()) {
      set__serial_id(from._serial_id());
    }
    if (from.has__charge_id()) {
      set__charge_id(from._charge_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void charge_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void charge_reply::CopyFrom(const charge_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool charge_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void charge_reply::Swap(charge_reply* other) {
  if (other != this) {
    std::swap(_serial_id_, other->_serial_id_);
    std::swap(_charge_id_, other->_charge_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata charge_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = charge_reply_descriptor_;
  metadata.reflection = charge_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int notify_msg::kLadderNotifyFieldNumber;
const int notify_msg::kNewMailFieldNumber;
const int notify_msg::kGuildChatFieldNumber;
const int notify_msg::kActivityNotifyFieldNumber;
const int notify_msg::kActivityRewardFieldNumber;
const int notify_msg::kReleaseHeroesFieldNumber;
const int notify_msg::kExcavRecordFieldNumber;
const int notify_msg::kGuildDropFieldNumber;
const int notify_msg::kPersonalChatFieldNumber;
const int notify_msg::kSplitableHeroesFieldNumber;
#endif  // !_MSC_VER

notify_msg::notify_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.notify_msg)
}

void notify_msg::InitAsDefaultInstance() {
  _ladder_notify_ = const_cast< ::client_baseserver::ladder_notify*>(&::client_baseserver::ladder_notify::default_instance());
}

notify_msg::notify_msg(const notify_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.notify_msg)
}

void notify_msg::SharedCtor() {
  _cached_size_ = 0;
  _ladder_notify_ = NULL;
  _new_mail_ = 0u;
  _guild_chat_ = 0u;
  _activity_notify_ = 0u;
  _activity_reward_ = 0u;
  _excav_record_ = 0u;
  _guild_drop_ = 0u;
  _personal_chat_ = 0u;
  _splitable_heroes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

notify_msg::~notify_msg() {
  // @@protoc_insertion_point(destructor:client_baseserver.notify_msg)
  SharedDtor();
}

void notify_msg::SharedDtor() {
  if (this != default_instance_) {
    delete _ladder_notify_;
  }
}

void notify_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* notify_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return notify_msg_descriptor_;
}

const notify_msg& notify_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

notify_msg* notify_msg::default_instance_ = NULL;

notify_msg* notify_msg::New() const {
  return new notify_msg;
}

void notify_msg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<notify_msg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(_new_mail_, _activity_reward_);
    ZR_(_excav_record_, _guild_drop_);
    if (has__ladder_notify()) {
      if (_ladder_notify_ != NULL) _ladder_notify_->::client_baseserver::ladder_notify::Clear();
    }
  }
  ZR_(_personal_chat_, _splitable_heroes_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  _release_heroes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool notify_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.notify_msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_baseserver.ladder_notify _ladder_notify = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__ladder_notify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__new_mail;
        break;
      }

      // optional uint32 _new_mail = 2;
      case 2: {
        if (tag == 16) {
         parse__new_mail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_new_mail_)));
          set_has__new_mail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__guild_chat;
        break;
      }

      // optional uint32 _guild_chat = 3;
      case 3: {
        if (tag == 24) {
         parse__guild_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_guild_chat_)));
          set_has__guild_chat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__activity_notify;
        break;
      }

      // optional uint32 _activity_notify = 4;
      case 4: {
        if (tag == 32) {
         parse__activity_notify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_activity_notify_)));
          set_has__activity_notify();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__activity_reward;
        break;
      }

      // optional uint32 _activity_reward = 5;
      case 5: {
        if (tag == 40) {
         parse__activity_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_activity_reward_)));
          set_has__activity_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse__release_heroes;
        break;
      }

      // repeated uint32 _release_heroes = 6;
      case 6: {
        if (tag == 48) {
         parse__release_heroes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable__release_heroes())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__release_heroes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse__release_heroes;
        if (input->ExpectTag(56)) goto parse__excav_record;
        break;
      }

      // optional uint32 _excav_record = 7;
      case 7: {
        if (tag == 56) {
         parse__excav_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_excav_record_)));
          set_has__excav_record();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse__guild_drop;
        break;
      }

      // optional uint32 _guild_drop = 8;
      case 8: {
        if (tag == 64) {
         parse__guild_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_guild_drop_)));
          set_has__guild_drop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse__personal_chat;
        break;
      }

      // optional uint32 _personal_chat = 9;
      case 9: {
        if (tag == 72) {
         parse__personal_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_personal_chat_)));
          set_has__personal_chat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse__splitable_heroes;
        break;
      }

      // optional uint32 _splitable_heroes = 10;
      case 10: {
        if (tag == 80) {
         parse__splitable_heroes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_splitable_heroes_)));
          set_has__splitable_heroes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.notify_msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.notify_msg)
  return false;
#undef DO_
}

void notify_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.notify_msg)
  // optional .client_baseserver.ladder_notify _ladder_notify = 1;
  if (has__ladder_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_ladder_notify(), output);
  }

  // optional uint32 _new_mail = 2;
  if (has__new_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_new_mail(), output);
  }

  // optional uint32 _guild_chat = 3;
  if (has__guild_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_guild_chat(), output);
  }

  // optional uint32 _activity_notify = 4;
  if (has__activity_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_activity_notify(), output);
  }

  // optional uint32 _activity_reward = 5;
  if (has__activity_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_activity_reward(), output);
  }

  // repeated uint32 _release_heroes = 6;
  for (int i = 0; i < this->_release_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->_release_heroes(i), output);
  }

  // optional uint32 _excav_record = 7;
  if (has__excav_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->_excav_record(), output);
  }

  // optional uint32 _guild_drop = 8;
  if (has__guild_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->_guild_drop(), output);
  }

  // optional uint32 _personal_chat = 9;
  if (has__personal_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->_personal_chat(), output);
  }

  // optional uint32 _splitable_heroes = 10;
  if (has__splitable_heroes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->_splitable_heroes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.notify_msg)
}

::google::protobuf::uint8* notify_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.notify_msg)
  // optional .client_baseserver.ladder_notify _ladder_notify = 1;
  if (has__ladder_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_ladder_notify(), target);
  }

  // optional uint32 _new_mail = 2;
  if (has__new_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_new_mail(), target);
  }

  // optional uint32 _guild_chat = 3;
  if (has__guild_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_guild_chat(), target);
  }

  // optional uint32 _activity_notify = 4;
  if (has__activity_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_activity_notify(), target);
  }

  // optional uint32 _activity_reward = 5;
  if (has__activity_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_activity_reward(), target);
  }

  // repeated uint32 _release_heroes = 6;
  for (int i = 0; i < this->_release_heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->_release_heroes(i), target);
  }

  // optional uint32 _excav_record = 7;
  if (has__excav_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->_excav_record(), target);
  }

  // optional uint32 _guild_drop = 8;
  if (has__guild_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->_guild_drop(), target);
  }

  // optional uint32 _personal_chat = 9;
  if (has__personal_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->_personal_chat(), target);
  }

  // optional uint32 _splitable_heroes = 10;
  if (has__splitable_heroes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->_splitable_heroes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.notify_msg)
  return target;
}

int notify_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_baseserver.ladder_notify _ladder_notify = 1;
    if (has__ladder_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_ladder_notify());
    }

    // optional uint32 _new_mail = 2;
    if (has__new_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_new_mail());
    }

    // optional uint32 _guild_chat = 3;
    if (has__guild_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_guild_chat());
    }

    // optional uint32 _activity_notify = 4;
    if (has__activity_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_activity_notify());
    }

    // optional uint32 _activity_reward = 5;
    if (has__activity_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_activity_reward());
    }

    // optional uint32 _excav_record = 7;
    if (has__excav_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_excav_record());
    }

    // optional uint32 _guild_drop = 8;
    if (has__guild_drop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_guild_drop());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 _personal_chat = 9;
    if (has__personal_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_personal_chat());
    }

    // optional uint32 _splitable_heroes = 10;
    if (has__splitable_heroes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_splitable_heroes());
    }

  }
  // repeated uint32 _release_heroes = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->_release_heroes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_release_heroes(i));
    }
    total_size += 1 * this->_release_heroes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void notify_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const notify_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const notify_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void notify_msg::MergeFrom(const notify_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  _release_heroes_.MergeFrom(from._release_heroes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__ladder_notify()) {
      mutable__ladder_notify()->::client_baseserver::ladder_notify::MergeFrom(from._ladder_notify());
    }
    if (from.has__new_mail()) {
      set__new_mail(from._new_mail());
    }
    if (from.has__guild_chat()) {
      set__guild_chat(from._guild_chat());
    }
    if (from.has__activity_notify()) {
      set__activity_notify(from._activity_notify());
    }
    if (from.has__activity_reward()) {
      set__activity_reward(from._activity_reward());
    }
    if (from.has__excav_record()) {
      set__excav_record(from._excav_record());
    }
    if (from.has__guild_drop()) {
      set__guild_drop(from._guild_drop());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has__personal_chat()) {
      set__personal_chat(from._personal_chat());
    }
    if (from.has__splitable_heroes()) {
      set__splitable_heroes(from._splitable_heroes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void notify_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void notify_msg::CopyFrom(const notify_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool notify_msg::IsInitialized() const {

  return true;
}

void notify_msg::Swap(notify_msg* other) {
  if (other != this) {
    std::swap(_ladder_notify_, other->_ladder_notify_);
    std::swap(_new_mail_, other->_new_mail_);
    std::swap(_guild_chat_, other->_guild_chat_);
    std::swap(_activity_notify_, other->_activity_notify_);
    std::swap(_activity_reward_, other->_activity_reward_);
    _release_heroes_.Swap(&other->_release_heroes_);
    std::swap(_excav_record_, other->_excav_record_);
    std::swap(_guild_drop_, other->_guild_drop_);
    std::swap(_personal_chat_, other->_personal_chat_);
    std::swap(_splitable_heroes_, other->_splitable_heroes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata notify_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = notify_msg_descriptor_;
  metadata.reflection = notify_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ladder_notify::kIsAttackedFieldNumber;
#endif  // !_MSC_VER

ladder_notify::ladder_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.ladder_notify)
}

void ladder_notify::InitAsDefaultInstance() {
}

ladder_notify::ladder_notify(const ladder_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.ladder_notify)
}

void ladder_notify::SharedCtor() {
  _cached_size_ = 0;
  _is_attacked_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ladder_notify::~ladder_notify() {
  // @@protoc_insertion_point(destructor:client_baseserver.ladder_notify)
  SharedDtor();
}

void ladder_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ladder_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ladder_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ladder_notify_descriptor_;
}

const ladder_notify& ladder_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

ladder_notify* ladder_notify::default_instance_ = NULL;

ladder_notify* ladder_notify::New() const {
  return new ladder_notify;
}

void ladder_notify::Clear() {
  _is_attacked_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ladder_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.ladder_notify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 _is_attacked = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_is_attacked_)));
          set_has__is_attacked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.ladder_notify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.ladder_notify)
  return false;
#undef DO_
}

void ladder_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.ladder_notify)
  // optional uint32 _is_attacked = 1;
  if (has__is_attacked()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_is_attacked(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.ladder_notify)
}

::google::protobuf::uint8* ladder_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.ladder_notify)
  // optional uint32 _is_attacked = 1;
  if (has__is_attacked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_is_attacked(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.ladder_notify)
  return target;
}

int ladder_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 _is_attacked = 1;
    if (has__is_attacked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_is_attacked());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ladder_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ladder_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ladder_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ladder_notify::MergeFrom(const ladder_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__is_attacked()) {
      set__is_attacked(from._is_attacked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ladder_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ladder_notify::CopyFrom(const ladder_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ladder_notify::IsInitialized() const {

  return true;
}

void ladder_notify::Swap(ladder_notify* other) {
  if (other != this) {
    std::swap(_is_attacked_, other->_is_attacked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ladder_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ladder_notify_descriptor_;
  metadata.reflection = ladder_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbc_reply::kOpenPanelFieldNumber;
const int tbc_reply::kQueryOppoFieldNumber;
const int tbc_reply::kStartBatFieldNumber;
const int tbc_reply::kEndBatFieldNumber;
const int tbc_reply::kResetFieldNumber;
const int tbc_reply::kDrawRewardFieldNumber;
#endif  // !_MSC_VER

tbc_reply::tbc_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.tbc_reply)
}

void tbc_reply::InitAsDefaultInstance() {
  _open_panel_ = const_cast< ::client_baseserver::tbc_open_panel*>(&::client_baseserver::tbc_open_panel::default_instance());
  _query_oppo_ = const_cast< ::client_baseserver::tbc_query_oppo*>(&::client_baseserver::tbc_query_oppo::default_instance());
  _start_bat_ = const_cast< ::client_baseserver::tbc_start_battle*>(&::client_baseserver::tbc_start_battle::default_instance());
  _end_bat_ = const_cast< ::client_baseserver::tbc_end_battle*>(&::client_baseserver::tbc_end_battle::default_instance());
  _reset_ = const_cast< ::client_baseserver::tbc_reset*>(&::client_baseserver::tbc_reset::default_instance());
  _draw_reward_ = const_cast< ::client_baseserver::tbc_draw_reward*>(&::client_baseserver::tbc_draw_reward::default_instance());
}

tbc_reply::tbc_reply(const tbc_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.tbc_reply)
}

void tbc_reply::SharedCtor() {
  _cached_size_ = 0;
  _open_panel_ = NULL;
  _query_oppo_ = NULL;
  _start_bat_ = NULL;
  _end_bat_ = NULL;
  _reset_ = NULL;
  _draw_reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbc_reply::~tbc_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.tbc_reply)
  SharedDtor();
}

void tbc_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _open_panel_;
    delete _query_oppo_;
    delete _start_bat_;
    delete _end_bat_;
    delete _reset_;
    delete _draw_reward_;
  }
}

void tbc_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbc_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbc_reply_descriptor_;
}

const tbc_reply& tbc_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

tbc_reply* tbc_reply::default_instance_ = NULL;

tbc_reply* tbc_reply::New() const {
  return new tbc_reply;
}

void tbc_reply::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has__open_panel()) {
      if (_open_panel_ != NULL) _open_panel_->::client_baseserver::tbc_open_panel::Clear();
    }
    if (has__query_oppo()) {
      if (_query_oppo_ != NULL) _query_oppo_->::client_baseserver::tbc_query_oppo::Clear();
    }
    if (has__start_bat()) {
      if (_start_bat_ != NULL) _start_bat_->::client_baseserver::tbc_start_battle::Clear();
    }
    if (has__end_bat()) {
      if (_end_bat_ != NULL) _end_bat_->::client_baseserver::tbc_end_battle::Clear();
    }
    if (has__reset()) {
      if (_reset_ != NULL) _reset_->::client_baseserver::tbc_reset::Clear();
    }
    if (has__draw_reward()) {
      if (_draw_reward_ != NULL) _draw_reward_->::client_baseserver::tbc_draw_reward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbc_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.tbc_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_baseserver.tbc_open_panel _open_panel = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__open_panel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__query_oppo;
        break;
      }

      // optional .client_baseserver.tbc_query_oppo _query_oppo = 2;
      case 2: {
        if (tag == 18) {
         parse__query_oppo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_oppo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__start_bat;
        break;
      }

      // optional .client_baseserver.tbc_start_battle _start_bat = 3;
      case 3: {
        if (tag == 26) {
         parse__start_bat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__start_bat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__end_bat;
        break;
      }

      // optional .client_baseserver.tbc_end_battle _end_bat = 4;
      case 4: {
        if (tag == 34) {
         parse__end_bat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__end_bat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse__reset;
        break;
      }

      // optional .client_baseserver.tbc_reset _reset = 5;
      case 5: {
        if (tag == 42) {
         parse__reset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__reset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse__draw_reward;
        break;
      }

      // optional .client_baseserver.tbc_draw_reward _draw_reward = 6;
      case 6: {
        if (tag == 50) {
         parse__draw_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__draw_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.tbc_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.tbc_reply)
  return false;
#undef DO_
}

void tbc_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.tbc_reply)
  // optional .client_baseserver.tbc_open_panel _open_panel = 1;
  if (has__open_panel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_open_panel(), output);
  }

  // optional .client_baseserver.tbc_query_oppo _query_oppo = 2;
  if (has__query_oppo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_query_oppo(), output);
  }

  // optional .client_baseserver.tbc_start_battle _start_bat = 3;
  if (has__start_bat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_start_bat(), output);
  }

  // optional .client_baseserver.tbc_end_battle _end_bat = 4;
  if (has__end_bat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_end_bat(), output);
  }

  // optional .client_baseserver.tbc_reset _reset = 5;
  if (has__reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_reset(), output);
  }

  // optional .client_baseserver.tbc_draw_reward _draw_reward = 6;
  if (has__draw_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_draw_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.tbc_reply)
}

::google::protobuf::uint8* tbc_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.tbc_reply)
  // optional .client_baseserver.tbc_open_panel _open_panel = 1;
  if (has__open_panel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_open_panel(), target);
  }

  // optional .client_baseserver.tbc_query_oppo _query_oppo = 2;
  if (has__query_oppo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_query_oppo(), target);
  }

  // optional .client_baseserver.tbc_start_battle _start_bat = 3;
  if (has__start_bat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_start_bat(), target);
  }

  // optional .client_baseserver.tbc_end_battle _end_bat = 4;
  if (has__end_bat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_end_bat(), target);
  }

  // optional .client_baseserver.tbc_reset _reset = 5;
  if (has__reset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_reset(), target);
  }

  // optional .client_baseserver.tbc_draw_reward _draw_reward = 6;
  if (has__draw_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->_draw_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.tbc_reply)
  return target;
}

int tbc_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_baseserver.tbc_open_panel _open_panel = 1;
    if (has__open_panel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_open_panel());
    }

    // optional .client_baseserver.tbc_query_oppo _query_oppo = 2;
    if (has__query_oppo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_oppo());
    }

    // optional .client_baseserver.tbc_start_battle _start_bat = 3;
    if (has__start_bat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_start_bat());
    }

    // optional .client_baseserver.tbc_end_battle _end_bat = 4;
    if (has__end_bat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_end_bat());
    }

    // optional .client_baseserver.tbc_reset _reset = 5;
    if (has__reset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_reset());
    }

    // optional .client_baseserver.tbc_draw_reward _draw_reward = 6;
    if (has__draw_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_draw_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbc_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbc_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbc_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbc_reply::MergeFrom(const tbc_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__open_panel()) {
      mutable__open_panel()->::client_baseserver::tbc_open_panel::MergeFrom(from._open_panel());
    }
    if (from.has__query_oppo()) {
      mutable__query_oppo()->::client_baseserver::tbc_query_oppo::MergeFrom(from._query_oppo());
    }
    if (from.has__start_bat()) {
      mutable__start_bat()->::client_baseserver::tbc_start_battle::MergeFrom(from._start_bat());
    }
    if (from.has__end_bat()) {
      mutable__end_bat()->::client_baseserver::tbc_end_battle::MergeFrom(from._end_bat());
    }
    if (from.has__reset()) {
      mutable__reset()->::client_baseserver::tbc_reset::MergeFrom(from._reset());
    }
    if (from.has__draw_reward()) {
      mutable__draw_reward()->::client_baseserver::tbc_draw_reward::MergeFrom(from._draw_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbc_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbc_reply::CopyFrom(const tbc_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbc_reply::IsInitialized() const {

  if (has__open_panel()) {
    if (!this->_open_panel().IsInitialized()) return false;
  }
  if (has__query_oppo()) {
    if (!this->_query_oppo().IsInitialized()) return false;
  }
  if (has__start_bat()) {
    if (!this->_start_bat().IsInitialized()) return false;
  }
  if (has__end_bat()) {
    if (!this->_end_bat().IsInitialized()) return false;
  }
  if (has__reset()) {
    if (!this->_reset().IsInitialized()) return false;
  }
  if (has__draw_reward()) {
    if (!this->_draw_reward().IsInitialized()) return false;
  }
  return true;
}

void tbc_reply::Swap(tbc_reply* other) {
  if (other != this) {
    std::swap(_open_panel_, other->_open_panel_);
    std::swap(_query_oppo_, other->_query_oppo_);
    std::swap(_start_bat_, other->_start_bat_);
    std::swap(_end_bat_, other->_end_bat_);
    std::swap(_reset_, other->_reset_);
    std::swap(_draw_reward_, other->_draw_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbc_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbc_reply_descriptor_;
  metadata.reflection = tbc_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbc_self_hero::kTidFieldNumber;
const int tbc_self_hero::kDynaFieldNumber;
#endif  // !_MSC_VER

tbc_self_hero::tbc_self_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.tbc_self_hero)
}

void tbc_self_hero::InitAsDefaultInstance() {
  _dyna_ = const_cast< ::client_baseserver::hero_dyna*>(&::client_baseserver::hero_dyna::default_instance());
}

tbc_self_hero::tbc_self_hero(const tbc_self_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.tbc_self_hero)
}

void tbc_self_hero::SharedCtor() {
  _cached_size_ = 0;
  _tid_ = 0u;
  _dyna_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbc_self_hero::~tbc_self_hero() {
  // @@protoc_insertion_point(destructor:client_baseserver.tbc_self_hero)
  SharedDtor();
}

void tbc_self_hero::SharedDtor() {
  if (this != default_instance_) {
    delete _dyna_;
  }
}

void tbc_self_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbc_self_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbc_self_hero_descriptor_;
}

const tbc_self_hero& tbc_self_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

tbc_self_hero* tbc_self_hero::default_instance_ = NULL;

tbc_self_hero* tbc_self_hero::New() const {
  return new tbc_self_hero;
}

void tbc_self_hero::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _tid_ = 0u;
    if (has__dyna()) {
      if (_dyna_ != NULL) _dyna_->::client_baseserver::hero_dyna::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbc_self_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.tbc_self_hero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_tid_)));
          set_has__tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__dyna;
        break;
      }

      // required .client_baseserver.hero_dyna _dyna = 2;
      case 2: {
        if (tag == 18) {
         parse__dyna:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__dyna()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.tbc_self_hero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.tbc_self_hero)
  return false;
#undef DO_
}

void tbc_self_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.tbc_self_hero)
  // required uint32 _tid = 1;
  if (has__tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_tid(), output);
  }

  // required .client_baseserver.hero_dyna _dyna = 2;
  if (has__dyna()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_dyna(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.tbc_self_hero)
}

::google::protobuf::uint8* tbc_self_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.tbc_self_hero)
  // required uint32 _tid = 1;
  if (has__tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_tid(), target);
  }

  // required .client_baseserver.hero_dyna _dyna = 2;
  if (has__dyna()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_dyna(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.tbc_self_hero)
  return target;
}

int tbc_self_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _tid = 1;
    if (has__tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_tid());
    }

    // required .client_baseserver.hero_dyna _dyna = 2;
    if (has__dyna()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_dyna());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbc_self_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbc_self_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbc_self_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbc_self_hero::MergeFrom(const tbc_self_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__tid()) {
      set__tid(from._tid());
    }
    if (from.has__dyna()) {
      mutable__dyna()->::client_baseserver::hero_dyna::MergeFrom(from._dyna());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbc_self_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbc_self_hero::CopyFrom(const tbc_self_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbc_self_hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has__dyna()) {
    if (!this->_dyna().IsInitialized()) return false;
  }
  return true;
}

void tbc_self_hero::Swap(tbc_self_hero* other) {
  if (other != this) {
    std::swap(_tid_, other->_tid_);
    std::swap(_dyna_, other->_dyna_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbc_self_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbc_self_hero_descriptor_;
  metadata.reflection = tbc_self_hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbc_oppo_hero::kBaseFieldNumber;
const int tbc_oppo_hero::kDynaFieldNumber;
#endif  // !_MSC_VER

tbc_oppo_hero::tbc_oppo_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.tbc_oppo_hero)
}

void tbc_oppo_hero::InitAsDefaultInstance() {
  _base_ = const_cast< ::client_baseserver::hero*>(&::client_baseserver::hero::default_instance());
  _dyna_ = const_cast< ::client_baseserver::hero_dyna*>(&::client_baseserver::hero_dyna::default_instance());
}

tbc_oppo_hero::tbc_oppo_hero(const tbc_oppo_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.tbc_oppo_hero)
}

void tbc_oppo_hero::SharedCtor() {
  _cached_size_ = 0;
  _base_ = NULL;
  _dyna_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbc_oppo_hero::~tbc_oppo_hero() {
  // @@protoc_insertion_point(destructor:client_baseserver.tbc_oppo_hero)
  SharedDtor();
}

void tbc_oppo_hero::SharedDtor() {
  if (this != default_instance_) {
    delete _base_;
    delete _dyna_;
  }
}

void tbc_oppo_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbc_oppo_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbc_oppo_hero_descriptor_;
}

const tbc_oppo_hero& tbc_oppo_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

tbc_oppo_hero* tbc_oppo_hero::default_instance_ = NULL;

tbc_oppo_hero* tbc_oppo_hero::New() const {
  return new tbc_oppo_hero;
}

void tbc_oppo_hero::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has__base()) {
      if (_base_ != NULL) _base_->::client_baseserver::hero::Clear();
    }
    if (has__dyna()) {
      if (_dyna_ != NULL) _dyna_->::client_baseserver::hero_dyna::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbc_oppo_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.tbc_oppo_hero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.hero _base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__dyna;
        break;
      }

      // required .client_baseserver.hero_dyna _dyna = 2;
      case 2: {
        if (tag == 18) {
         parse__dyna:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__dyna()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.tbc_oppo_hero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.tbc_oppo_hero)
  return false;
#undef DO_
}

void tbc_oppo_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.tbc_oppo_hero)
  // required .client_baseserver.hero _base = 1;
  if (has__base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_base(), output);
  }

  // required .client_baseserver.hero_dyna _dyna = 2;
  if (has__dyna()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_dyna(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.tbc_oppo_hero)
}

::google::protobuf::uint8* tbc_oppo_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.tbc_oppo_hero)
  // required .client_baseserver.hero _base = 1;
  if (has__base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_base(), target);
  }

  // required .client_baseserver.hero_dyna _dyna = 2;
  if (has__dyna()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_dyna(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.tbc_oppo_hero)
  return target;
}

int tbc_oppo_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.hero _base = 1;
    if (has__base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_base());
    }

    // required .client_baseserver.hero_dyna _dyna = 2;
    if (has__dyna()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_dyna());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbc_oppo_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbc_oppo_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbc_oppo_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbc_oppo_hero::MergeFrom(const tbc_oppo_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__base()) {
      mutable__base()->::client_baseserver::hero::MergeFrom(from._base());
    }
    if (from.has__dyna()) {
      mutable__dyna()->::client_baseserver::hero_dyna::MergeFrom(from._dyna());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbc_oppo_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbc_oppo_hero::CopyFrom(const tbc_oppo_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbc_oppo_hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has__base()) {
    if (!this->_base().IsInitialized()) return false;
  }
  if (has__dyna()) {
    if (!this->_dyna().IsInitialized()) return false;
  }
  return true;
}

void tbc_oppo_hero::Swap(tbc_oppo_hero* other) {
  if (other != this) {
    std::swap(_base_, other->_base_);
    std::swap(_dyna_, other->_dyna_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbc_oppo_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbc_oppo_hero_descriptor_;
  metadata.reflection = tbc_oppo_hero_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* tbc_reward_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbc_reward_type_descriptor_;
}
bool tbc_reward_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const tbc_reward_type tbc_reward::gold;
const tbc_reward_type tbc_reward::diamond;
const tbc_reward_type tbc_reward::item;
const tbc_reward_type tbc_reward::chest;
const tbc_reward_type tbc_reward::crusadepoint;
const tbc_reward_type tbc_reward::chestbox;
const tbc_reward_type tbc_reward::type_MIN;
const tbc_reward_type tbc_reward::type_MAX;
const int tbc_reward::type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int tbc_reward::kTypeFieldNumber;
const int tbc_reward::kParam1FieldNumber;
const int tbc_reward::kParam2FieldNumber;
#endif  // !_MSC_VER

tbc_reward::tbc_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.tbc_reward)
}

void tbc_reward::InitAsDefaultInstance() {
}

tbc_reward::tbc_reward(const tbc_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.tbc_reward)
}

void tbc_reward::SharedCtor() {
  _cached_size_ = 0;
  _type_ = 1;
  _param1_ = 0u;
  _param2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbc_reward::~tbc_reward() {
  // @@protoc_insertion_point(destructor:client_baseserver.tbc_reward)
  SharedDtor();
}

void tbc_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tbc_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbc_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbc_reward_descriptor_;
}

const tbc_reward& tbc_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

tbc_reward* tbc_reward::default_instance_ = NULL;

tbc_reward* tbc_reward::New() const {
  return new tbc_reward;
}

void tbc_reward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<tbc_reward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(_param1_, _param2_);
    _type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbc_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.tbc_reward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.tbc_reward.type _type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::tbc_reward_type_IsValid(value)) {
            set__type(static_cast< ::client_baseserver::tbc_reward_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__param1;
        break;
      }

      // optional uint32 _param1 = 2;
      case 2: {
        if (tag == 16) {
         parse__param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_param1_)));
          set_has__param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__param2;
        break;
      }

      // optional uint32 _param2 = 3;
      case 3: {
        if (tag == 24) {
         parse__param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_param2_)));
          set_has__param2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.tbc_reward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.tbc_reward)
  return false;
#undef DO_
}

void tbc_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.tbc_reward)
  // required .client_baseserver.tbc_reward.type _type = 1;
  if (has__type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_type(), output);
  }

  // optional uint32 _param1 = 2;
  if (has__param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_param1(), output);
  }

  // optional uint32 _param2 = 3;
  if (has__param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_param2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.tbc_reward)
}

::google::protobuf::uint8* tbc_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.tbc_reward)
  // required .client_baseserver.tbc_reward.type _type = 1;
  if (has__type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_type(), target);
  }

  // optional uint32 _param1 = 2;
  if (has__param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_param1(), target);
  }

  // optional uint32 _param2 = 3;
  if (has__param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_param2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.tbc_reward)
  return target;
}

int tbc_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.tbc_reward.type _type = 1;
    if (has__type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_type());
    }

    // optional uint32 _param1 = 2;
    if (has__param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_param1());
    }

    // optional uint32 _param2 = 3;
    if (has__param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_param2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbc_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbc_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbc_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbc_reward::MergeFrom(const tbc_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__type()) {
      set__type(from._type());
    }
    if (from.has__param1()) {
      set__param1(from._param1());
    }
    if (from.has__param2()) {
      set__param2(from._param2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbc_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbc_reward::CopyFrom(const tbc_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbc_reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tbc_reward::Swap(tbc_reward* other) {
  if (other != this) {
    std::swap(_type_, other->_type_);
    std::swap(_param1_, other->_param1_);
    std::swap(_param2_, other->_param2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbc_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbc_reward_descriptor_;
  metadata.reflection = tbc_reward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* tbc_stage_status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbc_stage_status_descriptor_;
}
bool tbc_stage_status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const tbc_stage_status tbc_stage::unpassed;
const tbc_stage_status tbc_stage::passed;
const tbc_stage_status tbc_stage::rewarded;
const tbc_stage_status tbc_stage::status_MIN;
const tbc_stage_status tbc_stage::status_MAX;
const int tbc_stage::status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int tbc_stage::kStatusFieldNumber;
const int tbc_stage::kRewardsFieldNumber;
#endif  // !_MSC_VER

tbc_stage::tbc_stage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.tbc_stage)
}

void tbc_stage::InitAsDefaultInstance() {
}

tbc_stage::tbc_stage(const tbc_stage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.tbc_stage)
}

void tbc_stage::SharedCtor() {
  _cached_size_ = 0;
  _status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbc_stage::~tbc_stage() {
  // @@protoc_insertion_point(destructor:client_baseserver.tbc_stage)
  SharedDtor();
}

void tbc_stage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tbc_stage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbc_stage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbc_stage_descriptor_;
}

const tbc_stage& tbc_stage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

tbc_stage* tbc_stage::default_instance_ = NULL;

tbc_stage* tbc_stage::New() const {
  return new tbc_stage;
}

void tbc_stage::Clear() {
  _status_ = 0;
  _rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbc_stage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.tbc_stage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.tbc_stage.status _status = 1 [default = unpassed];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::tbc_stage_status_IsValid(value)) {
            set__status(static_cast< ::client_baseserver::tbc_stage_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__rewards;
        break;
      }

      // repeated .client_baseserver.tbc_reward _rewards = 2;
      case 2: {
        if (tag == 18) {
         parse__rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.tbc_stage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.tbc_stage)
  return false;
#undef DO_
}

void tbc_stage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.tbc_stage)
  // required .client_baseserver.tbc_stage.status _status = 1 [default = unpassed];
  if (has__status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_status(), output);
  }

  // repeated .client_baseserver.tbc_reward _rewards = 2;
  for (int i = 0; i < this->_rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.tbc_stage)
}

::google::protobuf::uint8* tbc_stage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.tbc_stage)
  // required .client_baseserver.tbc_stage.status _status = 1 [default = unpassed];
  if (has__status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_status(), target);
  }

  // repeated .client_baseserver.tbc_reward _rewards = 2;
  for (int i = 0; i < this->_rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.tbc_stage)
  return target;
}

int tbc_stage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.tbc_stage.status _status = 1 [default = unpassed];
    if (has__status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_status());
    }

  }
  // repeated .client_baseserver.tbc_reward _rewards = 2;
  total_size += 1 * this->_rewards_size();
  for (int i = 0; i < this->_rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbc_stage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbc_stage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbc_stage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbc_stage::MergeFrom(const tbc_stage& from) {
  GOOGLE_CHECK_NE(&from, this);
  _rewards_.MergeFrom(from._rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__status()) {
      set__status(from._status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbc_stage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbc_stage::CopyFrom(const tbc_stage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbc_stage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_rewards())) return false;
  return true;
}

void tbc_stage::Swap(tbc_stage* other) {
  if (other != this) {
    std::swap(_status_, other->_status_);
    _rewards_.Swap(&other->_rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbc_stage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbc_stage_descriptor_;
  metadata.reflection = tbc_stage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbc_info::kCurStageFieldNumber;
const int tbc_info::kResetTimesFieldNumber;
const int tbc_info::kHeroesFieldNumber;
const int tbc_info::kStagesFieldNumber;
const int tbc_info::kHireHeroFieldNumber;
#endif  // !_MSC_VER

tbc_info::tbc_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.tbc_info)
}

void tbc_info::InitAsDefaultInstance() {
  _hire_hero_ = const_cast< ::client_baseserver::hire_data*>(&::client_baseserver::hire_data::default_instance());
}

tbc_info::tbc_info(const tbc_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.tbc_info)
}

void tbc_info::SharedCtor() {
  _cached_size_ = 0;
  _cur_stage_ = 0u;
  _reset_times_ = 0u;
  _hire_hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbc_info::~tbc_info() {
  // @@protoc_insertion_point(destructor:client_baseserver.tbc_info)
  SharedDtor();
}

void tbc_info::SharedDtor() {
  if (this != default_instance_) {
    delete _hire_hero_;
  }
}

void tbc_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbc_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbc_info_descriptor_;
}

const tbc_info& tbc_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

tbc_info* tbc_info::default_instance_ = NULL;

tbc_info* tbc_info::New() const {
  return new tbc_info;
}

void tbc_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<tbc_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 19) {
    ZR_(_cur_stage_, _reset_times_);
    if (has__hire_hero()) {
      if (_hire_hero_ != NULL) _hire_hero_->::client_baseserver::hire_data::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _heroes_.Clear();
  _stages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbc_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.tbc_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _cur_stage = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_cur_stage_)));
          set_has__cur_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__reset_times;
        break;
      }

      // required uint32 _reset_times = 2;
      case 2: {
        if (tag == 16) {
         parse__reset_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_reset_times_)));
          set_has__reset_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__heroes;
        break;
      }

      // repeated .client_baseserver.tbc_self_hero _heroes = 3;
      case 3: {
        if (tag == 26) {
         parse__heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__heroes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__heroes;
        if (input->ExpectTag(34)) goto parse__stages;
        break;
      }

      // repeated .client_baseserver.tbc_stage _stages = 4;
      case 4: {
        if (tag == 34) {
         parse__stages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__stages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__stages;
        if (input->ExpectTag(42)) goto parse__hire_hero;
        break;
      }

      // optional .client_baseserver.hire_data _hire_hero = 5;
      case 5: {
        if (tag == 42) {
         parse__hire_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__hire_hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.tbc_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.tbc_info)
  return false;
#undef DO_
}

void tbc_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.tbc_info)
  // required uint32 _cur_stage = 1;
  if (has__cur_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_cur_stage(), output);
  }

  // required uint32 _reset_times = 2;
  if (has__reset_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_reset_times(), output);
  }

  // repeated .client_baseserver.tbc_self_hero _heroes = 3;
  for (int i = 0; i < this->_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_heroes(i), output);
  }

  // repeated .client_baseserver.tbc_stage _stages = 4;
  for (int i = 0; i < this->_stages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_stages(i), output);
  }

  // optional .client_baseserver.hire_data _hire_hero = 5;
  if (has__hire_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_hire_hero(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.tbc_info)
}

::google::protobuf::uint8* tbc_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.tbc_info)
  // required uint32 _cur_stage = 1;
  if (has__cur_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_cur_stage(), target);
  }

  // required uint32 _reset_times = 2;
  if (has__reset_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_reset_times(), target);
  }

  // repeated .client_baseserver.tbc_self_hero _heroes = 3;
  for (int i = 0; i < this->_heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_heroes(i), target);
  }

  // repeated .client_baseserver.tbc_stage _stages = 4;
  for (int i = 0; i < this->_stages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_stages(i), target);
  }

  // optional .client_baseserver.hire_data _hire_hero = 5;
  if (has__hire_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_hire_hero(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.tbc_info)
  return target;
}

int tbc_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _cur_stage = 1;
    if (has__cur_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_cur_stage());
    }

    // required uint32 _reset_times = 2;
    if (has__reset_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_reset_times());
    }

    // optional .client_baseserver.hire_data _hire_hero = 5;
    if (has__hire_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_hire_hero());
    }

  }
  // repeated .client_baseserver.tbc_self_hero _heroes = 3;
  total_size += 1 * this->_heroes_size();
  for (int i = 0; i < this->_heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_heroes(i));
  }

  // repeated .client_baseserver.tbc_stage _stages = 4;
  total_size += 1 * this->_stages_size();
  for (int i = 0; i < this->_stages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_stages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbc_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbc_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbc_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbc_info::MergeFrom(const tbc_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  _heroes_.MergeFrom(from._heroes_);
  _stages_.MergeFrom(from._stages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__cur_stage()) {
      set__cur_stage(from._cur_stage());
    }
    if (from.has__reset_times()) {
      set__reset_times(from._reset_times());
    }
    if (from.has__hire_hero()) {
      mutable__hire_hero()->::client_baseserver::hire_data::MergeFrom(from._hire_hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbc_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbc_info::CopyFrom(const tbc_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbc_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_heroes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->_stages())) return false;
  if (has__hire_hero()) {
    if (!this->_hire_hero().IsInitialized()) return false;
  }
  return true;
}

void tbc_info::Swap(tbc_info* other) {
  if (other != this) {
    std::swap(_cur_stage_, other->_cur_stage_);
    std::swap(_reset_times_, other->_reset_times_);
    _heroes_.Swap(&other->_heroes_);
    _stages_.Swap(&other->_stages_);
    std::swap(_hire_hero_, other->_hire_hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbc_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbc_info_descriptor_;
  metadata.reflection = tbc_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbc_open_panel::kInfoFieldNumber;
#endif  // !_MSC_VER

tbc_open_panel::tbc_open_panel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.tbc_open_panel)
}

void tbc_open_panel::InitAsDefaultInstance() {
  _info_ = const_cast< ::client_baseserver::tbc_info*>(&::client_baseserver::tbc_info::default_instance());
}

tbc_open_panel::tbc_open_panel(const tbc_open_panel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.tbc_open_panel)
}

void tbc_open_panel::SharedCtor() {
  _cached_size_ = 0;
  _info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbc_open_panel::~tbc_open_panel() {
  // @@protoc_insertion_point(destructor:client_baseserver.tbc_open_panel)
  SharedDtor();
}

void tbc_open_panel::SharedDtor() {
  if (this != default_instance_) {
    delete _info_;
  }
}

void tbc_open_panel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbc_open_panel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbc_open_panel_descriptor_;
}

const tbc_open_panel& tbc_open_panel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

tbc_open_panel* tbc_open_panel::default_instance_ = NULL;

tbc_open_panel* tbc_open_panel::New() const {
  return new tbc_open_panel;
}

void tbc_open_panel::Clear() {
  if (has__info()) {
    if (_info_ != NULL) _info_->::client_baseserver::tbc_info::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbc_open_panel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.tbc_open_panel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.tbc_info _info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.tbc_open_panel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.tbc_open_panel)
  return false;
#undef DO_
}

void tbc_open_panel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.tbc_open_panel)
  // required .client_baseserver.tbc_info _info = 1;
  if (has__info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.tbc_open_panel)
}

::google::protobuf::uint8* tbc_open_panel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.tbc_open_panel)
  // required .client_baseserver.tbc_info _info = 1;
  if (has__info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.tbc_open_panel)
  return target;
}

int tbc_open_panel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.tbc_info _info = 1;
    if (has__info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbc_open_panel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbc_open_panel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbc_open_panel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbc_open_panel::MergeFrom(const tbc_open_panel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__info()) {
      mutable__info()->::client_baseserver::tbc_info::MergeFrom(from._info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbc_open_panel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbc_open_panel::CopyFrom(const tbc_open_panel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbc_open_panel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__info()) {
    if (!this->_info().IsInitialized()) return false;
  }
  return true;
}

void tbc_open_panel::Swap(tbc_open_panel* other) {
  if (other != this) {
    std::swap(_info_, other->_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbc_open_panel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbc_open_panel_descriptor_;
  metadata.reflection = tbc_open_panel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbc_query_oppo::kSummaryFieldNumber;
const int tbc_query_oppo::kOpposFieldNumber;
const int tbc_query_oppo::kIsRobotFieldNumber;
#endif  // !_MSC_VER

tbc_query_oppo::tbc_query_oppo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.tbc_query_oppo)
}

void tbc_query_oppo::InitAsDefaultInstance() {
  _summary_ = const_cast< ::client_baseserver::user_summary*>(&::client_baseserver::user_summary::default_instance());
}

tbc_query_oppo::tbc_query_oppo(const tbc_query_oppo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.tbc_query_oppo)
}

void tbc_query_oppo::SharedCtor() {
  _cached_size_ = 0;
  _summary_ = NULL;
  _is_robot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbc_query_oppo::~tbc_query_oppo() {
  // @@protoc_insertion_point(destructor:client_baseserver.tbc_query_oppo)
  SharedDtor();
}

void tbc_query_oppo::SharedDtor() {
  if (this != default_instance_) {
    delete _summary_;
  }
}

void tbc_query_oppo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbc_query_oppo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbc_query_oppo_descriptor_;
}

const tbc_query_oppo& tbc_query_oppo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

tbc_query_oppo* tbc_query_oppo::default_instance_ = NULL;

tbc_query_oppo* tbc_query_oppo::New() const {
  return new tbc_query_oppo;
}

void tbc_query_oppo::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has__summary()) {
      if (_summary_ != NULL) _summary_->::client_baseserver::user_summary::Clear();
    }
    _is_robot_ = 0u;
  }
  _oppos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbc_query_oppo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.tbc_query_oppo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.user_summary _summary = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__oppos;
        break;
      }

      // repeated .client_baseserver.tbc_oppo_hero _oppos = 2;
      case 2: {
        if (tag == 18) {
         parse__oppos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__oppos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__oppos;
        if (input->ExpectTag(24)) goto parse__is_robot;
        break;
      }

      // required uint32 _is_robot = 3;
      case 3: {
        if (tag == 24) {
         parse__is_robot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_is_robot_)));
          set_has__is_robot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.tbc_query_oppo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.tbc_query_oppo)
  return false;
#undef DO_
}

void tbc_query_oppo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.tbc_query_oppo)
  // required .client_baseserver.user_summary _summary = 1;
  if (has__summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_summary(), output);
  }

  // repeated .client_baseserver.tbc_oppo_hero _oppos = 2;
  for (int i = 0; i < this->_oppos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_oppos(i), output);
  }

  // required uint32 _is_robot = 3;
  if (has__is_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_is_robot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.tbc_query_oppo)
}

::google::protobuf::uint8* tbc_query_oppo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.tbc_query_oppo)
  // required .client_baseserver.user_summary _summary = 1;
  if (has__summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_summary(), target);
  }

  // repeated .client_baseserver.tbc_oppo_hero _oppos = 2;
  for (int i = 0; i < this->_oppos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_oppos(i), target);
  }

  // required uint32 _is_robot = 3;
  if (has__is_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_is_robot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.tbc_query_oppo)
  return target;
}

int tbc_query_oppo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.user_summary _summary = 1;
    if (has__summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_summary());
    }

    // required uint32 _is_robot = 3;
    if (has__is_robot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_is_robot());
    }

  }
  // repeated .client_baseserver.tbc_oppo_hero _oppos = 2;
  total_size += 1 * this->_oppos_size();
  for (int i = 0; i < this->_oppos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_oppos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbc_query_oppo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbc_query_oppo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbc_query_oppo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbc_query_oppo::MergeFrom(const tbc_query_oppo& from) {
  GOOGLE_CHECK_NE(&from, this);
  _oppos_.MergeFrom(from._oppos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__summary()) {
      mutable__summary()->::client_baseserver::user_summary::MergeFrom(from._summary());
    }
    if (from.has__is_robot()) {
      set__is_robot(from._is_robot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbc_query_oppo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbc_query_oppo::CopyFrom(const tbc_query_oppo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbc_query_oppo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has__summary()) {
    if (!this->_summary().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->_oppos())) return false;
  return true;
}

void tbc_query_oppo::Swap(tbc_query_oppo* other) {
  if (other != this) {
    std::swap(_summary_, other->_summary_);
    _oppos_.Swap(&other->_oppos_);
    std::swap(_is_robot_, other->_is_robot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbc_query_oppo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbc_query_oppo_descriptor_;
  metadata.reflection = tbc_query_oppo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbc_start_battle::kResultFieldNumber;
const int tbc_start_battle::kRseedFieldNumber;
#endif  // !_MSC_VER

tbc_start_battle::tbc_start_battle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.tbc_start_battle)
}

void tbc_start_battle::InitAsDefaultInstance() {
}

tbc_start_battle::tbc_start_battle(const tbc_start_battle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.tbc_start_battle)
}

void tbc_start_battle::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _rseed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbc_start_battle::~tbc_start_battle() {
  // @@protoc_insertion_point(destructor:client_baseserver.tbc_start_battle)
  SharedDtor();
}

void tbc_start_battle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tbc_start_battle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbc_start_battle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbc_start_battle_descriptor_;
}

const tbc_start_battle& tbc_start_battle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

tbc_start_battle* tbc_start_battle::default_instance_ = NULL;

tbc_start_battle* tbc_start_battle::New() const {
  return new tbc_start_battle;
}

void tbc_start_battle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<tbc_start_battle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_result_, _rseed_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbc_start_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.tbc_start_battle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1 [default = success];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__rseed;
        break;
      }

      // required uint32 _rseed = 2;
      case 2: {
        if (tag == 16) {
         parse__rseed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_rseed_)));
          set_has__rseed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.tbc_start_battle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.tbc_start_battle)
  return false;
#undef DO_
}

void tbc_start_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.tbc_start_battle)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // required uint32 _rseed = 2;
  if (has__rseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_rseed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.tbc_start_battle)
}

::google::protobuf::uint8* tbc_start_battle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.tbc_start_battle)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // required uint32 _rseed = 2;
  if (has__rseed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_rseed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.tbc_start_battle)
  return target;
}

int tbc_start_battle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1 [default = success];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // required uint32 _rseed = 2;
    if (has__rseed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_rseed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbc_start_battle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbc_start_battle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbc_start_battle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbc_start_battle::MergeFrom(const tbc_start_battle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__rseed()) {
      set__rseed(from._rseed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbc_start_battle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbc_start_battle::CopyFrom(const tbc_start_battle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbc_start_battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void tbc_start_battle::Swap(tbc_start_battle* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_rseed_, other->_rseed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbc_start_battle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbc_start_battle_descriptor_;
  metadata.reflection = tbc_start_battle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbc_end_battle::kResultFieldNumber;
#endif  // !_MSC_VER

tbc_end_battle::tbc_end_battle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.tbc_end_battle)
}

void tbc_end_battle::InitAsDefaultInstance() {
}

tbc_end_battle::tbc_end_battle(const tbc_end_battle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.tbc_end_battle)
}

void tbc_end_battle::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbc_end_battle::~tbc_end_battle() {
  // @@protoc_insertion_point(destructor:client_baseserver.tbc_end_battle)
  SharedDtor();
}

void tbc_end_battle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tbc_end_battle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbc_end_battle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbc_end_battle_descriptor_;
}

const tbc_end_battle& tbc_end_battle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

tbc_end_battle* tbc_end_battle::default_instance_ = NULL;

tbc_end_battle* tbc_end_battle::New() const {
  return new tbc_end_battle;
}

void tbc_end_battle::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbc_end_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.tbc_end_battle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.battle_result _result = 1 [default = victory];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::battle_result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::battle_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.tbc_end_battle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.tbc_end_battle)
  return false;
#undef DO_
}

void tbc_end_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.tbc_end_battle)
  // required .client_baseserver.battle_result _result = 1 [default = victory];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.tbc_end_battle)
}

::google::protobuf::uint8* tbc_end_battle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.tbc_end_battle)
  // required .client_baseserver.battle_result _result = 1 [default = victory];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.tbc_end_battle)
  return target;
}

int tbc_end_battle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.battle_result _result = 1 [default = victory];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbc_end_battle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbc_end_battle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbc_end_battle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbc_end_battle::MergeFrom(const tbc_end_battle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbc_end_battle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbc_end_battle::CopyFrom(const tbc_end_battle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbc_end_battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tbc_end_battle::Swap(tbc_end_battle* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbc_end_battle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbc_end_battle_descriptor_;
  metadata.reflection = tbc_end_battle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbc_reset::kResultFieldNumber;
const int tbc_reset::kInfoFieldNumber;
#endif  // !_MSC_VER

tbc_reset::tbc_reset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.tbc_reset)
}

void tbc_reset::InitAsDefaultInstance() {
  _info_ = const_cast< ::client_baseserver::tbc_info*>(&::client_baseserver::tbc_info::default_instance());
}

tbc_reset::tbc_reset(const tbc_reset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.tbc_reset)
}

void tbc_reset::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbc_reset::~tbc_reset() {
  // @@protoc_insertion_point(destructor:client_baseserver.tbc_reset)
  SharedDtor();
}

void tbc_reset::SharedDtor() {
  if (this != default_instance_) {
    delete _info_;
  }
}

void tbc_reset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbc_reset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbc_reset_descriptor_;
}

const tbc_reset& tbc_reset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

tbc_reset* tbc_reset::default_instance_ = NULL;

tbc_reset* tbc_reset::New() const {
  return new tbc_reset;
}

void tbc_reset::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _result_ = 0;
    if (has__info()) {
      if (_info_ != NULL) _info_->::client_baseserver::tbc_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbc_reset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.tbc_reset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1 [default = success];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__info;
        break;
      }

      // optional .client_baseserver.tbc_info _info = 2;
      case 2: {
        if (tag == 18) {
         parse__info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.tbc_reset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.tbc_reset)
  return false;
#undef DO_
}

void tbc_reset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.tbc_reset)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // optional .client_baseserver.tbc_info _info = 2;
  if (has__info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.tbc_reset)
}

::google::protobuf::uint8* tbc_reset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.tbc_reset)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // optional .client_baseserver.tbc_info _info = 2;
  if (has__info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.tbc_reset)
  return target;
}

int tbc_reset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1 [default = success];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional .client_baseserver.tbc_info _info = 2;
    if (has__info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbc_reset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbc_reset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbc_reset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbc_reset::MergeFrom(const tbc_reset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__info()) {
      mutable__info()->::client_baseserver::tbc_info::MergeFrom(from._info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbc_reset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbc_reset::CopyFrom(const tbc_reset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbc_reset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__info()) {
    if (!this->_info().IsInitialized()) return false;
  }
  return true;
}

void tbc_reset::Swap(tbc_reset* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_info_, other->_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbc_reset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbc_reset_descriptor_;
  metadata.reflection = tbc_reset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbc_draw_reward::kResultFieldNumber;
const int tbc_draw_reward::kStageIdFieldNumber;
const int tbc_draw_reward::kRewardsFieldNumber;
const int tbc_draw_reward::kHeroesFieldNumber;
#endif  // !_MSC_VER

tbc_draw_reward::tbc_draw_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.tbc_draw_reward)
}

void tbc_draw_reward::InitAsDefaultInstance() {
}

tbc_draw_reward::tbc_draw_reward(const tbc_draw_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.tbc_draw_reward)
}

void tbc_draw_reward::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _stage_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbc_draw_reward::~tbc_draw_reward() {
  // @@protoc_insertion_point(destructor:client_baseserver.tbc_draw_reward)
  SharedDtor();
}

void tbc_draw_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tbc_draw_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbc_draw_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbc_draw_reward_descriptor_;
}

const tbc_draw_reward& tbc_draw_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

tbc_draw_reward* tbc_draw_reward::default_instance_ = NULL;

tbc_draw_reward* tbc_draw_reward::New() const {
  return new tbc_draw_reward;
}

void tbc_draw_reward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<tbc_draw_reward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_result_, _stage_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  _rewards_.Clear();
  _heroes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbc_draw_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.tbc_draw_reward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1 [default = success];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__stage_id;
        break;
      }

      // required uint32 _stage_id = 2;
      case 2: {
        if (tag == 16) {
         parse__stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stage_id_)));
          set_has__stage_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__rewards;
        break;
      }

      // repeated .client_baseserver.tbc_reward _rewards = 3;
      case 3: {
        if (tag == 26) {
         parse__rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__rewards;
        if (input->ExpectTag(34)) goto parse__heroes;
        break;
      }

      // repeated .client_baseserver.hero _heroes = 4;
      case 4: {
        if (tag == 34) {
         parse__heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__heroes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__heroes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.tbc_draw_reward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.tbc_draw_reward)
  return false;
#undef DO_
}

void tbc_draw_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.tbc_draw_reward)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // required uint32 _stage_id = 2;
  if (has__stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_stage_id(), output);
  }

  // repeated .client_baseserver.tbc_reward _rewards = 3;
  for (int i = 0; i < this->_rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_rewards(i), output);
  }

  // repeated .client_baseserver.hero _heroes = 4;
  for (int i = 0; i < this->_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_heroes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.tbc_draw_reward)
}

::google::protobuf::uint8* tbc_draw_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.tbc_draw_reward)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // required uint32 _stage_id = 2;
  if (has__stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_stage_id(), target);
  }

  // repeated .client_baseserver.tbc_reward _rewards = 3;
  for (int i = 0; i < this->_rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_rewards(i), target);
  }

  // repeated .client_baseserver.hero _heroes = 4;
  for (int i = 0; i < this->_heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_heroes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.tbc_draw_reward)
  return target;
}

int tbc_draw_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1 [default = success];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // required uint32 _stage_id = 2;
    if (has__stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stage_id());
    }

  }
  // repeated .client_baseserver.tbc_reward _rewards = 3;
  total_size += 1 * this->_rewards_size();
  for (int i = 0; i < this->_rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_rewards(i));
  }

  // repeated .client_baseserver.hero _heroes = 4;
  total_size += 1 * this->_heroes_size();
  for (int i = 0; i < this->_heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_heroes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbc_draw_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbc_draw_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbc_draw_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbc_draw_reward::MergeFrom(const tbc_draw_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  _rewards_.MergeFrom(from._rewards_);
  _heroes_.MergeFrom(from._heroes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__stage_id()) {
      set__stage_id(from._stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbc_draw_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbc_draw_reward::CopyFrom(const tbc_draw_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbc_draw_reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_rewards())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->_heroes())) return false;
  return true;
}

void tbc_draw_reward::Swap(tbc_draw_reward* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_stage_id_, other->_stage_id_);
    _rewards_.Swap(&other->_rewards_);
    _heroes_.Swap(&other->_heroes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbc_draw_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbc_draw_reward_descriptor_;
  metadata.reflection = tbc_draw_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_maillist_reply::kSysMailListFieldNumber;
#endif  // !_MSC_VER

get_maillist_reply::get_maillist_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.get_maillist_reply)
}

void get_maillist_reply::InitAsDefaultInstance() {
}

get_maillist_reply::get_maillist_reply(const get_maillist_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.get_maillist_reply)
}

void get_maillist_reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_maillist_reply::~get_maillist_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.get_maillist_reply)
  SharedDtor();
}

void get_maillist_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_maillist_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_maillist_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_maillist_reply_descriptor_;
}

const get_maillist_reply& get_maillist_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

get_maillist_reply* get_maillist_reply::default_instance_ = NULL;

get_maillist_reply* get_maillist_reply::New() const {
  return new get_maillist_reply;
}

void get_maillist_reply::Clear() {
  _sys_mail_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_maillist_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.get_maillist_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.sys_mail _sys_mail_list = 1;
      case 1: {
        if (tag == 10) {
         parse__sys_mail_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__sys_mail_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__sys_mail_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.get_maillist_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.get_maillist_reply)
  return false;
#undef DO_
}

void get_maillist_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.get_maillist_reply)
  // repeated .client_baseserver.sys_mail _sys_mail_list = 1;
  for (int i = 0; i < this->_sys_mail_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_sys_mail_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.get_maillist_reply)
}

::google::protobuf::uint8* get_maillist_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.get_maillist_reply)
  // repeated .client_baseserver.sys_mail _sys_mail_list = 1;
  for (int i = 0; i < this->_sys_mail_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_sys_mail_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.get_maillist_reply)
  return target;
}

int get_maillist_reply::ByteSize() const {
  int total_size = 0;

  // repeated .client_baseserver.sys_mail _sys_mail_list = 1;
  total_size += 1 * this->_sys_mail_list_size();
  for (int i = 0; i < this->_sys_mail_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_sys_mail_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_maillist_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_maillist_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_maillist_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_maillist_reply::MergeFrom(const get_maillist_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _sys_mail_list_.MergeFrom(from._sys_mail_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_maillist_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_maillist_reply::CopyFrom(const get_maillist_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_maillist_reply::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_sys_mail_list())) return false;
  return true;
}

void get_maillist_reply::Swap(get_maillist_reply* other) {
  if (other != this) {
    _sys_mail_list_.Swap(&other->_sys_mail_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_maillist_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_maillist_reply_descriptor_;
  metadata.reflection = get_maillist_reply_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* sys_mail_status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sys_mail_status_descriptor_;
}
bool sys_mail_status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const sys_mail_status sys_mail::unread;
const sys_mail_status sys_mail::read;
const sys_mail_status sys_mail::delete;
const sys_mail_status sys_mail::status_MIN;
const sys_mail_status sys_mail::status_MAX;
const int sys_mail::status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int sys_mail::kIdFieldNumber;
const int sys_mail::kStatusFieldNumber;
const int sys_mail::kMailTimeFieldNumber;
const int sys_mail::kExpireTimeFieldNumber;
const int sys_mail::kContentFieldNumber;
const int sys_mail::kMoneyFieldNumber;
const int sys_mail::kDiamondsFieldNumber;
const int sys_mail::kSkillPointFieldNumber;
const int sys_mail::kItemsFieldNumber;
const int sys_mail::kTypeFieldNumber;
const int sys_mail::kPointsFieldNumber;
#endif  // !_MSC_VER

sys_mail::sys_mail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.sys_mail)
}

void sys_mail::InitAsDefaultInstance() {
  _content_ = const_cast< ::client_baseserver::mail_content*>(&::client_baseserver::mail_content::default_instance());
}

sys_mail::sys_mail(const sys_mail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.sys_mail)
}

void sys_mail::SharedCtor() {
  _cached_size_ = 0;
  _id_ = 0u;
  _status_ = 0;
  _mail_time_ = 0u;
  _expire_time_ = 0u;
  _content_ = NULL;
  _money_ = 0u;
  _diamonds_ = 0u;
  _skill_point_ = 0u;
  _type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sys_mail::~sys_mail() {
  // @@protoc_insertion_point(destructor:client_baseserver.sys_mail)
  SharedDtor();
}

void sys_mail::SharedDtor() {
  if (this != default_instance_) {
    delete _content_;
  }
}

void sys_mail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sys_mail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sys_mail_descriptor_;
}

const sys_mail& sys_mail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

sys_mail* sys_mail::default_instance_ = NULL;

sys_mail* sys_mail::New() const {
  return new sys_mail;
}

void sys_mail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<sys_mail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(_id_, _expire_time_);
    ZR_(_money_, _diamonds_);
    if (has__content()) {
      if (_content_ != NULL) _content_->::client_baseserver::mail_content::Clear();
    }
    _skill_point_ = 0u;
  }
  _type_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  _items_.Clear();
  _points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sys_mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.sys_mail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_id_)));
          set_has__id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__status;
        break;
      }

      // required .client_baseserver.sys_mail.status _status = 2;
      case 2: {
        if (tag == 16) {
         parse__status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::sys_mail_status_IsValid(value)) {
            set__status(static_cast< ::client_baseserver::sys_mail_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__mail_time;
        break;
      }

      // required uint32 _mail_time = 3;
      case 3: {
        if (tag == 24) {
         parse__mail_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_mail_time_)));
          set_has__mail_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__expire_time;
        break;
      }

      // required uint32 _expire_time = 4;
      case 4: {
        if (tag == 32) {
         parse__expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_expire_time_)));
          set_has__expire_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse__content;
        break;
      }

      // required .client_baseserver.mail_content _content = 5;
      case 5: {
        if (tag == 42) {
         parse__content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse__money;
        break;
      }

      // optional uint32 _money = 6;
      case 6: {
        if (tag == 48) {
         parse__money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_money_)));
          set_has__money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse__diamonds;
        break;
      }

      // optional uint32 _diamonds = 7;
      case 7: {
        if (tag == 56) {
         parse__diamonds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_diamonds_)));
          set_has__diamonds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse__skill_point;
        break;
      }

      // optional uint32 _skill_point = 8;
      case 8: {
        if (tag == 64) {
         parse__skill_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_skill_point_)));
          set_has__skill_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse__items;
        break;
      }

      // repeated uint32 _items = 9;
      case 9: {
        if (tag == 72) {
         parse__items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable__items())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__items())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse__items;
        if (input->ExpectTag(82)) goto parse__points;
        break;
      }

      // repeated .client_baseserver.user_point _points = 10;
      case 10: {
        if (tag == 82) {
         parse__points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse__points;
        if (input->ExpectTag(88)) goto parse__type;
        break;
      }

      // required uint32 _type = 11;
      case 11: {
        if (tag == 88) {
         parse__type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_type_)));
          set_has__type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.sys_mail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.sys_mail)
  return false;
#undef DO_
}

void sys_mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.sys_mail)
  // required uint32 _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_id(), output);
  }

  // required .client_baseserver.sys_mail.status _status = 2;
  if (has__status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->_status(), output);
  }

  // required uint32 _mail_time = 3;
  if (has__mail_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_mail_time(), output);
  }

  // required uint32 _expire_time = 4;
  if (has__expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_expire_time(), output);
  }

  // required .client_baseserver.mail_content _content = 5;
  if (has__content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_content(), output);
  }

  // optional uint32 _money = 6;
  if (has__money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_money(), output);
  }

  // optional uint32 _diamonds = 7;
  if (has__diamonds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->_diamonds(), output);
  }

  // optional uint32 _skill_point = 8;
  if (has__skill_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->_skill_point(), output);
  }

  // repeated uint32 _items = 9;
  for (int i = 0; i < this->_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->_items(i), output);
  }

  // repeated .client_baseserver.user_point _points = 10;
  for (int i = 0; i < this->_points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_points(i), output);
  }

  // required uint32 _type = 11;
  if (has__type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.sys_mail)
}

::google::protobuf::uint8* sys_mail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.sys_mail)
  // required uint32 _id = 1;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_id(), target);
  }

  // required .client_baseserver.sys_mail.status _status = 2;
  if (has__status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->_status(), target);
  }

  // required uint32 _mail_time = 3;
  if (has__mail_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_mail_time(), target);
  }

  // required uint32 _expire_time = 4;
  if (has__expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_expire_time(), target);
  }

  // required .client_baseserver.mail_content _content = 5;
  if (has__content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_content(), target);
  }

  // optional uint32 _money = 6;
  if (has__money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_money(), target);
  }

  // optional uint32 _diamonds = 7;
  if (has__diamonds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->_diamonds(), target);
  }

  // optional uint32 _skill_point = 8;
  if (has__skill_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->_skill_point(), target);
  }

  // repeated uint32 _items = 9;
  for (int i = 0; i < this->_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->_items(i), target);
  }

  // repeated .client_baseserver.user_point _points = 10;
  for (int i = 0; i < this->_points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->_points(i), target);
  }

  // required uint32 _type = 11;
  if (has__type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.sys_mail)
  return target;
}

int sys_mail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _id = 1;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_id());
    }

    // required .client_baseserver.sys_mail.status _status = 2;
    if (has__status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_status());
    }

    // required uint32 _mail_time = 3;
    if (has__mail_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_mail_time());
    }

    // required uint32 _expire_time = 4;
    if (has__expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_expire_time());
    }

    // required .client_baseserver.mail_content _content = 5;
    if (has__content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_content());
    }

    // optional uint32 _money = 6;
    if (has__money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_money());
    }

    // optional uint32 _diamonds = 7;
    if (has__diamonds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_diamonds());
    }

    // optional uint32 _skill_point = 8;
    if (has__skill_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_skill_point());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required uint32 _type = 11;
    if (has__type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_type());
    }

  }
  // repeated uint32 _items = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->_items_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_items(i));
    }
    total_size += 1 * this->_items_size() + data_size;
  }

  // repeated .client_baseserver.user_point _points = 10;
  total_size += 1 * this->_points_size();
  for (int i = 0; i < this->_points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sys_mail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sys_mail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sys_mail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sys_mail::MergeFrom(const sys_mail& from) {
  GOOGLE_CHECK_NE(&from, this);
  _items_.MergeFrom(from._items_);
  _points_.MergeFrom(from._points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__id()) {
      set__id(from._id());
    }
    if (from.has__status()) {
      set__status(from._status());
    }
    if (from.has__mail_time()) {
      set__mail_time(from._mail_time());
    }
    if (from.has__expire_time()) {
      set__expire_time(from._expire_time());
    }
    if (from.has__content()) {
      mutable__content()->::client_baseserver::mail_content::MergeFrom(from._content());
    }
    if (from.has__money()) {
      set__money(from._money());
    }
    if (from.has__diamonds()) {
      set__diamonds(from._diamonds());
    }
    if (from.has__skill_point()) {
      set__skill_point(from._skill_point());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has__type()) {
      set__type(from._type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sys_mail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sys_mail::CopyFrom(const sys_mail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sys_mail::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000021f) != 0x0000021f) return false;

  if (has__content()) {
    if (!this->_content().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->_points())) return false;
  return true;
}

void sys_mail::Swap(sys_mail* other) {
  if (other != this) {
    std::swap(_id_, other->_id_);
    std::swap(_status_, other->_status_);
    std::swap(_mail_time_, other->_mail_time_);
    std::swap(_expire_time_, other->_expire_time_);
    std::swap(_content_, other->_content_);
    std::swap(_money_, other->_money_);
    std::swap(_diamonds_, other->_diamonds_);
    std::swap(_skill_point_, other->_skill_point_);
    _items_.Swap(&other->_items_);
    std::swap(_type_, other->_type_);
    _points_.Swap(&other->_points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sys_mail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sys_mail_descriptor_;
  metadata.reflection = sys_mail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_content::kPlainMailFieldNumber;
const int mail_content::kFormatMailFieldNumber;
#endif  // !_MSC_VER

mail_content::mail_content()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.mail_content)
}

void mail_content::InitAsDefaultInstance() {
  _plain_mail_ = const_cast< ::client_baseserver::plain_mail*>(&::client_baseserver::plain_mail::default_instance());
  _format_mail_ = const_cast< ::client_baseserver::format_mail*>(&::client_baseserver::format_mail::default_instance());
}

mail_content::mail_content(const mail_content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.mail_content)
}

void mail_content::SharedCtor() {
  _cached_size_ = 0;
  _plain_mail_ = NULL;
  _format_mail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_content::~mail_content() {
  // @@protoc_insertion_point(destructor:client_baseserver.mail_content)
  SharedDtor();
}

void mail_content::SharedDtor() {
  if (this != default_instance_) {
    delete _plain_mail_;
    delete _format_mail_;
  }
}

void mail_content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_content_descriptor_;
}

const mail_content& mail_content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

mail_content* mail_content::default_instance_ = NULL;

mail_content* mail_content::New() const {
  return new mail_content;
}

void mail_content::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has__plain_mail()) {
      if (_plain_mail_ != NULL) _plain_mail_->::client_baseserver::plain_mail::Clear();
    }
    if (has__format_mail()) {
      if (_format_mail_ != NULL) _format_mail_->::client_baseserver::format_mail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.mail_content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_baseserver.plain_mail _plain_mail = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__plain_mail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__format_mail;
        break;
      }

      // optional .client_baseserver.format_mail _format_mail = 2;
      case 2: {
        if (tag == 18) {
         parse__format_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__format_mail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.mail_content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.mail_content)
  return false;
#undef DO_
}

void mail_content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.mail_content)
  // optional .client_baseserver.plain_mail _plain_mail = 1;
  if (has__plain_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_plain_mail(), output);
  }

  // optional .client_baseserver.format_mail _format_mail = 2;
  if (has__format_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_format_mail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.mail_content)
}

::google::protobuf::uint8* mail_content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.mail_content)
  // optional .client_baseserver.plain_mail _plain_mail = 1;
  if (has__plain_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_plain_mail(), target);
  }

  // optional .client_baseserver.format_mail _format_mail = 2;
  if (has__format_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_format_mail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.mail_content)
  return target;
}

int mail_content::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_baseserver.plain_mail _plain_mail = 1;
    if (has__plain_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_plain_mail());
    }

    // optional .client_baseserver.format_mail _format_mail = 2;
    if (has__format_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_format_mail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_content::MergeFrom(const mail_content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__plain_mail()) {
      mutable__plain_mail()->::client_baseserver::plain_mail::MergeFrom(from._plain_mail());
    }
    if (from.has__format_mail()) {
      mutable__format_mail()->::client_baseserver::format_mail::MergeFrom(from._format_mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_content::CopyFrom(const mail_content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_content::IsInitialized() const {

  if (has__plain_mail()) {
    if (!this->_plain_mail().IsInitialized()) return false;
  }
  if (has__format_mail()) {
    if (!this->_format_mail().IsInitialized()) return false;
  }
  return true;
}

void mail_content::Swap(mail_content* other) {
  if (other != this) {
    std::swap(_plain_mail_, other->_plain_mail_);
    std::swap(_format_mail_, other->_format_mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_content_descriptor_;
  metadata.reflection = mail_content_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int plain_mail::kFromFieldNumber;
const int plain_mail::kTitleFieldNumber;
const int plain_mail::kContentFieldNumber;
#endif  // !_MSC_VER

plain_mail::plain_mail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.plain_mail)
}

void plain_mail::InitAsDefaultInstance() {
}

plain_mail::plain_mail(const plain_mail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.plain_mail)
}

void plain_mail::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _from_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

plain_mail::~plain_mail() {
  // @@protoc_insertion_point(destructor:client_baseserver.plain_mail)
  SharedDtor();
}

void plain_mail::SharedDtor() {
  if (_from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _from_;
  }
  if (_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _title_;
  }
  if (_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _content_;
  }
  if (this != default_instance_) {
  }
}

void plain_mail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* plain_mail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return plain_mail_descriptor_;
}

const plain_mail& plain_mail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

plain_mail* plain_mail::default_instance_ = NULL;

plain_mail* plain_mail::New() const {
  return new plain_mail;
}

void plain_mail::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has__from()) {
      if (_from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _from_->clear();
      }
    }
    if (has__title()) {
      if (_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _title_->clear();
      }
    }
    if (has__content()) {
      if (_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool plain_mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.plain_mail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _from = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_from().data(), this->_from().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_from");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__title;
        break;
      }

      // required string _title = 2;
      case 2: {
        if (tag == 18) {
         parse__title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_title().data(), this->_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__content;
        break;
      }

      // required string _content = 3;
      case 3: {
        if (tag == 26) {
         parse__content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_content().data(), this->_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.plain_mail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.plain_mail)
  return false;
#undef DO_
}

void plain_mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.plain_mail)
  // required string _from = 1;
  if (has__from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_from().data(), this->_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->_from(), output);
  }

  // required string _title = 2;
  if (has__title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_title().data(), this->_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->_title(), output);
  }

  // required string _content = 3;
  if (has__content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_content().data(), this->_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.plain_mail)
}

::google::protobuf::uint8* plain_mail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.plain_mail)
  // required string _from = 1;
  if (has__from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_from().data(), this->_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_from(), target);
  }

  // required string _title = 2;
  if (has__title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_title().data(), this->_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_title(), target);
  }

  // required string _content = 3;
  if (has__content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_content().data(), this->_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.plain_mail)
  return target;
}

int plain_mail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _from = 1;
    if (has__from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_from());
    }

    // required string _title = 2;
    if (has__title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_title());
    }

    // required string _content = 3;
    if (has__content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void plain_mail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const plain_mail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const plain_mail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void plain_mail::MergeFrom(const plain_mail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__from()) {
      set__from(from._from());
    }
    if (from.has__title()) {
      set__title(from._title());
    }
    if (from.has__content()) {
      set__content(from._content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void plain_mail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plain_mail::CopyFrom(const plain_mail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plain_mail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void plain_mail::Swap(plain_mail* other) {
  if (other != this) {
    std::swap(_from_, other->_from_);
    std::swap(_title_, other->_title_);
    std::swap(_content_, other->_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata plain_mail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = plain_mail_descriptor_;
  metadata.reflection = plain_mail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int format_mail::kMailCfgIdFieldNumber;
const int format_mail::kParamsFieldNumber;
#endif  // !_MSC_VER

format_mail::format_mail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.format_mail)
}

void format_mail::InitAsDefaultInstance() {
}

format_mail::format_mail(const format_mail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.format_mail)
}

void format_mail::SharedCtor() {
  _cached_size_ = 0;
  _mail_cfg_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

format_mail::~format_mail() {
  // @@protoc_insertion_point(destructor:client_baseserver.format_mail)
  SharedDtor();
}

void format_mail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void format_mail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* format_mail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return format_mail_descriptor_;
}

const format_mail& format_mail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

format_mail* format_mail::default_instance_ = NULL;

format_mail* format_mail::New() const {
  return new format_mail;
}

void format_mail::Clear() {
  _mail_cfg_id_ = 0u;
  _params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool format_mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.format_mail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _mail_cfg_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_mail_cfg_id_)));
          set_has__mail_cfg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__params;
        break;
      }

      // repeated .client_baseserver.mail_param _params = 2;
      case 2: {
        if (tag == 18) {
         parse__params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__params;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.format_mail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.format_mail)
  return false;
#undef DO_
}

void format_mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.format_mail)
  // required uint32 _mail_cfg_id = 1;
  if (has__mail_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_mail_cfg_id(), output);
  }

  // repeated .client_baseserver.mail_param _params = 2;
  for (int i = 0; i < this->_params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.format_mail)
}

::google::protobuf::uint8* format_mail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.format_mail)
  // required uint32 _mail_cfg_id = 1;
  if (has__mail_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_mail_cfg_id(), target);
  }

  // repeated .client_baseserver.mail_param _params = 2;
  for (int i = 0; i < this->_params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.format_mail)
  return target;
}

int format_mail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _mail_cfg_id = 1;
    if (has__mail_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_mail_cfg_id());
    }

  }
  // repeated .client_baseserver.mail_param _params = 2;
  total_size += 1 * this->_params_size();
  for (int i = 0; i < this->_params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void format_mail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const format_mail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const format_mail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void format_mail::MergeFrom(const format_mail& from) {
  GOOGLE_CHECK_NE(&from, this);
  _params_.MergeFrom(from._params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__mail_cfg_id()) {
      set__mail_cfg_id(from._mail_cfg_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void format_mail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void format_mail::CopyFrom(const format_mail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool format_mail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_params())) return false;
  return true;
}

void format_mail::Swap(format_mail* other) {
  if (other != this) {
    std::swap(_mail_cfg_id_, other->_mail_cfg_id_);
    _params_.Swap(&other->_params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata format_mail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = format_mail_descriptor_;
  metadata.reflection = format_mail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* mail_param_mail_param_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_param_mail_param_type_descriptor_;
}
bool mail_param_mail_param_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const mail_param_mail_param_type mail_param::value;
const mail_param_mail_param_type mail_param::money;
const mail_param_mail_param_type mail_param::item;
const mail_param_mail_param_type mail_param::mine;
const mail_param_mail_param_type mail_param::self_hero;
const mail_param_mail_param_type mail_param::excav_battle_id;
const mail_param_mail_param_type mail_param::hero_name;
const mail_param_mail_param_type mail_param::mail_param_type_MIN;
const mail_param_mail_param_type mail_param::mail_param_type_MAX;
const int mail_param::mail_param_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int mail_param::kIdxFieldNumber;
const int mail_param::kTypeFieldNumber;
const int mail_param::kValueFieldNumber;
#endif  // !_MSC_VER

mail_param::mail_param()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.mail_param)
}

void mail_param::InitAsDefaultInstance() {
}

mail_param::mail_param(const mail_param& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.mail_param)
}

void mail_param::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _idx_ = 0u;
  _type_ = 1;
  _value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_param::~mail_param() {
  // @@protoc_insertion_point(destructor:client_baseserver.mail_param)
  SharedDtor();
}

void mail_param::SharedDtor() {
  if (_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _value_;
  }
  if (this != default_instance_) {
  }
}

void mail_param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_param::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_param_descriptor_;
}

const mail_param& mail_param::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

mail_param* mail_param::default_instance_ = NULL;

mail_param* mail_param::New() const {
  return new mail_param;
}

void mail_param::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    _idx_ = 0u;
    _type_ = 1;
    if (has__value()) {
      if (_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.mail_param)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _idx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_idx_)));
          set_has__idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__type;
        break;
      }

      // optional .client_baseserver.mail_param.mail_param_type _type = 2;
      case 2: {
        if (tag == 16) {
         parse__type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::mail_param_mail_param_type_IsValid(value)) {
            set__type(static_cast< ::client_baseserver::mail_param_mail_param_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__value;
        break;
      }

      // optional string _value = 3;
      case 3: {
        if (tag == 26) {
         parse__value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_value().data(), this->_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.mail_param)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.mail_param)
  return false;
#undef DO_
}

void mail_param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.mail_param)
  // required uint32 _idx = 1;
  if (has__idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_idx(), output);
  }

  // optional .client_baseserver.mail_param.mail_param_type _type = 2;
  if (has__type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->_type(), output);
  }

  // optional string _value = 3;
  if (has__value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_value().data(), this->_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.mail_param)
}

::google::protobuf::uint8* mail_param::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.mail_param)
  // required uint32 _idx = 1;
  if (has__idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_idx(), target);
  }

  // optional .client_baseserver.mail_param.mail_param_type _type = 2;
  if (has__type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->_type(), target);
  }

  // optional string _value = 3;
  if (has__value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_value().data(), this->_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.mail_param)
  return target;
}

int mail_param::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _idx = 1;
    if (has__idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_idx());
    }

    // optional .client_baseserver.mail_param.mail_param_type _type = 2;
    if (has__type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_type());
    }

    // optional string _value = 3;
    if (has__value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_param::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_param* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_param*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_param::MergeFrom(const mail_param& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__idx()) {
      set__idx(from._idx());
    }
    if (from.has__type()) {
      set__type(from._type());
    }
    if (from.has__value()) {
      set__value(from._value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_param::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_param::CopyFrom(const mail_param& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_param::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mail_param::Swap(mail_param* other) {
  if (other != this) {
    std::swap(_idx_, other->_idx_);
    std::swap(_type_, other->_type_);
    std::swap(_value_, other->_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_param::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_param_descriptor_;
  metadata.reflection = mail_param_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* user_point_user_point_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_point_user_point_type_descriptor_;
}
bool user_point_user_point_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const user_point_user_point_type user_point::arenapoint;
const user_point_user_point_type user_point::crusadepoint;
const user_point_user_point_type user_point::guildpoint;
const user_point_user_point_type user_point::user_point_type_MIN;
const user_point_user_point_type user_point::user_point_type_MAX;
const int user_point::user_point_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int user_point::kTypeFieldNumber;
const int user_point::kValueFieldNumber;
#endif  // !_MSC_VER

user_point::user_point()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.user_point)
}

void user_point::InitAsDefaultInstance() {
}

user_point::user_point(const user_point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.user_point)
}

void user_point::SharedCtor() {
  _cached_size_ = 0;
  _type_ = 1;
  _value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_point::~user_point() {
  // @@protoc_insertion_point(destructor:client_baseserver.user_point)
  SharedDtor();
}

void user_point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_point_descriptor_;
}

const user_point& user_point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

user_point* user_point::default_instance_ = NULL;

user_point* user_point::New() const {
  return new user_point;
}

void user_point::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _type_ = 1;
    _value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.user_point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.user_point.user_point_type _type = 1 [default = arenapoint];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::user_point_user_point_type_IsValid(value)) {
            set__type(static_cast< ::client_baseserver::user_point_user_point_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__value;
        break;
      }

      // required uint32 _value = 2;
      case 2: {
        if (tag == 16) {
         parse__value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_value_)));
          set_has__value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.user_point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.user_point)
  return false;
#undef DO_
}

void user_point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.user_point)
  // required .client_baseserver.user_point.user_point_type _type = 1 [default = arenapoint];
  if (has__type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_type(), output);
  }

  // required uint32 _value = 2;
  if (has__value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.user_point)
}

::google::protobuf::uint8* user_point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.user_point)
  // required .client_baseserver.user_point.user_point_type _type = 1 [default = arenapoint];
  if (has__type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_type(), target);
  }

  // required uint32 _value = 2;
  if (has__value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.user_point)
  return target;
}

int user_point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.user_point.user_point_type _type = 1 [default = arenapoint];
    if (has__type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_type());
    }

    // required uint32 _value = 2;
    if (has__value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_point::MergeFrom(const user_point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__type()) {
      set__type(from._type());
    }
    if (from.has__value()) {
      set__value(from._value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_point::CopyFrom(const user_point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void user_point::Swap(user_point* other) {
  if (other != this) {
    std::swap(_type_, other->_type_);
    std::swap(_value_, other->_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_point_descriptor_;
  metadata.reflection = user_point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int read_mail_reply::kResultFieldNumber;
#endif  // !_MSC_VER

read_mail_reply::read_mail_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.read_mail_reply)
}

void read_mail_reply::InitAsDefaultInstance() {
}

read_mail_reply::read_mail_reply(const read_mail_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.read_mail_reply)
}

void read_mail_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

read_mail_reply::~read_mail_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.read_mail_reply)
  SharedDtor();
}

void read_mail_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void read_mail_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* read_mail_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return read_mail_reply_descriptor_;
}

const read_mail_reply& read_mail_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

read_mail_reply* read_mail_reply::default_instance_ = NULL;

read_mail_reply* read_mail_reply::New() const {
  return new read_mail_reply;
}

void read_mail_reply::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool read_mail_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.read_mail_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.read_mail_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.read_mail_reply)
  return false;
#undef DO_
}

void read_mail_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.read_mail_reply)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.read_mail_reply)
}

::google::protobuf::uint8* read_mail_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.read_mail_reply)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.read_mail_reply)
  return target;
}

int read_mail_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void read_mail_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const read_mail_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const read_mail_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void read_mail_reply::MergeFrom(const read_mail_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void read_mail_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void read_mail_reply::CopyFrom(const read_mail_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool read_mail_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void read_mail_reply::Swap(read_mail_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata read_mail_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = read_mail_reply_descriptor_;
  metadata.reflection = read_mail_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_vip_gift_reply::kResultFieldNumber;
#endif  // !_MSC_VER

get_vip_gift_reply::get_vip_gift_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.get_vip_gift_reply)
}

void get_vip_gift_reply::InitAsDefaultInstance() {
}

get_vip_gift_reply::get_vip_gift_reply(const get_vip_gift_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.get_vip_gift_reply)
}

void get_vip_gift_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_vip_gift_reply::~get_vip_gift_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.get_vip_gift_reply)
  SharedDtor();
}

void get_vip_gift_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_vip_gift_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_vip_gift_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_vip_gift_reply_descriptor_;
}

const get_vip_gift_reply& get_vip_gift_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

get_vip_gift_reply* get_vip_gift_reply::default_instance_ = NULL;

get_vip_gift_reply* get_vip_gift_reply::New() const {
  return new get_vip_gift_reply;
}

void get_vip_gift_reply::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_vip_gift_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.get_vip_gift_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.get_vip_gift_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.get_vip_gift_reply)
  return false;
#undef DO_
}

void get_vip_gift_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.get_vip_gift_reply)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.get_vip_gift_reply)
}

::google::protobuf::uint8* get_vip_gift_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.get_vip_gift_reply)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.get_vip_gift_reply)
  return target;
}

int get_vip_gift_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_vip_gift_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_vip_gift_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_vip_gift_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_vip_gift_reply::MergeFrom(const get_vip_gift_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_vip_gift_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_vip_gift_reply::CopyFrom(const get_vip_gift_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_vip_gift_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void get_vip_gift_reply::Swap(get_vip_gift_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_vip_gift_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_vip_gift_reply_descriptor_;
  metadata.reflection = get_vip_gift_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_reply::kSayFieldNumber;
const int chat_reply::kFreshFieldNumber;
const int chat_reply::kFetchFieldNumber;
const int chat_reply::kChatAddBlFieldNumber;
const int chat_reply::kChatDelBlFieldNumber;
const int chat_reply::kChatBlacklistFieldNumber;
const int chat_reply::kChatBoradSayFieldNumber;
#endif  // !_MSC_VER

chat_reply::chat_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.chat_reply)
}

void chat_reply::InitAsDefaultInstance() {
  _say_ = const_cast< ::client_baseserver::chat_say*>(&::client_baseserver::chat_say::default_instance());
  _fresh_ = const_cast< ::client_baseserver::chat_fresh*>(&::client_baseserver::chat_fresh::default_instance());
  _fetch_ = const_cast< ::client_baseserver::chat_fetch*>(&::client_baseserver::chat_fetch::default_instance());
  _chat_add_bl_ = const_cast< ::client_baseserver::chat_add_bl*>(&::client_baseserver::chat_add_bl::default_instance());
  _chat_del_bl_ = const_cast< ::client_baseserver::chat_del_bl*>(&::client_baseserver::chat_del_bl::default_instance());
  _chat_blacklist_ = const_cast< ::client_baseserver::chat_blacklist*>(&::client_baseserver::chat_blacklist::default_instance());
  _chat_borad_say_ = const_cast< ::client_baseserver::chat_broad_say*>(&::client_baseserver::chat_broad_say::default_instance());
}

chat_reply::chat_reply(const chat_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.chat_reply)
}

void chat_reply::SharedCtor() {
  _cached_size_ = 0;
  _say_ = NULL;
  _fresh_ = NULL;
  _fetch_ = NULL;
  _chat_add_bl_ = NULL;
  _chat_del_bl_ = NULL;
  _chat_blacklist_ = NULL;
  _chat_borad_say_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_reply::~chat_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.chat_reply)
  SharedDtor();
}

void chat_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _say_;
    delete _fresh_;
    delete _fetch_;
    delete _chat_add_bl_;
    delete _chat_del_bl_;
    delete _chat_blacklist_;
    delete _chat_borad_say_;
  }
}

void chat_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_reply_descriptor_;
}

const chat_reply& chat_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

chat_reply* chat_reply::default_instance_ = NULL;

chat_reply* chat_reply::New() const {
  return new chat_reply;
}

void chat_reply::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has__say()) {
      if (_say_ != NULL) _say_->::client_baseserver::chat_say::Clear();
    }
    if (has__fresh()) {
      if (_fresh_ != NULL) _fresh_->::client_baseserver::chat_fresh::Clear();
    }
    if (has__fetch()) {
      if (_fetch_ != NULL) _fetch_->::client_baseserver::chat_fetch::Clear();
    }
    if (has__chat_add_bl()) {
      if (_chat_add_bl_ != NULL) _chat_add_bl_->::client_baseserver::chat_add_bl::Clear();
    }
    if (has__chat_del_bl()) {
      if (_chat_del_bl_ != NULL) _chat_del_bl_->::client_baseserver::chat_del_bl::Clear();
    }
    if (has__chat_blacklist()) {
      if (_chat_blacklist_ != NULL) _chat_blacklist_->::client_baseserver::chat_blacklist::Clear();
    }
    if (has__chat_borad_say()) {
      if (_chat_borad_say_ != NULL) _chat_borad_say_->::client_baseserver::chat_broad_say::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.chat_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_baseserver.chat_say _say = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__say()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__fresh;
        break;
      }

      // optional .client_baseserver.chat_fresh _fresh = 2;
      case 2: {
        if (tag == 18) {
         parse__fresh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__fresh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__fetch;
        break;
      }

      // optional .client_baseserver.chat_fetch _fetch = 3;
      case 3: {
        if (tag == 26) {
         parse__fetch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__fetch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__chat_add_bl;
        break;
      }

      // optional .client_baseserver.chat_add_bl _chat_add_bl = 4;
      case 4: {
        if (tag == 34) {
         parse__chat_add_bl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__chat_add_bl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse__chat_del_bl;
        break;
      }

      // optional .client_baseserver.chat_del_bl _chat_del_bl = 5;
      case 5: {
        if (tag == 42) {
         parse__chat_del_bl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__chat_del_bl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse__chat_blacklist;
        break;
      }

      // optional .client_baseserver.chat_blacklist _chat_blacklist = 6;
      case 6: {
        if (tag == 50) {
         parse__chat_blacklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__chat_blacklist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse__chat_borad_say;
        break;
      }

      // optional .client_baseserver.chat_broad_say _chat_borad_say = 7;
      case 7: {
        if (tag == 58) {
         parse__chat_borad_say:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__chat_borad_say()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.chat_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.chat_reply)
  return false;
#undef DO_
}

void chat_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.chat_reply)
  // optional .client_baseserver.chat_say _say = 1;
  if (has__say()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_say(), output);
  }

  // optional .client_baseserver.chat_fresh _fresh = 2;
  if (has__fresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_fresh(), output);
  }

  // optional .client_baseserver.chat_fetch _fetch = 3;
  if (has__fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_fetch(), output);
  }

  // optional .client_baseserver.chat_add_bl _chat_add_bl = 4;
  if (has__chat_add_bl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_chat_add_bl(), output);
  }

  // optional .client_baseserver.chat_del_bl _chat_del_bl = 5;
  if (has__chat_del_bl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_chat_del_bl(), output);
  }

  // optional .client_baseserver.chat_blacklist _chat_blacklist = 6;
  if (has__chat_blacklist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_chat_blacklist(), output);
  }

  // optional .client_baseserver.chat_broad_say _chat_borad_say = 7;
  if (has__chat_borad_say()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_chat_borad_say(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.chat_reply)
}

::google::protobuf::uint8* chat_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.chat_reply)
  // optional .client_baseserver.chat_say _say = 1;
  if (has__say()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_say(), target);
  }

  // optional .client_baseserver.chat_fresh _fresh = 2;
  if (has__fresh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_fresh(), target);
  }

  // optional .client_baseserver.chat_fetch _fetch = 3;
  if (has__fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_fetch(), target);
  }

  // optional .client_baseserver.chat_add_bl _chat_add_bl = 4;
  if (has__chat_add_bl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_chat_add_bl(), target);
  }

  // optional .client_baseserver.chat_del_bl _chat_del_bl = 5;
  if (has__chat_del_bl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_chat_del_bl(), target);
  }

  // optional .client_baseserver.chat_blacklist _chat_blacklist = 6;
  if (has__chat_blacklist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->_chat_blacklist(), target);
  }

  // optional .client_baseserver.chat_broad_say _chat_borad_say = 7;
  if (has__chat_borad_say()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->_chat_borad_say(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.chat_reply)
  return target;
}

int chat_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_baseserver.chat_say _say = 1;
    if (has__say()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_say());
    }

    // optional .client_baseserver.chat_fresh _fresh = 2;
    if (has__fresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_fresh());
    }

    // optional .client_baseserver.chat_fetch _fetch = 3;
    if (has__fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_fetch());
    }

    // optional .client_baseserver.chat_add_bl _chat_add_bl = 4;
    if (has__chat_add_bl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_chat_add_bl());
    }

    // optional .client_baseserver.chat_del_bl _chat_del_bl = 5;
    if (has__chat_del_bl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_chat_del_bl());
    }

    // optional .client_baseserver.chat_blacklist _chat_blacklist = 6;
    if (has__chat_blacklist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_chat_blacklist());
    }

    // optional .client_baseserver.chat_broad_say _chat_borad_say = 7;
    if (has__chat_borad_say()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_chat_borad_say());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_reply::MergeFrom(const chat_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__say()) {
      mutable__say()->::client_baseserver::chat_say::MergeFrom(from._say());
    }
    if (from.has__fresh()) {
      mutable__fresh()->::client_baseserver::chat_fresh::MergeFrom(from._fresh());
    }
    if (from.has__fetch()) {
      mutable__fetch()->::client_baseserver::chat_fetch::MergeFrom(from._fetch());
    }
    if (from.has__chat_add_bl()) {
      mutable__chat_add_bl()->::client_baseserver::chat_add_bl::MergeFrom(from._chat_add_bl());
    }
    if (from.has__chat_del_bl()) {
      mutable__chat_del_bl()->::client_baseserver::chat_del_bl::MergeFrom(from._chat_del_bl());
    }
    if (from.has__chat_blacklist()) {
      mutable__chat_blacklist()->::client_baseserver::chat_blacklist::MergeFrom(from._chat_blacklist());
    }
    if (from.has__chat_borad_say()) {
      mutable__chat_borad_say()->::client_baseserver::chat_broad_say::MergeFrom(from._chat_borad_say());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_reply::CopyFrom(const chat_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_reply::IsInitialized() const {

  if (has__say()) {
    if (!this->_say().IsInitialized()) return false;
  }
  if (has__fresh()) {
    if (!this->_fresh().IsInitialized()) return false;
  }
  if (has__fetch()) {
    if (!this->_fetch().IsInitialized()) return false;
  }
  if (has__chat_add_bl()) {
    if (!this->_chat_add_bl().IsInitialized()) return false;
  }
  if (has__chat_del_bl()) {
    if (!this->_chat_del_bl().IsInitialized()) return false;
  }
  if (has__chat_blacklist()) {
    if (!this->_chat_blacklist().IsInitialized()) return false;
  }
  if (has__chat_borad_say()) {
    if (!this->_chat_borad_say().IsInitialized()) return false;
  }
  return true;
}

void chat_reply::Swap(chat_reply* other) {
  if (other != this) {
    std::swap(_say_, other->_say_);
    std::swap(_fresh_, other->_fresh_);
    std::swap(_fetch_, other->_fetch_);
    std::swap(_chat_add_bl_, other->_chat_add_bl_);
    std::swap(_chat_del_bl_, other->_chat_del_bl_);
    std::swap(_chat_blacklist_, other->_chat_blacklist_);
    std::swap(_chat_borad_say_, other->_chat_borad_say_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_reply_descriptor_;
  metadata.reflection = chat_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_blacklist_user::kUseridFieldNumber;
const int chat_blacklist_user::kUserSummaryFieldNumber;
#endif  // !_MSC_VER

chat_blacklist_user::chat_blacklist_user()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.chat_blacklist_user)
}

void chat_blacklist_user::InitAsDefaultInstance() {
  _user_summary_ = const_cast< ::client_baseserver::user_summary*>(&::client_baseserver::user_summary::default_instance());
}

chat_blacklist_user::chat_blacklist_user(const chat_blacklist_user& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.chat_blacklist_user)
}

void chat_blacklist_user::SharedCtor() {
  _cached_size_ = 0;
  _userid_ = 0u;
  _user_summary_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_blacklist_user::~chat_blacklist_user() {
  // @@protoc_insertion_point(destructor:client_baseserver.chat_blacklist_user)
  SharedDtor();
}

void chat_blacklist_user::SharedDtor() {
  if (this != default_instance_) {
    delete _user_summary_;
  }
}

void chat_blacklist_user::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_blacklist_user::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_blacklist_user_descriptor_;
}

const chat_blacklist_user& chat_blacklist_user::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

chat_blacklist_user* chat_blacklist_user::default_instance_ = NULL;

chat_blacklist_user* chat_blacklist_user::New() const {
  return new chat_blacklist_user;
}

void chat_blacklist_user::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _userid_ = 0u;
    if (has__user_summary()) {
      if (_user_summary_ != NULL) _user_summary_->::client_baseserver::user_summary::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_blacklist_user::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.chat_blacklist_user)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 _userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_userid_)));
          set_has__userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__user_summary;
        break;
      }

      // optional .client_baseserver.user_summary _user_summary = 2;
      case 2: {
        if (tag == 18) {
         parse__user_summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__user_summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.chat_blacklist_user)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.chat_blacklist_user)
  return false;
#undef DO_
}

void chat_blacklist_user::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.chat_blacklist_user)
  // optional uint32 _userid = 1;
  if (has__userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_userid(), output);
  }

  // optional .client_baseserver.user_summary _user_summary = 2;
  if (has__user_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_user_summary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.chat_blacklist_user)
}

::google::protobuf::uint8* chat_blacklist_user::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.chat_blacklist_user)
  // optional uint32 _userid = 1;
  if (has__userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_userid(), target);
  }

  // optional .client_baseserver.user_summary _user_summary = 2;
  if (has__user_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_user_summary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.chat_blacklist_user)
  return target;
}

int chat_blacklist_user::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 _userid = 1;
    if (has__userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_userid());
    }

    // optional .client_baseserver.user_summary _user_summary = 2;
    if (has__user_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_user_summary());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_blacklist_user::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_blacklist_user* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_blacklist_user*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_blacklist_user::MergeFrom(const chat_blacklist_user& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__userid()) {
      set__userid(from._userid());
    }
    if (from.has__user_summary()) {
      mutable__user_summary()->::client_baseserver::user_summary::MergeFrom(from._user_summary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_blacklist_user::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_blacklist_user::CopyFrom(const chat_blacklist_user& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_blacklist_user::IsInitialized() const {

  if (has__user_summary()) {
    if (!this->_user_summary().IsInitialized()) return false;
  }
  return true;
}

void chat_blacklist_user::Swap(chat_blacklist_user* other) {
  if (other != this) {
    std::swap(_userid_, other->_userid_);
    std::swap(_user_summary_, other->_user_summary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_blacklist_user::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_blacklist_user_descriptor_;
  metadata.reflection = chat_blacklist_user_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_blacklist::kChatBlacklistUserFieldNumber;
#endif  // !_MSC_VER

chat_blacklist::chat_blacklist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.chat_blacklist)
}

void chat_blacklist::InitAsDefaultInstance() {
}

chat_blacklist::chat_blacklist(const chat_blacklist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.chat_blacklist)
}

void chat_blacklist::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_blacklist::~chat_blacklist() {
  // @@protoc_insertion_point(destructor:client_baseserver.chat_blacklist)
  SharedDtor();
}

void chat_blacklist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chat_blacklist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_blacklist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_blacklist_descriptor_;
}

const chat_blacklist& chat_blacklist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

chat_blacklist* chat_blacklist::default_instance_ = NULL;

chat_blacklist* chat_blacklist::New() const {
  return new chat_blacklist;
}

void chat_blacklist::Clear() {
  _chat_blacklist_user_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_blacklist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.chat_blacklist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.chat_blacklist_user _chat_blacklist_user = 1;
      case 1: {
        if (tag == 10) {
         parse__chat_blacklist_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__chat_blacklist_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__chat_blacklist_user;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.chat_blacklist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.chat_blacklist)
  return false;
#undef DO_
}

void chat_blacklist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.chat_blacklist)
  // repeated .client_baseserver.chat_blacklist_user _chat_blacklist_user = 1;
  for (int i = 0; i < this->_chat_blacklist_user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_chat_blacklist_user(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.chat_blacklist)
}

::google::protobuf::uint8* chat_blacklist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.chat_blacklist)
  // repeated .client_baseserver.chat_blacklist_user _chat_blacklist_user = 1;
  for (int i = 0; i < this->_chat_blacklist_user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_chat_blacklist_user(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.chat_blacklist)
  return target;
}

int chat_blacklist::ByteSize() const {
  int total_size = 0;

  // repeated .client_baseserver.chat_blacklist_user _chat_blacklist_user = 1;
  total_size += 1 * this->_chat_blacklist_user_size();
  for (int i = 0; i < this->_chat_blacklist_user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_chat_blacklist_user(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_blacklist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_blacklist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_blacklist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_blacklist::MergeFrom(const chat_blacklist& from) {
  GOOGLE_CHECK_NE(&from, this);
  _chat_blacklist_user_.MergeFrom(from._chat_blacklist_user_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_blacklist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_blacklist::CopyFrom(const chat_blacklist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_blacklist::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_chat_blacklist_user())) return false;
  return true;
}

void chat_blacklist::Swap(chat_blacklist* other) {
  if (other != this) {
    _chat_blacklist_user_.Swap(&other->_chat_blacklist_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_blacklist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_blacklist_descriptor_;
  metadata.reflection = chat_blacklist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_broad_say::kResultFieldNumber;
const int chat_broad_say::kChannelFieldNumber;
const int chat_broad_say::kContentsFieldNumber;
#endif  // !_MSC_VER

chat_broad_say::chat_broad_say()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.chat_broad_say)
}

void chat_broad_say::InitAsDefaultInstance() {
}

chat_broad_say::chat_broad_say(const chat_broad_say& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.chat_broad_say)
}

void chat_broad_say::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _channel_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_broad_say::~chat_broad_say() {
  // @@protoc_insertion_point(destructor:client_baseserver.chat_broad_say)
  SharedDtor();
}

void chat_broad_say::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chat_broad_say::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_broad_say::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_broad_say_descriptor_;
}

const chat_broad_say& chat_broad_say::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

chat_broad_say* chat_broad_say::default_instance_ = NULL;

chat_broad_say* chat_broad_say::New() const {
  return new chat_broad_say;
}

void chat_broad_say::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _result_ = 0;
    _channel_ = 1;
  }
  _contents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_broad_say::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.chat_broad_say)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__channel;
        break;
      }

      // optional .client_baseserver.chat_channel _channel = 2;
      case 2: {
        if (tag == 16) {
         parse__channel:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::chat_channel_IsValid(value)) {
            set__channel(static_cast< ::client_baseserver::chat_channel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__contents;
        break;
      }

      // repeated .client_baseserver.chat_content _contents = 3;
      case 3: {
        if (tag == 26) {
         parse__contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__contents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__contents;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.chat_broad_say)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.chat_broad_say)
  return false;
#undef DO_
}

void chat_broad_say::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.chat_broad_say)
  // optional .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // optional .client_baseserver.chat_channel _channel = 2;
  if (has__channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->_channel(), output);
  }

  // repeated .client_baseserver.chat_content _contents = 3;
  for (int i = 0; i < this->_contents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_contents(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.chat_broad_say)
}

::google::protobuf::uint8* chat_broad_say::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.chat_broad_say)
  // optional .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // optional .client_baseserver.chat_channel _channel = 2;
  if (has__channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->_channel(), target);
  }

  // repeated .client_baseserver.chat_content _contents = 3;
  for (int i = 0; i < this->_contents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_contents(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.chat_broad_say)
  return target;
}

int chat_broad_say::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional .client_baseserver.chat_channel _channel = 2;
    if (has__channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_channel());
    }

  }
  // repeated .client_baseserver.chat_content _contents = 3;
  total_size += 1 * this->_contents_size();
  for (int i = 0; i < this->_contents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_contents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_broad_say::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_broad_say* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_broad_say*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_broad_say::MergeFrom(const chat_broad_say& from) {
  GOOGLE_CHECK_NE(&from, this);
  _contents_.MergeFrom(from._contents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__channel()) {
      set__channel(from._channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_broad_say::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_broad_say::CopyFrom(const chat_broad_say& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_broad_say::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_contents())) return false;
  return true;
}

void chat_broad_say::Swap(chat_broad_say* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_channel_, other->_channel_);
    _contents_.Swap(&other->_contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_broad_say::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_broad_say_descriptor_;
  metadata.reflection = chat_broad_say_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_say::kResultFieldNumber;
const int chat_say::kChannelFieldNumber;
const int chat_say::kContentsFieldNumber;
#endif  // !_MSC_VER

chat_say::chat_say()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.chat_say)
}

void chat_say::InitAsDefaultInstance() {
}

chat_say::chat_say(const chat_say& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.chat_say)
}

void chat_say::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _channel_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_say::~chat_say() {
  // @@protoc_insertion_point(destructor:client_baseserver.chat_say)
  SharedDtor();
}

void chat_say::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chat_say::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_say::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_say_descriptor_;
}

const chat_say& chat_say::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

chat_say* chat_say::default_instance_ = NULL;

chat_say* chat_say::New() const {
  return new chat_say;
}

void chat_say::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _result_ = 0;
    _channel_ = 1;
  }
  _contents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_say::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.chat_say)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1 [default = success];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__channel;
        break;
      }

      // required .client_baseserver.chat_channel _channel = 2 [default = world_channel];
      case 2: {
        if (tag == 16) {
         parse__channel:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::chat_channel_IsValid(value)) {
            set__channel(static_cast< ::client_baseserver::chat_channel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__contents;
        break;
      }

      // repeated .client_baseserver.chat_content _contents = 3;
      case 3: {
        if (tag == 26) {
         parse__contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__contents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__contents;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.chat_say)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.chat_say)
  return false;
#undef DO_
}

void chat_say::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.chat_say)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // required .client_baseserver.chat_channel _channel = 2 [default = world_channel];
  if (has__channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->_channel(), output);
  }

  // repeated .client_baseserver.chat_content _contents = 3;
  for (int i = 0; i < this->_contents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_contents(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.chat_say)
}

::google::protobuf::uint8* chat_say::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.chat_say)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // required .client_baseserver.chat_channel _channel = 2 [default = world_channel];
  if (has__channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->_channel(), target);
  }

  // repeated .client_baseserver.chat_content _contents = 3;
  for (int i = 0; i < this->_contents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_contents(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.chat_say)
  return target;
}

int chat_say::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1 [default = success];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // required .client_baseserver.chat_channel _channel = 2 [default = world_channel];
    if (has__channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_channel());
    }

  }
  // repeated .client_baseserver.chat_content _contents = 3;
  total_size += 1 * this->_contents_size();
  for (int i = 0; i < this->_contents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_contents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_say::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_say* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_say*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_say::MergeFrom(const chat_say& from) {
  GOOGLE_CHECK_NE(&from, this);
  _contents_.MergeFrom(from._contents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__channel()) {
      set__channel(from._channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_say::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_say::CopyFrom(const chat_say& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_say::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_contents())) return false;
  return true;
}

void chat_say::Swap(chat_say* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_channel_, other->_channel_);
    _contents_.Swap(&other->_contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_say::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_say_descriptor_;
  metadata.reflection = chat_say_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_fresh::kChannelFieldNumber;
const int chat_fresh::kContentsFieldNumber;
#endif  // !_MSC_VER

chat_fresh::chat_fresh()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.chat_fresh)
}

void chat_fresh::InitAsDefaultInstance() {
}

chat_fresh::chat_fresh(const chat_fresh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.chat_fresh)
}

void chat_fresh::SharedCtor() {
  _cached_size_ = 0;
  _channel_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_fresh::~chat_fresh() {
  // @@protoc_insertion_point(destructor:client_baseserver.chat_fresh)
  SharedDtor();
}

void chat_fresh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chat_fresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_fresh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_fresh_descriptor_;
}

const chat_fresh& chat_fresh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

chat_fresh* chat_fresh::default_instance_ = NULL;

chat_fresh* chat_fresh::New() const {
  return new chat_fresh;
}

void chat_fresh::Clear() {
  _channel_ = 1;
  _contents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_fresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.chat_fresh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.chat_channel _channel = 1 [default = world_channel];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::chat_channel_IsValid(value)) {
            set__channel(static_cast< ::client_baseserver::chat_channel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__contents;
        break;
      }

      // repeated .client_baseserver.chat_content _contents = 2;
      case 2: {
        if (tag == 18) {
         parse__contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__contents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__contents;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.chat_fresh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.chat_fresh)
  return false;
#undef DO_
}

void chat_fresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.chat_fresh)
  // required .client_baseserver.chat_channel _channel = 1 [default = world_channel];
  if (has__channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_channel(), output);
  }

  // repeated .client_baseserver.chat_content _contents = 2;
  for (int i = 0; i < this->_contents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_contents(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.chat_fresh)
}

::google::protobuf::uint8* chat_fresh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.chat_fresh)
  // required .client_baseserver.chat_channel _channel = 1 [default = world_channel];
  if (has__channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_channel(), target);
  }

  // repeated .client_baseserver.chat_content _contents = 2;
  for (int i = 0; i < this->_contents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_contents(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.chat_fresh)
  return target;
}

int chat_fresh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.chat_channel _channel = 1 [default = world_channel];
    if (has__channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_channel());
    }

  }
  // repeated .client_baseserver.chat_content _contents = 2;
  total_size += 1 * this->_contents_size();
  for (int i = 0; i < this->_contents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_contents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_fresh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_fresh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_fresh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_fresh::MergeFrom(const chat_fresh& from) {
  GOOGLE_CHECK_NE(&from, this);
  _contents_.MergeFrom(from._contents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__channel()) {
      set__channel(from._channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_fresh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_fresh::CopyFrom(const chat_fresh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_fresh::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_contents())) return false;
  return true;
}

void chat_fresh::Swap(chat_fresh* other) {
  if (other != this) {
    std::swap(_channel_, other->_channel_);
    _contents_.Swap(&other->_contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_fresh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_fresh_descriptor_;
  metadata.reflection = chat_fresh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_fetch::kChannelFieldNumber;
const int chat_fetch::kChatIdFieldNumber;
const int chat_fetch::kAccessoryFieldNumber;
#endif  // !_MSC_VER

chat_fetch::chat_fetch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.chat_fetch)
}

void chat_fetch::InitAsDefaultInstance() {
  _accessory_ = const_cast< ::client_baseserver::chat_acc*>(&::client_baseserver::chat_acc::default_instance());
}

chat_fetch::chat_fetch(const chat_fetch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.chat_fetch)
}

void chat_fetch::SharedCtor() {
  _cached_size_ = 0;
  _channel_ = 1;
  _chat_id_ = 0u;
  _accessory_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_fetch::~chat_fetch() {
  // @@protoc_insertion_point(destructor:client_baseserver.chat_fetch)
  SharedDtor();
}

void chat_fetch::SharedDtor() {
  if (this != default_instance_) {
    delete _accessory_;
  }
}

void chat_fetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_fetch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_fetch_descriptor_;
}

const chat_fetch& chat_fetch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

chat_fetch* chat_fetch::default_instance_ = NULL;

chat_fetch* chat_fetch::New() const {
  return new chat_fetch;
}

void chat_fetch::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    _channel_ = 1;
    _chat_id_ = 0u;
    if (has__accessory()) {
      if (_accessory_ != NULL) _accessory_->::client_baseserver::chat_acc::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_fetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.chat_fetch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.chat_channel _channel = 1 [default = world_channel];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::chat_channel_IsValid(value)) {
            set__channel(static_cast< ::client_baseserver::chat_channel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__chat_id;
        break;
      }

      // required uint32 _chat_id = 2;
      case 2: {
        if (tag == 16) {
         parse__chat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_chat_id_)));
          set_has__chat_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__accessory;
        break;
      }

      // optional .client_baseserver.chat_acc _accessory = 3;
      case 3: {
        if (tag == 26) {
         parse__accessory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__accessory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.chat_fetch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.chat_fetch)
  return false;
#undef DO_
}

void chat_fetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.chat_fetch)
  // required .client_baseserver.chat_channel _channel = 1 [default = world_channel];
  if (has__channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_channel(), output);
  }

  // required uint32 _chat_id = 2;
  if (has__chat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_chat_id(), output);
  }

  // optional .client_baseserver.chat_acc _accessory = 3;
  if (has__accessory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_accessory(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.chat_fetch)
}

::google::protobuf::uint8* chat_fetch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.chat_fetch)
  // required .client_baseserver.chat_channel _channel = 1 [default = world_channel];
  if (has__channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_channel(), target);
  }

  // required uint32 _chat_id = 2;
  if (has__chat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_chat_id(), target);
  }

  // optional .client_baseserver.chat_acc _accessory = 3;
  if (has__accessory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_accessory(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.chat_fetch)
  return target;
}

int chat_fetch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.chat_channel _channel = 1 [default = world_channel];
    if (has__channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_channel());
    }

    // required uint32 _chat_id = 2;
    if (has__chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_chat_id());
    }

    // optional .client_baseserver.chat_acc _accessory = 3;
    if (has__accessory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_accessory());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_fetch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_fetch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_fetch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_fetch::MergeFrom(const chat_fetch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__channel()) {
      set__channel(from._channel());
    }
    if (from.has__chat_id()) {
      set__chat_id(from._chat_id());
    }
    if (from.has__accessory()) {
      mutable__accessory()->::client_baseserver::chat_acc::MergeFrom(from._accessory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_fetch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_fetch::CopyFrom(const chat_fetch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_fetch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has__accessory()) {
    if (!this->_accessory().IsInitialized()) return false;
  }
  return true;
}

void chat_fetch::Swap(chat_fetch* other) {
  if (other != this) {
    std::swap(_channel_, other->_channel_);
    std::swap(_chat_id_, other->_chat_id_);
    std::swap(_accessory_, other->_accessory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_fetch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_fetch_descriptor_;
  metadata.reflection = chat_fetch_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* chat_acc_chat_acc_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_acc_chat_acc_t_descriptor_;
}
bool chat_acc_chat_acc_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const chat_acc_chat_acc_t chat_acc::binary;
const chat_acc_chat_acc_t chat_acc::pvp_replay;
const chat_acc_chat_acc_t chat_acc::chat_acc_t_MIN;
const chat_acc_chat_acc_t chat_acc::chat_acc_t_MAX;
const int chat_acc::chat_acc_t_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int chat_acc::kTypeFieldNumber;
const int chat_acc::kBinaryFieldNumber;
const int chat_acc::kReplayFieldNumber;
#endif  // !_MSC_VER

chat_acc::chat_acc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.chat_acc)
}

void chat_acc::InitAsDefaultInstance() {
  _replay_ = const_cast< ::client_baseserver::pvp_record*>(&::client_baseserver::pvp_record::default_instance());
}

chat_acc::chat_acc(const chat_acc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.chat_acc)
}

void chat_acc::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _type_ = 1;
  _binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _replay_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_acc::~chat_acc() {
  // @@protoc_insertion_point(destructor:client_baseserver.chat_acc)
  SharedDtor();
}

void chat_acc::SharedDtor() {
  if (_binary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _binary_;
  }
  if (this != default_instance_) {
    delete _replay_;
  }
}

void chat_acc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_acc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_acc_descriptor_;
}

const chat_acc& chat_acc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

chat_acc* chat_acc::default_instance_ = NULL;

chat_acc* chat_acc::New() const {
  return new chat_acc;
}

void chat_acc::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    _type_ = 1;
    if (has__binary()) {
      if (_binary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _binary_->clear();
      }
    }
    if (has__replay()) {
      if (_replay_ != NULL) _replay_->::client_baseserver::pvp_record::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_acc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.chat_acc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.chat_acc.chat_acc_t _type = 1 [default = binary];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::chat_acc_chat_acc_t_IsValid(value)) {
            set__type(static_cast< ::client_baseserver::chat_acc_chat_acc_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__binary;
        break;
      }

      // optional string _binary = 2;
      case 2: {
        if (tag == 18) {
         parse__binary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__binary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_binary().data(), this->_binary().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_binary");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__replay;
        break;
      }

      // optional .client_baseserver.pvp_record _replay = 3;
      case 3: {
        if (tag == 26) {
         parse__replay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__replay()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.chat_acc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.chat_acc)
  return false;
#undef DO_
}

void chat_acc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.chat_acc)
  // required .client_baseserver.chat_acc.chat_acc_t _type = 1 [default = binary];
  if (has__type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_type(), output);
  }

  // optional string _binary = 2;
  if (has__binary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_binary().data(), this->_binary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_binary");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->_binary(), output);
  }

  // optional .client_baseserver.pvp_record _replay = 3;
  if (has__replay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_replay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.chat_acc)
}

::google::protobuf::uint8* chat_acc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.chat_acc)
  // required .client_baseserver.chat_acc.chat_acc_t _type = 1 [default = binary];
  if (has__type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_type(), target);
  }

  // optional string _binary = 2;
  if (has__binary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_binary().data(), this->_binary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_binary");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_binary(), target);
  }

  // optional .client_baseserver.pvp_record _replay = 3;
  if (has__replay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_replay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.chat_acc)
  return target;
}

int chat_acc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.chat_acc.chat_acc_t _type = 1 [default = binary];
    if (has__type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_type());
    }

    // optional string _binary = 2;
    if (has__binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_binary());
    }

    // optional .client_baseserver.pvp_record _replay = 3;
    if (has__replay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_replay());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_acc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_acc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_acc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_acc::MergeFrom(const chat_acc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__type()) {
      set__type(from._type());
    }
    if (from.has__binary()) {
      set__binary(from._binary());
    }
    if (from.has__replay()) {
      mutable__replay()->::client_baseserver::pvp_record::MergeFrom(from._replay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_acc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_acc::CopyFrom(const chat_acc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_acc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__replay()) {
    if (!this->_replay().IsInitialized()) return false;
  }
  return true;
}

void chat_acc::Swap(chat_acc* other) {
  if (other != this) {
    std::swap(_type_, other->_type_);
    std::swap(_binary_, other->_binary_);
    std::swap(_replay_, other->_replay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_acc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_acc_descriptor_;
  metadata.reflection = chat_acc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_content::kChatIdFieldNumber;
const int chat_content::kSpeakerUidFieldNumber;
const int chat_content::kSpeakerSummaryFieldNumber;
const int chat_content::kTargetUidFieldNumber;
const int chat_content::kTargetSummaryFieldNumber;
const int chat_content::kSpeakerPostFieldNumber;
const int chat_content::kSpeakTimeFieldNumber;
const int chat_content::kContentTypeFieldNumber;
const int chat_content::kContentFieldNumber;
#endif  // !_MSC_VER

chat_content::chat_content()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.chat_content)
}

void chat_content::InitAsDefaultInstance() {
  _speaker_summary_ = const_cast< ::client_baseserver::user_summary*>(&::client_baseserver::user_summary::default_instance());
  _target_summary_ = const_cast< ::client_baseserver::user_summary*>(&::client_baseserver::user_summary::default_instance());
}

chat_content::chat_content(const chat_content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.chat_content)
}

void chat_content::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _chat_id_ = 0u;
  _speaker_uid_ = 0u;
  _speaker_summary_ = NULL;
  _target_uid_ = 0u;
  _target_summary_ = NULL;
  _speaker_post_ = 0u;
  _speak_time_ = 0u;
  _content_type_ = 0u;
  _content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_content::~chat_content() {
  // @@protoc_insertion_point(destructor:client_baseserver.chat_content)
  SharedDtor();
}

void chat_content::SharedDtor() {
  if (_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _content_;
  }
  if (this != default_instance_) {
    delete _speaker_summary_;
    delete _target_summary_;
  }
}

void chat_content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_content_descriptor_;
}

const chat_content& chat_content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

chat_content* chat_content::default_instance_ = NULL;

chat_content* chat_content::New() const {
  return new chat_content;
}

void chat_content::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<chat_content*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(_chat_id_, _speaker_uid_);
    ZR_(_target_uid_, _content_type_);
    if (has__speaker_summary()) {
      if (_speaker_summary_ != NULL) _speaker_summary_->::client_baseserver::user_summary::Clear();
    }
    if (has__target_summary()) {
      if (_target_summary_ != NULL) _target_summary_->::client_baseserver::user_summary::Clear();
    }
  }
  if (has__content()) {
    if (_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      _content_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.chat_content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _chat_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_chat_id_)));
          set_has__chat_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__speaker_uid;
        break;
      }

      // required uint32 _speaker_uid = 2;
      case 2: {
        if (tag == 16) {
         parse__speaker_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_speaker_uid_)));
          set_has__speaker_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__speaker_summary;
        break;
      }

      // required .client_baseserver.user_summary _speaker_summary = 3;
      case 3: {
        if (tag == 26) {
         parse__speaker_summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__speaker_summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__target_uid;
        break;
      }

      // optional uint32 _target_uid = 4;
      case 4: {
        if (tag == 32) {
         parse__target_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_target_uid_)));
          set_has__target_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse__target_summary;
        break;
      }

      // optional .client_baseserver.user_summary _target_summary = 5;
      case 5: {
        if (tag == 42) {
         parse__target_summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__target_summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse__speaker_post;
        break;
      }

      // optional uint32 _speaker_post = 6;
      case 6: {
        if (tag == 48) {
         parse__speaker_post:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_speaker_post_)));
          set_has__speaker_post();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse__speak_time;
        break;
      }

      // required uint32 _speak_time = 7;
      case 7: {
        if (tag == 56) {
         parse__speak_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_speak_time_)));
          set_has__speak_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse__content_type;
        break;
      }

      // required uint32 _content_type = 8;
      case 8: {
        if (tag == 64) {
         parse__content_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_content_type_)));
          set_has__content_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse__content;
        break;
      }

      // required string _content = 9;
      case 9: {
        if (tag == 74) {
         parse__content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_content().data(), this->_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.chat_content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.chat_content)
  return false;
#undef DO_
}

void chat_content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.chat_content)
  // required uint32 _chat_id = 1;
  if (has__chat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_chat_id(), output);
  }

  // required uint32 _speaker_uid = 2;
  if (has__speaker_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_speaker_uid(), output);
  }

  // required .client_baseserver.user_summary _speaker_summary = 3;
  if (has__speaker_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_speaker_summary(), output);
  }

  // optional uint32 _target_uid = 4;
  if (has__target_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_target_uid(), output);
  }

  // optional .client_baseserver.user_summary _target_summary = 5;
  if (has__target_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_target_summary(), output);
  }

  // optional uint32 _speaker_post = 6;
  if (has__speaker_post()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_speaker_post(), output);
  }

  // required uint32 _speak_time = 7;
  if (has__speak_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->_speak_time(), output);
  }

  // required uint32 _content_type = 8;
  if (has__content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->_content_type(), output);
  }

  // required string _content = 9;
  if (has__content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_content().data(), this->_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.chat_content)
}

::google::protobuf::uint8* chat_content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.chat_content)
  // required uint32 _chat_id = 1;
  if (has__chat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_chat_id(), target);
  }

  // required uint32 _speaker_uid = 2;
  if (has__speaker_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_speaker_uid(), target);
  }

  // required .client_baseserver.user_summary _speaker_summary = 3;
  if (has__speaker_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_speaker_summary(), target);
  }

  // optional uint32 _target_uid = 4;
  if (has__target_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_target_uid(), target);
  }

  // optional .client_baseserver.user_summary _target_summary = 5;
  if (has__target_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_target_summary(), target);
  }

  // optional uint32 _speaker_post = 6;
  if (has__speaker_post()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_speaker_post(), target);
  }

  // required uint32 _speak_time = 7;
  if (has__speak_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->_speak_time(), target);
  }

  // required uint32 _content_type = 8;
  if (has__content_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->_content_type(), target);
  }

  // required string _content = 9;
  if (has__content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_content().data(), this->_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.chat_content)
  return target;
}

int chat_content::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _chat_id = 1;
    if (has__chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_chat_id());
    }

    // required uint32 _speaker_uid = 2;
    if (has__speaker_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_speaker_uid());
    }

    // required .client_baseserver.user_summary _speaker_summary = 3;
    if (has__speaker_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_speaker_summary());
    }

    // optional uint32 _target_uid = 4;
    if (has__target_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_target_uid());
    }

    // optional .client_baseserver.user_summary _target_summary = 5;
    if (has__target_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_target_summary());
    }

    // optional uint32 _speaker_post = 6;
    if (has__speaker_post()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_speaker_post());
    }

    // required uint32 _speak_time = 7;
    if (has__speak_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_speak_time());
    }

    // required uint32 _content_type = 8;
    if (has__content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_content_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string _content = 9;
    if (has__content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_content::MergeFrom(const chat_content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__chat_id()) {
      set__chat_id(from._chat_id());
    }
    if (from.has__speaker_uid()) {
      set__speaker_uid(from._speaker_uid());
    }
    if (from.has__speaker_summary()) {
      mutable__speaker_summary()->::client_baseserver::user_summary::MergeFrom(from._speaker_summary());
    }
    if (from.has__target_uid()) {
      set__target_uid(from._target_uid());
    }
    if (from.has__target_summary()) {
      mutable__target_summary()->::client_baseserver::user_summary::MergeFrom(from._target_summary());
    }
    if (from.has__speaker_post()) {
      set__speaker_post(from._speaker_post());
    }
    if (from.has__speak_time()) {
      set__speak_time(from._speak_time());
    }
    if (from.has__content_type()) {
      set__content_type(from._content_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has__content()) {
      set__content(from._content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_content::CopyFrom(const chat_content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_content::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001c7) != 0x000001c7) return false;

  if (has__speaker_summary()) {
    if (!this->_speaker_summary().IsInitialized()) return false;
  }
  if (has__target_summary()) {
    if (!this->_target_summary().IsInitialized()) return false;
  }
  return true;
}

void chat_content::Swap(chat_content* other) {
  if (other != this) {
    std::swap(_chat_id_, other->_chat_id_);
    std::swap(_speaker_uid_, other->_speaker_uid_);
    std::swap(_speaker_summary_, other->_speaker_summary_);
    std::swap(_target_uid_, other->_target_uid_);
    std::swap(_target_summary_, other->_target_summary_);
    std::swap(_speaker_post_, other->_speaker_post_);
    std::swap(_speak_time_, other->_speak_time_);
    std::swap(_content_type_, other->_content_type_);
    std::swap(_content_, other->_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_content_descriptor_;
  metadata.reflection = chat_content_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_add_bl::kRetFieldNumber;
#endif  // !_MSC_VER

chat_add_bl::chat_add_bl()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.chat_add_bl)
}

void chat_add_bl::InitAsDefaultInstance() {
}

chat_add_bl::chat_add_bl(const chat_add_bl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.chat_add_bl)
}

void chat_add_bl::SharedCtor() {
  _cached_size_ = 0;
  _ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_add_bl::~chat_add_bl() {
  // @@protoc_insertion_point(destructor:client_baseserver.chat_add_bl)
  SharedDtor();
}

void chat_add_bl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chat_add_bl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_add_bl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_add_bl_descriptor_;
}

const chat_add_bl& chat_add_bl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

chat_add_bl* chat_add_bl::default_instance_ = NULL;

chat_add_bl* chat_add_bl::New() const {
  return new chat_add_bl;
}

void chat_add_bl::Clear() {
  _ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_add_bl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.chat_add_bl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _ret = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__ret(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.chat_add_bl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.chat_add_bl)
  return false;
#undef DO_
}

void chat_add_bl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.chat_add_bl)
  // required .client_baseserver.result _ret = 1;
  if (has__ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.chat_add_bl)
}

::google::protobuf::uint8* chat_add_bl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.chat_add_bl)
  // required .client_baseserver.result _ret = 1;
  if (has__ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.chat_add_bl)
  return target;
}

int chat_add_bl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _ret = 1;
    if (has__ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_add_bl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_add_bl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_add_bl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_add_bl::MergeFrom(const chat_add_bl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__ret()) {
      set__ret(from._ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_add_bl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_add_bl::CopyFrom(const chat_add_bl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_add_bl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void chat_add_bl::Swap(chat_add_bl* other) {
  if (other != this) {
    std::swap(_ret_, other->_ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_add_bl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_add_bl_descriptor_;
  metadata.reflection = chat_add_bl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_del_bl::kRetFieldNumber;
#endif  // !_MSC_VER

chat_del_bl::chat_del_bl()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.chat_del_bl)
}

void chat_del_bl::InitAsDefaultInstance() {
}

chat_del_bl::chat_del_bl(const chat_del_bl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.chat_del_bl)
}

void chat_del_bl::SharedCtor() {
  _cached_size_ = 0;
  _ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_del_bl::~chat_del_bl() {
  // @@protoc_insertion_point(destructor:client_baseserver.chat_del_bl)
  SharedDtor();
}

void chat_del_bl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chat_del_bl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_del_bl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_del_bl_descriptor_;
}

const chat_del_bl& chat_del_bl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

chat_del_bl* chat_del_bl::default_instance_ = NULL;

chat_del_bl* chat_del_bl::New() const {
  return new chat_del_bl;
}

void chat_del_bl::Clear() {
  _ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_del_bl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.chat_del_bl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _ret = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__ret(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.chat_del_bl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.chat_del_bl)
  return false;
#undef DO_
}

void chat_del_bl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.chat_del_bl)
  // required .client_baseserver.result _ret = 1;
  if (has__ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.chat_del_bl)
}

::google::protobuf::uint8* chat_del_bl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.chat_del_bl)
  // required .client_baseserver.result _ret = 1;
  if (has__ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.chat_del_bl)
  return target;
}

int chat_del_bl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _ret = 1;
    if (has__ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_del_bl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_del_bl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_del_bl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_del_bl::MergeFrom(const chat_del_bl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__ret()) {
      set__ret(from._ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_del_bl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_del_bl::CopyFrom(const chat_del_bl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_del_bl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void chat_del_bl::Swap(chat_del_bl* other) {
  if (other != this) {
    std::swap(_ret_, other->_ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_del_bl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_del_bl_descriptor_;
  metadata.reflection = chat_del_bl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat::kWorldChatTimesFieldNumber;
const int chat::kLastResetWorldChatTimeFieldNumber;
const int chat::kBlackListFieldNumber;
#endif  // !_MSC_VER

chat::chat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.chat)
}

void chat::InitAsDefaultInstance() {
}

chat::chat(const chat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.chat)
}

void chat::SharedCtor() {
  _cached_size_ = 0;
  _world_chat_times_ = 0u;
  _last_reset_world_chat_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat::~chat() {
  // @@protoc_insertion_point(destructor:client_baseserver.chat)
  SharedDtor();
}

void chat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_descriptor_;
}

const chat& chat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

chat* chat::default_instance_ = NULL;

chat* chat::New() const {
  return new chat;
}

void chat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<chat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_world_chat_times_, _last_reset_world_chat_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  _black_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.chat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _world_chat_times = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_world_chat_times_)));
          set_has__world_chat_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__last_reset_world_chat_time;
        break;
      }

      // required uint32 _last_reset_world_chat_time = 2;
      case 2: {
        if (tag == 16) {
         parse__last_reset_world_chat_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_last_reset_world_chat_time_)));
          set_has__last_reset_world_chat_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__black_list;
        break;
      }

      // repeated uint32 _black_list = 3;
      case 3: {
        if (tag == 24) {
         parse__black_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable__black_list())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__black_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__black_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.chat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.chat)
  return false;
#undef DO_
}

void chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.chat)
  // required uint32 _world_chat_times = 1;
  if (has__world_chat_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_world_chat_times(), output);
  }

  // required uint32 _last_reset_world_chat_time = 2;
  if (has__last_reset_world_chat_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_last_reset_world_chat_time(), output);
  }

  // repeated uint32 _black_list = 3;
  for (int i = 0; i < this->_black_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->_black_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.chat)
}

::google::protobuf::uint8* chat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.chat)
  // required uint32 _world_chat_times = 1;
  if (has__world_chat_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_world_chat_times(), target);
  }

  // required uint32 _last_reset_world_chat_time = 2;
  if (has__last_reset_world_chat_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_last_reset_world_chat_time(), target);
  }

  // repeated uint32 _black_list = 3;
  for (int i = 0; i < this->_black_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->_black_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.chat)
  return target;
}

int chat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _world_chat_times = 1;
    if (has__world_chat_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_world_chat_times());
    }

    // required uint32 _last_reset_world_chat_time = 2;
    if (has__last_reset_world_chat_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_last_reset_world_chat_time());
    }

  }
  // repeated uint32 _black_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->_black_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_black_list(i));
    }
    total_size += 1 * this->_black_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat::MergeFrom(const chat& from) {
  GOOGLE_CHECK_NE(&from, this);
  _black_list_.MergeFrom(from._black_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__world_chat_times()) {
      set__world_chat_times(from._world_chat_times());
    }
    if (from.has__last_reset_world_chat_time()) {
      set__last_reset_world_chat_time(from._last_reset_world_chat_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat::CopyFrom(const chat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void chat::Swap(chat* other) {
  if (other != this) {
    std::swap(_world_chat_times_, other->_world_chat_times_);
    std::swap(_last_reset_world_chat_time_, other->_last_reset_world_chat_time_);
    _black_list_.Swap(&other->_black_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_descriptor_;
  metadata.reflection = chat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_guild::kIdFieldNumber;
const int user_guild::kNameFieldNumber;
const int user_guild::kJobFieldNumber;
const int user_guild::kReqGuildIdFieldNumber;
const int user_guild::kHireHeroFieldNumber;
#endif  // !_MSC_VER

user_guild::user_guild()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.user_guild)
}

void user_guild::InitAsDefaultInstance() {
}

user_guild::user_guild(const user_guild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.user_guild)
}

void user_guild::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _id_ = 0u;
  _name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _job_ = 2;
  _req_guild_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_guild::~user_guild() {
  // @@protoc_insertion_point(destructor:client_baseserver.user_guild)
  SharedDtor();
}

void user_guild::SharedDtor() {
  if (_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _name_;
  }
  if (this != default_instance_) {
  }
}

void user_guild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_guild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_guild_descriptor_;
}

const user_guild& user_guild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

user_guild* user_guild::default_instance_ = NULL;

user_guild* user_guild::New() const {
  return new user_guild;
}

void user_guild::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    _id_ = 0u;
    if (has__name()) {
      if (_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _name_->clear();
      }
    }
    _job_ = 2;
    _req_guild_id_ = 0u;
  }
  _hire_hero_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_guild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.user_guild)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_id_)));
          set_has__id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__name;
        break;
      }

      // required string _name = 2;
      case 2: {
        if (tag == 18) {
         parse__name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_name().data(), this->_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__job;
        break;
      }

      // optional .client_baseserver.guild_job_t _job = 3 [default = member];
      case 3: {
        if (tag == 24) {
         parse__job:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::guild_job_t_IsValid(value)) {
            set__job(static_cast< ::client_baseserver::guild_job_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__req_guild_id;
        break;
      }

      // optional uint32 _req_guild_id = 4;
      case 4: {
        if (tag == 32) {
         parse__req_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_req_guild_id_)));
          set_has__req_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__hire_hero;
        break;
      }

      // repeated uint32 _hire_hero = 5;
      case 5: {
        if (tag == 40) {
         parse__hire_hero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable__hire_hero())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__hire_hero())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__hire_hero;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.user_guild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.user_guild)
  return false;
#undef DO_
}

void user_guild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.user_guild)
  // required uint32 _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_id(), output);
  }

  // required string _name = 2;
  if (has__name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_name().data(), this->_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->_name(), output);
  }

  // optional .client_baseserver.guild_job_t _job = 3 [default = member];
  if (has__job()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->_job(), output);
  }

  // optional uint32 _req_guild_id = 4;
  if (has__req_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_req_guild_id(), output);
  }

  // repeated uint32 _hire_hero = 5;
  for (int i = 0; i < this->_hire_hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->_hire_hero(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.user_guild)
}

::google::protobuf::uint8* user_guild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.user_guild)
  // required uint32 _id = 1;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_id(), target);
  }

  // required string _name = 2;
  if (has__name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_name().data(), this->_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_name(), target);
  }

  // optional .client_baseserver.guild_job_t _job = 3 [default = member];
  if (has__job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->_job(), target);
  }

  // optional uint32 _req_guild_id = 4;
  if (has__req_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_req_guild_id(), target);
  }

  // repeated uint32 _hire_hero = 5;
  for (int i = 0; i < this->_hire_hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->_hire_hero(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.user_guild)
  return target;
}

int user_guild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _id = 1;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_id());
    }

    // required string _name = 2;
    if (has__name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_name());
    }

    // optional .client_baseserver.guild_job_t _job = 3 [default = member];
    if (has__job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_job());
    }

    // optional uint32 _req_guild_id = 4;
    if (has__req_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_req_guild_id());
    }

  }
  // repeated uint32 _hire_hero = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->_hire_hero_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_hire_hero(i));
    }
    total_size += 1 * this->_hire_hero_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_guild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_guild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_guild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_guild::MergeFrom(const user_guild& from) {
  GOOGLE_CHECK_NE(&from, this);
  _hire_hero_.MergeFrom(from._hire_hero_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__id()) {
      set__id(from._id());
    }
    if (from.has__name()) {
      set__name(from._name());
    }
    if (from.has__job()) {
      set__job(from._job());
    }
    if (from.has__req_guild_id()) {
      set__req_guild_id(from._req_guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_guild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_guild::CopyFrom(const user_guild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_guild::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void user_guild::Swap(user_guild* other) {
  if (other != this) {
    std::swap(_id_, other->_id_);
    std::swap(_name_, other->_name_);
    std::swap(_job_, other->_job_);
    std::swap(_req_guild_id_, other->_req_guild_id_);
    _hire_hero_.Swap(&other->_hire_hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_guild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_guild_descriptor_;
  metadata.reflection = user_guild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_reply::kCreateFieldNumber;
const int guild_reply::kDismissFieldNumber;
const int guild_reply::kListFieldNumber;
const int guild_reply::kSearchFieldNumber;
const int guild_reply::kJoinFieldNumber;
const int guild_reply::kJoinConfirmFieldNumber;
const int guild_reply::kLeaveFieldNumber;
const int guild_reply::kKickFieldNumber;
const int guild_reply::kSetFieldNumber;
const int guild_reply::kQueryFieldNumber;
const int guild_reply::kSetJobFieldNumber;
const int guild_reply::kAddHireFieldNumber;
const int guild_reply::kDelHireFieldNumber;
const int guild_reply::kQueryHiresFieldNumber;
const int guild_reply::kHireHeroFieldNumber;
const int guild_reply::kWorshipReqFieldNumber;
const int guild_reply::kWorshipWithdrawFieldNumber;
const int guild_reply::kQueryHhDetailFieldNumber;
const int guild_reply::kResultFieldNumber;
const int guild_reply::kInstanceQueryFieldNumber;
const int guild_reply::kInstanceDetailFieldNumber;
const int guild_reply::kInstanceStartFieldNumber;
const int guild_reply::kInstanceEndFieldNumber;
const int guild_reply::kInstanceDropFieldNumber;
const int guild_reply::kInstanceOpenFieldNumber;
const int guild_reply::kInstanceApplyFieldNumber;
const int guild_reply::kDropInfoFieldNumber;
const int guild_reply::kDropGiveFieldNumber;
const int guild_reply::kInstanceDamageFieldNumber;
const int guild_reply::kItemsHistoryFieldNumber;
const int guild_reply::kGuildJumpFieldNumber;
const int guild_reply::kGuildAppQueueFieldNumber;
const int guild_reply::kInstancePrepareFieldNumber;
const int guild_reply::kGuildMembersFieldNumber;
const int guild_reply::kGuildStageRankFieldNumber;
const int guild_reply::kSetJumpFieldNumber;
const int guild_reply::kSendMailReplyFieldNumber;
#endif  // !_MSC_VER

guild_reply::guild_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_reply)
}

void guild_reply::InitAsDefaultInstance() {
  _create_ = const_cast< ::client_baseserver::guild_create*>(&::client_baseserver::guild_create::default_instance());
  _dismiss_ = const_cast< ::client_baseserver::guild_dismiss*>(&::client_baseserver::guild_dismiss::default_instance());
  _list_ = const_cast< ::client_baseserver::guild_list*>(&::client_baseserver::guild_list::default_instance());
  _search_ = const_cast< ::client_baseserver::guild_search*>(&::client_baseserver::guild_search::default_instance());
  _join_ = const_cast< ::client_baseserver::guild_join*>(&::client_baseserver::guild_join::default_instance());
  _join_confirm_ = const_cast< ::client_baseserver::guild_join_confirm*>(&::client_baseserver::guild_join_confirm::default_instance());
  _leave_ = const_cast< ::client_baseserver::guild_leave*>(&::client_baseserver::guild_leave::default_instance());
  _kick_ = const_cast< ::client_baseserver::guild_kick*>(&::client_baseserver::guild_kick::default_instance());
  _set_ = const_cast< ::client_baseserver::guild_set*>(&::client_baseserver::guild_set::default_instance());
  _query_ = const_cast< ::client_baseserver::guild_query*>(&::client_baseserver::guild_query::default_instance());
  _set_job_ = const_cast< ::client_baseserver::guild_set_job*>(&::client_baseserver::guild_set_job::default_instance());
  _add_hire_ = const_cast< ::client_baseserver::guild_add_hire*>(&::client_baseserver::guild_add_hire::default_instance());
  _del_hire_ = const_cast< ::client_baseserver::guild_del_hire*>(&::client_baseserver::guild_del_hire::default_instance());
  _query_hires_ = const_cast< ::client_baseserver::guild_query_hires*>(&::client_baseserver::guild_query_hires::default_instance());
  _hire_hero_ = const_cast< ::client_baseserver::guild_hire_hero*>(&::client_baseserver::guild_hire_hero::default_instance());
  _worship_req_ = const_cast< ::client_baseserver::guild_worship_req*>(&::client_baseserver::guild_worship_req::default_instance());
  _worship_withdraw_ = const_cast< ::client_baseserver::guild_worship_withdraw*>(&::client_baseserver::guild_worship_withdraw::default_instance());
  _query_hh_detail_ = const_cast< ::client_baseserver::guild_qurey_hh_detail*>(&::client_baseserver::guild_qurey_hh_detail::default_instance());
  _instance_query_ = const_cast< ::client_baseserver::guild_instance_query*>(&::client_baseserver::guild_instance_query::default_instance());
  _instance_detail_ = const_cast< ::client_baseserver::guild_instance_detail*>(&::client_baseserver::guild_instance_detail::default_instance());
  _instance_start_ = const_cast< ::client_baseserver::guild_instance_start*>(&::client_baseserver::guild_instance_start::default_instance());
  _instance_end_ = const_cast< ::client_baseserver::guild_instance_end_down*>(&::client_baseserver::guild_instance_end_down::default_instance());
  _instance_drop_ = const_cast< ::client_baseserver::guild_instance_drop*>(&::client_baseserver::guild_instance_drop::default_instance());
  _instance_open_ = const_cast< ::client_baseserver::guild_instance_open*>(&::client_baseserver::guild_instance_open::default_instance());
  _instance_apply_ = const_cast< ::client_baseserver::guild_instance_apply*>(&::client_baseserver::guild_instance_apply::default_instance());
  _drop_info_ = const_cast< ::client_baseserver::guild_drop_info*>(&::client_baseserver::guild_drop_info::default_instance());
  _drop_give_ = const_cast< ::client_baseserver::guild_drop_give*>(&::client_baseserver::guild_drop_give::default_instance());
  _instance_damage_ = const_cast< ::client_baseserver::guild_instance_damage*>(&::client_baseserver::guild_instance_damage::default_instance());
  _items_history_ = const_cast< ::client_baseserver::guild_items_history*>(&::client_baseserver::guild_items_history::default_instance());
  _guild_jump_ = const_cast< ::client_baseserver::guild_jump*>(&::client_baseserver::guild_jump::default_instance());
  _guild_app_queue_ = const_cast< ::client_baseserver::guild_app_queue*>(&::client_baseserver::guild_app_queue::default_instance());
  _instance_prepare_ = const_cast< ::client_baseserver::guild_instance_prepare*>(&::client_baseserver::guild_instance_prepare::default_instance());
  _guild_members_ = const_cast< ::client_baseserver::guild_members*>(&::client_baseserver::guild_members::default_instance());
  _guild_stage_rank_ = const_cast< ::client_baseserver::guild_stage_rank*>(&::client_baseserver::guild_stage_rank::default_instance());
  _set_jump_ = const_cast< ::client_baseserver::guild_set_jump*>(&::client_baseserver::guild_set_jump::default_instance());
  _send_mail_reply_ = const_cast< ::client_baseserver::guild_send_mail*>(&::client_baseserver::guild_send_mail::default_instance());
}

guild_reply::guild_reply(const guild_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_reply)
}

void guild_reply::SharedCtor() {
  _cached_size_ = 0;
  _create_ = NULL;
  _dismiss_ = NULL;
  _list_ = NULL;
  _search_ = NULL;
  _join_ = NULL;
  _join_confirm_ = NULL;
  _leave_ = NULL;
  _kick_ = NULL;
  _set_ = NULL;
  _query_ = NULL;
  _set_job_ = NULL;
  _add_hire_ = NULL;
  _del_hire_ = NULL;
  _query_hires_ = NULL;
  _hire_hero_ = NULL;
  _worship_req_ = NULL;
  _worship_withdraw_ = NULL;
  _query_hh_detail_ = NULL;
  _result_ = 0;
  _instance_query_ = NULL;
  _instance_detail_ = NULL;
  _instance_start_ = NULL;
  _instance_end_ = NULL;
  _instance_drop_ = NULL;
  _instance_open_ = NULL;
  _instance_apply_ = NULL;
  _drop_info_ = NULL;
  _drop_give_ = NULL;
  _instance_damage_ = NULL;
  _items_history_ = NULL;
  _guild_jump_ = NULL;
  _guild_app_queue_ = NULL;
  _instance_prepare_ = NULL;
  _guild_members_ = NULL;
  _guild_stage_rank_ = NULL;
  _set_jump_ = NULL;
  _send_mail_reply_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_reply::~guild_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_reply)
  SharedDtor();
}

void guild_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _create_;
    delete _dismiss_;
    delete _list_;
    delete _search_;
    delete _join_;
    delete _join_confirm_;
    delete _leave_;
    delete _kick_;
    delete _set_;
    delete _query_;
    delete _set_job_;
    delete _add_hire_;
    delete _del_hire_;
    delete _query_hires_;
    delete _hire_hero_;
    delete _worship_req_;
    delete _worship_withdraw_;
    delete _query_hh_detail_;
    delete _instance_query_;
    delete _instance_detail_;
    delete _instance_start_;
    delete _instance_end_;
    delete _instance_drop_;
    delete _instance_open_;
    delete _instance_apply_;
    delete _drop_info_;
    delete _drop_give_;
    delete _instance_damage_;
    delete _items_history_;
    delete _guild_jump_;
    delete _guild_app_queue_;
    delete _instance_prepare_;
    delete _guild_members_;
    delete _guild_stage_rank_;
    delete _set_jump_;
    delete _send_mail_reply_;
  }
}

void guild_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_reply_descriptor_;
}

const guild_reply& guild_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_reply* guild_reply::default_instance_ = NULL;

guild_reply* guild_reply::New() const {
  return new guild_reply;
}

void guild_reply::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has__create()) {
      if (_create_ != NULL) _create_->::client_baseserver::guild_create::Clear();
    }
    if (has__dismiss()) {
      if (_dismiss_ != NULL) _dismiss_->::client_baseserver::guild_dismiss::Clear();
    }
    if (has__list()) {
      if (_list_ != NULL) _list_->::client_baseserver::guild_list::Clear();
    }
    if (has__search()) {
      if (_search_ != NULL) _search_->::client_baseserver::guild_search::Clear();
    }
    if (has__join()) {
      if (_join_ != NULL) _join_->::client_baseserver::guild_join::Clear();
    }
    if (has__join_confirm()) {
      if (_join_confirm_ != NULL) _join_confirm_->::client_baseserver::guild_join_confirm::Clear();
    }
    if (has__leave()) {
      if (_leave_ != NULL) _leave_->::client_baseserver::guild_leave::Clear();
    }
    if (has__kick()) {
      if (_kick_ != NULL) _kick_->::client_baseserver::guild_kick::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has__set()) {
      if (_set_ != NULL) _set_->::client_baseserver::guild_set::Clear();
    }
    if (has__query()) {
      if (_query_ != NULL) _query_->::client_baseserver::guild_query::Clear();
    }
    if (has__set_job()) {
      if (_set_job_ != NULL) _set_job_->::client_baseserver::guild_set_job::Clear();
    }
    if (has__add_hire()) {
      if (_add_hire_ != NULL) _add_hire_->::client_baseserver::guild_add_hire::Clear();
    }
    if (has__del_hire()) {
      if (_del_hire_ != NULL) _del_hire_->::client_baseserver::guild_del_hire::Clear();
    }
    if (has__query_hires()) {
      if (_query_hires_ != NULL) _query_hires_->::client_baseserver::guild_query_hires::Clear();
    }
    if (has__hire_hero()) {
      if (_hire_hero_ != NULL) _hire_hero_->::client_baseserver::guild_hire_hero::Clear();
    }
    if (has__worship_req()) {
      if (_worship_req_ != NULL) _worship_req_->::client_baseserver::guild_worship_req::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has__worship_withdraw()) {
      if (_worship_withdraw_ != NULL) _worship_withdraw_->::client_baseserver::guild_worship_withdraw::Clear();
    }
    if (has__query_hh_detail()) {
      if (_query_hh_detail_ != NULL) _query_hh_detail_->::client_baseserver::guild_qurey_hh_detail::Clear();
    }
    _result_ = 0;
    if (has__instance_query()) {
      if (_instance_query_ != NULL) _instance_query_->::client_baseserver::guild_instance_query::Clear();
    }
    if (has__instance_detail()) {
      if (_instance_detail_ != NULL) _instance_detail_->::client_baseserver::guild_instance_detail::Clear();
    }
    if (has__instance_start()) {
      if (_instance_start_ != NULL) _instance_start_->::client_baseserver::guild_instance_start::Clear();
    }
    if (has__instance_end()) {
      if (_instance_end_ != NULL) _instance_end_->::client_baseserver::guild_instance_end_down::Clear();
    }
    if (has__instance_drop()) {
      if (_instance_drop_ != NULL) _instance_drop_->::client_baseserver::guild_instance_drop::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    if (has__instance_open()) {
      if (_instance_open_ != NULL) _instance_open_->::client_baseserver::guild_instance_open::Clear();
    }
    if (has__instance_apply()) {
      if (_instance_apply_ != NULL) _instance_apply_->::client_baseserver::guild_instance_apply::Clear();
    }
    if (has__drop_info()) {
      if (_drop_info_ != NULL) _drop_info_->::client_baseserver::guild_drop_info::Clear();
    }
    if (has__drop_give()) {
      if (_drop_give_ != NULL) _drop_give_->::client_baseserver::guild_drop_give::Clear();
    }
    if (has__instance_damage()) {
      if (_instance_damage_ != NULL) _instance_damage_->::client_baseserver::guild_instance_damage::Clear();
    }
    if (has__items_history()) {
      if (_items_history_ != NULL) _items_history_->::client_baseserver::guild_items_history::Clear();
    }
    if (has__guild_jump()) {
      if (_guild_jump_ != NULL) _guild_jump_->::client_baseserver::guild_jump::Clear();
    }
    if (has__guild_app_queue()) {
      if (_guild_app_queue_ != NULL) _guild_app_queue_->::client_baseserver::guild_app_queue::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 31) {
    if (has__instance_prepare()) {
      if (_instance_prepare_ != NULL) _instance_prepare_->::client_baseserver::guild_instance_prepare::Clear();
    }
    if (has__guild_members()) {
      if (_guild_members_ != NULL) _guild_members_->::client_baseserver::guild_members::Clear();
    }
    if (has__guild_stage_rank()) {
      if (_guild_stage_rank_ != NULL) _guild_stage_rank_->::client_baseserver::guild_stage_rank::Clear();
    }
    if (has__set_jump()) {
      if (_set_jump_ != NULL) _set_jump_->::client_baseserver::guild_set_jump::Clear();
    }
    if (has__send_mail_reply()) {
      if (_send_mail_reply_ != NULL) _send_mail_reply_->::client_baseserver::guild_send_mail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_baseserver.guild_create _create = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__create()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__dismiss;
        break;
      }

      // optional .client_baseserver.guild_dismiss _dismiss = 2;
      case 2: {
        if (tag == 18) {
         parse__dismiss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__dismiss()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__list;
        break;
      }

      // optional .client_baseserver.guild_list _list = 3;
      case 3: {
        if (tag == 26) {
         parse__list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__search;
        break;
      }

      // optional .client_baseserver.guild_search _search = 4;
      case 4: {
        if (tag == 34) {
         parse__search:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__search()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse__join;
        break;
      }

      // optional .client_baseserver.guild_join _join = 5;
      case 5: {
        if (tag == 42) {
         parse__join:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__join()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse__join_confirm;
        break;
      }

      // optional .client_baseserver.guild_join_confirm _join_confirm = 6;
      case 6: {
        if (tag == 50) {
         parse__join_confirm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__join_confirm()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse__leave;
        break;
      }

      // optional .client_baseserver.guild_leave _leave = 7;
      case 7: {
        if (tag == 58) {
         parse__leave:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__leave()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse__kick;
        break;
      }

      // optional .client_baseserver.guild_kick _kick = 8;
      case 8: {
        if (tag == 66) {
         parse__kick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__kick()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse__set;
        break;
      }

      // optional .client_baseserver.guild_set _set = 9;
      case 9: {
        if (tag == 74) {
         parse__set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse__query;
        break;
      }

      // optional .client_baseserver.guild_query _query = 10;
      case 10: {
        if (tag == 82) {
         parse__query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse__set_job;
        break;
      }

      // optional .client_baseserver.guild_set_job _set_job = 11;
      case 11: {
        if (tag == 90) {
         parse__set_job:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__set_job()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse__add_hire;
        break;
      }

      // optional .client_baseserver.guild_add_hire _add_hire = 12;
      case 12: {
        if (tag == 98) {
         parse__add_hire:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__add_hire()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse__del_hire;
        break;
      }

      // optional .client_baseserver.guild_del_hire _del_hire = 13;
      case 13: {
        if (tag == 106) {
         parse__del_hire:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__del_hire()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse__query_hires;
        break;
      }

      // optional .client_baseserver.guild_query_hires _query_hires = 14;
      case 14: {
        if (tag == 114) {
         parse__query_hires:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_hires()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse__hire_hero;
        break;
      }

      // optional .client_baseserver.guild_hire_hero _hire_hero = 15;
      case 15: {
        if (tag == 122) {
         parse__hire_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__hire_hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse__worship_req;
        break;
      }

      // optional .client_baseserver.guild_worship_req _worship_req = 16;
      case 16: {
        if (tag == 130) {
         parse__worship_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__worship_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse__worship_withdraw;
        break;
      }

      // optional .client_baseserver.guild_worship_withdraw _worship_withdraw = 17;
      case 17: {
        if (tag == 138) {
         parse__worship_withdraw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__worship_withdraw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse__query_hh_detail;
        break;
      }

      // optional .client_baseserver.guild_qurey_hh_detail _query_hh_detail = 18;
      case 18: {
        if (tag == 146) {
         parse__query_hh_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_hh_detail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse__result;
        break;
      }

      // required .client_baseserver.result _result = 19 [default = success];
      case 19: {
        if (tag == 152) {
         parse__result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse__instance_query;
        break;
      }

      // optional .client_baseserver.guild_instance_query _instance_query = 20;
      case 20: {
        if (tag == 162) {
         parse__instance_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__instance_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse__instance_detail;
        break;
      }

      // optional .client_baseserver.guild_instance_detail _instance_detail = 21;
      case 21: {
        if (tag == 170) {
         parse__instance_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__instance_detail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse__instance_start;
        break;
      }

      // optional .client_baseserver.guild_instance_start _instance_start = 22;
      case 22: {
        if (tag == 178) {
         parse__instance_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__instance_start()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse__instance_end;
        break;
      }

      // optional .client_baseserver.guild_instance_end_down _instance_end = 23;
      case 23: {
        if (tag == 186) {
         parse__instance_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__instance_end()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse__instance_drop;
        break;
      }

      // optional .client_baseserver.guild_instance_drop _instance_drop = 24;
      case 24: {
        if (tag == 194) {
         parse__instance_drop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__instance_drop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse__instance_open;
        break;
      }

      // optional .client_baseserver.guild_instance_open _instance_open = 25;
      case 25: {
        if (tag == 202) {
         parse__instance_open:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__instance_open()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse__instance_apply;
        break;
      }

      // optional .client_baseserver.guild_instance_apply _instance_apply = 26;
      case 26: {
        if (tag == 210) {
         parse__instance_apply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__instance_apply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse__drop_info;
        break;
      }

      // optional .client_baseserver.guild_drop_info _drop_info = 27;
      case 27: {
        if (tag == 218) {
         parse__drop_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__drop_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse__drop_give;
        break;
      }

      // optional .client_baseserver.guild_drop_give _drop_give = 28;
      case 28: {
        if (tag == 226) {
         parse__drop_give:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__drop_give()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse__instance_damage;
        break;
      }

      // optional .client_baseserver.guild_instance_damage _instance_damage = 29;
      case 29: {
        if (tag == 234) {
         parse__instance_damage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__instance_damage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse__items_history;
        break;
      }

      // optional .client_baseserver.guild_items_history _items_history = 30;
      case 30: {
        if (tag == 242) {
         parse__items_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__items_history()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse__guild_jump;
        break;
      }

      // optional .client_baseserver.guild_jump _guild_jump = 31;
      case 31: {
        if (tag == 250) {
         parse__guild_jump:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__guild_jump()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse__guild_app_queue;
        break;
      }

      // optional .client_baseserver.guild_app_queue _guild_app_queue = 32;
      case 32: {
        if (tag == 258) {
         parse__guild_app_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__guild_app_queue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse__instance_prepare;
        break;
      }

      // optional .client_baseserver.guild_instance_prepare _instance_prepare = 33;
      case 33: {
        if (tag == 266) {
         parse__instance_prepare:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__instance_prepare()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse__guild_members;
        break;
      }

      // optional .client_baseserver.guild_members _guild_members = 34;
      case 34: {
        if (tag == 274) {
         parse__guild_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__guild_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse__guild_stage_rank;
        break;
      }

      // optional .client_baseserver.guild_stage_rank _guild_stage_rank = 35;
      case 35: {
        if (tag == 282) {
         parse__guild_stage_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__guild_stage_rank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse__set_jump;
        break;
      }

      // optional .client_baseserver.guild_set_jump _set_jump = 36;
      case 36: {
        if (tag == 290) {
         parse__set_jump:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__set_jump()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse__send_mail_reply;
        break;
      }

      // optional .client_baseserver.guild_send_mail _send_mail_reply = 37;
      case 37: {
        if (tag == 298) {
         parse__send_mail_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__send_mail_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_reply)
  return false;
#undef DO_
}

void guild_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_reply)
  // optional .client_baseserver.guild_create _create = 1;
  if (has__create()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_create(), output);
  }

  // optional .client_baseserver.guild_dismiss _dismiss = 2;
  if (has__dismiss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_dismiss(), output);
  }

  // optional .client_baseserver.guild_list _list = 3;
  if (has__list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_list(), output);
  }

  // optional .client_baseserver.guild_search _search = 4;
  if (has__search()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_search(), output);
  }

  // optional .client_baseserver.guild_join _join = 5;
  if (has__join()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_join(), output);
  }

  // optional .client_baseserver.guild_join_confirm _join_confirm = 6;
  if (has__join_confirm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_join_confirm(), output);
  }

  // optional .client_baseserver.guild_leave _leave = 7;
  if (has__leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_leave(), output);
  }

  // optional .client_baseserver.guild_kick _kick = 8;
  if (has__kick()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_kick(), output);
  }

  // optional .client_baseserver.guild_set _set = 9;
  if (has__set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_set(), output);
  }

  // optional .client_baseserver.guild_query _query = 10;
  if (has__query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_query(), output);
  }

  // optional .client_baseserver.guild_set_job _set_job = 11;
  if (has__set_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_set_job(), output);
  }

  // optional .client_baseserver.guild_add_hire _add_hire = 12;
  if (has__add_hire()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_add_hire(), output);
  }

  // optional .client_baseserver.guild_del_hire _del_hire = 13;
  if (has__del_hire()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_del_hire(), output);
  }

  // optional .client_baseserver.guild_query_hires _query_hires = 14;
  if (has__query_hires()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_query_hires(), output);
  }

  // optional .client_baseserver.guild_hire_hero _hire_hero = 15;
  if (has__hire_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_hire_hero(), output);
  }

  // optional .client_baseserver.guild_worship_req _worship_req = 16;
  if (has__worship_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_worship_req(), output);
  }

  // optional .client_baseserver.guild_worship_withdraw _worship_withdraw = 17;
  if (has__worship_withdraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_worship_withdraw(), output);
  }

  // optional .client_baseserver.guild_qurey_hh_detail _query_hh_detail = 18;
  if (has__query_hh_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_query_hh_detail(), output);
  }

  // required .client_baseserver.result _result = 19 [default = success];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->_result(), output);
  }

  // optional .client_baseserver.guild_instance_query _instance_query = 20;
  if (has__instance_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_instance_query(), output);
  }

  // optional .client_baseserver.guild_instance_detail _instance_detail = 21;
  if (has__instance_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_instance_detail(), output);
  }

  // optional .client_baseserver.guild_instance_start _instance_start = 22;
  if (has__instance_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->_instance_start(), output);
  }

  // optional .client_baseserver.guild_instance_end_down _instance_end = 23;
  if (has__instance_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->_instance_end(), output);
  }

  // optional .client_baseserver.guild_instance_drop _instance_drop = 24;
  if (has__instance_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->_instance_drop(), output);
  }

  // optional .client_baseserver.guild_instance_open _instance_open = 25;
  if (has__instance_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->_instance_open(), output);
  }

  // optional .client_baseserver.guild_instance_apply _instance_apply = 26;
  if (has__instance_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->_instance_apply(), output);
  }

  // optional .client_baseserver.guild_drop_info _drop_info = 27;
  if (has__drop_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->_drop_info(), output);
  }

  // optional .client_baseserver.guild_drop_give _drop_give = 28;
  if (has__drop_give()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->_drop_give(), output);
  }

  // optional .client_baseserver.guild_instance_damage _instance_damage = 29;
  if (has__instance_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->_instance_damage(), output);
  }

  // optional .client_baseserver.guild_items_history _items_history = 30;
  if (has__items_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->_items_history(), output);
  }

  // optional .client_baseserver.guild_jump _guild_jump = 31;
  if (has__guild_jump()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->_guild_jump(), output);
  }

  // optional .client_baseserver.guild_app_queue _guild_app_queue = 32;
  if (has__guild_app_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->_guild_app_queue(), output);
  }

  // optional .client_baseserver.guild_instance_prepare _instance_prepare = 33;
  if (has__instance_prepare()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->_instance_prepare(), output);
  }

  // optional .client_baseserver.guild_members _guild_members = 34;
  if (has__guild_members()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->_guild_members(), output);
  }

  // optional .client_baseserver.guild_stage_rank _guild_stage_rank = 35;
  if (has__guild_stage_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->_guild_stage_rank(), output);
  }

  // optional .client_baseserver.guild_set_jump _set_jump = 36;
  if (has__set_jump()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->_set_jump(), output);
  }

  // optional .client_baseserver.guild_send_mail _send_mail_reply = 37;
  if (has__send_mail_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->_send_mail_reply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_reply)
}

::google::protobuf::uint8* guild_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_reply)
  // optional .client_baseserver.guild_create _create = 1;
  if (has__create()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_create(), target);
  }

  // optional .client_baseserver.guild_dismiss _dismiss = 2;
  if (has__dismiss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_dismiss(), target);
  }

  // optional .client_baseserver.guild_list _list = 3;
  if (has__list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_list(), target);
  }

  // optional .client_baseserver.guild_search _search = 4;
  if (has__search()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_search(), target);
  }

  // optional .client_baseserver.guild_join _join = 5;
  if (has__join()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_join(), target);
  }

  // optional .client_baseserver.guild_join_confirm _join_confirm = 6;
  if (has__join_confirm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->_join_confirm(), target);
  }

  // optional .client_baseserver.guild_leave _leave = 7;
  if (has__leave()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->_leave(), target);
  }

  // optional .client_baseserver.guild_kick _kick = 8;
  if (has__kick()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->_kick(), target);
  }

  // optional .client_baseserver.guild_set _set = 9;
  if (has__set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->_set(), target);
  }

  // optional .client_baseserver.guild_query _query = 10;
  if (has__query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->_query(), target);
  }

  // optional .client_baseserver.guild_set_job _set_job = 11;
  if (has__set_job()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->_set_job(), target);
  }

  // optional .client_baseserver.guild_add_hire _add_hire = 12;
  if (has__add_hire()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->_add_hire(), target);
  }

  // optional .client_baseserver.guild_del_hire _del_hire = 13;
  if (has__del_hire()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->_del_hire(), target);
  }

  // optional .client_baseserver.guild_query_hires _query_hires = 14;
  if (has__query_hires()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->_query_hires(), target);
  }

  // optional .client_baseserver.guild_hire_hero _hire_hero = 15;
  if (has__hire_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->_hire_hero(), target);
  }

  // optional .client_baseserver.guild_worship_req _worship_req = 16;
  if (has__worship_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->_worship_req(), target);
  }

  // optional .client_baseserver.guild_worship_withdraw _worship_withdraw = 17;
  if (has__worship_withdraw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->_worship_withdraw(), target);
  }

  // optional .client_baseserver.guild_qurey_hh_detail _query_hh_detail = 18;
  if (has__query_hh_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->_query_hh_detail(), target);
  }

  // required .client_baseserver.result _result = 19 [default = success];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->_result(), target);
  }

  // optional .client_baseserver.guild_instance_query _instance_query = 20;
  if (has__instance_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->_instance_query(), target);
  }

  // optional .client_baseserver.guild_instance_detail _instance_detail = 21;
  if (has__instance_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->_instance_detail(), target);
  }

  // optional .client_baseserver.guild_instance_start _instance_start = 22;
  if (has__instance_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->_instance_start(), target);
  }

  // optional .client_baseserver.guild_instance_end_down _instance_end = 23;
  if (has__instance_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->_instance_end(), target);
  }

  // optional .client_baseserver.guild_instance_drop _instance_drop = 24;
  if (has__instance_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->_instance_drop(), target);
  }

  // optional .client_baseserver.guild_instance_open _instance_open = 25;
  if (has__instance_open()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->_instance_open(), target);
  }

  // optional .client_baseserver.guild_instance_apply _instance_apply = 26;
  if (has__instance_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->_instance_apply(), target);
  }

  // optional .client_baseserver.guild_drop_info _drop_info = 27;
  if (has__drop_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->_drop_info(), target);
  }

  // optional .client_baseserver.guild_drop_give _drop_give = 28;
  if (has__drop_give()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->_drop_give(), target);
  }

  // optional .client_baseserver.guild_instance_damage _instance_damage = 29;
  if (has__instance_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->_instance_damage(), target);
  }

  // optional .client_baseserver.guild_items_history _items_history = 30;
  if (has__items_history()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->_items_history(), target);
  }

  // optional .client_baseserver.guild_jump _guild_jump = 31;
  if (has__guild_jump()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->_guild_jump(), target);
  }

  // optional .client_baseserver.guild_app_queue _guild_app_queue = 32;
  if (has__guild_app_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->_guild_app_queue(), target);
  }

  // optional .client_baseserver.guild_instance_prepare _instance_prepare = 33;
  if (has__instance_prepare()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->_instance_prepare(), target);
  }

  // optional .client_baseserver.guild_members _guild_members = 34;
  if (has__guild_members()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->_guild_members(), target);
  }

  // optional .client_baseserver.guild_stage_rank _guild_stage_rank = 35;
  if (has__guild_stage_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->_guild_stage_rank(), target);
  }

  // optional .client_baseserver.guild_set_jump _set_jump = 36;
  if (has__set_jump()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->_set_jump(), target);
  }

  // optional .client_baseserver.guild_send_mail _send_mail_reply = 37;
  if (has__send_mail_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->_send_mail_reply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_reply)
  return target;
}

int guild_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_baseserver.guild_create _create = 1;
    if (has__create()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_create());
    }

    // optional .client_baseserver.guild_dismiss _dismiss = 2;
    if (has__dismiss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_dismiss());
    }

    // optional .client_baseserver.guild_list _list = 3;
    if (has__list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_list());
    }

    // optional .client_baseserver.guild_search _search = 4;
    if (has__search()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_search());
    }

    // optional .client_baseserver.guild_join _join = 5;
    if (has__join()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_join());
    }

    // optional .client_baseserver.guild_join_confirm _join_confirm = 6;
    if (has__join_confirm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_join_confirm());
    }

    // optional .client_baseserver.guild_leave _leave = 7;
    if (has__leave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_leave());
    }

    // optional .client_baseserver.guild_kick _kick = 8;
    if (has__kick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_kick());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .client_baseserver.guild_set _set = 9;
    if (has__set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_set());
    }

    // optional .client_baseserver.guild_query _query = 10;
    if (has__query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query());
    }

    // optional .client_baseserver.guild_set_job _set_job = 11;
    if (has__set_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_set_job());
    }

    // optional .client_baseserver.guild_add_hire _add_hire = 12;
    if (has__add_hire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_add_hire());
    }

    // optional .client_baseserver.guild_del_hire _del_hire = 13;
    if (has__del_hire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_del_hire());
    }

    // optional .client_baseserver.guild_query_hires _query_hires = 14;
    if (has__query_hires()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_hires());
    }

    // optional .client_baseserver.guild_hire_hero _hire_hero = 15;
    if (has__hire_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_hire_hero());
    }

    // optional .client_baseserver.guild_worship_req _worship_req = 16;
    if (has__worship_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_worship_req());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .client_baseserver.guild_worship_withdraw _worship_withdraw = 17;
    if (has__worship_withdraw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_worship_withdraw());
    }

    // optional .client_baseserver.guild_qurey_hh_detail _query_hh_detail = 18;
    if (has__query_hh_detail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_hh_detail());
    }

    // required .client_baseserver.result _result = 19 [default = success];
    if (has__result()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional .client_baseserver.guild_instance_query _instance_query = 20;
    if (has__instance_query()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_instance_query());
    }

    // optional .client_baseserver.guild_instance_detail _instance_detail = 21;
    if (has__instance_detail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_instance_detail());
    }

    // optional .client_baseserver.guild_instance_start _instance_start = 22;
    if (has__instance_start()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_instance_start());
    }

    // optional .client_baseserver.guild_instance_end_down _instance_end = 23;
    if (has__instance_end()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_instance_end());
    }

    // optional .client_baseserver.guild_instance_drop _instance_drop = 24;
    if (has__instance_drop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_instance_drop());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .client_baseserver.guild_instance_open _instance_open = 25;
    if (has__instance_open()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_instance_open());
    }

    // optional .client_baseserver.guild_instance_apply _instance_apply = 26;
    if (has__instance_apply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_instance_apply());
    }

    // optional .client_baseserver.guild_drop_info _drop_info = 27;
    if (has__drop_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_drop_info());
    }

    // optional .client_baseserver.guild_drop_give _drop_give = 28;
    if (has__drop_give()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_drop_give());
    }

    // optional .client_baseserver.guild_instance_damage _instance_damage = 29;
    if (has__instance_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_instance_damage());
    }

    // optional .client_baseserver.guild_items_history _items_history = 30;
    if (has__items_history()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_items_history());
    }

    // optional .client_baseserver.guild_jump _guild_jump = 31;
    if (has__guild_jump()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_guild_jump());
    }

    // optional .client_baseserver.guild_app_queue _guild_app_queue = 32;
    if (has__guild_app_queue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_guild_app_queue());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .client_baseserver.guild_instance_prepare _instance_prepare = 33;
    if (has__instance_prepare()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_instance_prepare());
    }

    // optional .client_baseserver.guild_members _guild_members = 34;
    if (has__guild_members()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_guild_members());
    }

    // optional .client_baseserver.guild_stage_rank _guild_stage_rank = 35;
    if (has__guild_stage_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_guild_stage_rank());
    }

    // optional .client_baseserver.guild_set_jump _set_jump = 36;
    if (has__set_jump()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_set_jump());
    }

    // optional .client_baseserver.guild_send_mail _send_mail_reply = 37;
    if (has__send_mail_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_send_mail_reply());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_reply::MergeFrom(const guild_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__create()) {
      mutable__create()->::client_baseserver::guild_create::MergeFrom(from._create());
    }
    if (from.has__dismiss()) {
      mutable__dismiss()->::client_baseserver::guild_dismiss::MergeFrom(from._dismiss());
    }
    if (from.has__list()) {
      mutable__list()->::client_baseserver::guild_list::MergeFrom(from._list());
    }
    if (from.has__search()) {
      mutable__search()->::client_baseserver::guild_search::MergeFrom(from._search());
    }
    if (from.has__join()) {
      mutable__join()->::client_baseserver::guild_join::MergeFrom(from._join());
    }
    if (from.has__join_confirm()) {
      mutable__join_confirm()->::client_baseserver::guild_join_confirm::MergeFrom(from._join_confirm());
    }
    if (from.has__leave()) {
      mutable__leave()->::client_baseserver::guild_leave::MergeFrom(from._leave());
    }
    if (from.has__kick()) {
      mutable__kick()->::client_baseserver::guild_kick::MergeFrom(from._kick());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has__set()) {
      mutable__set()->::client_baseserver::guild_set::MergeFrom(from._set());
    }
    if (from.has__query()) {
      mutable__query()->::client_baseserver::guild_query::MergeFrom(from._query());
    }
    if (from.has__set_job()) {
      mutable__set_job()->::client_baseserver::guild_set_job::MergeFrom(from._set_job());
    }
    if (from.has__add_hire()) {
      mutable__add_hire()->::client_baseserver::guild_add_hire::MergeFrom(from._add_hire());
    }
    if (from.has__del_hire()) {
      mutable__del_hire()->::client_baseserver::guild_del_hire::MergeFrom(from._del_hire());
    }
    if (from.has__query_hires()) {
      mutable__query_hires()->::client_baseserver::guild_query_hires::MergeFrom(from._query_hires());
    }
    if (from.has__hire_hero()) {
      mutable__hire_hero()->::client_baseserver::guild_hire_hero::MergeFrom(from._hire_hero());
    }
    if (from.has__worship_req()) {
      mutable__worship_req()->::client_baseserver::guild_worship_req::MergeFrom(from._worship_req());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has__worship_withdraw()) {
      mutable__worship_withdraw()->::client_baseserver::guild_worship_withdraw::MergeFrom(from._worship_withdraw());
    }
    if (from.has__query_hh_detail()) {
      mutable__query_hh_detail()->::client_baseserver::guild_qurey_hh_detail::MergeFrom(from._query_hh_detail());
    }
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__instance_query()) {
      mutable__instance_query()->::client_baseserver::guild_instance_query::MergeFrom(from._instance_query());
    }
    if (from.has__instance_detail()) {
      mutable__instance_detail()->::client_baseserver::guild_instance_detail::MergeFrom(from._instance_detail());
    }
    if (from.has__instance_start()) {
      mutable__instance_start()->::client_baseserver::guild_instance_start::MergeFrom(from._instance_start());
    }
    if (from.has__instance_end()) {
      mutable__instance_end()->::client_baseserver::guild_instance_end_down::MergeFrom(from._instance_end());
    }
    if (from.has__instance_drop()) {
      mutable__instance_drop()->::client_baseserver::guild_instance_drop::MergeFrom(from._instance_drop());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has__instance_open()) {
      mutable__instance_open()->::client_baseserver::guild_instance_open::MergeFrom(from._instance_open());
    }
    if (from.has__instance_apply()) {
      mutable__instance_apply()->::client_baseserver::guild_instance_apply::MergeFrom(from._instance_apply());
    }
    if (from.has__drop_info()) {
      mutable__drop_info()->::client_baseserver::guild_drop_info::MergeFrom(from._drop_info());
    }
    if (from.has__drop_give()) {
      mutable__drop_give()->::client_baseserver::guild_drop_give::MergeFrom(from._drop_give());
    }
    if (from.has__instance_damage()) {
      mutable__instance_damage()->::client_baseserver::guild_instance_damage::MergeFrom(from._instance_damage());
    }
    if (from.has__items_history()) {
      mutable__items_history()->::client_baseserver::guild_items_history::MergeFrom(from._items_history());
    }
    if (from.has__guild_jump()) {
      mutable__guild_jump()->::client_baseserver::guild_jump::MergeFrom(from._guild_jump());
    }
    if (from.has__guild_app_queue()) {
      mutable__guild_app_queue()->::client_baseserver::guild_app_queue::MergeFrom(from._guild_app_queue());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has__instance_prepare()) {
      mutable__instance_prepare()->::client_baseserver::guild_instance_prepare::MergeFrom(from._instance_prepare());
    }
    if (from.has__guild_members()) {
      mutable__guild_members()->::client_baseserver::guild_members::MergeFrom(from._guild_members());
    }
    if (from.has__guild_stage_rank()) {
      mutable__guild_stage_rank()->::client_baseserver::guild_stage_rank::MergeFrom(from._guild_stage_rank());
    }
    if (from.has__set_jump()) {
      mutable__set_jump()->::client_baseserver::guild_set_jump::MergeFrom(from._set_jump());
    }
    if (from.has__send_mail_reply()) {
      mutable__send_mail_reply()->::client_baseserver::guild_send_mail::MergeFrom(from._send_mail_reply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_reply::CopyFrom(const guild_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00040000) != 0x00040000) return false;

  if (has__create()) {
    if (!this->_create().IsInitialized()) return false;
  }
  if (has__dismiss()) {
    if (!this->_dismiss().IsInitialized()) return false;
  }
  if (has__list()) {
    if (!this->_list().IsInitialized()) return false;
  }
  if (has__search()) {
    if (!this->_search().IsInitialized()) return false;
  }
  if (has__join()) {
    if (!this->_join().IsInitialized()) return false;
  }
  if (has__join_confirm()) {
    if (!this->_join_confirm().IsInitialized()) return false;
  }
  if (has__leave()) {
    if (!this->_leave().IsInitialized()) return false;
  }
  if (has__kick()) {
    if (!this->_kick().IsInitialized()) return false;
  }
  if (has__set()) {
    if (!this->_set().IsInitialized()) return false;
  }
  if (has__query()) {
    if (!this->_query().IsInitialized()) return false;
  }
  if (has__set_job()) {
    if (!this->_set_job().IsInitialized()) return false;
  }
  if (has__add_hire()) {
    if (!this->_add_hire().IsInitialized()) return false;
  }
  if (has__del_hire()) {
    if (!this->_del_hire().IsInitialized()) return false;
  }
  if (has__query_hires()) {
    if (!this->_query_hires().IsInitialized()) return false;
  }
  if (has__hire_hero()) {
    if (!this->_hire_hero().IsInitialized()) return false;
  }
  if (has__worship_req()) {
    if (!this->_worship_req().IsInitialized()) return false;
  }
  if (has__worship_withdraw()) {
    if (!this->_worship_withdraw().IsInitialized()) return false;
  }
  if (has__query_hh_detail()) {
    if (!this->_query_hh_detail().IsInitialized()) return false;
  }
  if (has__instance_query()) {
    if (!this->_instance_query().IsInitialized()) return false;
  }
  if (has__instance_detail()) {
    if (!this->_instance_detail().IsInitialized()) return false;
  }
  if (has__instance_start()) {
    if (!this->_instance_start().IsInitialized()) return false;
  }
  if (has__instance_end()) {
    if (!this->_instance_end().IsInitialized()) return false;
  }
  if (has__instance_drop()) {
    if (!this->_instance_drop().IsInitialized()) return false;
  }
  if (has__instance_open()) {
    if (!this->_instance_open().IsInitialized()) return false;
  }
  if (has__instance_apply()) {
    if (!this->_instance_apply().IsInitialized()) return false;
  }
  if (has__drop_info()) {
    if (!this->_drop_info().IsInitialized()) return false;
  }
  if (has__drop_give()) {
    if (!this->_drop_give().IsInitialized()) return false;
  }
  if (has__instance_damage()) {
    if (!this->_instance_damage().IsInitialized()) return false;
  }
  if (has__items_history()) {
    if (!this->_items_history().IsInitialized()) return false;
  }
  if (has__guild_jump()) {
    if (!this->_guild_jump().IsInitialized()) return false;
  }
  if (has__guild_app_queue()) {
    if (!this->_guild_app_queue().IsInitialized()) return false;
  }
  if (has__instance_prepare()) {
    if (!this->_instance_prepare().IsInitialized()) return false;
  }
  if (has__guild_members()) {
    if (!this->_guild_members().IsInitialized()) return false;
  }
  if (has__guild_stage_rank()) {
    if (!this->_guild_stage_rank().IsInitialized()) return false;
  }
  if (has__set_jump()) {
    if (!this->_set_jump().IsInitialized()) return false;
  }
  if (has__send_mail_reply()) {
    if (!this->_send_mail_reply().IsInitialized()) return false;
  }
  return true;
}

void guild_reply::Swap(guild_reply* other) {
  if (other != this) {
    std::swap(_create_, other->_create_);
    std::swap(_dismiss_, other->_dismiss_);
    std::swap(_list_, other->_list_);
    std::swap(_search_, other->_search_);
    std::swap(_join_, other->_join_);
    std::swap(_join_confirm_, other->_join_confirm_);
    std::swap(_leave_, other->_leave_);
    std::swap(_kick_, other->_kick_);
    std::swap(_set_, other->_set_);
    std::swap(_query_, other->_query_);
    std::swap(_set_job_, other->_set_job_);
    std::swap(_add_hire_, other->_add_hire_);
    std::swap(_del_hire_, other->_del_hire_);
    std::swap(_query_hires_, other->_query_hires_);
    std::swap(_hire_hero_, other->_hire_hero_);
    std::swap(_worship_req_, other->_worship_req_);
    std::swap(_worship_withdraw_, other->_worship_withdraw_);
    std::swap(_query_hh_detail_, other->_query_hh_detail_);
    std::swap(_result_, other->_result_);
    std::swap(_instance_query_, other->_instance_query_);
    std::swap(_instance_detail_, other->_instance_detail_);
    std::swap(_instance_start_, other->_instance_start_);
    std::swap(_instance_end_, other->_instance_end_);
    std::swap(_instance_drop_, other->_instance_drop_);
    std::swap(_instance_open_, other->_instance_open_);
    std::swap(_instance_apply_, other->_instance_apply_);
    std::swap(_drop_info_, other->_drop_info_);
    std::swap(_drop_give_, other->_drop_give_);
    std::swap(_instance_damage_, other->_instance_damage_);
    std::swap(_items_history_, other->_items_history_);
    std::swap(_guild_jump_, other->_guild_jump_);
    std::swap(_guild_app_queue_, other->_guild_app_queue_);
    std::swap(_instance_prepare_, other->_instance_prepare_);
    std::swap(_guild_members_, other->_guild_members_);
    std::swap(_guild_stage_rank_, other->_guild_stage_rank_);
    std::swap(_set_jump_, other->_set_jump_);
    std::swap(_send_mail_reply_, other->_send_mail_reply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_reply_descriptor_;
  metadata.reflection = guild_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_send_mail::kResultFieldNumber;
#endif  // !_MSC_VER

guild_send_mail::guild_send_mail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_send_mail)
}

void guild_send_mail::InitAsDefaultInstance() {
}

guild_send_mail::guild_send_mail(const guild_send_mail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_send_mail)
}

void guild_send_mail::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_send_mail::~guild_send_mail() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_send_mail)
  SharedDtor();
}

void guild_send_mail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_send_mail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_send_mail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_send_mail_descriptor_;
}

const guild_send_mail& guild_send_mail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_send_mail* guild_send_mail::default_instance_ = NULL;

guild_send_mail* guild_send_mail::New() const {
  return new guild_send_mail;
}

void guild_send_mail::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_send_mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_send_mail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_send_mail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_send_mail)
  return false;
#undef DO_
}

void guild_send_mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_send_mail)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_send_mail)
}

::google::protobuf::uint8* guild_send_mail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_send_mail)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_send_mail)
  return target;
}

int guild_send_mail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_send_mail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_send_mail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_send_mail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_send_mail::MergeFrom(const guild_send_mail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_send_mail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_send_mail::CopyFrom(const guild_send_mail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_send_mail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_send_mail::Swap(guild_send_mail* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_send_mail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_send_mail_descriptor_;
  metadata.reflection = guild_send_mail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_set_jump::kResultFieldNumber;
#endif  // !_MSC_VER

guild_set_jump::guild_set_jump()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_set_jump)
}

void guild_set_jump::InitAsDefaultInstance() {
}

guild_set_jump::guild_set_jump(const guild_set_jump& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_set_jump)
}

void guild_set_jump::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_set_jump::~guild_set_jump() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_set_jump)
  SharedDtor();
}

void guild_set_jump::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_set_jump::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_set_jump::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_set_jump_descriptor_;
}

const guild_set_jump& guild_set_jump::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_set_jump* guild_set_jump::default_instance_ = NULL;

guild_set_jump* guild_set_jump::New() const {
  return new guild_set_jump;
}

void guild_set_jump::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_set_jump::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_set_jump)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_set_jump)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_set_jump)
  return false;
#undef DO_
}

void guild_set_jump::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_set_jump)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_set_jump)
}

::google::protobuf::uint8* guild_set_jump::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_set_jump)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_set_jump)
  return target;
}

int guild_set_jump::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_set_jump::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_set_jump* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_set_jump*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_set_jump::MergeFrom(const guild_set_jump& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_set_jump::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_set_jump::CopyFrom(const guild_set_jump& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_set_jump::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_set_jump::Swap(guild_set_jump* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_set_jump::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_set_jump_descriptor_;
  metadata.reflection = guild_set_jump_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_instance_prepare::kResultFieldNumber;
const int guild_instance_prepare::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

guild_instance_prepare::guild_instance_prepare()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_instance_prepare)
}

void guild_instance_prepare::InitAsDefaultInstance() {
}

guild_instance_prepare::guild_instance_prepare(const guild_instance_prepare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_instance_prepare)
}

void guild_instance_prepare::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _left_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_instance_prepare::~guild_instance_prepare() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_instance_prepare)
  SharedDtor();
}

void guild_instance_prepare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_instance_prepare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_instance_prepare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_prepare_descriptor_;
}

const guild_instance_prepare& guild_instance_prepare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_instance_prepare* guild_instance_prepare::default_instance_ = NULL;

guild_instance_prepare* guild_instance_prepare::New() const {
  return new guild_instance_prepare;
}

void guild_instance_prepare::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_instance_prepare*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_result_, _left_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_instance_prepare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_instance_prepare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__left_time;
        break;
      }

      // required uint32 _left_time = 2;
      case 2: {
        if (tag == 16) {
         parse__left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_left_time_)));
          set_has__left_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_instance_prepare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_instance_prepare)
  return false;
#undef DO_
}

void guild_instance_prepare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_instance_prepare)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // required uint32 _left_time = 2;
  if (has__left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_left_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_instance_prepare)
}

::google::protobuf::uint8* guild_instance_prepare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_instance_prepare)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // required uint32 _left_time = 2;
  if (has__left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_left_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_instance_prepare)
  return target;
}

int guild_instance_prepare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // required uint32 _left_time = 2;
    if (has__left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_left_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_instance_prepare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_instance_prepare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_instance_prepare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_instance_prepare::MergeFrom(const guild_instance_prepare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__left_time()) {
      set__left_time(from._left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_instance_prepare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_instance_prepare::CopyFrom(const guild_instance_prepare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_instance_prepare::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void guild_instance_prepare::Swap(guild_instance_prepare* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_left_time_, other->_left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_instance_prepare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_instance_prepare_descriptor_;
  metadata.reflection = guild_instance_prepare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dps_rank::kDpsFieldNumber;
const int dps_rank::kDpsUserFieldNumber;
const int dps_rank::kArrayFieldNumber;
#endif  // !_MSC_VER

dps_rank::dps_rank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.dps_rank)
}

void dps_rank::InitAsDefaultInstance() {
  _dps_user_ = const_cast< ::client_baseserver::user_summary*>(&::client_baseserver::user_summary::default_instance());
  _array_ = const_cast< ::client_baseserver::dps_rank_array*>(&::client_baseserver::dps_rank_array::default_instance());
}

dps_rank::dps_rank(const dps_rank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.dps_rank)
}

void dps_rank::SharedCtor() {
  _cached_size_ = 0;
  _dps_ = 0u;
  _dps_user_ = NULL;
  _array_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dps_rank::~dps_rank() {
  // @@protoc_insertion_point(destructor:client_baseserver.dps_rank)
  SharedDtor();
}

void dps_rank::SharedDtor() {
  if (this != default_instance_) {
    delete _dps_user_;
    delete _array_;
  }
}

void dps_rank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dps_rank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dps_rank_descriptor_;
}

const dps_rank& dps_rank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

dps_rank* dps_rank::default_instance_ = NULL;

dps_rank* dps_rank::New() const {
  return new dps_rank;
}

void dps_rank::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    _dps_ = 0u;
    if (has__dps_user()) {
      if (_dps_user_ != NULL) _dps_user_->::client_baseserver::user_summary::Clear();
    }
    if (has__array()) {
      if (_array_ != NULL) _array_->::client_baseserver::dps_rank_array::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dps_rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.dps_rank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _dps = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_dps_)));
          set_has__dps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__dps_user;
        break;
      }

      // required .client_baseserver.user_summary _dps_user = 2;
      case 2: {
        if (tag == 18) {
         parse__dps_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__dps_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__array;
        break;
      }

      // optional .client_baseserver.dps_rank_array _array = 3;
      case 3: {
        if (tag == 26) {
         parse__array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__array()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.dps_rank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.dps_rank)
  return false;
#undef DO_
}

void dps_rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.dps_rank)
  // required uint32 _dps = 1;
  if (has__dps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_dps(), output);
  }

  // required .client_baseserver.user_summary _dps_user = 2;
  if (has__dps_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_dps_user(), output);
  }

  // optional .client_baseserver.dps_rank_array _array = 3;
  if (has__array()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_array(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.dps_rank)
}

::google::protobuf::uint8* dps_rank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.dps_rank)
  // required uint32 _dps = 1;
  if (has__dps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_dps(), target);
  }

  // required .client_baseserver.user_summary _dps_user = 2;
  if (has__dps_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_dps_user(), target);
  }

  // optional .client_baseserver.dps_rank_array _array = 3;
  if (has__array()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_array(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.dps_rank)
  return target;
}

int dps_rank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _dps = 1;
    if (has__dps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_dps());
    }

    // required .client_baseserver.user_summary _dps_user = 2;
    if (has__dps_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_dps_user());
    }

    // optional .client_baseserver.dps_rank_array _array = 3;
    if (has__array()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_array());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dps_rank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dps_rank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dps_rank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dps_rank::MergeFrom(const dps_rank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__dps()) {
      set__dps(from._dps());
    }
    if (from.has__dps_user()) {
      mutable__dps_user()->::client_baseserver::user_summary::MergeFrom(from._dps_user());
    }
    if (from.has__array()) {
      mutable__array()->::client_baseserver::dps_rank_array::MergeFrom(from._array());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dps_rank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dps_rank::CopyFrom(const dps_rank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dps_rank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has__dps_user()) {
    if (!this->_dps_user().IsInitialized()) return false;
  }
  if (has__array()) {
    if (!this->_array().IsInitialized()) return false;
  }
  return true;
}

void dps_rank::Swap(dps_rank* other) {
  if (other != this) {
    std::swap(_dps_, other->_dps_);
    std::swap(_dps_user_, other->_dps_user_);
    std::swap(_array_, other->_array_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dps_rank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dps_rank_descriptor_;
  metadata.reflection = dps_rank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dps_rank_array::kHerosFieldNumber;
#endif  // !_MSC_VER

dps_rank_array::dps_rank_array()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.dps_rank_array)
}

void dps_rank_array::InitAsDefaultInstance() {
}

dps_rank_array::dps_rank_array(const dps_rank_array& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.dps_rank_array)
}

void dps_rank_array::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dps_rank_array::~dps_rank_array() {
  // @@protoc_insertion_point(destructor:client_baseserver.dps_rank_array)
  SharedDtor();
}

void dps_rank_array::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dps_rank_array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dps_rank_array::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dps_rank_array_descriptor_;
}

const dps_rank_array& dps_rank_array::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

dps_rank_array* dps_rank_array::default_instance_ = NULL;

dps_rank_array* dps_rank_array::New() const {
  return new dps_rank_array;
}

void dps_rank_array::Clear() {
  _heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dps_rank_array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.dps_rank_array)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.hero_summary _heros = 1;
      case 1: {
        if (tag == 10) {
         parse__heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__heros()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__heros;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.dps_rank_array)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.dps_rank_array)
  return false;
#undef DO_
}

void dps_rank_array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.dps_rank_array)
  // repeated .client_baseserver.hero_summary _heros = 1;
  for (int i = 0; i < this->_heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.dps_rank_array)
}

::google::protobuf::uint8* dps_rank_array::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.dps_rank_array)
  // repeated .client_baseserver.hero_summary _heros = 1;
  for (int i = 0; i < this->_heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.dps_rank_array)
  return target;
}

int dps_rank_array::ByteSize() const {
  int total_size = 0;

  // repeated .client_baseserver.hero_summary _heros = 1;
  total_size += 1 * this->_heros_size();
  for (int i = 0; i < this->_heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dps_rank_array::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dps_rank_array* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dps_rank_array*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dps_rank_array::MergeFrom(const dps_rank_array& from) {
  GOOGLE_CHECK_NE(&from, this);
  _heros_.MergeFrom(from._heros_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dps_rank_array::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dps_rank_array::CopyFrom(const dps_rank_array& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dps_rank_array::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_heros())) return false;
  return true;
}

void dps_rank_array::Swap(dps_rank_array* other) {
  if (other != this) {
    _heros_.Swap(&other->_heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dps_rank_array::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dps_rank_array_descriptor_;
  metadata.reflection = dps_rank_array_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_first_pass::kSummaryFieldNumber;
const int guild_first_pass::kPassTimeFieldNumber;
#endif  // !_MSC_VER

guild_first_pass::guild_first_pass()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_first_pass)
}

void guild_first_pass::InitAsDefaultInstance() {
  _summary_ = const_cast< ::client_baseserver::user_summary*>(&::client_baseserver::user_summary::default_instance());
}

guild_first_pass::guild_first_pass(const guild_first_pass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_first_pass)
}

void guild_first_pass::SharedCtor() {
  _cached_size_ = 0;
  _summary_ = NULL;
  _pass_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_first_pass::~guild_first_pass() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_first_pass)
  SharedDtor();
}

void guild_first_pass::SharedDtor() {
  if (this != default_instance_) {
    delete _summary_;
  }
}

void guild_first_pass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_first_pass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_first_pass_descriptor_;
}

const guild_first_pass& guild_first_pass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_first_pass* guild_first_pass::default_instance_ = NULL;

guild_first_pass* guild_first_pass::New() const {
  return new guild_first_pass;
}

void guild_first_pass::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has__summary()) {
      if (_summary_ != NULL) _summary_->::client_baseserver::user_summary::Clear();
    }
    _pass_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_first_pass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_first_pass)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.user_summary _summary = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__pass_time;
        break;
      }

      // required uint32 _pass_time = 2;
      case 2: {
        if (tag == 16) {
         parse__pass_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_pass_time_)));
          set_has__pass_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_first_pass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_first_pass)
  return false;
#undef DO_
}

void guild_first_pass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_first_pass)
  // required .client_baseserver.user_summary _summary = 1;
  if (has__summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_summary(), output);
  }

  // required uint32 _pass_time = 2;
  if (has__pass_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_pass_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_first_pass)
}

::google::protobuf::uint8* guild_first_pass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_first_pass)
  // required .client_baseserver.user_summary _summary = 1;
  if (has__summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_summary(), target);
  }

  // required uint32 _pass_time = 2;
  if (has__pass_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_pass_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_first_pass)
  return target;
}

int guild_first_pass::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.user_summary _summary = 1;
    if (has__summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_summary());
    }

    // required uint32 _pass_time = 2;
    if (has__pass_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_pass_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_first_pass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_first_pass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_first_pass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_first_pass::MergeFrom(const guild_first_pass& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__summary()) {
      mutable__summary()->::client_baseserver::user_summary::MergeFrom(from._summary());
    }
    if (from.has__pass_time()) {
      set__pass_time(from._pass_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_first_pass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_first_pass::CopyFrom(const guild_first_pass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_first_pass::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has__summary()) {
    if (!this->_summary().IsInitialized()) return false;
  }
  return true;
}

void guild_first_pass::Swap(guild_first_pass* other) {
  if (other != this) {
    std::swap(_summary_, other->_summary_);
    std::swap(_pass_time_, other->_pass_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_first_pass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_first_pass_descriptor_;
  metadata.reflection = guild_first_pass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_fast_pass::kIdFieldNumber;
const int guild_fast_pass::kIconFieldNumber;
const int guild_fast_pass::kTimeFieldNumber;
const int guild_fast_pass::kNameFieldNumber;
#endif  // !_MSC_VER

guild_fast_pass::guild_fast_pass()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_fast_pass)
}

void guild_fast_pass::InitAsDefaultInstance() {
}

guild_fast_pass::guild_fast_pass(const guild_fast_pass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_fast_pass)
}

void guild_fast_pass::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _id_ = 0u;
  _icon_ = 0u;
  _time_ = 0u;
  _name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_fast_pass::~guild_fast_pass() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_fast_pass)
  SharedDtor();
}

void guild_fast_pass::SharedDtor() {
  if (_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _name_;
  }
  if (this != default_instance_) {
  }
}

void guild_fast_pass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_fast_pass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_fast_pass_descriptor_;
}

const guild_fast_pass& guild_fast_pass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_fast_pass* guild_fast_pass::default_instance_ = NULL;

guild_fast_pass* guild_fast_pass::New() const {
  return new guild_fast_pass;
}

void guild_fast_pass::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_fast_pass*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(_id_, _icon_);
    _time_ = 0u;
    if (has__name()) {
      if (_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_fast_pass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_fast_pass)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_id_)));
          set_has__id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__icon;
        break;
      }

      // required uint32 _icon = 2;
      case 2: {
        if (tag == 16) {
         parse__icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_icon_)));
          set_has__icon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__time;
        break;
      }

      // required uint32 _time = 3;
      case 3: {
        if (tag == 24) {
         parse__time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_time_)));
          set_has__time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__name;
        break;
      }

      // required string _name = 4;
      case 4: {
        if (tag == 34) {
         parse__name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_name().data(), this->_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_fast_pass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_fast_pass)
  return false;
#undef DO_
}

void guild_fast_pass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_fast_pass)
  // required uint32 _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_id(), output);
  }

  // required uint32 _icon = 2;
  if (has__icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_icon(), output);
  }

  // required uint32 _time = 3;
  if (has__time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_time(), output);
  }

  // required string _name = 4;
  if (has__name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_name().data(), this->_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_fast_pass)
}

::google::protobuf::uint8* guild_fast_pass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_fast_pass)
  // required uint32 _id = 1;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_id(), target);
  }

  // required uint32 _icon = 2;
  if (has__icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_icon(), target);
  }

  // required uint32 _time = 3;
  if (has__time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_time(), target);
  }

  // required string _name = 4;
  if (has__name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_name().data(), this->_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_fast_pass)
  return target;
}

int guild_fast_pass::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _id = 1;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_id());
    }

    // required uint32 _icon = 2;
    if (has__icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_icon());
    }

    // required uint32 _time = 3;
    if (has__time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_time());
    }

    // required string _name = 4;
    if (has__name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_fast_pass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_fast_pass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_fast_pass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_fast_pass::MergeFrom(const guild_fast_pass& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__id()) {
      set__id(from._id());
    }
    if (from.has__icon()) {
      set__icon(from._icon());
    }
    if (from.has__time()) {
      set__time(from._time());
    }
    if (from.has__name()) {
      set__name(from._name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_fast_pass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_fast_pass::CopyFrom(const guild_fast_pass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_fast_pass::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void guild_fast_pass::Swap(guild_fast_pass* other) {
  if (other != this) {
    std::swap(_id_, other->_id_);
    std::swap(_icon_, other->_icon_);
    std::swap(_time_, other->_time_);
    std::swap(_name_, other->_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_fast_pass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_fast_pass_descriptor_;
  metadata.reflection = guild_fast_pass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_stage_rank::kStageIdFieldNumber;
const int guild_stage_rank::kDpsRankFieldNumber;
const int guild_stage_rank::kFirstPassFieldNumber;
const int guild_stage_rank::kFastPassFieldNumber;
#endif  // !_MSC_VER

guild_stage_rank::guild_stage_rank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_stage_rank)
}

void guild_stage_rank::InitAsDefaultInstance() {
  _first_pass_ = const_cast< ::client_baseserver::guild_first_pass*>(&::client_baseserver::guild_first_pass::default_instance());
  _fast_pass_ = const_cast< ::client_baseserver::guild_fast_pass*>(&::client_baseserver::guild_fast_pass::default_instance());
}

guild_stage_rank::guild_stage_rank(const guild_stage_rank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_stage_rank)
}

void guild_stage_rank::SharedCtor() {
  _cached_size_ = 0;
  _stage_id_ = 0u;
  _first_pass_ = NULL;
  _fast_pass_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_stage_rank::~guild_stage_rank() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_stage_rank)
  SharedDtor();
}

void guild_stage_rank::SharedDtor() {
  if (this != default_instance_) {
    delete _first_pass_;
    delete _fast_pass_;
  }
}

void guild_stage_rank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_stage_rank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_stage_rank_descriptor_;
}

const guild_stage_rank& guild_stage_rank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_stage_rank* guild_stage_rank::default_instance_ = NULL;

guild_stage_rank* guild_stage_rank::New() const {
  return new guild_stage_rank;
}

void guild_stage_rank::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    _stage_id_ = 0u;
    if (has__first_pass()) {
      if (_first_pass_ != NULL) _first_pass_->::client_baseserver::guild_first_pass::Clear();
    }
    if (has__fast_pass()) {
      if (_fast_pass_ != NULL) _fast_pass_->::client_baseserver::guild_fast_pass::Clear();
    }
  }
  _dps_rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_stage_rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_stage_rank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _stage_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stage_id_)));
          set_has__stage_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__dps_rank;
        break;
      }

      // repeated .client_baseserver.dps_rank _dps_rank = 2;
      case 2: {
        if (tag == 18) {
         parse__dps_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__dps_rank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__dps_rank;
        if (input->ExpectTag(26)) goto parse__first_pass;
        break;
      }

      // optional .client_baseserver.guild_first_pass _first_pass = 3;
      case 3: {
        if (tag == 26) {
         parse__first_pass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__first_pass()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__fast_pass;
        break;
      }

      // optional .client_baseserver.guild_fast_pass _fast_pass = 4;
      case 4: {
        if (tag == 34) {
         parse__fast_pass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__fast_pass()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_stage_rank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_stage_rank)
  return false;
#undef DO_
}

void guild_stage_rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_stage_rank)
  // required uint32 _stage_id = 1;
  if (has__stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_stage_id(), output);
  }

  // repeated .client_baseserver.dps_rank _dps_rank = 2;
  for (int i = 0; i < this->_dps_rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_dps_rank(i), output);
  }

  // optional .client_baseserver.guild_first_pass _first_pass = 3;
  if (has__first_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_first_pass(), output);
  }

  // optional .client_baseserver.guild_fast_pass _fast_pass = 4;
  if (has__fast_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_fast_pass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_stage_rank)
}

::google::protobuf::uint8* guild_stage_rank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_stage_rank)
  // required uint32 _stage_id = 1;
  if (has__stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_stage_id(), target);
  }

  // repeated .client_baseserver.dps_rank _dps_rank = 2;
  for (int i = 0; i < this->_dps_rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_dps_rank(i), target);
  }

  // optional .client_baseserver.guild_first_pass _first_pass = 3;
  if (has__first_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_first_pass(), target);
  }

  // optional .client_baseserver.guild_fast_pass _fast_pass = 4;
  if (has__fast_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_fast_pass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_stage_rank)
  return target;
}

int guild_stage_rank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _stage_id = 1;
    if (has__stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stage_id());
    }

    // optional .client_baseserver.guild_first_pass _first_pass = 3;
    if (has__first_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_first_pass());
    }

    // optional .client_baseserver.guild_fast_pass _fast_pass = 4;
    if (has__fast_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_fast_pass());
    }

  }
  // repeated .client_baseserver.dps_rank _dps_rank = 2;
  total_size += 1 * this->_dps_rank_size();
  for (int i = 0; i < this->_dps_rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_dps_rank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_stage_rank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_stage_rank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_stage_rank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_stage_rank::MergeFrom(const guild_stage_rank& from) {
  GOOGLE_CHECK_NE(&from, this);
  _dps_rank_.MergeFrom(from._dps_rank_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__stage_id()) {
      set__stage_id(from._stage_id());
    }
    if (from.has__first_pass()) {
      mutable__first_pass()->::client_baseserver::guild_first_pass::MergeFrom(from._first_pass());
    }
    if (from.has__fast_pass()) {
      mutable__fast_pass()->::client_baseserver::guild_fast_pass::MergeFrom(from._fast_pass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_stage_rank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_stage_rank::CopyFrom(const guild_stage_rank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_stage_rank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_dps_rank())) return false;
  if (has__first_pass()) {
    if (!this->_first_pass().IsInitialized()) return false;
  }
  if (has__fast_pass()) {
    if (!this->_fast_pass().IsInitialized()) return false;
  }
  return true;
}

void guild_stage_rank::Swap(guild_stage_rank* other) {
  if (other != this) {
    std::swap(_stage_id_, other->_stage_id_);
    _dps_rank_.Swap(&other->_dps_rank_);
    std::swap(_first_pass_, other->_first_pass_);
    std::swap(_fast_pass_, other->_fast_pass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_stage_rank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_stage_rank_descriptor_;
  metadata.reflection = guild_stage_rank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_app_queue::kSummaryFieldNumber;
const int guild_app_queue::kTimeoutFieldNumber;
const int guild_app_queue::kItemCountFieldNumber;
const int guild_app_queue::kRankFieldNumber;
const int guild_app_queue::kItemIdFieldNumber;
const int guild_app_queue::kJumpTimesFieldNumber;
const int guild_app_queue::kCostMoneyFieldNumber;
#endif  // !_MSC_VER

guild_app_queue::guild_app_queue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_app_queue)
}

void guild_app_queue::InitAsDefaultInstance() {
}

guild_app_queue::guild_app_queue(const guild_app_queue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_app_queue)
}

void guild_app_queue::SharedCtor() {
  _cached_size_ = 0;
  _timeout_ = 0u;
  _item_count_ = 0u;
  _rank_ = 0u;
  _item_id_ = 0u;
  _jump_times_ = 0u;
  _cost_money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_app_queue::~guild_app_queue() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_app_queue)
  SharedDtor();
}

void guild_app_queue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_app_queue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_app_queue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_app_queue_descriptor_;
}

const guild_app_queue& guild_app_queue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_app_queue* guild_app_queue::default_instance_ = NULL;

guild_app_queue* guild_app_queue::New() const {
  return new guild_app_queue;
}

void guild_app_queue::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_app_queue*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 126) {
    ZR_(_timeout_, _cost_money_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _summary_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_app_queue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_app_queue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.user_summary _summary = 1;
      case 1: {
        if (tag == 10) {
         parse__summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__summary;
        if (input->ExpectTag(16)) goto parse__timeout;
        break;
      }

      // required uint32 _timeout = 2;
      case 2: {
        if (tag == 16) {
         parse__timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_timeout_)));
          set_has__timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__item_count;
        break;
      }

      // required uint32 _item_count = 3;
      case 3: {
        if (tag == 24) {
         parse__item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_item_count_)));
          set_has__item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__rank;
        break;
      }

      // required uint32 _rank = 4;
      case 4: {
        if (tag == 32) {
         parse__rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_rank_)));
          set_has__rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__item_id;
        break;
      }

      // required uint32 _item_id = 5;
      case 5: {
        if (tag == 40) {
         parse__item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_item_id_)));
          set_has__item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse__jump_times;
        break;
      }

      // required uint32 _jump_times = 6;
      case 6: {
        if (tag == 48) {
         parse__jump_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_jump_times_)));
          set_has__jump_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse__cost_money;
        break;
      }

      // required uint32 _cost_money = 7;
      case 7: {
        if (tag == 56) {
         parse__cost_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_cost_money_)));
          set_has__cost_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_app_queue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_app_queue)
  return false;
#undef DO_
}

void guild_app_queue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_app_queue)
  // repeated .client_baseserver.user_summary _summary = 1;
  for (int i = 0; i < this->_summary_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_summary(i), output);
  }

  // required uint32 _timeout = 2;
  if (has__timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_timeout(), output);
  }

  // required uint32 _item_count = 3;
  if (has__item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_item_count(), output);
  }

  // required uint32 _rank = 4;
  if (has__rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_rank(), output);
  }

  // required uint32 _item_id = 5;
  if (has__item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_item_id(), output);
  }

  // required uint32 _jump_times = 6;
  if (has__jump_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_jump_times(), output);
  }

  // required uint32 _cost_money = 7;
  if (has__cost_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->_cost_money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_app_queue)
}

::google::protobuf::uint8* guild_app_queue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_app_queue)
  // repeated .client_baseserver.user_summary _summary = 1;
  for (int i = 0; i < this->_summary_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_summary(i), target);
  }

  // required uint32 _timeout = 2;
  if (has__timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_timeout(), target);
  }

  // required uint32 _item_count = 3;
  if (has__item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_item_count(), target);
  }

  // required uint32 _rank = 4;
  if (has__rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_rank(), target);
  }

  // required uint32 _item_id = 5;
  if (has__item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_item_id(), target);
  }

  // required uint32 _jump_times = 6;
  if (has__jump_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_jump_times(), target);
  }

  // required uint32 _cost_money = 7;
  if (has__cost_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->_cost_money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_app_queue)
  return target;
}

int guild_app_queue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 _timeout = 2;
    if (has__timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_timeout());
    }

    // required uint32 _item_count = 3;
    if (has__item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_item_count());
    }

    // required uint32 _rank = 4;
    if (has__rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_rank());
    }

    // required uint32 _item_id = 5;
    if (has__item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_item_id());
    }

    // required uint32 _jump_times = 6;
    if (has__jump_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_jump_times());
    }

    // required uint32 _cost_money = 7;
    if (has__cost_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_cost_money());
    }

  }
  // repeated .client_baseserver.user_summary _summary = 1;
  total_size += 1 * this->_summary_size();
  for (int i = 0; i < this->_summary_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_summary(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_app_queue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_app_queue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_app_queue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_app_queue::MergeFrom(const guild_app_queue& from) {
  GOOGLE_CHECK_NE(&from, this);
  _summary_.MergeFrom(from._summary_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__timeout()) {
      set__timeout(from._timeout());
    }
    if (from.has__item_count()) {
      set__item_count(from._item_count());
    }
    if (from.has__rank()) {
      set__rank(from._rank());
    }
    if (from.has__item_id()) {
      set__item_id(from._item_id());
    }
    if (from.has__jump_times()) {
      set__jump_times(from._jump_times());
    }
    if (from.has__cost_money()) {
      set__cost_money(from._cost_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_app_queue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_app_queue::CopyFrom(const guild_app_queue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_app_queue::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007e) != 0x0000007e) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_summary())) return false;
  return true;
}

void guild_app_queue::Swap(guild_app_queue* other) {
  if (other != this) {
    _summary_.Swap(&other->_summary_);
    std::swap(_timeout_, other->_timeout_);
    std::swap(_item_count_, other->_item_count_);
    std::swap(_rank_, other->_rank_);
    std::swap(_item_id_, other->_item_id_);
    std::swap(_jump_times_, other->_jump_times_);
    std::swap(_cost_money_, other->_cost_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_app_queue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_app_queue_descriptor_;
  metadata.reflection = guild_app_queue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_members::kGuildMemberFieldNumber;
#endif  // !_MSC_VER

guild_members::guild_members()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_members)
}

void guild_members::InitAsDefaultInstance() {
}

guild_members::guild_members(const guild_members& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_members)
}

void guild_members::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_members::~guild_members() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_members)
  SharedDtor();
}

void guild_members::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_members::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_members::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_members_descriptor_;
}

const guild_members& guild_members::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_members* guild_members::default_instance_ = NULL;

guild_members* guild_members::New() const {
  return new guild_members;
}

void guild_members::Clear() {
  _guild_member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_members::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_members)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.guild_member _guild_member = 1;
      case 1: {
        if (tag == 10) {
         parse__guild_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__guild_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__guild_member;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_members)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_members)
  return false;
#undef DO_
}

void guild_members::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_members)
  // repeated .client_baseserver.guild_member _guild_member = 1;
  for (int i = 0; i < this->_guild_member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_guild_member(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_members)
}

::google::protobuf::uint8* guild_members::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_members)
  // repeated .client_baseserver.guild_member _guild_member = 1;
  for (int i = 0; i < this->_guild_member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_guild_member(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_members)
  return target;
}

int guild_members::ByteSize() const {
  int total_size = 0;

  // repeated .client_baseserver.guild_member _guild_member = 1;
  total_size += 1 * this->_guild_member_size();
  for (int i = 0; i < this->_guild_member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_guild_member(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_members::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_members* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_members*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_members::MergeFrom(const guild_members& from) {
  GOOGLE_CHECK_NE(&from, this);
  _guild_member_.MergeFrom(from._guild_member_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_members::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_members::CopyFrom(const guild_members& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_members::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_guild_member())) return false;
  return true;
}

void guild_members::Swap(guild_members* other) {
  if (other != this) {
    _guild_member_.Swap(&other->_guild_member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_members::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_members_descriptor_;
  metadata.reflection = guild_members_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_jump::kResultFieldNumber;
const int guild_jump::kAppQueueFieldNumber;
#endif  // !_MSC_VER

guild_jump::guild_jump()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_jump)
}

void guild_jump::InitAsDefaultInstance() {
  _app_queue_ = const_cast< ::client_baseserver::guild_app_queue*>(&::client_baseserver::guild_app_queue::default_instance());
}

guild_jump::guild_jump(const guild_jump& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_jump)
}

void guild_jump::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _app_queue_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_jump::~guild_jump() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_jump)
  SharedDtor();
}

void guild_jump::SharedDtor() {
  if (this != default_instance_) {
    delete _app_queue_;
  }
}

void guild_jump::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_jump::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_jump_descriptor_;
}

const guild_jump& guild_jump::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_jump* guild_jump::default_instance_ = NULL;

guild_jump* guild_jump::New() const {
  return new guild_jump;
}

void guild_jump::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _result_ = 0;
    if (has__app_queue()) {
      if (_app_queue_ != NULL) _app_queue_->::client_baseserver::guild_app_queue::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_jump::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_jump)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__app_queue;
        break;
      }

      // required .client_baseserver.guild_app_queue _app_queue = 2;
      case 2: {
        if (tag == 18) {
         parse__app_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__app_queue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_jump)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_jump)
  return false;
#undef DO_
}

void guild_jump::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_jump)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // required .client_baseserver.guild_app_queue _app_queue = 2;
  if (has__app_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_app_queue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_jump)
}

::google::protobuf::uint8* guild_jump::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_jump)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // required .client_baseserver.guild_app_queue _app_queue = 2;
  if (has__app_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_app_queue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_jump)
  return target;
}

int guild_jump::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // required .client_baseserver.guild_app_queue _app_queue = 2;
    if (has__app_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_app_queue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_jump::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_jump* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_jump*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_jump::MergeFrom(const guild_jump& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__app_queue()) {
      mutable__app_queue()->::client_baseserver::guild_app_queue::MergeFrom(from._app_queue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_jump::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_jump::CopyFrom(const guild_jump& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_jump::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has__app_queue()) {
    if (!this->_app_queue().IsInitialized()) return false;
  }
  return true;
}

void guild_jump::Swap(guild_jump* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_app_queue_, other->_app_queue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_jump::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_jump_descriptor_;
  metadata.reflection = guild_jump_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_items_history::kIsthereFieldNumber;
const int guild_items_history::kItemHistorysFieldNumber;
#endif  // !_MSC_VER

guild_items_history::guild_items_history()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_items_history)
}

void guild_items_history::InitAsDefaultInstance() {
}

guild_items_history::guild_items_history(const guild_items_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_items_history)
}

void guild_items_history::SharedCtor() {
  _cached_size_ = 0;
  _isthere_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_items_history::~guild_items_history() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_items_history)
  SharedDtor();
}

void guild_items_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_items_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_items_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_items_history_descriptor_;
}

const guild_items_history& guild_items_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_items_history* guild_items_history::default_instance_ = NULL;

guild_items_history* guild_items_history::New() const {
  return new guild_items_history;
}

void guild_items_history::Clear() {
  _isthere_ = 0u;
  _item_historys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_items_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_items_history)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _isthere = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_isthere_)));
          set_has__isthere();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__item_historys;
        break;
      }

      // repeated .client_baseserver.guild_item_history _item_historys = 2;
      case 2: {
        if (tag == 18) {
         parse__item_historys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__item_historys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__item_historys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_items_history)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_items_history)
  return false;
#undef DO_
}

void guild_items_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_items_history)
  // required uint32 _isthere = 1;
  if (has__isthere()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_isthere(), output);
  }

  // repeated .client_baseserver.guild_item_history _item_historys = 2;
  for (int i = 0; i < this->_item_historys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_item_historys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_items_history)
}

::google::protobuf::uint8* guild_items_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_items_history)
  // required uint32 _isthere = 1;
  if (has__isthere()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_isthere(), target);
  }

  // repeated .client_baseserver.guild_item_history _item_historys = 2;
  for (int i = 0; i < this->_item_historys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_item_historys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_items_history)
  return target;
}

int guild_items_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _isthere = 1;
    if (has__isthere()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_isthere());
    }

  }
  // repeated .client_baseserver.guild_item_history _item_historys = 2;
  total_size += 1 * this->_item_historys_size();
  for (int i = 0; i < this->_item_historys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_item_historys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_items_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_items_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_items_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_items_history::MergeFrom(const guild_items_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  _item_historys_.MergeFrom(from._item_historys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__isthere()) {
      set__isthere(from._isthere());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_items_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_items_history::CopyFrom(const guild_items_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_items_history::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_item_historys())) return false;
  return true;
}

void guild_items_history::Swap(guild_items_history* other) {
  if (other != this) {
    std::swap(_isthere_, other->_isthere_);
    _item_historys_.Swap(&other->_item_historys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_items_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_items_history_descriptor_;
  metadata.reflection = guild_items_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_item_history::kItemIdFieldNumber;
const int guild_item_history::kReceiverNameFieldNumber;
const int guild_item_history::kSendTimeFieldNumber;
const int guild_item_history::kSenderNameFieldNumber;
#endif  // !_MSC_VER

guild_item_history::guild_item_history()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_item_history)
}

void guild_item_history::InitAsDefaultInstance() {
}

guild_item_history::guild_item_history(const guild_item_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_item_history)
}

void guild_item_history::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _item_id_ = 0u;
  _receiver_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _send_time_ = 0u;
  _sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_item_history::~guild_item_history() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_item_history)
  SharedDtor();
}

void guild_item_history::SharedDtor() {
  if (_receiver_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _receiver_name_;
  }
  if (_sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _sender_name_;
  }
  if (this != default_instance_) {
  }
}

void guild_item_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_item_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_item_history_descriptor_;
}

const guild_item_history& guild_item_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_item_history* guild_item_history::default_instance_ = NULL;

guild_item_history* guild_item_history::New() const {
  return new guild_item_history;
}

void guild_item_history::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_item_history*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(_item_id_, _send_time_);
    if (has__receiver_name()) {
      if (_receiver_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _receiver_name_->clear();
      }
    }
    if (has__sender_name()) {
      if (_sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _sender_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_item_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_item_history)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_item_id_)));
          set_has__item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__receiver_name;
        break;
      }

      // required string _receiver_name = 2;
      case 2: {
        if (tag == 18) {
         parse__receiver_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__receiver_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_receiver_name().data(), this->_receiver_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_receiver_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__send_time;
        break;
      }

      // required uint32 _send_time = 3;
      case 3: {
        if (tag == 24) {
         parse__send_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_send_time_)));
          set_has__send_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__sender_name;
        break;
      }

      // optional string _sender_name = 4;
      case 4: {
        if (tag == 34) {
         parse__sender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_sender_name().data(), this->_sender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_sender_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_item_history)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_item_history)
  return false;
#undef DO_
}

void guild_item_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_item_history)
  // required uint32 _item_id = 1;
  if (has__item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_item_id(), output);
  }

  // required string _receiver_name = 2;
  if (has__receiver_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_receiver_name().data(), this->_receiver_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_receiver_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->_receiver_name(), output);
  }

  // required uint32 _send_time = 3;
  if (has__send_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_send_time(), output);
  }

  // optional string _sender_name = 4;
  if (has__sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_sender_name().data(), this->_sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_sender_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->_sender_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_item_history)
}

::google::protobuf::uint8* guild_item_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_item_history)
  // required uint32 _item_id = 1;
  if (has__item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_item_id(), target);
  }

  // required string _receiver_name = 2;
  if (has__receiver_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_receiver_name().data(), this->_receiver_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_receiver_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_receiver_name(), target);
  }

  // required uint32 _send_time = 3;
  if (has__send_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_send_time(), target);
  }

  // optional string _sender_name = 4;
  if (has__sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_sender_name().data(), this->_sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_sender_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->_sender_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_item_history)
  return target;
}

int guild_item_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _item_id = 1;
    if (has__item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_item_id());
    }

    // required string _receiver_name = 2;
    if (has__receiver_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_receiver_name());
    }

    // required uint32 _send_time = 3;
    if (has__send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_send_time());
    }

    // optional string _sender_name = 4;
    if (has__sender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_sender_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_item_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_item_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_item_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_item_history::MergeFrom(const guild_item_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__item_id()) {
      set__item_id(from._item_id());
    }
    if (from.has__receiver_name()) {
      set__receiver_name(from._receiver_name());
    }
    if (from.has__send_time()) {
      set__send_time(from._send_time());
    }
    if (from.has__sender_name()) {
      set__sender_name(from._sender_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_item_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_item_history::CopyFrom(const guild_item_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_item_history::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void guild_item_history::Swap(guild_item_history* other) {
  if (other != this) {
    std::swap(_item_id_, other->_item_id_);
    std::swap(_receiver_name_, other->_receiver_name_);
    std::swap(_send_time_, other->_send_time_);
    std::swap(_sender_name_, other->_sender_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_item_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_item_history_descriptor_;
  metadata.reflection = guild_item_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_challenger_damage::kChallengerFieldNumber;
const int guild_challenger_damage::kDamageFieldNumber;
#endif  // !_MSC_VER

guild_challenger_damage::guild_challenger_damage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_challenger_damage)
}

void guild_challenger_damage::InitAsDefaultInstance() {
  _challenger_ = const_cast< ::client_baseserver::guild_challenger*>(&::client_baseserver::guild_challenger::default_instance());
}

guild_challenger_damage::guild_challenger_damage(const guild_challenger_damage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_challenger_damage)
}

void guild_challenger_damage::SharedCtor() {
  _cached_size_ = 0;
  _challenger_ = NULL;
  _damage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_challenger_damage::~guild_challenger_damage() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_challenger_damage)
  SharedDtor();
}

void guild_challenger_damage::SharedDtor() {
  if (this != default_instance_) {
    delete _challenger_;
  }
}

void guild_challenger_damage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_challenger_damage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_challenger_damage_descriptor_;
}

const guild_challenger_damage& guild_challenger_damage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_challenger_damage* guild_challenger_damage::default_instance_ = NULL;

guild_challenger_damage* guild_challenger_damage::New() const {
  return new guild_challenger_damage;
}

void guild_challenger_damage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has__challenger()) {
      if (_challenger_ != NULL) _challenger_->::client_baseserver::guild_challenger::Clear();
    }
    _damage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_challenger_damage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_challenger_damage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.guild_challenger _challenger = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__challenger()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__damage;
        break;
      }

      // required uint32 _damage = 2;
      case 2: {
        if (tag == 16) {
         parse__damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_damage_)));
          set_has__damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_challenger_damage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_challenger_damage)
  return false;
#undef DO_
}

void guild_challenger_damage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_challenger_damage)
  // required .client_baseserver.guild_challenger _challenger = 1;
  if (has__challenger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_challenger(), output);
  }

  // required uint32 _damage = 2;
  if (has__damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_damage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_challenger_damage)
}

::google::protobuf::uint8* guild_challenger_damage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_challenger_damage)
  // required .client_baseserver.guild_challenger _challenger = 1;
  if (has__challenger()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_challenger(), target);
  }

  // required uint32 _damage = 2;
  if (has__damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_damage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_challenger_damage)
  return target;
}

int guild_challenger_damage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.guild_challenger _challenger = 1;
    if (has__challenger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_challenger());
    }

    // required uint32 _damage = 2;
    if (has__damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_damage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_challenger_damage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_challenger_damage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_challenger_damage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_challenger_damage::MergeFrom(const guild_challenger_damage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__challenger()) {
      mutable__challenger()->::client_baseserver::guild_challenger::MergeFrom(from._challenger());
    }
    if (from.has__damage()) {
      set__damage(from._damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_challenger_damage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_challenger_damage::CopyFrom(const guild_challenger_damage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_challenger_damage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has__challenger()) {
    if (!this->_challenger().IsInitialized()) return false;
  }
  return true;
}

void guild_challenger_damage::Swap(guild_challenger_damage* other) {
  if (other != this) {
    std::swap(_challenger_, other->_challenger_);
    std::swap(_damage_, other->_damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_challenger_damage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_challenger_damage_descriptor_;
  metadata.reflection = guild_challenger_damage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_instance_damage::kIsthereFieldNumber;
const int guild_instance_damage::kDamagesFieldNumber;
#endif  // !_MSC_VER

guild_instance_damage::guild_instance_damage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_instance_damage)
}

void guild_instance_damage::InitAsDefaultInstance() {
}

guild_instance_damage::guild_instance_damage(const guild_instance_damage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_instance_damage)
}

void guild_instance_damage::SharedCtor() {
  _cached_size_ = 0;
  _isthere_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_instance_damage::~guild_instance_damage() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_instance_damage)
  SharedDtor();
}

void guild_instance_damage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_instance_damage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_instance_damage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_damage_descriptor_;
}

const guild_instance_damage& guild_instance_damage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_instance_damage* guild_instance_damage::default_instance_ = NULL;

guild_instance_damage* guild_instance_damage::New() const {
  return new guild_instance_damage;
}

void guild_instance_damage::Clear() {
  _isthere_ = 0u;
  _damages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_instance_damage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_instance_damage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _isthere = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_isthere_)));
          set_has__isthere();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__damages;
        break;
      }

      // repeated .client_baseserver.guild_challenger_damage _damages = 2;
      case 2: {
        if (tag == 18) {
         parse__damages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__damages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__damages;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_instance_damage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_instance_damage)
  return false;
#undef DO_
}

void guild_instance_damage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_instance_damage)
  // required uint32 _isthere = 1;
  if (has__isthere()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_isthere(), output);
  }

  // repeated .client_baseserver.guild_challenger_damage _damages = 2;
  for (int i = 0; i < this->_damages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_damages(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_instance_damage)
}

::google::protobuf::uint8* guild_instance_damage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_instance_damage)
  // required uint32 _isthere = 1;
  if (has__isthere()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_isthere(), target);
  }

  // repeated .client_baseserver.guild_challenger_damage _damages = 2;
  for (int i = 0; i < this->_damages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_damages(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_instance_damage)
  return target;
}

int guild_instance_damage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _isthere = 1;
    if (has__isthere()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_isthere());
    }

  }
  // repeated .client_baseserver.guild_challenger_damage _damages = 2;
  total_size += 1 * this->_damages_size();
  for (int i = 0; i < this->_damages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_damages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_instance_damage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_instance_damage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_instance_damage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_instance_damage::MergeFrom(const guild_instance_damage& from) {
  GOOGLE_CHECK_NE(&from, this);
  _damages_.MergeFrom(from._damages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__isthere()) {
      set__isthere(from._isthere());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_instance_damage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_instance_damage::CopyFrom(const guild_instance_damage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_instance_damage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_damages())) return false;
  return true;
}

void guild_instance_damage::Swap(guild_instance_damage* other) {
  if (other != this) {
    std::swap(_isthere_, other->_isthere_);
    _damages_.Swap(&other->_damages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_instance_damage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_instance_damage_descriptor_;
  metadata.reflection = guild_instance_damage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_drop_give::kResultFieldNumber;
#endif  // !_MSC_VER

guild_drop_give::guild_drop_give()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_drop_give)
}

void guild_drop_give::InitAsDefaultInstance() {
}

guild_drop_give::guild_drop_give(const guild_drop_give& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_drop_give)
}

void guild_drop_give::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_drop_give::~guild_drop_give() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_drop_give)
  SharedDtor();
}

void guild_drop_give::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_drop_give::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_drop_give::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_drop_give_descriptor_;
}

const guild_drop_give& guild_drop_give::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_drop_give* guild_drop_give::default_instance_ = NULL;

guild_drop_give* guild_drop_give::New() const {
  return new guild_drop_give;
}

void guild_drop_give::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_drop_give::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_drop_give)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_drop_give)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_drop_give)
  return false;
#undef DO_
}

void guild_drop_give::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_drop_give)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_drop_give)
}

::google::protobuf::uint8* guild_drop_give::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_drop_give)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_drop_give)
  return target;
}

int guild_drop_give::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_drop_give::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_drop_give* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_drop_give*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_drop_give::MergeFrom(const guild_drop_give& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_drop_give::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_drop_give::CopyFrom(const guild_drop_give& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_drop_give::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_drop_give::Swap(guild_drop_give* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_drop_give::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_drop_give_descriptor_;
  metadata.reflection = guild_drop_give_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_drop_item_info::kItemIdFieldNumber;
const int guild_drop_item_info::kTimeOutEndFieldNumber;
const int guild_drop_item_info::kUserIdFieldNumber;
#endif  // !_MSC_VER

guild_drop_item_info::guild_drop_item_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_drop_item_info)
}

void guild_drop_item_info::InitAsDefaultInstance() {
}

guild_drop_item_info::guild_drop_item_info(const guild_drop_item_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_drop_item_info)
}

void guild_drop_item_info::SharedCtor() {
  _cached_size_ = 0;
  _item_id_ = 0u;
  _time_out_end_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_drop_item_info::~guild_drop_item_info() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_drop_item_info)
  SharedDtor();
}

void guild_drop_item_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_drop_item_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_drop_item_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_drop_item_info_descriptor_;
}

const guild_drop_item_info& guild_drop_item_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_drop_item_info* guild_drop_item_info::default_instance_ = NULL;

guild_drop_item_info* guild_drop_item_info::New() const {
  return new guild_drop_item_info;
}

void guild_drop_item_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_drop_item_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_item_id_, _time_out_end_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  _user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_drop_item_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_drop_item_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_item_id_)));
          set_has__item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__time_out_end;
        break;
      }

      // required uint32 _time_out_end = 2;
      case 2: {
        if (tag == 16) {
         parse__time_out_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_time_out_end_)));
          set_has__time_out_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__user_id;
        break;
      }

      // repeated uint32 _user_id = 3;
      case 3: {
        if (tag == 24) {
         parse__user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable__user_id())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__user_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__user_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_drop_item_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_drop_item_info)
  return false;
#undef DO_
}

void guild_drop_item_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_drop_item_info)
  // required uint32 _item_id = 1;
  if (has__item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_item_id(), output);
  }

  // required uint32 _time_out_end = 2;
  if (has__time_out_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_time_out_end(), output);
  }

  // repeated uint32 _user_id = 3;
  for (int i = 0; i < this->_user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->_user_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_drop_item_info)
}

::google::protobuf::uint8* guild_drop_item_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_drop_item_info)
  // required uint32 _item_id = 1;
  if (has__item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_item_id(), target);
  }

  // required uint32 _time_out_end = 2;
  if (has__time_out_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_time_out_end(), target);
  }

  // repeated uint32 _user_id = 3;
  for (int i = 0; i < this->_user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->_user_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_drop_item_info)
  return target;
}

int guild_drop_item_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _item_id = 1;
    if (has__item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_item_id());
    }

    // required uint32 _time_out_end = 2;
    if (has__time_out_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_time_out_end());
    }

  }
  // repeated uint32 _user_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->_user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_user_id(i));
    }
    total_size += 1 * this->_user_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_drop_item_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_drop_item_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_drop_item_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_drop_item_info::MergeFrom(const guild_drop_item_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  _user_id_.MergeFrom(from._user_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__item_id()) {
      set__item_id(from._item_id());
    }
    if (from.has__time_out_end()) {
      set__time_out_end(from._time_out_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_drop_item_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_drop_item_info::CopyFrom(const guild_drop_item_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_drop_item_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void guild_drop_item_info::Swap(guild_drop_item_info* other) {
  if (other != this) {
    std::swap(_item_id_, other->_item_id_);
    std::swap(_time_out_end_, other->_time_out_end_);
    _user_id_.Swap(&other->_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_drop_item_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_drop_item_info_descriptor_;
  metadata.reflection = guild_drop_item_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_drop_item::kRaidIdFieldNumber;
const int guild_drop_item::kDpsListFieldNumber;
const int guild_drop_item::kItemInfoFieldNumber;
#endif  // !_MSC_VER

guild_drop_item::guild_drop_item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_drop_item)
}

void guild_drop_item::InitAsDefaultInstance() {
}

guild_drop_item::guild_drop_item(const guild_drop_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_drop_item)
}

void guild_drop_item::SharedCtor() {
  _cached_size_ = 0;
  _raid_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_drop_item::~guild_drop_item() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_drop_item)
  SharedDtor();
}

void guild_drop_item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_drop_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_drop_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_drop_item_descriptor_;
}

const guild_drop_item& guild_drop_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_drop_item* guild_drop_item::default_instance_ = NULL;

guild_drop_item* guild_drop_item::New() const {
  return new guild_drop_item;
}

void guild_drop_item::Clear() {
  _raid_id_ = 0u;
  _dps_list_.Clear();
  _item_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_drop_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_drop_item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _raid_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_raid_id_)));
          set_has__raid_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__dps_list;
        break;
      }

      // repeated .client_baseserver.guild_instance_dps _dps_list = 2;
      case 2: {
        if (tag == 18) {
         parse__dps_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__dps_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__dps_list;
        if (input->ExpectTag(26)) goto parse__item_info;
        break;
      }

      // repeated .client_baseserver.guild_drop_item_info _item_info = 3;
      case 3: {
        if (tag == 26) {
         parse__item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__item_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__item_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_drop_item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_drop_item)
  return false;
#undef DO_
}

void guild_drop_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_drop_item)
  // required uint32 _raid_id = 1;
  if (has__raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_raid_id(), output);
  }

  // repeated .client_baseserver.guild_instance_dps _dps_list = 2;
  for (int i = 0; i < this->_dps_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_dps_list(i), output);
  }

  // repeated .client_baseserver.guild_drop_item_info _item_info = 3;
  for (int i = 0; i < this->_item_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_item_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_drop_item)
}

::google::protobuf::uint8* guild_drop_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_drop_item)
  // required uint32 _raid_id = 1;
  if (has__raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_raid_id(), target);
  }

  // repeated .client_baseserver.guild_instance_dps _dps_list = 2;
  for (int i = 0; i < this->_dps_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_dps_list(i), target);
  }

  // repeated .client_baseserver.guild_drop_item_info _item_info = 3;
  for (int i = 0; i < this->_item_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_item_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_drop_item)
  return target;
}

int guild_drop_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _raid_id = 1;
    if (has__raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_raid_id());
    }

  }
  // repeated .client_baseserver.guild_instance_dps _dps_list = 2;
  total_size += 1 * this->_dps_list_size();
  for (int i = 0; i < this->_dps_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_dps_list(i));
  }

  // repeated .client_baseserver.guild_drop_item_info _item_info = 3;
  total_size += 1 * this->_item_info_size();
  for (int i = 0; i < this->_item_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_item_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_drop_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_drop_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_drop_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_drop_item::MergeFrom(const guild_drop_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  _dps_list_.MergeFrom(from._dps_list_);
  _item_info_.MergeFrom(from._item_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__raid_id()) {
      set__raid_id(from._raid_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_drop_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_drop_item::CopyFrom(const guild_drop_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_drop_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_dps_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->_item_info())) return false;
  return true;
}

void guild_drop_item::Swap(guild_drop_item* other) {
  if (other != this) {
    std::swap(_raid_id_, other->_raid_id_);
    _dps_list_.Swap(&other->_dps_list_);
    _item_info_.Swap(&other->_item_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_drop_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_drop_item_descriptor_;
  metadata.reflection = guild_drop_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_instance_dps::kUidFieldNumber;
const int guild_instance_dps::kDpsFieldNumber;
#endif  // !_MSC_VER

guild_instance_dps::guild_instance_dps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_instance_dps)
}

void guild_instance_dps::InitAsDefaultInstance() {
}

guild_instance_dps::guild_instance_dps(const guild_instance_dps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_instance_dps)
}

void guild_instance_dps::SharedCtor() {
  _cached_size_ = 0;
  _uid_ = 0u;
  _dps_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_instance_dps::~guild_instance_dps() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_instance_dps)
  SharedDtor();
}

void guild_instance_dps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_instance_dps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_instance_dps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_dps_descriptor_;
}

const guild_instance_dps& guild_instance_dps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_instance_dps* guild_instance_dps::default_instance_ = NULL;

guild_instance_dps* guild_instance_dps::New() const {
  return new guild_instance_dps;
}

void guild_instance_dps::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_instance_dps*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_uid_, _dps_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_instance_dps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_instance_dps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_uid_)));
          set_has__uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__dps;
        break;
      }

      // required uint32 _dps = 2;
      case 2: {
        if (tag == 16) {
         parse__dps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_dps_)));
          set_has__dps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_instance_dps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_instance_dps)
  return false;
#undef DO_
}

void guild_instance_dps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_instance_dps)
  // required uint32 _uid = 1;
  if (has__uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_uid(), output);
  }

  // required uint32 _dps = 2;
  if (has__dps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_dps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_instance_dps)
}

::google::protobuf::uint8* guild_instance_dps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_instance_dps)
  // required uint32 _uid = 1;
  if (has__uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_uid(), target);
  }

  // required uint32 _dps = 2;
  if (has__dps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_dps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_instance_dps)
  return target;
}

int guild_instance_dps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _uid = 1;
    if (has__uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_uid());
    }

    // required uint32 _dps = 2;
    if (has__dps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_dps());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_instance_dps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_instance_dps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_instance_dps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_instance_dps::MergeFrom(const guild_instance_dps& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__uid()) {
      set__uid(from._uid());
    }
    if (from.has__dps()) {
      set__dps(from._dps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_instance_dps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_instance_dps::CopyFrom(const guild_instance_dps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_instance_dps::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void guild_instance_dps::Swap(guild_instance_dps* other) {
  if (other != this) {
    std::swap(_uid_, other->_uid_);
    std::swap(_dps_, other->_dps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_instance_dps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_instance_dps_descriptor_;
  metadata.reflection = guild_instance_dps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_drop_info::kMembersFieldNumber;
const int guild_drop_info::kItemsFieldNumber;
#endif  // !_MSC_VER

guild_drop_info::guild_drop_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_drop_info)
}

void guild_drop_info::InitAsDefaultInstance() {
}

guild_drop_info::guild_drop_info(const guild_drop_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_drop_info)
}

void guild_drop_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_drop_info::~guild_drop_info() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_drop_info)
  SharedDtor();
}

void guild_drop_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_drop_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_drop_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_drop_info_descriptor_;
}

const guild_drop_info& guild_drop_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_drop_info* guild_drop_info::default_instance_ = NULL;

guild_drop_info* guild_drop_info::New() const {
  return new guild_drop_info;
}

void guild_drop_info::Clear() {
  _members_.Clear();
  _items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_drop_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_drop_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.guild_member _members = 1;
      case 1: {
        if (tag == 10) {
         parse__members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__members;
        if (input->ExpectTag(18)) goto parse__items;
        break;
      }

      // repeated .client_baseserver.guild_drop_item _items = 2;
      case 2: {
        if (tag == 18) {
         parse__items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_drop_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_drop_info)
  return false;
#undef DO_
}

void guild_drop_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_drop_info)
  // repeated .client_baseserver.guild_member _members = 1;
  for (int i = 0; i < this->_members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_members(i), output);
  }

  // repeated .client_baseserver.guild_drop_item _items = 2;
  for (int i = 0; i < this->_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_drop_info)
}

::google::protobuf::uint8* guild_drop_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_drop_info)
  // repeated .client_baseserver.guild_member _members = 1;
  for (int i = 0; i < this->_members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_members(i), target);
  }

  // repeated .client_baseserver.guild_drop_item _items = 2;
  for (int i = 0; i < this->_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_drop_info)
  return target;
}

int guild_drop_info::ByteSize() const {
  int total_size = 0;

  // repeated .client_baseserver.guild_member _members = 1;
  total_size += 1 * this->_members_size();
  for (int i = 0; i < this->_members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_members(i));
  }

  // repeated .client_baseserver.guild_drop_item _items = 2;
  total_size += 1 * this->_items_size();
  for (int i = 0; i < this->_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_drop_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_drop_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_drop_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_drop_info::MergeFrom(const guild_drop_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  _members_.MergeFrom(from._members_);
  _items_.MergeFrom(from._items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_drop_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_drop_info::CopyFrom(const guild_drop_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_drop_info::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_members())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->_items())) return false;
  return true;
}

void guild_drop_info::Swap(guild_drop_info* other) {
  if (other != this) {
    _members_.Swap(&other->_members_);
    _items_.Swap(&other->_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_drop_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_drop_info_descriptor_;
  metadata.reflection = guild_drop_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_instance_apply::kResultFieldNumber;
const int guild_instance_apply::kAppQueueFieldNumber;
#endif  // !_MSC_VER

guild_instance_apply::guild_instance_apply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_instance_apply)
}

void guild_instance_apply::InitAsDefaultInstance() {
  _app_queue_ = const_cast< ::client_baseserver::guild_app_queue*>(&::client_baseserver::guild_app_queue::default_instance());
}

guild_instance_apply::guild_instance_apply(const guild_instance_apply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_instance_apply)
}

void guild_instance_apply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _app_queue_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_instance_apply::~guild_instance_apply() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_instance_apply)
  SharedDtor();
}

void guild_instance_apply::SharedDtor() {
  if (this != default_instance_) {
    delete _app_queue_;
  }
}

void guild_instance_apply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_instance_apply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_apply_descriptor_;
}

const guild_instance_apply& guild_instance_apply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_instance_apply* guild_instance_apply::default_instance_ = NULL;

guild_instance_apply* guild_instance_apply::New() const {
  return new guild_instance_apply;
}

void guild_instance_apply::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _result_ = 0;
    if (has__app_queue()) {
      if (_app_queue_ != NULL) _app_queue_->::client_baseserver::guild_app_queue::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_instance_apply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_instance_apply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__app_queue;
        break;
      }

      // required .client_baseserver.guild_app_queue _app_queue = 2;
      case 2: {
        if (tag == 18) {
         parse__app_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__app_queue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_instance_apply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_instance_apply)
  return false;
#undef DO_
}

void guild_instance_apply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_instance_apply)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // required .client_baseserver.guild_app_queue _app_queue = 2;
  if (has__app_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_app_queue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_instance_apply)
}

::google::protobuf::uint8* guild_instance_apply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_instance_apply)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // required .client_baseserver.guild_app_queue _app_queue = 2;
  if (has__app_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_app_queue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_instance_apply)
  return target;
}

int guild_instance_apply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // required .client_baseserver.guild_app_queue _app_queue = 2;
    if (has__app_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_app_queue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_instance_apply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_instance_apply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_instance_apply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_instance_apply::MergeFrom(const guild_instance_apply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__app_queue()) {
      mutable__app_queue()->::client_baseserver::guild_app_queue::MergeFrom(from._app_queue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_instance_apply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_instance_apply::CopyFrom(const guild_instance_apply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_instance_apply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has__app_queue()) {
    if (!this->_app_queue().IsInitialized()) return false;
  }
  return true;
}

void guild_instance_apply::Swap(guild_instance_apply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_app_queue_, other->_app_queue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_instance_apply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_instance_apply_descriptor_;
  metadata.reflection = guild_instance_apply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_instance_info::kRaidIdFieldNumber;
const int guild_instance_info::kStageIndexFieldNumber;
const int guild_instance_info::kWaveIndexFieldNumber;
const int guild_instance_info::kHpInfoFieldNumber;
#endif  // !_MSC_VER

guild_instance_info::guild_instance_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_instance_info)
}

void guild_instance_info::InitAsDefaultInstance() {
}

guild_instance_info::guild_instance_info(const guild_instance_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_instance_info)
}

void guild_instance_info::SharedCtor() {
  _cached_size_ = 0;
  _raid_id_ = 0u;
  _stage_index_ = 0u;
  _wave_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_instance_info::~guild_instance_info() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_instance_info)
  SharedDtor();
}

void guild_instance_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_instance_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_instance_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_info_descriptor_;
}

const guild_instance_info& guild_instance_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_instance_info* guild_instance_info::default_instance_ = NULL;

guild_instance_info* guild_instance_info::New() const {
  return new guild_instance_info;
}

void guild_instance_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_instance_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(_raid_id_, _stage_index_);
    _wave_index_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _hp_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_instance_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_instance_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _raid_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_raid_id_)));
          set_has__raid_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__stage_index;
        break;
      }

      // required uint32 _stage_index = 2;
      case 2: {
        if (tag == 16) {
         parse__stage_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stage_index_)));
          set_has__stage_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__wave_index;
        break;
      }

      // required uint32 _wave_index = 3;
      case 3: {
        if (tag == 24) {
         parse__wave_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_wave_index_)));
          set_has__wave_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__hp_info;
        break;
      }

      // repeated uint32 _hp_info = 4;
      case 4: {
        if (tag == 32) {
         parse__hp_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable__hp_info())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__hp_info())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__hp_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_instance_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_instance_info)
  return false;
#undef DO_
}

void guild_instance_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_instance_info)
  // required uint32 _raid_id = 1;
  if (has__raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_raid_id(), output);
  }

  // required uint32 _stage_index = 2;
  if (has__stage_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_stage_index(), output);
  }

  // required uint32 _wave_index = 3;
  if (has__wave_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_wave_index(), output);
  }

  // repeated uint32 _hp_info = 4;
  for (int i = 0; i < this->_hp_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->_hp_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_instance_info)
}

::google::protobuf::uint8* guild_instance_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_instance_info)
  // required uint32 _raid_id = 1;
  if (has__raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_raid_id(), target);
  }

  // required uint32 _stage_index = 2;
  if (has__stage_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_stage_index(), target);
  }

  // required uint32 _wave_index = 3;
  if (has__wave_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_wave_index(), target);
  }

  // repeated uint32 _hp_info = 4;
  for (int i = 0; i < this->_hp_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->_hp_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_instance_info)
  return target;
}

int guild_instance_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _raid_id = 1;
    if (has__raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_raid_id());
    }

    // required uint32 _stage_index = 2;
    if (has__stage_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stage_index());
    }

    // required uint32 _wave_index = 3;
    if (has__wave_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_wave_index());
    }

  }
  // repeated uint32 _hp_info = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->_hp_info_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_hp_info(i));
    }
    total_size += 1 * this->_hp_info_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_instance_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_instance_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_instance_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_instance_info::MergeFrom(const guild_instance_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  _hp_info_.MergeFrom(from._hp_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__raid_id()) {
      set__raid_id(from._raid_id());
    }
    if (from.has__stage_index()) {
      set__stage_index(from._stage_index());
    }
    if (from.has__wave_index()) {
      set__wave_index(from._wave_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_instance_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_instance_info::CopyFrom(const guild_instance_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_instance_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void guild_instance_info::Swap(guild_instance_info* other) {
  if (other != this) {
    std::swap(_raid_id_, other->_raid_id_);
    std::swap(_stage_index_, other->_stage_index_);
    std::swap(_wave_index_, other->_wave_index_);
    _hp_info_.Swap(&other->_hp_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_instance_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_instance_info_descriptor_;
  metadata.reflection = guild_instance_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_instance_start::kInstanceInfoFieldNumber;
const int guild_instance_start::kRseedFieldNumber;
const int guild_instance_start::kLootsFieldNumber;
const int guild_instance_start::kHpDropFieldNumber;
#endif  // !_MSC_VER

guild_instance_start::guild_instance_start()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_instance_start)
}

void guild_instance_start::InitAsDefaultInstance() {
  _instance_info_ = const_cast< ::client_baseserver::guild_instance_info*>(&::client_baseserver::guild_instance_info::default_instance());
}

guild_instance_start::guild_instance_start(const guild_instance_start& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_instance_start)
}

void guild_instance_start::SharedCtor() {
  _cached_size_ = 0;
  _instance_info_ = NULL;
  _rseed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_instance_start::~guild_instance_start() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_instance_start)
  SharedDtor();
}

void guild_instance_start::SharedDtor() {
  if (this != default_instance_) {
    delete _instance_info_;
  }
}

void guild_instance_start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_instance_start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_start_descriptor_;
}

const guild_instance_start& guild_instance_start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_instance_start* guild_instance_start::default_instance_ = NULL;

guild_instance_start* guild_instance_start::New() const {
  return new guild_instance_start;
}

void guild_instance_start::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has__instance_info()) {
      if (_instance_info_ != NULL) _instance_info_->::client_baseserver::guild_instance_info::Clear();
    }
    _rseed_ = 0u;
  }
  _loots_.Clear();
  _hp_drop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_instance_start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_instance_start)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.guild_instance_info _instance_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__instance_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__rseed;
        break;
      }

      // required uint32 _rseed = 2;
      case 2: {
        if (tag == 16) {
         parse__rseed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_rseed_)));
          set_has__rseed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__loots;
        break;
      }

      // repeated uint32 _loots = 3;
      case 3: {
        if (tag == 24) {
         parse__loots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable__loots())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__loots())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__loots;
        if (input->ExpectTag(34)) goto parse__hp_drop;
        break;
      }

      // repeated .client_baseserver.guild_stage_hp_drop _hp_drop = 4;
      case 4: {
        if (tag == 34) {
         parse__hp_drop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__hp_drop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__hp_drop;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_instance_start)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_instance_start)
  return false;
#undef DO_
}

void guild_instance_start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_instance_start)
  // required .client_baseserver.guild_instance_info _instance_info = 1;
  if (has__instance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_instance_info(), output);
  }

  // required uint32 _rseed = 2;
  if (has__rseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_rseed(), output);
  }

  // repeated uint32 _loots = 3;
  for (int i = 0; i < this->_loots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->_loots(i), output);
  }

  // repeated .client_baseserver.guild_stage_hp_drop _hp_drop = 4;
  for (int i = 0; i < this->_hp_drop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_hp_drop(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_instance_start)
}

::google::protobuf::uint8* guild_instance_start::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_instance_start)
  // required .client_baseserver.guild_instance_info _instance_info = 1;
  if (has__instance_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_instance_info(), target);
  }

  // required uint32 _rseed = 2;
  if (has__rseed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_rseed(), target);
  }

  // repeated uint32 _loots = 3;
  for (int i = 0; i < this->_loots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->_loots(i), target);
  }

  // repeated .client_baseserver.guild_stage_hp_drop _hp_drop = 4;
  for (int i = 0; i < this->_hp_drop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_hp_drop(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_instance_start)
  return target;
}

int guild_instance_start::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.guild_instance_info _instance_info = 1;
    if (has__instance_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_instance_info());
    }

    // required uint32 _rseed = 2;
    if (has__rseed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_rseed());
    }

  }
  // repeated uint32 _loots = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->_loots_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_loots(i));
    }
    total_size += 1 * this->_loots_size() + data_size;
  }

  // repeated .client_baseserver.guild_stage_hp_drop _hp_drop = 4;
  total_size += 1 * this->_hp_drop_size();
  for (int i = 0; i < this->_hp_drop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_hp_drop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_instance_start::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_instance_start* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_instance_start*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_instance_start::MergeFrom(const guild_instance_start& from) {
  GOOGLE_CHECK_NE(&from, this);
  _loots_.MergeFrom(from._loots_);
  _hp_drop_.MergeFrom(from._hp_drop_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__instance_info()) {
      mutable__instance_info()->::client_baseserver::guild_instance_info::MergeFrom(from._instance_info());
    }
    if (from.has__rseed()) {
      set__rseed(from._rseed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_instance_start::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_instance_start::CopyFrom(const guild_instance_start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_instance_start::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has__instance_info()) {
    if (!this->_instance_info().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->_hp_drop())) return false;
  return true;
}

void guild_instance_start::Swap(guild_instance_start* other) {
  if (other != this) {
    std::swap(_instance_info_, other->_instance_info_);
    std::swap(_rseed_, other->_rseed_);
    _loots_.Swap(&other->_loots_);
    _hp_drop_.Swap(&other->_hp_drop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_instance_start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_instance_start_descriptor_;
  metadata.reflection = guild_instance_start_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_stage_hp_drop::kMonsterInfoFieldNumber;
const int guild_stage_hp_drop::kLootsFieldNumber;
#endif  // !_MSC_VER

guild_stage_hp_drop::guild_stage_hp_drop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_stage_hp_drop)
}

void guild_stage_hp_drop::InitAsDefaultInstance() {
}

guild_stage_hp_drop::guild_stage_hp_drop(const guild_stage_hp_drop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_stage_hp_drop)
}

void guild_stage_hp_drop::SharedCtor() {
  _cached_size_ = 0;
  _monster_info_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_stage_hp_drop::~guild_stage_hp_drop() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_stage_hp_drop)
  SharedDtor();
}

void guild_stage_hp_drop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_stage_hp_drop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_stage_hp_drop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_stage_hp_drop_descriptor_;
}

const guild_stage_hp_drop& guild_stage_hp_drop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_stage_hp_drop* guild_stage_hp_drop::default_instance_ = NULL;

guild_stage_hp_drop* guild_stage_hp_drop::New() const {
  return new guild_stage_hp_drop;
}

void guild_stage_hp_drop::Clear() {
  _monster_info_ = 0u;
  _loots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_stage_hp_drop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_stage_hp_drop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _monster_info = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_monster_info_)));
          set_has__monster_info();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__loots;
        break;
      }

      // repeated .client_baseserver.hp_drop _loots = 2;
      case 2: {
        if (tag == 18) {
         parse__loots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__loots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__loots;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_stage_hp_drop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_stage_hp_drop)
  return false;
#undef DO_
}

void guild_stage_hp_drop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_stage_hp_drop)
  // required uint32 _monster_info = 1;
  if (has__monster_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_monster_info(), output);
  }

  // repeated .client_baseserver.hp_drop _loots = 2;
  for (int i = 0; i < this->_loots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_loots(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_stage_hp_drop)
}

::google::protobuf::uint8* guild_stage_hp_drop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_stage_hp_drop)
  // required uint32 _monster_info = 1;
  if (has__monster_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_monster_info(), target);
  }

  // repeated .client_baseserver.hp_drop _loots = 2;
  for (int i = 0; i < this->_loots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_loots(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_stage_hp_drop)
  return target;
}

int guild_stage_hp_drop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _monster_info = 1;
    if (has__monster_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_monster_info());
    }

  }
  // repeated .client_baseserver.hp_drop _loots = 2;
  total_size += 1 * this->_loots_size();
  for (int i = 0; i < this->_loots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_loots(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_stage_hp_drop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_stage_hp_drop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_stage_hp_drop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_stage_hp_drop::MergeFrom(const guild_stage_hp_drop& from) {
  GOOGLE_CHECK_NE(&from, this);
  _loots_.MergeFrom(from._loots_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__monster_info()) {
      set__monster_info(from._monster_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_stage_hp_drop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_stage_hp_drop::CopyFrom(const guild_stage_hp_drop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_stage_hp_drop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_loots())) return false;
  return true;
}

void guild_stage_hp_drop::Swap(guild_stage_hp_drop* other) {
  if (other != this) {
    std::swap(_monster_info_, other->_monster_info_);
    _loots_.Swap(&other->_loots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_stage_hp_drop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_stage_hp_drop_descriptor_;
  metadata.reflection = guild_stage_hp_drop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hp_drop::kPerFieldNumber;
const int hp_drop::kItemsFieldNumber;
#endif  // !_MSC_VER

hp_drop::hp_drop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.hp_drop)
}

void hp_drop::InitAsDefaultInstance() {
}

hp_drop::hp_drop(const hp_drop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.hp_drop)
}

void hp_drop::SharedCtor() {
  _cached_size_ = 0;
  _per_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hp_drop::~hp_drop() {
  // @@protoc_insertion_point(destructor:client_baseserver.hp_drop)
  SharedDtor();
}

void hp_drop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hp_drop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hp_drop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hp_drop_descriptor_;
}

const hp_drop& hp_drop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

hp_drop* hp_drop::default_instance_ = NULL;

hp_drop* hp_drop::New() const {
  return new hp_drop;
}

void hp_drop::Clear() {
  _per_ = 0u;
  _items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hp_drop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.hp_drop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _per = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_per_)));
          set_has__per();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__items;
        break;
      }

      // repeated uint32 _items = 2;
      case 2: {
        if (tag == 16) {
         parse__items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable__items())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__items())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.hp_drop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.hp_drop)
  return false;
#undef DO_
}

void hp_drop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.hp_drop)
  // required uint32 _per = 1;
  if (has__per()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_per(), output);
  }

  // repeated uint32 _items = 2;
  for (int i = 0; i < this->_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.hp_drop)
}

::google::protobuf::uint8* hp_drop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.hp_drop)
  // required uint32 _per = 1;
  if (has__per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_per(), target);
  }

  // repeated uint32 _items = 2;
  for (int i = 0; i < this->_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.hp_drop)
  return target;
}

int hp_drop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _per = 1;
    if (has__per()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_per());
    }

  }
  // repeated uint32 _items = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->_items_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_items(i));
    }
    total_size += 1 * this->_items_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hp_drop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hp_drop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hp_drop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hp_drop::MergeFrom(const hp_drop& from) {
  GOOGLE_CHECK_NE(&from, this);
  _items_.MergeFrom(from._items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__per()) {
      set__per(from._per());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hp_drop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hp_drop::CopyFrom(const hp_drop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hp_drop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void hp_drop::Swap(hp_drop* other) {
  if (other != this) {
    std::swap(_per_, other->_per_);
    _items_.Swap(&other->_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hp_drop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hp_drop_descriptor_;
  metadata.reflection = hp_drop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_instance_end_down::kSummaryFieldNumber;
const int guild_instance_end_down::kResultFieldNumber;
const int guild_instance_end_down::kRewardsFieldNumber;
const int guild_instance_end_down::kApplyRewardsFieldNumber;
const int guild_instance_end_down::kStageOldProgressFieldNumber;
const int guild_instance_end_down::kJoinTimesFieldNumber;
const int guild_instance_end_down::kBreakHistoryFieldNumber;
#endif  // !_MSC_VER

guild_instance_end_down::guild_instance_end_down()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_instance_end_down)
}

void guild_instance_end_down::InitAsDefaultInstance() {
  _summary_ = const_cast< ::client_baseserver::guild_instance_summary*>(&::client_baseserver::guild_instance_summary::default_instance());
  _break_history_ = const_cast< ::client_baseserver::break_history*>(&::client_baseserver::break_history::default_instance());
}

guild_instance_end_down::guild_instance_end_down(const guild_instance_end_down& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_instance_end_down)
}

void guild_instance_end_down::SharedCtor() {
  _cached_size_ = 0;
  _summary_ = NULL;
  _result_ = 0;
  _stage_old_progress_ = 0u;
  _join_times_ = 0u;
  _break_history_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_instance_end_down::~guild_instance_end_down() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_instance_end_down)
  SharedDtor();
}

void guild_instance_end_down::SharedDtor() {
  if (this != default_instance_) {
    delete _summary_;
    delete _break_history_;
  }
}

void guild_instance_end_down::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_instance_end_down::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_end_down_descriptor_;
}

const guild_instance_end_down& guild_instance_end_down::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_instance_end_down* guild_instance_end_down::default_instance_ = NULL;

guild_instance_end_down* guild_instance_end_down::New() const {
  return new guild_instance_end_down;
}

void guild_instance_end_down::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_instance_end_down*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 115) {
    ZR_(_result_, _stage_old_progress_);
    if (has__summary()) {
      if (_summary_ != NULL) _summary_->::client_baseserver::guild_instance_summary::Clear();
    }
    _join_times_ = 0u;
    if (has__break_history()) {
      if (_break_history_ != NULL) _break_history_->::client_baseserver::break_history::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _rewards_.Clear();
  _apply_rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_instance_end_down::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_instance_end_down)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.guild_instance_summary _summary = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__result;
        break;
      }

      // required .client_baseserver.battle_result _result = 2;
      case 2: {
        if (tag == 16) {
         parse__result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::battle_result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::battle_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__rewards;
        break;
      }

      // repeated uint32 _rewards = 3;
      case 3: {
        if (tag == 24) {
         parse__rewards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable__rewards())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__rewards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__rewards;
        if (input->ExpectTag(32)) goto parse__apply_rewards;
        break;
      }

      // repeated uint32 _apply_rewards = 4;
      case 4: {
        if (tag == 32) {
         parse__apply_rewards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable__apply_rewards())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__apply_rewards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__apply_rewards;
        if (input->ExpectTag(40)) goto parse__stage_old_progress;
        break;
      }

      // required uint32 _stage_old_progress = 5;
      case 5: {
        if (tag == 40) {
         parse__stage_old_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stage_old_progress_)));
          set_has__stage_old_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse__join_times;
        break;
      }

      // required uint32 _join_times = 6;
      case 6: {
        if (tag == 48) {
         parse__join_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_join_times_)));
          set_has__join_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse__break_history;
        break;
      }

      // optional .client_baseserver.break_history _break_history = 7;
      case 7: {
        if (tag == 58) {
         parse__break_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__break_history()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_instance_end_down)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_instance_end_down)
  return false;
#undef DO_
}

void guild_instance_end_down::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_instance_end_down)
  // required .client_baseserver.guild_instance_summary _summary = 1;
  if (has__summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_summary(), output);
  }

  // required .client_baseserver.battle_result _result = 2;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->_result(), output);
  }

  // repeated uint32 _rewards = 3;
  for (int i = 0; i < this->_rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->_rewards(i), output);
  }

  // repeated uint32 _apply_rewards = 4;
  for (int i = 0; i < this->_apply_rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->_apply_rewards(i), output);
  }

  // required uint32 _stage_old_progress = 5;
  if (has__stage_old_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_stage_old_progress(), output);
  }

  // required uint32 _join_times = 6;
  if (has__join_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_join_times(), output);
  }

  // optional .client_baseserver.break_history _break_history = 7;
  if (has__break_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_break_history(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_instance_end_down)
}

::google::protobuf::uint8* guild_instance_end_down::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_instance_end_down)
  // required .client_baseserver.guild_instance_summary _summary = 1;
  if (has__summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_summary(), target);
  }

  // required .client_baseserver.battle_result _result = 2;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->_result(), target);
  }

  // repeated uint32 _rewards = 3;
  for (int i = 0; i < this->_rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->_rewards(i), target);
  }

  // repeated uint32 _apply_rewards = 4;
  for (int i = 0; i < this->_apply_rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->_apply_rewards(i), target);
  }

  // required uint32 _stage_old_progress = 5;
  if (has__stage_old_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_stage_old_progress(), target);
  }

  // required uint32 _join_times = 6;
  if (has__join_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_join_times(), target);
  }

  // optional .client_baseserver.break_history _break_history = 7;
  if (has__break_history()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->_break_history(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_instance_end_down)
  return target;
}

int guild_instance_end_down::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.guild_instance_summary _summary = 1;
    if (has__summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_summary());
    }

    // required .client_baseserver.battle_result _result = 2;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // required uint32 _stage_old_progress = 5;
    if (has__stage_old_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stage_old_progress());
    }

    // required uint32 _join_times = 6;
    if (has__join_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_join_times());
    }

    // optional .client_baseserver.break_history _break_history = 7;
    if (has__break_history()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_break_history());
    }

  }
  // repeated uint32 _rewards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->_rewards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_rewards(i));
    }
    total_size += 1 * this->_rewards_size() + data_size;
  }

  // repeated uint32 _apply_rewards = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->_apply_rewards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_apply_rewards(i));
    }
    total_size += 1 * this->_apply_rewards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_instance_end_down::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_instance_end_down* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_instance_end_down*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_instance_end_down::MergeFrom(const guild_instance_end_down& from) {
  GOOGLE_CHECK_NE(&from, this);
  _rewards_.MergeFrom(from._rewards_);
  _apply_rewards_.MergeFrom(from._apply_rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__summary()) {
      mutable__summary()->::client_baseserver::guild_instance_summary::MergeFrom(from._summary());
    }
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__stage_old_progress()) {
      set__stage_old_progress(from._stage_old_progress());
    }
    if (from.has__join_times()) {
      set__join_times(from._join_times());
    }
    if (from.has__break_history()) {
      mutable__break_history()->::client_baseserver::break_history::MergeFrom(from._break_history());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_instance_end_down::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_instance_end_down::CopyFrom(const guild_instance_end_down& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_instance_end_down::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000033) != 0x00000033) return false;

  if (has__summary()) {
    if (!this->_summary().IsInitialized()) return false;
  }
  if (has__break_history()) {
    if (!this->_break_history().IsInitialized()) return false;
  }
  return true;
}

void guild_instance_end_down::Swap(guild_instance_end_down* other) {
  if (other != this) {
    std::swap(_summary_, other->_summary_);
    std::swap(_result_, other->_result_);
    _rewards_.Swap(&other->_rewards_);
    _apply_rewards_.Swap(&other->_apply_rewards_);
    std::swap(_stage_old_progress_, other->_stage_old_progress_);
    std::swap(_join_times_, other->_join_times_);
    std::swap(_break_history_, other->_break_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_instance_end_down::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_instance_end_down_descriptor_;
  metadata.reflection = guild_instance_end_down_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int break_history::kDiamondFieldNumber;
const int break_history::kGuildpointFieldNumber;
const int break_history::kDpsFieldNumber;
const int break_history::kOldDpsFieldNumber;
const int break_history::kOldSummaryFieldNumber;
#endif  // !_MSC_VER

break_history::break_history()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.break_history)
}

void break_history::InitAsDefaultInstance() {
  _old_summary_ = const_cast< ::client_baseserver::user_summary*>(&::client_baseserver::user_summary::default_instance());
}

break_history::break_history(const break_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.break_history)
}

void break_history::SharedCtor() {
  _cached_size_ = 0;
  _diamond_ = 0u;
  _guildpoint_ = 0u;
  _dps_ = 0u;
  _old_dps_ = 0u;
  _old_summary_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

break_history::~break_history() {
  // @@protoc_insertion_point(destructor:client_baseserver.break_history)
  SharedDtor();
}

void break_history::SharedDtor() {
  if (this != default_instance_) {
    delete _old_summary_;
  }
}

void break_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* break_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return break_history_descriptor_;
}

const break_history& break_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

break_history* break_history::default_instance_ = NULL;

break_history* break_history::New() const {
  return new break_history;
}

void break_history::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<break_history*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(_diamond_, _old_dps_);
    if (has__old_summary()) {
      if (_old_summary_ != NULL) _old_summary_->::client_baseserver::user_summary::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool break_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.break_history)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _diamond = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_diamond_)));
          set_has__diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__guildpoint;
        break;
      }

      // required uint32 _guildpoint = 2;
      case 2: {
        if (tag == 16) {
         parse__guildpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_guildpoint_)));
          set_has__guildpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__dps;
        break;
      }

      // required uint32 _dps = 3;
      case 3: {
        if (tag == 24) {
         parse__dps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_dps_)));
          set_has__dps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__old_dps;
        break;
      }

      // optional uint32 _old_dps = 4;
      case 4: {
        if (tag == 32) {
         parse__old_dps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_old_dps_)));
          set_has__old_dps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse__old_summary;
        break;
      }

      // optional .client_baseserver.user_summary _old_summary = 5;
      case 5: {
        if (tag == 42) {
         parse__old_summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__old_summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.break_history)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.break_history)
  return false;
#undef DO_
}

void break_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.break_history)
  // required uint32 _diamond = 1;
  if (has__diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_diamond(), output);
  }

  // required uint32 _guildpoint = 2;
  if (has__guildpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_guildpoint(), output);
  }

  // required uint32 _dps = 3;
  if (has__dps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_dps(), output);
  }

  // optional uint32 _old_dps = 4;
  if (has__old_dps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_old_dps(), output);
  }

  // optional .client_baseserver.user_summary _old_summary = 5;
  if (has__old_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_old_summary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.break_history)
}

::google::protobuf::uint8* break_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.break_history)
  // required uint32 _diamond = 1;
  if (has__diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_diamond(), target);
  }

  // required uint32 _guildpoint = 2;
  if (has__guildpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_guildpoint(), target);
  }

  // required uint32 _dps = 3;
  if (has__dps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_dps(), target);
  }

  // optional uint32 _old_dps = 4;
  if (has__old_dps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_old_dps(), target);
  }

  // optional .client_baseserver.user_summary _old_summary = 5;
  if (has__old_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_old_summary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.break_history)
  return target;
}

int break_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _diamond = 1;
    if (has__diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_diamond());
    }

    // required uint32 _guildpoint = 2;
    if (has__guildpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_guildpoint());
    }

    // required uint32 _dps = 3;
    if (has__dps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_dps());
    }

    // optional uint32 _old_dps = 4;
    if (has__old_dps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_old_dps());
    }

    // optional .client_baseserver.user_summary _old_summary = 5;
    if (has__old_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_old_summary());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void break_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const break_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const break_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void break_history::MergeFrom(const break_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__diamond()) {
      set__diamond(from._diamond());
    }
    if (from.has__guildpoint()) {
      set__guildpoint(from._guildpoint());
    }
    if (from.has__dps()) {
      set__dps(from._dps());
    }
    if (from.has__old_dps()) {
      set__old_dps(from._old_dps());
    }
    if (from.has__old_summary()) {
      mutable__old_summary()->::client_baseserver::user_summary::MergeFrom(from._old_summary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void break_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void break_history::CopyFrom(const break_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool break_history::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has__old_summary()) {
    if (!this->_old_summary().IsInitialized()) return false;
  }
  return true;
}

void break_history::Swap(break_history* other) {
  if (other != this) {
    std::swap(_diamond_, other->_diamond_);
    std::swap(_guildpoint_, other->_guildpoint_);
    std::swap(_dps_, other->_dps_);
    std::swap(_old_dps_, other->_old_dps_);
    std::swap(_old_summary_, other->_old_summary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata break_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = break_history_descriptor_;
  metadata.reflection = break_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_instance_open::kResultFieldNumber;
const int guild_instance_open::kRaidIdFieldNumber;
const int guild_instance_open::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

guild_instance_open::guild_instance_open()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_instance_open)
}

void guild_instance_open::InitAsDefaultInstance() {
}

guild_instance_open::guild_instance_open(const guild_instance_open& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_instance_open)
}

void guild_instance_open::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _raid_id_ = 0u;
  _left_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_instance_open::~guild_instance_open() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_instance_open)
  SharedDtor();
}

void guild_instance_open::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_instance_open::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_instance_open::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_open_descriptor_;
}

const guild_instance_open& guild_instance_open::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_instance_open* guild_instance_open::default_instance_ = NULL;

guild_instance_open* guild_instance_open::New() const {
  return new guild_instance_open;
}

void guild_instance_open::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_instance_open*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_result_, _left_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_instance_open::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_instance_open)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__raid_id;
        break;
      }

      // required uint32 _raid_id = 2;
      case 2: {
        if (tag == 16) {
         parse__raid_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_raid_id_)));
          set_has__raid_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__left_time;
        break;
      }

      // required uint32 _left_time = 3;
      case 3: {
        if (tag == 24) {
         parse__left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_left_time_)));
          set_has__left_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_instance_open)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_instance_open)
  return false;
#undef DO_
}

void guild_instance_open::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_instance_open)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // required uint32 _raid_id = 2;
  if (has__raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_raid_id(), output);
  }

  // required uint32 _left_time = 3;
  if (has__left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_left_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_instance_open)
}

::google::protobuf::uint8* guild_instance_open::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_instance_open)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // required uint32 _raid_id = 2;
  if (has__raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_raid_id(), target);
  }

  // required uint32 _left_time = 3;
  if (has__left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_left_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_instance_open)
  return target;
}

int guild_instance_open::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // required uint32 _raid_id = 2;
    if (has__raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_raid_id());
    }

    // required uint32 _left_time = 3;
    if (has__left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_left_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_instance_open::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_instance_open* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_instance_open*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_instance_open::MergeFrom(const guild_instance_open& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__raid_id()) {
      set__raid_id(from._raid_id());
    }
    if (from.has__left_time()) {
      set__left_time(from._left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_instance_open::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_instance_open::CopyFrom(const guild_instance_open& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_instance_open::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void guild_instance_open::Swap(guild_instance_open* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_raid_id_, other->_raid_id_);
    std::swap(_left_time_, other->_left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_instance_open::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_instance_open_descriptor_;
  metadata.reflection = guild_instance_open_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_create::kResultFieldNumber;
const int guild_create::kGuildInfoFieldNumber;
#endif  // !_MSC_VER

guild_create::guild_create()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_create)
}

void guild_create::InitAsDefaultInstance() {
  _guild_info_ = const_cast< ::client_baseserver::guild_info*>(&::client_baseserver::guild_info::default_instance());
}

guild_create::guild_create(const guild_create& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_create)
}

void guild_create::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _guild_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_create::~guild_create() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_create)
  SharedDtor();
}

void guild_create::SharedDtor() {
  if (this != default_instance_) {
    delete _guild_info_;
  }
}

void guild_create::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_create::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_create_descriptor_;
}

const guild_create& guild_create::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_create* guild_create::default_instance_ = NULL;

guild_create* guild_create::New() const {
  return new guild_create;
}

void guild_create::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _result_ = 0;
    if (has__guild_info()) {
      if (_guild_info_ != NULL) _guild_info_->::client_baseserver::guild_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_create)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__guild_info;
        break;
      }

      // optional .client_baseserver.guild_info _guild_info = 2;
      case 2: {
        if (tag == 18) {
         parse__guild_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__guild_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_create)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_create)
  return false;
#undef DO_
}

void guild_create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_create)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // optional .client_baseserver.guild_info _guild_info = 2;
  if (has__guild_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_guild_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_create)
}

::google::protobuf::uint8* guild_create::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_create)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // optional .client_baseserver.guild_info _guild_info = 2;
  if (has__guild_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_guild_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_create)
  return target;
}

int guild_create::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional .client_baseserver.guild_info _guild_info = 2;
    if (has__guild_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_guild_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_create::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_create* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_create*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_create::MergeFrom(const guild_create& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__guild_info()) {
      mutable__guild_info()->::client_baseserver::guild_info::MergeFrom(from._guild_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_create::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_create::CopyFrom(const guild_create& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_create::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__guild_info()) {
    if (!this->_guild_info().IsInitialized()) return false;
  }
  return true;
}

void guild_create::Swap(guild_create* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_guild_info_, other->_guild_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_create::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_create_descriptor_;
  metadata.reflection = guild_create_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_dismiss::kResultFieldNumber;
#endif  // !_MSC_VER

guild_dismiss::guild_dismiss()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_dismiss)
}

void guild_dismiss::InitAsDefaultInstance() {
}

guild_dismiss::guild_dismiss(const guild_dismiss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_dismiss)
}

void guild_dismiss::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_dismiss::~guild_dismiss() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_dismiss)
  SharedDtor();
}

void guild_dismiss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_dismiss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_dismiss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_dismiss_descriptor_;
}

const guild_dismiss& guild_dismiss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_dismiss* guild_dismiss::default_instance_ = NULL;

guild_dismiss* guild_dismiss::New() const {
  return new guild_dismiss;
}

void guild_dismiss::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_dismiss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_dismiss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_dismiss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_dismiss)
  return false;
#undef DO_
}

void guild_dismiss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_dismiss)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_dismiss)
}

::google::protobuf::uint8* guild_dismiss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_dismiss)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_dismiss)
  return target;
}

int guild_dismiss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_dismiss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_dismiss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_dismiss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_dismiss::MergeFrom(const guild_dismiss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_dismiss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_dismiss::CopyFrom(const guild_dismiss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_dismiss::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_dismiss::Swap(guild_dismiss* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_dismiss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_dismiss_descriptor_;
  metadata.reflection = guild_dismiss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_info::kSummaryFieldNumber;
const int guild_info::kMembersFieldNumber;
const int guild_info::kAppliersFieldNumber;
const int guild_info::kVitalityFieldNumber;
const int guild_info::kSelfVitalityFieldNumber;
const int guild_info::kLeftDistributeTimeFieldNumber;
#endif  // !_MSC_VER

guild_info::guild_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_info)
}

void guild_info::InitAsDefaultInstance() {
  _summary_ = const_cast< ::client_baseserver::guild_summary*>(&::client_baseserver::guild_summary::default_instance());
}

guild_info::guild_info(const guild_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_info)
}

void guild_info::SharedCtor() {
  _cached_size_ = 0;
  _summary_ = NULL;
  _vitality_ = 0u;
  _self_vitality_ = 0u;
  _left_distribute_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_info::~guild_info() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_info)
  SharedDtor();
}

void guild_info::SharedDtor() {
  if (this != default_instance_) {
    delete _summary_;
  }
}

void guild_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_info_descriptor_;
}

const guild_info& guild_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_info* guild_info::default_instance_ = NULL;

guild_info* guild_info::New() const {
  return new guild_info;
}

void guild_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 57) {
    ZR_(_vitality_, _left_distribute_time_);
    if (has__summary()) {
      if (_summary_ != NULL) _summary_->::client_baseserver::guild_summary::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _members_.Clear();
  _appliers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.guild_summary _summary = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__members;
        break;
      }

      // repeated .client_baseserver.guild_member _members = 2;
      case 2: {
        if (tag == 18) {
         parse__members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__members;
        if (input->ExpectTag(26)) goto parse__appliers;
        break;
      }

      // repeated .client_baseserver.guild_applier _appliers = 3;
      case 3: {
        if (tag == 26) {
         parse__appliers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__appliers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__appliers;
        if (input->ExpectTag(32)) goto parse__vitality;
        break;
      }

      // required uint32 _vitality = 4;
      case 4: {
        if (tag == 32) {
         parse__vitality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_vitality_)));
          set_has__vitality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__self_vitality;
        break;
      }

      // required uint32 _self_vitality = 5;
      case 5: {
        if (tag == 40) {
         parse__self_vitality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_self_vitality_)));
          set_has__self_vitality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse__left_distribute_time;
        break;
      }

      // required uint32 _left_distribute_time = 6;
      case 6: {
        if (tag == 48) {
         parse__left_distribute_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_left_distribute_time_)));
          set_has__left_distribute_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_info)
  return false;
#undef DO_
}

void guild_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_info)
  // required .client_baseserver.guild_summary _summary = 1;
  if (has__summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_summary(), output);
  }

  // repeated .client_baseserver.guild_member _members = 2;
  for (int i = 0; i < this->_members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_members(i), output);
  }

  // repeated .client_baseserver.guild_applier _appliers = 3;
  for (int i = 0; i < this->_appliers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_appliers(i), output);
  }

  // required uint32 _vitality = 4;
  if (has__vitality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_vitality(), output);
  }

  // required uint32 _self_vitality = 5;
  if (has__self_vitality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_self_vitality(), output);
  }

  // required uint32 _left_distribute_time = 6;
  if (has__left_distribute_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_left_distribute_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_info)
}

::google::protobuf::uint8* guild_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_info)
  // required .client_baseserver.guild_summary _summary = 1;
  if (has__summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_summary(), target);
  }

  // repeated .client_baseserver.guild_member _members = 2;
  for (int i = 0; i < this->_members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_members(i), target);
  }

  // repeated .client_baseserver.guild_applier _appliers = 3;
  for (int i = 0; i < this->_appliers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_appliers(i), target);
  }

  // required uint32 _vitality = 4;
  if (has__vitality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_vitality(), target);
  }

  // required uint32 _self_vitality = 5;
  if (has__self_vitality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_self_vitality(), target);
  }

  // required uint32 _left_distribute_time = 6;
  if (has__left_distribute_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_left_distribute_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_info)
  return target;
}

int guild_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.guild_summary _summary = 1;
    if (has__summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_summary());
    }

    // required uint32 _vitality = 4;
    if (has__vitality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_vitality());
    }

    // required uint32 _self_vitality = 5;
    if (has__self_vitality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_self_vitality());
    }

    // required uint32 _left_distribute_time = 6;
    if (has__left_distribute_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_left_distribute_time());
    }

  }
  // repeated .client_baseserver.guild_member _members = 2;
  total_size += 1 * this->_members_size();
  for (int i = 0; i < this->_members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_members(i));
  }

  // repeated .client_baseserver.guild_applier _appliers = 3;
  total_size += 1 * this->_appliers_size();
  for (int i = 0; i < this->_appliers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_appliers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_info::MergeFrom(const guild_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  _members_.MergeFrom(from._members_);
  _appliers_.MergeFrom(from._appliers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__summary()) {
      mutable__summary()->::client_baseserver::guild_summary::MergeFrom(from._summary());
    }
    if (from.has__vitality()) {
      set__vitality(from._vitality());
    }
    if (from.has__self_vitality()) {
      set__self_vitality(from._self_vitality());
    }
    if (from.has__left_distribute_time()) {
      set__left_distribute_time(from._left_distribute_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_info::CopyFrom(const guild_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000039) != 0x00000039) return false;

  if (has__summary()) {
    if (!this->_summary().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->_members())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->_appliers())) return false;
  return true;
}

void guild_info::Swap(guild_info* other) {
  if (other != this) {
    std::swap(_summary_, other->_summary_);
    _members_.Swap(&other->_members_);
    _appliers_.Swap(&other->_appliers_);
    std::swap(_vitality_, other->_vitality_);
    std::swap(_self_vitality_, other->_self_vitality_);
    std::swap(_left_distribute_time_, other->_left_distribute_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_info_descriptor_;
  metadata.reflection = guild_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_summary::kIdFieldNumber;
const int guild_summary::kNameFieldNumber;
const int guild_summary::kAvatarFieldNumber;
const int guild_summary::kSloganFieldNumber;
const int guild_summary::kJoinTypeFieldNumber;
const int guild_summary::kJoinLimitFieldNumber;
const int guild_summary::kMemberCntFieldNumber;
const int guild_summary::kPresidentFieldNumber;
const int guild_summary::kLivenessFieldNumber;
const int guild_summary::kCanJumpFieldNumber;
const int guild_summary::kHostIdFieldNumber;
#endif  // !_MSC_VER

guild_summary::guild_summary()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_summary)
}

void guild_summary::InitAsDefaultInstance() {
  _president_ = const_cast< ::client_baseserver::user_summary*>(&::client_baseserver::user_summary::default_instance());
}

guild_summary::guild_summary(const guild_summary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_summary)
}

void guild_summary::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _id_ = 0u;
  _name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _avatar_ = 0u;
  _slogan_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _join_type_ = 1;
  _join_limit_ = 0u;
  _member_cnt_ = 0u;
  _president_ = NULL;
  _liveness_ = 0u;
  _can_jump_ = 0u;
  _host_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_summary::~guild_summary() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_summary)
  SharedDtor();
}

void guild_summary::SharedDtor() {
  if (_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _name_;
  }
  if (_slogan_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _slogan_;
  }
  if (this != default_instance_) {
    delete _president_;
  }
}

void guild_summary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_summary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_summary_descriptor_;
}

const guild_summary& guild_summary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_summary* guild_summary::default_instance_ = NULL;

guild_summary* guild_summary::New() const {
  return new guild_summary;
}

void guild_summary::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_summary*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(_id_, _avatar_);
    if (has__name()) {
      if (_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _name_->clear();
      }
    }
    if (has__slogan()) {
      if (_slogan_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _slogan_->clear();
      }
    }
    _join_type_ = 1;
    _join_limit_ = 0u;
    _member_cnt_ = 0u;
    if (has__president()) {
      if (_president_ != NULL) _president_->::client_baseserver::user_summary::Clear();
    }
  }
  ZR_(_liveness_, _host_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_summary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_summary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_id_)));
          set_has__id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__name;
        break;
      }

      // required string _name = 2;
      case 2: {
        if (tag == 18) {
         parse__name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_name().data(), this->_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__avatar;
        break;
      }

      // required uint32 _avatar = 3;
      case 3: {
        if (tag == 24) {
         parse__avatar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_avatar_)));
          set_has__avatar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__slogan;
        break;
      }

      // required string _slogan = 4;
      case 4: {
        if (tag == 34) {
         parse__slogan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__slogan()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_slogan().data(), this->_slogan().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_slogan");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__join_type;
        break;
      }

      // required .client_baseserver.guild_join_t _join_type = 5;
      case 5: {
        if (tag == 40) {
         parse__join_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::guild_join_t_IsValid(value)) {
            set__join_type(static_cast< ::client_baseserver::guild_join_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse__join_limit;
        break;
      }

      // required uint32 _join_limit = 6;
      case 6: {
        if (tag == 48) {
         parse__join_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_join_limit_)));
          set_has__join_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse__member_cnt;
        break;
      }

      // required uint32 _member_cnt = 7;
      case 7: {
        if (tag == 56) {
         parse__member_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_member_cnt_)));
          set_has__member_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse__president;
        break;
      }

      // required .client_baseserver.user_summary _president = 8;
      case 8: {
        if (tag == 66) {
         parse__president:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__president()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse__liveness;
        break;
      }

      // optional uint32 _liveness = 9;
      case 9: {
        if (tag == 72) {
         parse__liveness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_liveness_)));
          set_has__liveness();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse__can_jump;
        break;
      }

      // optional uint32 _can_jump = 10;
      case 10: {
        if (tag == 80) {
         parse__can_jump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_can_jump_)));
          set_has__can_jump();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse__host_id;
        break;
      }

      // optional uint32 _host_id = 11;
      case 11: {
        if (tag == 88) {
         parse__host_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_host_id_)));
          set_has__host_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_summary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_summary)
  return false;
#undef DO_
}

void guild_summary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_summary)
  // required uint32 _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_id(), output);
  }

  // required string _name = 2;
  if (has__name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_name().data(), this->_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->_name(), output);
  }

  // required uint32 _avatar = 3;
  if (has__avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_avatar(), output);
  }

  // required string _slogan = 4;
  if (has__slogan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_slogan().data(), this->_slogan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_slogan");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->_slogan(), output);
  }

  // required .client_baseserver.guild_join_t _join_type = 5;
  if (has__join_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->_join_type(), output);
  }

  // required uint32 _join_limit = 6;
  if (has__join_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_join_limit(), output);
  }

  // required uint32 _member_cnt = 7;
  if (has__member_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->_member_cnt(), output);
  }

  // required .client_baseserver.user_summary _president = 8;
  if (has__president()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_president(), output);
  }

  // optional uint32 _liveness = 9;
  if (has__liveness()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->_liveness(), output);
  }

  // optional uint32 _can_jump = 10;
  if (has__can_jump()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->_can_jump(), output);
  }

  // optional uint32 _host_id = 11;
  if (has__host_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->_host_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_summary)
}

::google::protobuf::uint8* guild_summary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_summary)
  // required uint32 _id = 1;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_id(), target);
  }

  // required string _name = 2;
  if (has__name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_name().data(), this->_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_name(), target);
  }

  // required uint32 _avatar = 3;
  if (has__avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_avatar(), target);
  }

  // required string _slogan = 4;
  if (has__slogan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_slogan().data(), this->_slogan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_slogan");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->_slogan(), target);
  }

  // required .client_baseserver.guild_join_t _join_type = 5;
  if (has__join_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->_join_type(), target);
  }

  // required uint32 _join_limit = 6;
  if (has__join_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_join_limit(), target);
  }

  // required uint32 _member_cnt = 7;
  if (has__member_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->_member_cnt(), target);
  }

  // required .client_baseserver.user_summary _president = 8;
  if (has__president()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->_president(), target);
  }

  // optional uint32 _liveness = 9;
  if (has__liveness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->_liveness(), target);
  }

  // optional uint32 _can_jump = 10;
  if (has__can_jump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->_can_jump(), target);
  }

  // optional uint32 _host_id = 11;
  if (has__host_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->_host_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_summary)
  return target;
}

int guild_summary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _id = 1;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_id());
    }

    // required string _name = 2;
    if (has__name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_name());
    }

    // required uint32 _avatar = 3;
    if (has__avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_avatar());
    }

    // required string _slogan = 4;
    if (has__slogan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_slogan());
    }

    // required .client_baseserver.guild_join_t _join_type = 5;
    if (has__join_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_join_type());
    }

    // required uint32 _join_limit = 6;
    if (has__join_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_join_limit());
    }

    // required uint32 _member_cnt = 7;
    if (has__member_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_member_cnt());
    }

    // required .client_baseserver.user_summary _president = 8;
    if (has__president()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_president());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 _liveness = 9;
    if (has__liveness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_liveness());
    }

    // optional uint32 _can_jump = 10;
    if (has__can_jump()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_can_jump());
    }

    // optional uint32 _host_id = 11;
    if (has__host_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_host_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_summary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_summary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_summary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_summary::MergeFrom(const guild_summary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__id()) {
      set__id(from._id());
    }
    if (from.has__name()) {
      set__name(from._name());
    }
    if (from.has__avatar()) {
      set__avatar(from._avatar());
    }
    if (from.has__slogan()) {
      set__slogan(from._slogan());
    }
    if (from.has__join_type()) {
      set__join_type(from._join_type());
    }
    if (from.has__join_limit()) {
      set__join_limit(from._join_limit());
    }
    if (from.has__member_cnt()) {
      set__member_cnt(from._member_cnt());
    }
    if (from.has__president()) {
      mutable__president()->::client_baseserver::user_summary::MergeFrom(from._president());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has__liveness()) {
      set__liveness(from._liveness());
    }
    if (from.has__can_jump()) {
      set__can_jump(from._can_jump());
    }
    if (from.has__host_id()) {
      set__host_id(from._host_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_summary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_summary::CopyFrom(const guild_summary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_summary::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has__president()) {
    if (!this->_president().IsInitialized()) return false;
  }
  return true;
}

void guild_summary::Swap(guild_summary* other) {
  if (other != this) {
    std::swap(_id_, other->_id_);
    std::swap(_name_, other->_name_);
    std::swap(_avatar_, other->_avatar_);
    std::swap(_slogan_, other->_slogan_);
    std::swap(_join_type_, other->_join_type_);
    std::swap(_join_limit_, other->_join_limit_);
    std::swap(_member_cnt_, other->_member_cnt_);
    std::swap(_president_, other->_president_);
    std::swap(_liveness_, other->_liveness_);
    std::swap(_can_jump_, other->_can_jump_);
    std::swap(_host_id_, other->_host_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_summary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_summary_descriptor_;
  metadata.reflection = guild_summary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_member::kUidFieldNumber;
const int guild_member::kSummaryFieldNumber;
const int guild_member::kJobFieldNumber;
const int guild_member::kLastLoginFieldNumber;
const int guild_member::kActiveFieldNumber;
const int guild_member::kJoinInstanceTimeFieldNumber;
#endif  // !_MSC_VER

guild_member::guild_member()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_member)
}

void guild_member::InitAsDefaultInstance() {
  _summary_ = const_cast< ::client_baseserver::user_summary*>(&::client_baseserver::user_summary::default_instance());
}

guild_member::guild_member(const guild_member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_member)
}

void guild_member::SharedCtor() {
  _cached_size_ = 0;
  _uid_ = 0u;
  _summary_ = NULL;
  _job_ = 1;
  _last_login_ = 0u;
  _active_ = 0u;
  _join_instance_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_member::~guild_member() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_member)
  SharedDtor();
}

void guild_member::SharedDtor() {
  if (this != default_instance_) {
    delete _summary_;
  }
}

void guild_member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_member_descriptor_;
}

const guild_member& guild_member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_member* guild_member::default_instance_ = NULL;

guild_member* guild_member::New() const {
  return new guild_member;
}

void guild_member::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_member*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(_last_login_, _join_instance_time_);
    _uid_ = 0u;
    if (has__summary()) {
      if (_summary_ != NULL) _summary_->::client_baseserver::user_summary::Clear();
    }
    _job_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_member)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_uid_)));
          set_has__uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__summary;
        break;
      }

      // required .client_baseserver.user_summary _summary = 2;
      case 2: {
        if (tag == 18) {
         parse__summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__job;
        break;
      }

      // required .client_baseserver.guild_job_t _job = 3;
      case 3: {
        if (tag == 24) {
         parse__job:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::guild_job_t_IsValid(value)) {
            set__job(static_cast< ::client_baseserver::guild_job_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__last_login;
        break;
      }

      // required uint32 _last_login = 4;
      case 4: {
        if (tag == 32) {
         parse__last_login:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_last_login_)));
          set_has__last_login();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__active;
        break;
      }

      // optional uint32 _active = 5;
      case 5: {
        if (tag == 40) {
         parse__active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_active_)));
          set_has__active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse__join_instance_time;
        break;
      }

      // optional uint32 _join_instance_time = 6;
      case 6: {
        if (tag == 48) {
         parse__join_instance_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_join_instance_time_)));
          set_has__join_instance_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_member)
  return false;
#undef DO_
}

void guild_member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_member)
  // required uint32 _uid = 1;
  if (has__uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_uid(), output);
  }

  // required .client_baseserver.user_summary _summary = 2;
  if (has__summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_summary(), output);
  }

  // required .client_baseserver.guild_job_t _job = 3;
  if (has__job()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->_job(), output);
  }

  // required uint32 _last_login = 4;
  if (has__last_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_last_login(), output);
  }

  // optional uint32 _active = 5;
  if (has__active()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_active(), output);
  }

  // optional uint32 _join_instance_time = 6;
  if (has__join_instance_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_join_instance_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_member)
}

::google::protobuf::uint8* guild_member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_member)
  // required uint32 _uid = 1;
  if (has__uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_uid(), target);
  }

  // required .client_baseserver.user_summary _summary = 2;
  if (has__summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_summary(), target);
  }

  // required .client_baseserver.guild_job_t _job = 3;
  if (has__job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->_job(), target);
  }

  // required uint32 _last_login = 4;
  if (has__last_login()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_last_login(), target);
  }

  // optional uint32 _active = 5;
  if (has__active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_active(), target);
  }

  // optional uint32 _join_instance_time = 6;
  if (has__join_instance_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_join_instance_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_member)
  return target;
}

int guild_member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _uid = 1;
    if (has__uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_uid());
    }

    // required .client_baseserver.user_summary _summary = 2;
    if (has__summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_summary());
    }

    // required .client_baseserver.guild_job_t _job = 3;
    if (has__job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_job());
    }

    // required uint32 _last_login = 4;
    if (has__last_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_last_login());
    }

    // optional uint32 _active = 5;
    if (has__active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_active());
    }

    // optional uint32 _join_instance_time = 6;
    if (has__join_instance_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_join_instance_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_member::MergeFrom(const guild_member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__uid()) {
      set__uid(from._uid());
    }
    if (from.has__summary()) {
      mutable__summary()->::client_baseserver::user_summary::MergeFrom(from._summary());
    }
    if (from.has__job()) {
      set__job(from._job());
    }
    if (from.has__last_login()) {
      set__last_login(from._last_login());
    }
    if (from.has__active()) {
      set__active(from._active());
    }
    if (from.has__join_instance_time()) {
      set__join_instance_time(from._join_instance_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_member::CopyFrom(const guild_member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_member::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has__summary()) {
    if (!this->_summary().IsInitialized()) return false;
  }
  return true;
}

void guild_member::Swap(guild_member* other) {
  if (other != this) {
    std::swap(_uid_, other->_uid_);
    std::swap(_summary_, other->_summary_);
    std::swap(_job_, other->_job_);
    std::swap(_last_login_, other->_last_login_);
    std::swap(_active_, other->_active_);
    std::swap(_join_instance_time_, other->_join_instance_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_member_descriptor_;
  metadata.reflection = guild_member_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_applier::kUidFieldNumber;
const int guild_applier::kUserSummaryFieldNumber;
#endif  // !_MSC_VER

guild_applier::guild_applier()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_applier)
}

void guild_applier::InitAsDefaultInstance() {
  _user_summary_ = const_cast< ::client_baseserver::user_summary*>(&::client_baseserver::user_summary::default_instance());
}

guild_applier::guild_applier(const guild_applier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_applier)
}

void guild_applier::SharedCtor() {
  _cached_size_ = 0;
  _uid_ = 0u;
  _user_summary_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_applier::~guild_applier() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_applier)
  SharedDtor();
}

void guild_applier::SharedDtor() {
  if (this != default_instance_) {
    delete _user_summary_;
  }
}

void guild_applier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_applier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_applier_descriptor_;
}

const guild_applier& guild_applier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_applier* guild_applier::default_instance_ = NULL;

guild_applier* guild_applier::New() const {
  return new guild_applier;
}

void guild_applier::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _uid_ = 0u;
    if (has__user_summary()) {
      if (_user_summary_ != NULL) _user_summary_->::client_baseserver::user_summary::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_applier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_applier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_uid_)));
          set_has__uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__user_summary;
        break;
      }

      // optional .client_baseserver.user_summary _user_summary = 2;
      case 2: {
        if (tag == 18) {
         parse__user_summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__user_summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_applier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_applier)
  return false;
#undef DO_
}

void guild_applier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_applier)
  // required uint32 _uid = 1;
  if (has__uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_uid(), output);
  }

  // optional .client_baseserver.user_summary _user_summary = 2;
  if (has__user_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_user_summary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_applier)
}

::google::protobuf::uint8* guild_applier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_applier)
  // required uint32 _uid = 1;
  if (has__uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_uid(), target);
  }

  // optional .client_baseserver.user_summary _user_summary = 2;
  if (has__user_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_user_summary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_applier)
  return target;
}

int guild_applier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _uid = 1;
    if (has__uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_uid());
    }

    // optional .client_baseserver.user_summary _user_summary = 2;
    if (has__user_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_user_summary());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_applier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_applier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_applier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_applier::MergeFrom(const guild_applier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__uid()) {
      set__uid(from._uid());
    }
    if (from.has__user_summary()) {
      mutable__user_summary()->::client_baseserver::user_summary::MergeFrom(from._user_summary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_applier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_applier::CopyFrom(const guild_applier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_applier::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__user_summary()) {
    if (!this->_user_summary().IsInitialized()) return false;
  }
  return true;
}

void guild_applier::Swap(guild_applier* other) {
  if (other != this) {
    std::swap(_uid_, other->_uid_);
    std::swap(_user_summary_, other->_user_summary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_applier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_applier_descriptor_;
  metadata.reflection = guild_applier_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_list::kGuildsFieldNumber;
const int guild_list::kResultFieldNumber;
const int guild_list::kCreateCostFieldNumber;
#endif  // !_MSC_VER

guild_list::guild_list()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_list)
}

void guild_list::InitAsDefaultInstance() {
}

guild_list::guild_list(const guild_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_list)
}

void guild_list::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _create_cost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_list::~guild_list() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_list)
  SharedDtor();
}

void guild_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_list_descriptor_;
}

const guild_list& guild_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_list* guild_list::default_instance_ = NULL;

guild_list* guild_list::New() const {
  return new guild_list;
}

void guild_list::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_list*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_result_, _create_cost_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  _guilds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_list)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.guild_summary _guilds = 1;
      case 1: {
        if (tag == 10) {
         parse__guilds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__guilds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__guilds;
        if (input->ExpectTag(16)) goto parse__result;
        break;
      }

      // required .client_baseserver.result _result = 2 [default = success];
      case 2: {
        if (tag == 16) {
         parse__result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__create_cost;
        break;
      }

      // optional uint32 _create_cost = 3;
      case 3: {
        if (tag == 24) {
         parse__create_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_create_cost_)));
          set_has__create_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_list)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_list)
  return false;
#undef DO_
}

void guild_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_list)
  // repeated .client_baseserver.guild_summary _guilds = 1;
  for (int i = 0; i < this->_guilds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_guilds(i), output);
  }

  // required .client_baseserver.result _result = 2 [default = success];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->_result(), output);
  }

  // optional uint32 _create_cost = 3;
  if (has__create_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_create_cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_list)
}

::google::protobuf::uint8* guild_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_list)
  // repeated .client_baseserver.guild_summary _guilds = 1;
  for (int i = 0; i < this->_guilds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_guilds(i), target);
  }

  // required .client_baseserver.result _result = 2 [default = success];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->_result(), target);
  }

  // optional uint32 _create_cost = 3;
  if (has__create_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_create_cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_list)
  return target;
}

int guild_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .client_baseserver.result _result = 2 [default = success];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional uint32 _create_cost = 3;
    if (has__create_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_create_cost());
    }

  }
  // repeated .client_baseserver.guild_summary _guilds = 1;
  total_size += 1 * this->_guilds_size();
  for (int i = 0; i < this->_guilds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_guilds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_list::MergeFrom(const guild_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  _guilds_.MergeFrom(from._guilds_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__create_cost()) {
      set__create_cost(from._create_cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_list::CopyFrom(const guild_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_list::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_guilds())) return false;
  return true;
}

void guild_list::Swap(guild_list* other) {
  if (other != this) {
    _guilds_.Swap(&other->_guilds_);
    std::swap(_result_, other->_result_);
    std::swap(_create_cost_, other->_create_cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_list_descriptor_;
  metadata.reflection = guild_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_search::kGuildsFieldNumber;
const int guild_search::kResultFieldNumber;
const int guild_search::kCreateCostFieldNumber;
#endif  // !_MSC_VER

guild_search::guild_search()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_search)
}

void guild_search::InitAsDefaultInstance() {
  _guilds_ = const_cast< ::client_baseserver::guild_summary*>(&::client_baseserver::guild_summary::default_instance());
}

guild_search::guild_search(const guild_search& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_search)
}

void guild_search::SharedCtor() {
  _cached_size_ = 0;
  _guilds_ = NULL;
  _result_ = 0;
  _create_cost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_search::~guild_search() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_search)
  SharedDtor();
}

void guild_search::SharedDtor() {
  if (this != default_instance_) {
    delete _guilds_;
  }
}

void guild_search::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_search::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_search_descriptor_;
}

const guild_search& guild_search::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_search* guild_search::default_instance_ = NULL;

guild_search* guild_search::New() const {
  return new guild_search;
}

void guild_search::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_search*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(_result_, _create_cost_);
    if (has__guilds()) {
      if (_guilds_ != NULL) _guilds_->::client_baseserver::guild_summary::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_search::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_search)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_baseserver.guild_summary _guilds = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__guilds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__result;
        break;
      }

      // required .client_baseserver.result _result = 2 [default = success];
      case 2: {
        if (tag == 16) {
         parse__result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__create_cost;
        break;
      }

      // optional uint32 _create_cost = 3;
      case 3: {
        if (tag == 24) {
         parse__create_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_create_cost_)));
          set_has__create_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_search)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_search)
  return false;
#undef DO_
}

void guild_search::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_search)
  // optional .client_baseserver.guild_summary _guilds = 1;
  if (has__guilds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_guilds(), output);
  }

  // required .client_baseserver.result _result = 2 [default = success];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->_result(), output);
  }

  // optional uint32 _create_cost = 3;
  if (has__create_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_create_cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_search)
}

::google::protobuf::uint8* guild_search::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_search)
  // optional .client_baseserver.guild_summary _guilds = 1;
  if (has__guilds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_guilds(), target);
  }

  // required .client_baseserver.result _result = 2 [default = success];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->_result(), target);
  }

  // optional uint32 _create_cost = 3;
  if (has__create_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_create_cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_search)
  return target;
}

int guild_search::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_baseserver.guild_summary _guilds = 1;
    if (has__guilds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_guilds());
    }

    // required .client_baseserver.result _result = 2 [default = success];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional uint32 _create_cost = 3;
    if (has__create_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_create_cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_search::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_search* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_search*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_search::MergeFrom(const guild_search& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__guilds()) {
      mutable__guilds()->::client_baseserver::guild_summary::MergeFrom(from._guilds());
    }
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__create_cost()) {
      set__create_cost(from._create_cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_search::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_search::CopyFrom(const guild_search& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_search::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has__guilds()) {
    if (!this->_guilds().IsInitialized()) return false;
  }
  return true;
}

void guild_search::Swap(guild_search* other) {
  if (other != this) {
    std::swap(_guilds_, other->_guilds_);
    std::swap(_result_, other->_result_);
    std::swap(_create_cost_, other->_create_cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_search::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_search_descriptor_;
  metadata.reflection = guild_search_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* guild_join_join_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_join_join_result_descriptor_;
}
bool guild_join_join_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const guild_join_join_result guild_join::join_fail;
const guild_join_join_result guild_join::join_enter;
const guild_join_join_result guild_join::join_wait;
const guild_join_join_result guild_join::join_result_MIN;
const guild_join_join_result guild_join::join_result_MAX;
const int guild_join::join_result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int guild_join::kResultFieldNumber;
const int guild_join::kJoinGuildIdFieldNumber;
const int guild_join::kGuildInfoFieldNumber;
const int guild_join::kCdTimeFieldNumber;
const int guild_join::kFailReasonFieldNumber;
#endif  // !_MSC_VER

guild_join::guild_join()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_join)
}

void guild_join::InitAsDefaultInstance() {
  _guild_info_ = const_cast< ::client_baseserver::guild_info*>(&::client_baseserver::guild_info::default_instance());
}

guild_join::guild_join(const guild_join& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_join)
}

void guild_join::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _result_ = 0;
  _join_guild_id_ = 0u;
  _guild_info_ = NULL;
  _cd_time_ = 0u;
  _fail_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_join::~guild_join() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_join)
  SharedDtor();
}

void guild_join::SharedDtor() {
  if (_fail_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _fail_reason_;
  }
  if (this != default_instance_) {
    delete _guild_info_;
  }
}

void guild_join::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_join::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_join_descriptor_;
}

const guild_join& guild_join::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_join* guild_join::default_instance_ = NULL;

guild_join* guild_join::New() const {
  return new guild_join;
}

void guild_join::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_join*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(_result_, _join_guild_id_);
    if (has__guild_info()) {
      if (_guild_info_ != NULL) _guild_info_->::client_baseserver::guild_info::Clear();
    }
    _cd_time_ = 0u;
    if (has__fail_reason()) {
      if (_fail_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _fail_reason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_join::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_join)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.guild_join.join_result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::guild_join_join_result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::guild_join_join_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__join_guild_id;
        break;
      }

      // required uint32 _join_guild_id = 2;
      case 2: {
        if (tag == 16) {
         parse__join_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_join_guild_id_)));
          set_has__join_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__guild_info;
        break;
      }

      // optional .client_baseserver.guild_info _guild_info = 3;
      case 3: {
        if (tag == 26) {
         parse__guild_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__guild_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__cd_time;
        break;
      }

      // optional uint32 _cd_time = 4;
      case 4: {
        if (tag == 32) {
         parse__cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_cd_time_)));
          set_has__cd_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse__fail_reason;
        break;
      }

      // optional string _fail_reason = 5;
      case 5: {
        if (tag == 42) {
         parse__fail_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__fail_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_fail_reason().data(), this->_fail_reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_fail_reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_join)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_join)
  return false;
#undef DO_
}

void guild_join::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_join)
  // required .client_baseserver.guild_join.join_result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // required uint32 _join_guild_id = 2;
  if (has__join_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_join_guild_id(), output);
  }

  // optional .client_baseserver.guild_info _guild_info = 3;
  if (has__guild_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_guild_info(), output);
  }

  // optional uint32 _cd_time = 4;
  if (has__cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_cd_time(), output);
  }

  // optional string _fail_reason = 5;
  if (has__fail_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_fail_reason().data(), this->_fail_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_fail_reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->_fail_reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_join)
}

::google::protobuf::uint8* guild_join::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_join)
  // required .client_baseserver.guild_join.join_result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // required uint32 _join_guild_id = 2;
  if (has__join_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_join_guild_id(), target);
  }

  // optional .client_baseserver.guild_info _guild_info = 3;
  if (has__guild_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_guild_info(), target);
  }

  // optional uint32 _cd_time = 4;
  if (has__cd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_cd_time(), target);
  }

  // optional string _fail_reason = 5;
  if (has__fail_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_fail_reason().data(), this->_fail_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_fail_reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->_fail_reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_join)
  return target;
}

int guild_join::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.guild_join.join_result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // required uint32 _join_guild_id = 2;
    if (has__join_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_join_guild_id());
    }

    // optional .client_baseserver.guild_info _guild_info = 3;
    if (has__guild_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_guild_info());
    }

    // optional uint32 _cd_time = 4;
    if (has__cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_cd_time());
    }

    // optional string _fail_reason = 5;
    if (has__fail_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_fail_reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_join::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_join* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_join*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_join::MergeFrom(const guild_join& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__join_guild_id()) {
      set__join_guild_id(from._join_guild_id());
    }
    if (from.has__guild_info()) {
      mutable__guild_info()->::client_baseserver::guild_info::MergeFrom(from._guild_info());
    }
    if (from.has__cd_time()) {
      set__cd_time(from._cd_time());
    }
    if (from.has__fail_reason()) {
      set__fail_reason(from._fail_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_join::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_join::CopyFrom(const guild_join& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_join::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has__guild_info()) {
    if (!this->_guild_info().IsInitialized()) return false;
  }
  return true;
}

void guild_join::Swap(guild_join* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_join_guild_id_, other->_join_guild_id_);
    std::swap(_guild_info_, other->_guild_info_);
    std::swap(_cd_time_, other->_cd_time_);
    std::swap(_fail_reason_, other->_fail_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_join::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_join_descriptor_;
  metadata.reflection = guild_join_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_join_confirm::kResultFieldNumber;
const int guild_join_confirm::kNewManFieldNumber;
#endif  // !_MSC_VER

guild_join_confirm::guild_join_confirm()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_join_confirm)
}

void guild_join_confirm::InitAsDefaultInstance() {
  _new_man_ = const_cast< ::client_baseserver::guild_member*>(&::client_baseserver::guild_member::default_instance());
}

guild_join_confirm::guild_join_confirm(const guild_join_confirm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_join_confirm)
}

void guild_join_confirm::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _new_man_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_join_confirm::~guild_join_confirm() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_join_confirm)
  SharedDtor();
}

void guild_join_confirm::SharedDtor() {
  if (this != default_instance_) {
    delete _new_man_;
  }
}

void guild_join_confirm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_join_confirm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_join_confirm_descriptor_;
}

const guild_join_confirm& guild_join_confirm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_join_confirm* guild_join_confirm::default_instance_ = NULL;

guild_join_confirm* guild_join_confirm::New() const {
  return new guild_join_confirm;
}

void guild_join_confirm::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _result_ = 0;
    if (has__new_man()) {
      if (_new_man_ != NULL) _new_man_->::client_baseserver::guild_member::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_join_confirm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_join_confirm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__new_man;
        break;
      }

      // optional .client_baseserver.guild_member _new_man = 2;
      case 2: {
        if (tag == 18) {
         parse__new_man:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__new_man()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_join_confirm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_join_confirm)
  return false;
#undef DO_
}

void guild_join_confirm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_join_confirm)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // optional .client_baseserver.guild_member _new_man = 2;
  if (has__new_man()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_new_man(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_join_confirm)
}

::google::protobuf::uint8* guild_join_confirm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_join_confirm)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // optional .client_baseserver.guild_member _new_man = 2;
  if (has__new_man()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_new_man(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_join_confirm)
  return target;
}

int guild_join_confirm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional .client_baseserver.guild_member _new_man = 2;
    if (has__new_man()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_new_man());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_join_confirm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_join_confirm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_join_confirm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_join_confirm::MergeFrom(const guild_join_confirm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__new_man()) {
      mutable__new_man()->::client_baseserver::guild_member::MergeFrom(from._new_man());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_join_confirm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_join_confirm::CopyFrom(const guild_join_confirm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_join_confirm::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__new_man()) {
    if (!this->_new_man().IsInitialized()) return false;
  }
  return true;
}

void guild_join_confirm::Swap(guild_join_confirm* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_new_man_, other->_new_man_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_join_confirm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_join_confirm_descriptor_;
  metadata.reflection = guild_join_confirm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_leave::kResultFieldNumber;
#endif  // !_MSC_VER

guild_leave::guild_leave()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_leave)
}

void guild_leave::InitAsDefaultInstance() {
}

guild_leave::guild_leave(const guild_leave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_leave)
}

void guild_leave::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_leave::~guild_leave() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_leave)
  SharedDtor();
}

void guild_leave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_leave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_leave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_leave_descriptor_;
}

const guild_leave& guild_leave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_leave* guild_leave::default_instance_ = NULL;

guild_leave* guild_leave::New() const {
  return new guild_leave;
}

void guild_leave::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_leave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_leave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_leave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_leave)
  return false;
#undef DO_
}

void guild_leave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_leave)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_leave)
}

::google::protobuf::uint8* guild_leave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_leave)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_leave)
  return target;
}

int guild_leave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_leave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_leave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_leave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_leave::MergeFrom(const guild_leave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_leave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_leave::CopyFrom(const guild_leave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_leave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_leave::Swap(guild_leave* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_leave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_leave_descriptor_;
  metadata.reflection = guild_leave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_kick::kResultFieldNumber;
#endif  // !_MSC_VER

guild_kick::guild_kick()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_kick)
}

void guild_kick::InitAsDefaultInstance() {
}

guild_kick::guild_kick(const guild_kick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_kick)
}

void guild_kick::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_kick::~guild_kick() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_kick)
  SharedDtor();
}

void guild_kick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_kick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_kick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_kick_descriptor_;
}

const guild_kick& guild_kick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_kick* guild_kick::default_instance_ = NULL;

guild_kick* guild_kick::New() const {
  return new guild_kick;
}

void guild_kick::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_kick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_kick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_kick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_kick)
  return false;
#undef DO_
}

void guild_kick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_kick)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_kick)
}

::google::protobuf::uint8* guild_kick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_kick)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_kick)
  return target;
}

int guild_kick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_kick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_kick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_kick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_kick::MergeFrom(const guild_kick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_kick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_kick::CopyFrom(const guild_kick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_kick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_kick::Swap(guild_kick* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_kick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_kick_descriptor_;
  metadata.reflection = guild_kick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_set::kResultFieldNumber;
#endif  // !_MSC_VER

guild_set::guild_set()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_set)
}

void guild_set::InitAsDefaultInstance() {
}

guild_set::guild_set(const guild_set& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_set)
}

void guild_set::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_set::~guild_set() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_set)
  SharedDtor();
}

void guild_set::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_set::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_set::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_set_descriptor_;
}

const guild_set& guild_set::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_set* guild_set::default_instance_ = NULL;

guild_set* guild_set::New() const {
  return new guild_set;
}

void guild_set::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_set::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_set)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_set)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_set)
  return false;
#undef DO_
}

void guild_set::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_set)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_set)
}

::google::protobuf::uint8* guild_set::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_set)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_set)
  return target;
}

int guild_set::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_set::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_set* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_set*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_set::MergeFrom(const guild_set& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_set::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_set::CopyFrom(const guild_set& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_set::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_set::Swap(guild_set* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_set::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_set_descriptor_;
  metadata.reflection = guild_set_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_query::kInfoFieldNumber;
const int guild_query::kWorshipFieldNumber;
const int guild_query::kDropInfoFieldNumber;
const int guild_query::kToChairmanFieldNumber;
#endif  // !_MSC_VER

guild_query::guild_query()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_query)
}

void guild_query::InitAsDefaultInstance() {
  _info_ = const_cast< ::client_baseserver::guild_info*>(&::client_baseserver::guild_info::default_instance());
  _worship_ = const_cast< ::client_baseserver::guild_worship*>(&::client_baseserver::guild_worship::default_instance());
}

guild_query::guild_query(const guild_query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_query)
}

void guild_query::SharedCtor() {
  _cached_size_ = 0;
  _info_ = NULL;
  _worship_ = NULL;
  _drop_info_ = 0u;
  _to_chairman_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_query::~guild_query() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_query)
  SharedDtor();
}

void guild_query::SharedDtor() {
  if (this != default_instance_) {
    delete _info_;
    delete _worship_;
  }
}

void guild_query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_query_descriptor_;
}

const guild_query& guild_query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_query* guild_query::default_instance_ = NULL;

guild_query* guild_query::New() const {
  return new guild_query;
}

void guild_query::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_query*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(_drop_info_, _to_chairman_);
    if (has__info()) {
      if (_info_ != NULL) _info_->::client_baseserver::guild_info::Clear();
    }
    if (has__worship()) {
      if (_worship_ != NULL) _worship_->::client_baseserver::guild_worship::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_query)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_baseserver.guild_info _info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__worship;
        break;
      }

      // optional .client_baseserver.guild_worship _worship = 2;
      case 2: {
        if (tag == 18) {
         parse__worship:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__worship()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__drop_info;
        break;
      }

      // optional uint32 _drop_info = 3;
      case 3: {
        if (tag == 24) {
         parse__drop_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_drop_info_)));
          set_has__drop_info();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__to_chairman;
        break;
      }

      // optional uint32 _to_chairman = 4;
      case 4: {
        if (tag == 32) {
         parse__to_chairman:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_to_chairman_)));
          set_has__to_chairman();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_query)
  return false;
#undef DO_
}

void guild_query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_query)
  // optional .client_baseserver.guild_info _info = 1;
  if (has__info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_info(), output);
  }

  // optional .client_baseserver.guild_worship _worship = 2;
  if (has__worship()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_worship(), output);
  }

  // optional uint32 _drop_info = 3;
  if (has__drop_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_drop_info(), output);
  }

  // optional uint32 _to_chairman = 4;
  if (has__to_chairman()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_to_chairman(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_query)
}

::google::protobuf::uint8* guild_query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_query)
  // optional .client_baseserver.guild_info _info = 1;
  if (has__info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_info(), target);
  }

  // optional .client_baseserver.guild_worship _worship = 2;
  if (has__worship()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_worship(), target);
  }

  // optional uint32 _drop_info = 3;
  if (has__drop_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_drop_info(), target);
  }

  // optional uint32 _to_chairman = 4;
  if (has__to_chairman()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_to_chairman(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_query)
  return target;
}

int guild_query::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_baseserver.guild_info _info = 1;
    if (has__info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_info());
    }

    // optional .client_baseserver.guild_worship _worship = 2;
    if (has__worship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_worship());
    }

    // optional uint32 _drop_info = 3;
    if (has__drop_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_drop_info());
    }

    // optional uint32 _to_chairman = 4;
    if (has__to_chairman()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_to_chairman());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_query::MergeFrom(const guild_query& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__info()) {
      mutable__info()->::client_baseserver::guild_info::MergeFrom(from._info());
    }
    if (from.has__worship()) {
      mutable__worship()->::client_baseserver::guild_worship::MergeFrom(from._worship());
    }
    if (from.has__drop_info()) {
      set__drop_info(from._drop_info());
    }
    if (from.has__to_chairman()) {
      set__to_chairman(from._to_chairman());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_query::CopyFrom(const guild_query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_query::IsInitialized() const {

  if (has__info()) {
    if (!this->_info().IsInitialized()) return false;
  }
  if (has__worship()) {
    if (!this->_worship().IsInitialized()) return false;
  }
  return true;
}

void guild_query::Swap(guild_query* other) {
  if (other != this) {
    std::swap(_info_, other->_info_);
    std::swap(_worship_, other->_worship_);
    std::swap(_drop_info_, other->_drop_info_);
    std::swap(_to_chairman_, other->_to_chairman_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_query_descriptor_;
  metadata.reflection = guild_query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_worship::kUseTimesFieldNumber;
const int guild_worship::kRewardsFieldNumber;
const int guild_worship::kTimesFieldNumber;
#endif  // !_MSC_VER

guild_worship::guild_worship()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_worship)
}

void guild_worship::InitAsDefaultInstance() {
}

guild_worship::guild_worship(const guild_worship& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_worship)
}

void guild_worship::SharedCtor() {
  _cached_size_ = 0;
  _use_times_ = 0u;
  _times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_worship::~guild_worship() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_worship)
  SharedDtor();
}

void guild_worship::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_worship::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_worship::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_worship_descriptor_;
}

const guild_worship& guild_worship::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_worship* guild_worship::default_instance_ = NULL;

guild_worship* guild_worship::New() const {
  return new guild_worship;
}

void guild_worship::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_worship*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_use_times_, _times_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  _rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_worship::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_worship)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _use_times = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_use_times_)));
          set_has__use_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__rewards;
        break;
      }

      // repeated .client_baseserver.worship_reward _rewards = 2;
      case 2: {
        if (tag == 18) {
         parse__rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__rewards;
        if (input->ExpectTag(24)) goto parse__times;
        break;
      }

      // required uint32 _times = 3;
      case 3: {
        if (tag == 24) {
         parse__times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_times_)));
          set_has__times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_worship)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_worship)
  return false;
#undef DO_
}

void guild_worship::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_worship)
  // required uint32 _use_times = 1;
  if (has__use_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_use_times(), output);
  }

  // repeated .client_baseserver.worship_reward _rewards = 2;
  for (int i = 0; i < this->_rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_rewards(i), output);
  }

  // required uint32 _times = 3;
  if (has__times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_worship)
}

::google::protobuf::uint8* guild_worship::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_worship)
  // required uint32 _use_times = 1;
  if (has__use_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_use_times(), target);
  }

  // repeated .client_baseserver.worship_reward _rewards = 2;
  for (int i = 0; i < this->_rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_rewards(i), target);
  }

  // required uint32 _times = 3;
  if (has__times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_worship)
  return target;
}

int guild_worship::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _use_times = 1;
    if (has__use_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_use_times());
    }

    // required uint32 _times = 3;
    if (has__times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_times());
    }

  }
  // repeated .client_baseserver.worship_reward _rewards = 2;
  total_size += 1 * this->_rewards_size();
  for (int i = 0; i < this->_rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_worship::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_worship* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_worship*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_worship::MergeFrom(const guild_worship& from) {
  GOOGLE_CHECK_NE(&from, this);
  _rewards_.MergeFrom(from._rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__use_times()) {
      set__use_times(from._use_times());
    }
    if (from.has__times()) {
      set__times(from._times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_worship::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_worship::CopyFrom(const guild_worship& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_worship::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_rewards())) return false;
  return true;
}

void guild_worship::Swap(guild_worship* other) {
  if (other != this) {
    std::swap(_use_times_, other->_use_times_);
    _rewards_.Swap(&other->_rewards_);
    std::swap(_times_, other->_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_worship::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_worship_descriptor_;
  metadata.reflection = guild_worship_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_set_job::kResultFieldNumber;
#endif  // !_MSC_VER

guild_set_job::guild_set_job()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_set_job)
}

void guild_set_job::InitAsDefaultInstance() {
}

guild_set_job::guild_set_job(const guild_set_job& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_set_job)
}

void guild_set_job::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_set_job::~guild_set_job() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_set_job)
  SharedDtor();
}

void guild_set_job::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_set_job::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_set_job::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_set_job_descriptor_;
}

const guild_set_job& guild_set_job::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_set_job* guild_set_job::default_instance_ = NULL;

guild_set_job* guild_set_job::New() const {
  return new guild_set_job;
}

void guild_set_job::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_set_job::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_set_job)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_set_job)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_set_job)
  return false;
#undef DO_
}

void guild_set_job::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_set_job)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_set_job)
}

::google::protobuf::uint8* guild_set_job::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_set_job)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_set_job)
  return target;
}

int guild_set_job::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_set_job::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_set_job* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_set_job*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_set_job::MergeFrom(const guild_set_job& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_set_job::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_set_job::CopyFrom(const guild_set_job& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_set_job::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_set_job::Swap(guild_set_job* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_set_job::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_set_job_descriptor_;
  metadata.reflection = guild_set_job_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_add_hire::kResultFieldNumber;
const int guild_add_hire::kIncomeFieldNumber;
#endif  // !_MSC_VER

guild_add_hire::guild_add_hire()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_add_hire)
}

void guild_add_hire::InitAsDefaultInstance() {
}

guild_add_hire::guild_add_hire(const guild_add_hire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_add_hire)
}

void guild_add_hire::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _income_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_add_hire::~guild_add_hire() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_add_hire)
  SharedDtor();
}

void guild_add_hire::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_add_hire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_add_hire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_add_hire_descriptor_;
}

const guild_add_hire& guild_add_hire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_add_hire* guild_add_hire::default_instance_ = NULL;

guild_add_hire* guild_add_hire::New() const {
  return new guild_add_hire;
}

void guild_add_hire::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_add_hire*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_result_, _income_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_add_hire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_add_hire)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__income;
        break;
      }

      // required uint32 _income = 2;
      case 2: {
        if (tag == 16) {
         parse__income:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_income_)));
          set_has__income();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_add_hire)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_add_hire)
  return false;
#undef DO_
}

void guild_add_hire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_add_hire)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // required uint32 _income = 2;
  if (has__income()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_income(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_add_hire)
}

::google::protobuf::uint8* guild_add_hire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_add_hire)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // required uint32 _income = 2;
  if (has__income()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_income(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_add_hire)
  return target;
}

int guild_add_hire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // required uint32 _income = 2;
    if (has__income()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_income());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_add_hire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_add_hire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_add_hire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_add_hire::MergeFrom(const guild_add_hire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__income()) {
      set__income(from._income());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_add_hire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_add_hire::CopyFrom(const guild_add_hire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_add_hire::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void guild_add_hire::Swap(guild_add_hire* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_income_, other->_income_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_add_hire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_add_hire_descriptor_;
  metadata.reflection = guild_add_hire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_del_hire::kResultFieldNumber;
const int guild_del_hire::kHireRewardFieldNumber;
const int guild_del_hire::kStayRewardFieldNumber;
const int guild_del_hire::kHeroidFieldNumber;
#endif  // !_MSC_VER

guild_del_hire::guild_del_hire()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_del_hire)
}

void guild_del_hire::InitAsDefaultInstance() {
}

guild_del_hire::guild_del_hire(const guild_del_hire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_del_hire)
}

void guild_del_hire::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _hire_reward_ = 0u;
  _stay_reward_ = 0u;
  _heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_del_hire::~guild_del_hire() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_del_hire)
  SharedDtor();
}

void guild_del_hire::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_del_hire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_del_hire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_del_hire_descriptor_;
}

const guild_del_hire& guild_del_hire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_del_hire* guild_del_hire::default_instance_ = NULL;

guild_del_hire* guild_del_hire::New() const {
  return new guild_del_hire;
}

void guild_del_hire::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_del_hire*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_result_, _heroid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_del_hire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_del_hire)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__hire_reward;
        break;
      }

      // optional uint32 _hire_reward = 2;
      case 2: {
        if (tag == 16) {
         parse__hire_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_hire_reward_)));
          set_has__hire_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__stay_reward;
        break;
      }

      // optional uint32 _stay_reward = 3;
      case 3: {
        if (tag == 24) {
         parse__stay_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stay_reward_)));
          set_has__stay_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__heroid;
        break;
      }

      // optional uint32 _heroid = 4;
      case 4: {
        if (tag == 32) {
         parse__heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_heroid_)));
          set_has__heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_del_hire)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_del_hire)
  return false;
#undef DO_
}

void guild_del_hire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_del_hire)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // optional uint32 _hire_reward = 2;
  if (has__hire_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_hire_reward(), output);
  }

  // optional uint32 _stay_reward = 3;
  if (has__stay_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_stay_reward(), output);
  }

  // optional uint32 _heroid = 4;
  if (has__heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_del_hire)
}

::google::protobuf::uint8* guild_del_hire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_del_hire)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // optional uint32 _hire_reward = 2;
  if (has__hire_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_hire_reward(), target);
  }

  // optional uint32 _stay_reward = 3;
  if (has__stay_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_stay_reward(), target);
  }

  // optional uint32 _heroid = 4;
  if (has__heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_del_hire)
  return target;
}

int guild_del_hire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional uint32 _hire_reward = 2;
    if (has__hire_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_hire_reward());
    }

    // optional uint32 _stay_reward = 3;
    if (has__stay_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stay_reward());
    }

    // optional uint32 _heroid = 4;
    if (has__heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_del_hire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_del_hire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_del_hire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_del_hire::MergeFrom(const guild_del_hire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__hire_reward()) {
      set__hire_reward(from._hire_reward());
    }
    if (from.has__stay_reward()) {
      set__stay_reward(from._stay_reward());
    }
    if (from.has__heroid()) {
      set__heroid(from._heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_del_hire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_del_hire::CopyFrom(const guild_del_hire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_del_hire::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_del_hire::Swap(guild_del_hire* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_hire_reward_, other->_hire_reward_);
    std::swap(_stay_reward_, other->_stay_reward_);
    std::swap(_heroid_, other->_heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_del_hire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_del_hire_descriptor_;
  metadata.reflection = guild_del_hire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_query_hires::kUsersFieldNumber;
const int guild_query_hires::kHireUidsFieldNumber;
const int guild_query_hires::kFromFieldNumber;
#endif  // !_MSC_VER

guild_query_hires::guild_query_hires()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_query_hires)
}

void guild_query_hires::InitAsDefaultInstance() {
}

guild_query_hires::guild_query_hires(const guild_query_hires& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_query_hires)
}

void guild_query_hires::SharedCtor() {
  _cached_size_ = 0;
  _from_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_query_hires::~guild_query_hires() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_query_hires)
  SharedDtor();
}

void guild_query_hires::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_query_hires::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_query_hires::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_query_hires_descriptor_;
}

const guild_query_hires& guild_query_hires::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_query_hires* guild_query_hires::default_instance_ = NULL;

guild_query_hires* guild_query_hires::New() const {
  return new guild_query_hires;
}

void guild_query_hires::Clear() {
  _from_ = 0;
  _users_.Clear();
  _hire_uids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_query_hires::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_query_hires)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.guild_hire_user _users = 1;
      case 1: {
        if (tag == 10) {
         parse__users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__users;
        if (input->ExpectTag(16)) goto parse__hire_uids;
        break;
      }

      // repeated uint32 _hire_uids = 2;
      case 2: {
        if (tag == 16) {
         parse__hire_uids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable__hire_uids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__hire_uids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__hire_uids;
        if (input->ExpectTag(24)) goto parse__from;
        break;
      }

      // required .client_baseserver.hire_from _from = 3;
      case 3: {
        if (tag == 24) {
         parse__from:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::hire_from_IsValid(value)) {
            set__from(static_cast< ::client_baseserver::hire_from >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_query_hires)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_query_hires)
  return false;
#undef DO_
}

void guild_query_hires::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_query_hires)
  // repeated .client_baseserver.guild_hire_user _users = 1;
  for (int i = 0; i < this->_users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_users(i), output);
  }

  // repeated uint32 _hire_uids = 2;
  for (int i = 0; i < this->_hire_uids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->_hire_uids(i), output);
  }

  // required .client_baseserver.hire_from _from = 3;
  if (has__from()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->_from(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_query_hires)
}

::google::protobuf::uint8* guild_query_hires::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_query_hires)
  // repeated .client_baseserver.guild_hire_user _users = 1;
  for (int i = 0; i < this->_users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_users(i), target);
  }

  // repeated uint32 _hire_uids = 2;
  for (int i = 0; i < this->_hire_uids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->_hire_uids(i), target);
  }

  // required .client_baseserver.hire_from _from = 3;
  if (has__from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->_from(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_query_hires)
  return target;
}

int guild_query_hires::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required .client_baseserver.hire_from _from = 3;
    if (has__from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_from());
    }

  }
  // repeated .client_baseserver.guild_hire_user _users = 1;
  total_size += 1 * this->_users_size();
  for (int i = 0; i < this->_users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_users(i));
  }

  // repeated uint32 _hire_uids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->_hire_uids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_hire_uids(i));
    }
    total_size += 1 * this->_hire_uids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_query_hires::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_query_hires* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_query_hires*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_query_hires::MergeFrom(const guild_query_hires& from) {
  GOOGLE_CHECK_NE(&from, this);
  _users_.MergeFrom(from._users_);
  _hire_uids_.MergeFrom(from._hire_uids_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has__from()) {
      set__from(from._from());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_query_hires::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_query_hires::CopyFrom(const guild_query_hires& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_query_hires::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_users())) return false;
  return true;
}

void guild_query_hires::Swap(guild_query_hires* other) {
  if (other != this) {
    _users_.Swap(&other->_users_);
    _hire_uids_.Swap(&other->_hire_uids_);
    std::swap(_from_, other->_from_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_query_hires::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_query_hires_descriptor_;
  metadata.reflection = guild_query_hires_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_hire_user::kUidFieldNumber;
const int guild_hire_user::kNameFieldNumber;
const int guild_hire_user::kLevelFieldNumber;
const int guild_hire_user::kAvatarFieldNumber;
const int guild_hire_user::kHeroesFieldNumber;
#endif  // !_MSC_VER

guild_hire_user::guild_hire_user()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_hire_user)
}

void guild_hire_user::InitAsDefaultInstance() {
}

guild_hire_user::guild_hire_user(const guild_hire_user& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_hire_user)
}

void guild_hire_user::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _uid_ = 0u;
  _name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _level_ = 0u;
  _avatar_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_hire_user::~guild_hire_user() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_hire_user)
  SharedDtor();
}

void guild_hire_user::SharedDtor() {
  if (_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _name_;
  }
  if (this != default_instance_) {
  }
}

void guild_hire_user::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_hire_user::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_hire_user_descriptor_;
}

const guild_hire_user& guild_hire_user::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_hire_user* guild_hire_user::default_instance_ = NULL;

guild_hire_user* guild_hire_user::New() const {
  return new guild_hire_user;
}

void guild_hire_user::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_hire_user*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(_uid_, _level_);
    if (has__name()) {
      if (_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _name_->clear();
      }
    }
    _avatar_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _heroes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_hire_user::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_hire_user)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_uid_)));
          set_has__uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__name;
        break;
      }

      // required string _name = 2;
      case 2: {
        if (tag == 18) {
         parse__name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_name().data(), this->_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__level;
        break;
      }

      // required uint32 _level = 3;
      case 3: {
        if (tag == 24) {
         parse__level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_level_)));
          set_has__level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__avatar;
        break;
      }

      // required uint32 _avatar = 4;
      case 4: {
        if (tag == 32) {
         parse__avatar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_avatar_)));
          set_has__avatar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse__heroes;
        break;
      }

      // repeated .client_baseserver.hire_hero_summary _heroes = 5;
      case 5: {
        if (tag == 42) {
         parse__heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__heroes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse__heroes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_hire_user)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_hire_user)
  return false;
#undef DO_
}

void guild_hire_user::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_hire_user)
  // required uint32 _uid = 1;
  if (has__uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_uid(), output);
  }

  // required string _name = 2;
  if (has__name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_name().data(), this->_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->_name(), output);
  }

  // required uint32 _level = 3;
  if (has__level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_level(), output);
  }

  // required uint32 _avatar = 4;
  if (has__avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_avatar(), output);
  }

  // repeated .client_baseserver.hire_hero_summary _heroes = 5;
  for (int i = 0; i < this->_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_heroes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_hire_user)
}

::google::protobuf::uint8* guild_hire_user::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_hire_user)
  // required uint32 _uid = 1;
  if (has__uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_uid(), target);
  }

  // required string _name = 2;
  if (has__name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_name().data(), this->_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_name(), target);
  }

  // required uint32 _level = 3;
  if (has__level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_level(), target);
  }

  // required uint32 _avatar = 4;
  if (has__avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_avatar(), target);
  }

  // repeated .client_baseserver.hire_hero_summary _heroes = 5;
  for (int i = 0; i < this->_heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_heroes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_hire_user)
  return target;
}

int guild_hire_user::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _uid = 1;
    if (has__uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_uid());
    }

    // required string _name = 2;
    if (has__name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_name());
    }

    // required uint32 _level = 3;
    if (has__level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_level());
    }

    // required uint32 _avatar = 4;
    if (has__avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_avatar());
    }

  }
  // repeated .client_baseserver.hire_hero_summary _heroes = 5;
  total_size += 1 * this->_heroes_size();
  for (int i = 0; i < this->_heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_heroes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_hire_user::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_hire_user* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_hire_user*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_hire_user::MergeFrom(const guild_hire_user& from) {
  GOOGLE_CHECK_NE(&from, this);
  _heroes_.MergeFrom(from._heroes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__uid()) {
      set__uid(from._uid());
    }
    if (from.has__name()) {
      set__name(from._name());
    }
    if (from.has__level()) {
      set__level(from._level());
    }
    if (from.has__avatar()) {
      set__avatar(from._avatar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_hire_user::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_hire_user::CopyFrom(const guild_hire_user& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_hire_user::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_heroes())) return false;
  return true;
}

void guild_hire_user::Swap(guild_hire_user* other) {
  if (other != this) {
    std::swap(_uid_, other->_uid_);
    std::swap(_name_, other->_name_);
    std::swap(_level_, other->_level_);
    std::swap(_avatar_, other->_avatar_);
    _heroes_.Swap(&other->_heroes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_hire_user::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_hire_user_descriptor_;
  metadata.reflection = guild_hire_user_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hire_hero_summary::kHeroFieldNumber;
const int hire_hero_summary::kCostFieldNumber;
const int hire_hero_summary::kIncomeFieldNumber;
const int hire_hero_summary::kHireTsFieldNumber;
#endif  // !_MSC_VER

hire_hero_summary::hire_hero_summary()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.hire_hero_summary)
}

void hire_hero_summary::InitAsDefaultInstance() {
  _hero_ = const_cast< ::client_baseserver::hero_summary*>(&::client_baseserver::hero_summary::default_instance());
}

hire_hero_summary::hire_hero_summary(const hire_hero_summary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.hire_hero_summary)
}

void hire_hero_summary::SharedCtor() {
  _cached_size_ = 0;
  _hero_ = NULL;
  _cost_ = 0u;
  _income_ = 0u;
  _hire_ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hire_hero_summary::~hire_hero_summary() {
  // @@protoc_insertion_point(destructor:client_baseserver.hire_hero_summary)
  SharedDtor();
}

void hire_hero_summary::SharedDtor() {
  if (this != default_instance_) {
    delete _hero_;
  }
}

void hire_hero_summary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hire_hero_summary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hire_hero_summary_descriptor_;
}

const hire_hero_summary& hire_hero_summary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

hire_hero_summary* hire_hero_summary::default_instance_ = NULL;

hire_hero_summary* hire_hero_summary::New() const {
  return new hire_hero_summary;
}

void hire_hero_summary::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<hire_hero_summary*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(_cost_, _hire_ts_);
    if (has__hero()) {
      if (_hero_ != NULL) _hero_->::client_baseserver::hero_summary::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hire_hero_summary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.hire_hero_summary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.hero_summary _hero = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__cost;
        break;
      }

      // required uint32 _cost = 2;
      case 2: {
        if (tag == 16) {
         parse__cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_cost_)));
          set_has__cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__income;
        break;
      }

      // required uint32 _income = 3;
      case 3: {
        if (tag == 24) {
         parse__income:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_income_)));
          set_has__income();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__hire_ts;
        break;
      }

      // required uint32 _hire_ts = 4;
      case 4: {
        if (tag == 32) {
         parse__hire_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_hire_ts_)));
          set_has__hire_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.hire_hero_summary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.hire_hero_summary)
  return false;
#undef DO_
}

void hire_hero_summary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.hire_hero_summary)
  // required .client_baseserver.hero_summary _hero = 1;
  if (has__hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_hero(), output);
  }

  // required uint32 _cost = 2;
  if (has__cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_cost(), output);
  }

  // required uint32 _income = 3;
  if (has__income()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_income(), output);
  }

  // required uint32 _hire_ts = 4;
  if (has__hire_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_hire_ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.hire_hero_summary)
}

::google::protobuf::uint8* hire_hero_summary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.hire_hero_summary)
  // required .client_baseserver.hero_summary _hero = 1;
  if (has__hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_hero(), target);
  }

  // required uint32 _cost = 2;
  if (has__cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_cost(), target);
  }

  // required uint32 _income = 3;
  if (has__income()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_income(), target);
  }

  // required uint32 _hire_ts = 4;
  if (has__hire_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_hire_ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.hire_hero_summary)
  return target;
}

int hire_hero_summary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.hero_summary _hero = 1;
    if (has__hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_hero());
    }

    // required uint32 _cost = 2;
    if (has__cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_cost());
    }

    // required uint32 _income = 3;
    if (has__income()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_income());
    }

    // required uint32 _hire_ts = 4;
    if (has__hire_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_hire_ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hire_hero_summary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hire_hero_summary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hire_hero_summary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hire_hero_summary::MergeFrom(const hire_hero_summary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__hero()) {
      mutable__hero()->::client_baseserver::hero_summary::MergeFrom(from._hero());
    }
    if (from.has__cost()) {
      set__cost(from._cost());
    }
    if (from.has__income()) {
      set__income(from._income());
    }
    if (from.has__hire_ts()) {
      set__hire_ts(from._hire_ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hire_hero_summary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hire_hero_summary::CopyFrom(const hire_hero_summary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hire_hero_summary::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has__hero()) {
    if (!this->_hero().IsInitialized()) return false;
  }
  return true;
}

void hire_hero_summary::Swap(hire_hero_summary* other) {
  if (other != this) {
    std::swap(_hero_, other->_hero_);
    std::swap(_cost_, other->_cost_);
    std::swap(_income_, other->_income_);
    std::swap(_hire_ts_, other->_hire_ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hire_hero_summary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hire_hero_summary_descriptor_;
  metadata.reflection = hire_hero_summary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_hire_hero::kResultFieldNumber;
const int guild_hire_hero::kFromFieldNumber;
const int guild_hire_hero::kUidFieldNumber;
const int guild_hire_hero::kHeroFieldNumber;
#endif  // !_MSC_VER

guild_hire_hero::guild_hire_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_hire_hero)
}

void guild_hire_hero::InitAsDefaultInstance() {
  _hero_ = const_cast< ::client_baseserver::hero*>(&::client_baseserver::hero::default_instance());
}

guild_hire_hero::guild_hire_hero(const guild_hire_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_hire_hero)
}

void guild_hire_hero::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _from_ = 0;
  _uid_ = 0u;
  _hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_hire_hero::~guild_hire_hero() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_hire_hero)
  SharedDtor();
}

void guild_hire_hero::SharedDtor() {
  if (this != default_instance_) {
    delete _hero_;
  }
}

void guild_hire_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_hire_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_hire_hero_descriptor_;
}

const guild_hire_hero& guild_hire_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_hire_hero* guild_hire_hero::default_instance_ = NULL;

guild_hire_hero* guild_hire_hero::New() const {
  return new guild_hire_hero;
}

void guild_hire_hero::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_hire_hero*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(_result_, _from_);
    _uid_ = 0u;
    if (has__hero()) {
      if (_hero_ != NULL) _hero_->::client_baseserver::hero::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_hire_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_hire_hero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.hire_result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::hire_result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::hire_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__from;
        break;
      }

      // optional .client_baseserver.hire_from _from = 2;
      case 2: {
        if (tag == 16) {
         parse__from:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::hire_from_IsValid(value)) {
            set__from(static_cast< ::client_baseserver::hire_from >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__uid;
        break;
      }

      // optional uint32 _uid = 3;
      case 3: {
        if (tag == 24) {
         parse__uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_uid_)));
          set_has__uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__hero;
        break;
      }

      // optional .client_baseserver.hero _hero = 4;
      case 4: {
        if (tag == 34) {
         parse__hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_hire_hero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_hire_hero)
  return false;
#undef DO_
}

void guild_hire_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_hire_hero)
  // required .client_baseserver.hire_result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // optional .client_baseserver.hire_from _from = 2;
  if (has__from()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->_from(), output);
  }

  // optional uint32 _uid = 3;
  if (has__uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_uid(), output);
  }

  // optional .client_baseserver.hero _hero = 4;
  if (has__hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_hero(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_hire_hero)
}

::google::protobuf::uint8* guild_hire_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_hire_hero)
  // required .client_baseserver.hire_result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // optional .client_baseserver.hire_from _from = 2;
  if (has__from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->_from(), target);
  }

  // optional uint32 _uid = 3;
  if (has__uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_uid(), target);
  }

  // optional .client_baseserver.hero _hero = 4;
  if (has__hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_hero(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_hire_hero)
  return target;
}

int guild_hire_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.hire_result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional .client_baseserver.hire_from _from = 2;
    if (has__from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_from());
    }

    // optional uint32 _uid = 3;
    if (has__uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_uid());
    }

    // optional .client_baseserver.hero _hero = 4;
    if (has__hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_hero());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_hire_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_hire_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_hire_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_hire_hero::MergeFrom(const guild_hire_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__from()) {
      set__from(from._from());
    }
    if (from.has__uid()) {
      set__uid(from._uid());
    }
    if (from.has__hero()) {
      mutable__hero()->::client_baseserver::hero::MergeFrom(from._hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_hire_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_hire_hero::CopyFrom(const guild_hire_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_hire_hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__hero()) {
    if (!this->_hero().IsInitialized()) return false;
  }
  return true;
}

void guild_hire_hero::Swap(guild_hire_hero* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_from_, other->_from_);
    std::swap(_uid_, other->_uid_);
    std::swap(_hero_, other->_hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_hire_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_hire_hero_descriptor_;
  metadata.reflection = guild_hire_hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_worship_req::kResultFieldNumber;
#endif  // !_MSC_VER

guild_worship_req::guild_worship_req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_worship_req)
}

void guild_worship_req::InitAsDefaultInstance() {
}

guild_worship_req::guild_worship_req(const guild_worship_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_worship_req)
}

void guild_worship_req::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_worship_req::~guild_worship_req() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_worship_req)
  SharedDtor();
}

void guild_worship_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_worship_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_worship_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_worship_req_descriptor_;
}

const guild_worship_req& guild_worship_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_worship_req* guild_worship_req::default_instance_ = NULL;

guild_worship_req* guild_worship_req::New() const {
  return new guild_worship_req;
}

void guild_worship_req::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_worship_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_worship_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_worship_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_worship_req)
  return false;
#undef DO_
}

void guild_worship_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_worship_req)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_worship_req)
}

::google::protobuf::uint8* guild_worship_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_worship_req)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_worship_req)
  return target;
}

int guild_worship_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_worship_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_worship_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_worship_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_worship_req::MergeFrom(const guild_worship_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_worship_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_worship_req::CopyFrom(const guild_worship_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_worship_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_worship_req::Swap(guild_worship_req* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_worship_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_worship_req_descriptor_;
  metadata.reflection = guild_worship_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_worship_withdraw::kResultFieldNumber;
const int guild_worship_withdraw::kRewardsFieldNumber;
#endif  // !_MSC_VER

guild_worship_withdraw::guild_worship_withdraw()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_worship_withdraw)
}

void guild_worship_withdraw::InitAsDefaultInstance() {
}

guild_worship_withdraw::guild_worship_withdraw(const guild_worship_withdraw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_worship_withdraw)
}

void guild_worship_withdraw::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_worship_withdraw::~guild_worship_withdraw() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_worship_withdraw)
  SharedDtor();
}

void guild_worship_withdraw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_worship_withdraw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_worship_withdraw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_worship_withdraw_descriptor_;
}

const guild_worship_withdraw& guild_worship_withdraw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_worship_withdraw* guild_worship_withdraw::default_instance_ = NULL;

guild_worship_withdraw* guild_worship_withdraw::New() const {
  return new guild_worship_withdraw;
}

void guild_worship_withdraw::Clear() {
  _result_ = 0;
  _rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_worship_withdraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_worship_withdraw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__rewards;
        break;
      }

      // repeated .client_baseserver.worship_reward _rewards = 2;
      case 2: {
        if (tag == 18) {
         parse__rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_worship_withdraw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_worship_withdraw)
  return false;
#undef DO_
}

void guild_worship_withdraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_worship_withdraw)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // repeated .client_baseserver.worship_reward _rewards = 2;
  for (int i = 0; i < this->_rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_worship_withdraw)
}

::google::protobuf::uint8* guild_worship_withdraw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_worship_withdraw)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // repeated .client_baseserver.worship_reward _rewards = 2;
  for (int i = 0; i < this->_rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_worship_withdraw)
  return target;
}

int guild_worship_withdraw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  // repeated .client_baseserver.worship_reward _rewards = 2;
  total_size += 1 * this->_rewards_size();
  for (int i = 0; i < this->_rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_worship_withdraw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_worship_withdraw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_worship_withdraw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_worship_withdraw::MergeFrom(const guild_worship_withdraw& from) {
  GOOGLE_CHECK_NE(&from, this);
  _rewards_.MergeFrom(from._rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_worship_withdraw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_worship_withdraw::CopyFrom(const guild_worship_withdraw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_worship_withdraw::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_rewards())) return false;
  return true;
}

void guild_worship_withdraw::Swap(guild_worship_withdraw* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    _rewards_.Swap(&other->_rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_worship_withdraw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_worship_withdraw_descriptor_;
  metadata.reflection = guild_worship_withdraw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_qurey_hh_detail::kHeroFieldNumber;
#endif  // !_MSC_VER

guild_qurey_hh_detail::guild_qurey_hh_detail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_qurey_hh_detail)
}

void guild_qurey_hh_detail::InitAsDefaultInstance() {
  _hero_ = const_cast< ::client_baseserver::hero*>(&::client_baseserver::hero::default_instance());
}

guild_qurey_hh_detail::guild_qurey_hh_detail(const guild_qurey_hh_detail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_qurey_hh_detail)
}

void guild_qurey_hh_detail::SharedCtor() {
  _cached_size_ = 0;
  _hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_qurey_hh_detail::~guild_qurey_hh_detail() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_qurey_hh_detail)
  SharedDtor();
}

void guild_qurey_hh_detail::SharedDtor() {
  if (this != default_instance_) {
    delete _hero_;
  }
}

void guild_qurey_hh_detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_qurey_hh_detail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_qurey_hh_detail_descriptor_;
}

const guild_qurey_hh_detail& guild_qurey_hh_detail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_qurey_hh_detail* guild_qurey_hh_detail::default_instance_ = NULL;

guild_qurey_hh_detail* guild_qurey_hh_detail::New() const {
  return new guild_qurey_hh_detail;
}

void guild_qurey_hh_detail::Clear() {
  if (has__hero()) {
    if (_hero_ != NULL) _hero_->::client_baseserver::hero::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_qurey_hh_detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_qurey_hh_detail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_baseserver.hero _hero = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_qurey_hh_detail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_qurey_hh_detail)
  return false;
#undef DO_
}

void guild_qurey_hh_detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_qurey_hh_detail)
  // optional .client_baseserver.hero _hero = 1;
  if (has__hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_hero(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_qurey_hh_detail)
}

::google::protobuf::uint8* guild_qurey_hh_detail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_qurey_hh_detail)
  // optional .client_baseserver.hero _hero = 1;
  if (has__hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_hero(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_qurey_hh_detail)
  return target;
}

int guild_qurey_hh_detail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_baseserver.hero _hero = 1;
    if (has__hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_hero());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_qurey_hh_detail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_qurey_hh_detail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_qurey_hh_detail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_qurey_hh_detail::MergeFrom(const guild_qurey_hh_detail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__hero()) {
      mutable__hero()->::client_baseserver::hero::MergeFrom(from._hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_qurey_hh_detail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_qurey_hh_detail::CopyFrom(const guild_qurey_hh_detail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_qurey_hh_detail::IsInitialized() const {

  if (has__hero()) {
    if (!this->_hero().IsInitialized()) return false;
  }
  return true;
}

void guild_qurey_hh_detail::Swap(guild_qurey_hh_detail* other) {
  if (other != this) {
    std::swap(_hero_, other->_hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_qurey_hh_detail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_qurey_hh_detail_descriptor_;
  metadata.reflection = guild_qurey_hh_detail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* worship_reward_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return worship_reward_type_descriptor_;
}
bool worship_reward_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const worship_reward_type worship_reward::gold;
const worship_reward_type worship_reward::diamond;
const worship_reward_type worship_reward::type_MIN;
const worship_reward_type worship_reward::type_MAX;
const int worship_reward::type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int worship_reward::kTypeFieldNumber;
const int worship_reward::kParam1FieldNumber;
const int worship_reward::kParam2FieldNumber;
#endif  // !_MSC_VER

worship_reward::worship_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.worship_reward)
}

void worship_reward::InitAsDefaultInstance() {
}

worship_reward::worship_reward(const worship_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.worship_reward)
}

void worship_reward::SharedCtor() {
  _cached_size_ = 0;
  _type_ = 1;
  _param1_ = 0u;
  _param2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

worship_reward::~worship_reward() {
  // @@protoc_insertion_point(destructor:client_baseserver.worship_reward)
  SharedDtor();
}

void worship_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void worship_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* worship_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return worship_reward_descriptor_;
}

const worship_reward& worship_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

worship_reward* worship_reward::default_instance_ = NULL;

worship_reward* worship_reward::New() const {
  return new worship_reward;
}

void worship_reward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<worship_reward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(_param1_, _param2_);
    _type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool worship_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.worship_reward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.worship_reward.type _type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::worship_reward_type_IsValid(value)) {
            set__type(static_cast< ::client_baseserver::worship_reward_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__param1;
        break;
      }

      // optional uint32 _param1 = 2;
      case 2: {
        if (tag == 16) {
         parse__param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_param1_)));
          set_has__param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__param2;
        break;
      }

      // optional uint32 _param2 = 3;
      case 3: {
        if (tag == 24) {
         parse__param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_param2_)));
          set_has__param2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.worship_reward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.worship_reward)
  return false;
#undef DO_
}

void worship_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.worship_reward)
  // required .client_baseserver.worship_reward.type _type = 1;
  if (has__type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_type(), output);
  }

  // optional uint32 _param1 = 2;
  if (has__param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_param1(), output);
  }

  // optional uint32 _param2 = 3;
  if (has__param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_param2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.worship_reward)
}

::google::protobuf::uint8* worship_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.worship_reward)
  // required .client_baseserver.worship_reward.type _type = 1;
  if (has__type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_type(), target);
  }

  // optional uint32 _param1 = 2;
  if (has__param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_param1(), target);
  }

  // optional uint32 _param2 = 3;
  if (has__param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_param2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.worship_reward)
  return target;
}

int worship_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.worship_reward.type _type = 1;
    if (has__type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_type());
    }

    // optional uint32 _param1 = 2;
    if (has__param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_param1());
    }

    // optional uint32 _param2 = 3;
    if (has__param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_param2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void worship_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const worship_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const worship_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void worship_reward::MergeFrom(const worship_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__type()) {
      set__type(from._type());
    }
    if (from.has__param1()) {
      set__param1(from._param1());
    }
    if (from.has__param2()) {
      set__param2(from._param2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void worship_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void worship_reward::CopyFrom(const worship_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool worship_reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void worship_reward::Swap(worship_reward* other) {
  if (other != this) {
    std::swap(_type_, other->_type_);
    std::swap(_param1_, other->_param1_);
    std::swap(_param2_, other->_param2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata worship_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = worship_reward_descriptor_;
  metadata.reflection = worship_reward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* activity_reward_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_reward_type_descriptor_;
}
bool activity_reward_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const activity_reward_type activity_reward::rmb;
const activity_reward_type activity_reward::money;
const activity_reward_type activity_reward::item;
const activity_reward_type activity_reward::hero;
const activity_reward_type activity_reward::rand_soul;
const activity_reward_type activity_reward::type_MIN;
const activity_reward_type activity_reward::type_MAX;
const int activity_reward::type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int activity_reward::kTypeFieldNumber;
const int activity_reward::kIdFieldNumber;
const int activity_reward::kAmountFieldNumber;
#endif  // !_MSC_VER

activity_reward::activity_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.activity_reward)
}

void activity_reward::InitAsDefaultInstance() {
}

activity_reward::activity_reward(const activity_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.activity_reward)
}

void activity_reward::SharedCtor() {
  _cached_size_ = 0;
  _type_ = 1;
  _id_ = 0u;
  _amount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_reward::~activity_reward() {
  // @@protoc_insertion_point(destructor:client_baseserver.activity_reward)
  SharedDtor();
}

void activity_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_reward_descriptor_;
}

const activity_reward& activity_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

activity_reward* activity_reward::default_instance_ = NULL;

activity_reward* activity_reward::New() const {
  return new activity_reward;
}

void activity_reward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<activity_reward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(_id_, _amount_);
    _type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.activity_reward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_baseserver.activity_reward.type _type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::activity_reward_type_IsValid(value)) {
            set__type(static_cast< ::client_baseserver::activity_reward_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__id;
        break;
      }

      // optional uint32 _id = 2;
      case 2: {
        if (tag == 16) {
         parse__id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_id_)));
          set_has__id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__amount;
        break;
      }

      // optional uint32 _amount = 3;
      case 3: {
        if (tag == 24) {
         parse__amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_amount_)));
          set_has__amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.activity_reward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.activity_reward)
  return false;
#undef DO_
}

void activity_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.activity_reward)
  // optional .client_baseserver.activity_reward.type _type = 1;
  if (has__type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_type(), output);
  }

  // optional uint32 _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_id(), output);
  }

  // optional uint32 _amount = 3;
  if (has__amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.activity_reward)
}

::google::protobuf::uint8* activity_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.activity_reward)
  // optional .client_baseserver.activity_reward.type _type = 1;
  if (has__type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_type(), target);
  }

  // optional uint32 _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_id(), target);
  }

  // optional uint32 _amount = 3;
  if (has__amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.activity_reward)
  return target;
}

int activity_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_baseserver.activity_reward.type _type = 1;
    if (has__type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_type());
    }

    // optional uint32 _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_id());
    }

    // optional uint32 _amount = 3;
    if (has__amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_reward::MergeFrom(const activity_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__type()) {
      set__type(from._type());
    }
    if (from.has__id()) {
      set__id(from._id());
    }
    if (from.has__amount()) {
      set__amount(from._amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_reward::CopyFrom(const activity_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_reward::IsInitialized() const {

  return true;
}

void activity_reward::Swap(activity_reward* other) {
  if (other != this) {
    std::swap(_type_, other->_type_);
    std::swap(_id_, other->_id_);
    std::swap(_amount_, other->_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_reward_descriptor_;
  metadata.reflection = activity_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_infos::kActivityInfoFieldNumber;
#endif  // !_MSC_VER

activity_infos::activity_infos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.activity_infos)
}

void activity_infos::InitAsDefaultInstance() {
}

activity_infos::activity_infos(const activity_infos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.activity_infos)
}

void activity_infos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_infos::~activity_infos() {
  // @@protoc_insertion_point(destructor:client_baseserver.activity_infos)
  SharedDtor();
}

void activity_infos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_infos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_infos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_infos_descriptor_;
}

const activity_infos& activity_infos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

activity_infos* activity_infos::default_instance_ = NULL;

activity_infos* activity_infos::New() const {
  return new activity_infos;
}

void activity_infos::Clear() {
  _activity_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_infos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.activity_infos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.activity_info _activity_info = 1;
      case 1: {
        if (tag == 10) {
         parse__activity_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__activity_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__activity_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.activity_infos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.activity_infos)
  return false;
#undef DO_
}

void activity_infos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.activity_infos)
  // repeated .client_baseserver.activity_info _activity_info = 1;
  for (int i = 0; i < this->_activity_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_activity_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.activity_infos)
}

::google::protobuf::uint8* activity_infos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.activity_infos)
  // repeated .client_baseserver.activity_info _activity_info = 1;
  for (int i = 0; i < this->_activity_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_activity_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.activity_infos)
  return target;
}

int activity_infos::ByteSize() const {
  int total_size = 0;

  // repeated .client_baseserver.activity_info _activity_info = 1;
  total_size += 1 * this->_activity_info_size();
  for (int i = 0; i < this->_activity_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_activity_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_infos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_infos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_infos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_infos::MergeFrom(const activity_infos& from) {
  GOOGLE_CHECK_NE(&from, this);
  _activity_info_.MergeFrom(from._activity_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_infos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_infos::CopyFrom(const activity_infos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_infos::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_activity_info())) return false;
  return true;
}

void activity_infos::Swap(activity_infos* other) {
  if (other != this) {
    _activity_info_.Swap(&other->_activity_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_infos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_infos_descriptor_;
  metadata.reflection = activity_infos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_rewards::kAmountFieldNumber;
const int activity_rewards::kRewardsFieldNumber;
const int activity_rewards::kDailyjobFieldNumber;
#endif  // !_MSC_VER

activity_rewards::activity_rewards()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.activity_rewards)
}

void activity_rewards::InitAsDefaultInstance() {
  _dailyjob_ = const_cast< ::client_baseserver::dailyjob*>(&::client_baseserver::dailyjob::default_instance());
}

activity_rewards::activity_rewards(const activity_rewards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.activity_rewards)
}

void activity_rewards::SharedCtor() {
  _cached_size_ = 0;
  _amount_ = 0u;
  _dailyjob_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_rewards::~activity_rewards() {
  // @@protoc_insertion_point(destructor:client_baseserver.activity_rewards)
  SharedDtor();
}

void activity_rewards::SharedDtor() {
  if (this != default_instance_) {
    delete _dailyjob_;
  }
}

void activity_rewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_rewards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_rewards_descriptor_;
}

const activity_rewards& activity_rewards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

activity_rewards* activity_rewards::default_instance_ = NULL;

activity_rewards* activity_rewards::New() const {
  return new activity_rewards;
}

void activity_rewards::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    _amount_ = 0u;
    if (has__dailyjob()) {
      if (_dailyjob_ != NULL) _dailyjob_->::client_baseserver::dailyjob::Clear();
    }
  }
  _rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_rewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.activity_rewards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 _amount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_amount_)));
          set_has__amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__rewards;
        break;
      }

      // repeated .client_baseserver.activity_reward _rewards = 2;
      case 2: {
        if (tag == 18) {
         parse__rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__rewards;
        if (input->ExpectTag(26)) goto parse__dailyjob;
        break;
      }

      // optional .client_baseserver.dailyjob _dailyjob = 3;
      case 3: {
        if (tag == 26) {
         parse__dailyjob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__dailyjob()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.activity_rewards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.activity_rewards)
  return false;
#undef DO_
}

void activity_rewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.activity_rewards)
  // optional uint32 _amount = 1;
  if (has__amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_amount(), output);
  }

  // repeated .client_baseserver.activity_reward _rewards = 2;
  for (int i = 0; i < this->_rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_rewards(i), output);
  }

  // optional .client_baseserver.dailyjob _dailyjob = 3;
  if (has__dailyjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_dailyjob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.activity_rewards)
}

::google::protobuf::uint8* activity_rewards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.activity_rewards)
  // optional uint32 _amount = 1;
  if (has__amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_amount(), target);
  }

  // repeated .client_baseserver.activity_reward _rewards = 2;
  for (int i = 0; i < this->_rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_rewards(i), target);
  }

  // optional .client_baseserver.dailyjob _dailyjob = 3;
  if (has__dailyjob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_dailyjob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.activity_rewards)
  return target;
}

int activity_rewards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 _amount = 1;
    if (has__amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_amount());
    }

    // optional .client_baseserver.dailyjob _dailyjob = 3;
    if (has__dailyjob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_dailyjob());
    }

  }
  // repeated .client_baseserver.activity_reward _rewards = 2;
  total_size += 1 * this->_rewards_size();
  for (int i = 0; i < this->_rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_rewards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_rewards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_rewards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_rewards::MergeFrom(const activity_rewards& from) {
  GOOGLE_CHECK_NE(&from, this);
  _rewards_.MergeFrom(from._rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__amount()) {
      set__amount(from._amount());
    }
    if (from.has__dailyjob()) {
      mutable__dailyjob()->::client_baseserver::dailyjob::MergeFrom(from._dailyjob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_rewards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_rewards::CopyFrom(const activity_rewards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_rewards::IsInitialized() const {

  if (has__dailyjob()) {
    if (!this->_dailyjob().IsInitialized()) return false;
  }
  return true;
}

void activity_rewards::Swap(activity_rewards* other) {
  if (other != this) {
    std::swap(_amount_, other->_amount_);
    _rewards_.Swap(&other->_rewards_);
    std::swap(_dailyjob_, other->_dailyjob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_rewards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_rewards_descriptor_;
  metadata.reflection = activity_rewards_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* activity_info_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_info_type_descriptor_;
}
bool activity_info_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const activity_info_type activity_info::single_br_tavern;
const activity_info_type activity_info::combo_br_tavern;
const activity_info_type activity_info::single_gd_tavern;
const activity_info_type activity_info::combo_gd_tavern;
const activity_info_type activity_info::magic_soul_tavern;
const activity_info_type activity_info::rmb_recharge;
const activity_info_type activity_info::diamond_consume;
const activity_info_type activity_info::type_MIN;
const activity_info_type activity_info::type_MAX;
const int activity_info::type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int activity_info::kIdFieldNumber;
const int activity_info::kTypeFieldNumber;
const int activity_info::kStartTimeFieldNumber;
const int activity_info::kEndTimeFieldNumber;
const int activity_info::kRewardsFieldNumber;
const int activity_info::kTitleFieldNumber;
const int activity_info::kDescFieldNumber;
const int activity_info::kRulesFieldNumber;
#endif  // !_MSC_VER

activity_info::activity_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.activity_info)
}

void activity_info::InitAsDefaultInstance() {
}

activity_info::activity_info(const activity_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.activity_info)
}

void activity_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _id_ = 0u;
  _type_ = 1;
  _start_time_ = 0u;
  _end_time_ = 0u;
  _title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _rules_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_info::~activity_info() {
  // @@protoc_insertion_point(destructor:client_baseserver.activity_info)
  SharedDtor();
}

void activity_info::SharedDtor() {
  if (_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _title_;
  }
  if (_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _desc_;
  }
  if (_rules_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _rules_;
  }
  if (this != default_instance_) {
  }
}

void activity_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_info_descriptor_;
}

const activity_info& activity_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

activity_info* activity_info::default_instance_ = NULL;

activity_info* activity_info::New() const {
  return new activity_info;
}

void activity_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<activity_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(_start_time_, _end_time_);
    _id_ = 0u;
    _type_ = 1;
    if (has__title()) {
      if (_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _title_->clear();
      }
    }
    if (has__desc()) {
      if (_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _desc_->clear();
      }
    }
    if (has__rules()) {
      if (_rules_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _rules_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.activity_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 _id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_id_)));
          set_has__id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__type;
        break;
      }

      // optional .client_baseserver.activity_info.type _type = 2;
      case 2: {
        if (tag == 16) {
         parse__type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::activity_info_type_IsValid(value)) {
            set__type(static_cast< ::client_baseserver::activity_info_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__start_time;
        break;
      }

      // optional uint32 _start_time = 3;
      case 3: {
        if (tag == 24) {
         parse__start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_start_time_)));
          set_has__start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__end_time;
        break;
      }

      // optional uint32 _end_time = 4;
      case 4: {
        if (tag == 32) {
         parse__end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_end_time_)));
          set_has__end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse__rewards;
        break;
      }

      // repeated .client_baseserver.activity_rewards _rewards = 5;
      case 5: {
        if (tag == 42) {
         parse__rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse__rewards;
        if (input->ExpectTag(50)) goto parse__title;
        break;
      }

      // optional string _title = 6;
      case 6: {
        if (tag == 50) {
         parse__title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_title().data(), this->_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse__desc;
        break;
      }

      // optional string _desc = 7;
      case 7: {
        if (tag == 58) {
         parse__desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_desc().data(), this->_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse__rules;
        break;
      }

      // optional string _rules = 8;
      case 8: {
        if (tag == 66) {
         parse__rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__rules()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_rules().data(), this->_rules().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_rules");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.activity_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.activity_info)
  return false;
#undef DO_
}

void activity_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.activity_info)
  // optional uint32 _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_id(), output);
  }

  // optional .client_baseserver.activity_info.type _type = 2;
  if (has__type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->_type(), output);
  }

  // optional uint32 _start_time = 3;
  if (has__start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_start_time(), output);
  }

  // optional uint32 _end_time = 4;
  if (has__end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_end_time(), output);
  }

  // repeated .client_baseserver.activity_rewards _rewards = 5;
  for (int i = 0; i < this->_rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_rewards(i), output);
  }

  // optional string _title = 6;
  if (has__title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_title().data(), this->_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->_title(), output);
  }

  // optional string _desc = 7;
  if (has__desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_desc().data(), this->_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->_desc(), output);
  }

  // optional string _rules = 8;
  if (has__rules()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_rules().data(), this->_rules().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_rules");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->_rules(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.activity_info)
}

::google::protobuf::uint8* activity_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.activity_info)
  // optional uint32 _id = 1;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_id(), target);
  }

  // optional .client_baseserver.activity_info.type _type = 2;
  if (has__type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->_type(), target);
  }

  // optional uint32 _start_time = 3;
  if (has__start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_start_time(), target);
  }

  // optional uint32 _end_time = 4;
  if (has__end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_end_time(), target);
  }

  // repeated .client_baseserver.activity_rewards _rewards = 5;
  for (int i = 0; i < this->_rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_rewards(i), target);
  }

  // optional string _title = 6;
  if (has__title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_title().data(), this->_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->_title(), target);
  }

  // optional string _desc = 7;
  if (has__desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_desc().data(), this->_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->_desc(), target);
  }

  // optional string _rules = 8;
  if (has__rules()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_rules().data(), this->_rules().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_rules");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->_rules(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.activity_info)
  return target;
}

int activity_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 _id = 1;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_id());
    }

    // optional .client_baseserver.activity_info.type _type = 2;
    if (has__type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_type());
    }

    // optional uint32 _start_time = 3;
    if (has__start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_start_time());
    }

    // optional uint32 _end_time = 4;
    if (has__end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_end_time());
    }

    // optional string _title = 6;
    if (has__title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_title());
    }

    // optional string _desc = 7;
    if (has__desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_desc());
    }

    // optional string _rules = 8;
    if (has__rules()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_rules());
    }

  }
  // repeated .client_baseserver.activity_rewards _rewards = 5;
  total_size += 1 * this->_rewards_size();
  for (int i = 0; i < this->_rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_info::MergeFrom(const activity_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  _rewards_.MergeFrom(from._rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__id()) {
      set__id(from._id());
    }
    if (from.has__type()) {
      set__type(from._type());
    }
    if (from.has__start_time()) {
      set__start_time(from._start_time());
    }
    if (from.has__end_time()) {
      set__end_time(from._end_time());
    }
    if (from.has__title()) {
      set__title(from._title());
    }
    if (from.has__desc()) {
      set__desc(from._desc());
    }
    if (from.has__rules()) {
      set__rules(from._rules());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_info::CopyFrom(const activity_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_info::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_rewards())) return false;
  return true;
}

void activity_info::Swap(activity_info* other) {
  if (other != this) {
    std::swap(_id_, other->_id_);
    std::swap(_type_, other->_type_);
    std::swap(_start_time_, other->_start_time_);
    std::swap(_end_time_, other->_end_time_);
    _rewards_.Swap(&other->_rewards_);
    std::swap(_title_, other->_title_);
    std::swap(_desc_, other->_desc_);
    std::swap(_rules_, other->_rules_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_info_descriptor_;
  metadata.reflection = activity_info_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* cdkey_gift_reply_cdkey_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cdkey_gift_reply_cdkey_result_descriptor_;
}
bool cdkey_gift_reply_cdkey_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const cdkey_gift_reply_cdkey_result cdkey_gift_reply::success;
const cdkey_gift_reply_cdkey_result cdkey_gift_reply::already_used;
const cdkey_gift_reply_cdkey_result cdkey_gift_reply::not_exists;
const cdkey_gift_reply_cdkey_result cdkey_gift_reply::once_only;
const cdkey_gift_reply_cdkey_result cdkey_gift_reply::cdkey_result_MIN;
const cdkey_gift_reply_cdkey_result cdkey_gift_reply::cdkey_result_MAX;
const int cdkey_gift_reply::cdkey_result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int cdkey_gift_reply::kResultFieldNumber;
const int cdkey_gift_reply::kPackFieldNumber;
#endif  // !_MSC_VER

cdkey_gift_reply::cdkey_gift_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.cdkey_gift_reply)
}

void cdkey_gift_reply::InitAsDefaultInstance() {
  _pack_ = const_cast< ::client_baseserver::res_pack*>(&::client_baseserver::res_pack::default_instance());
}

cdkey_gift_reply::cdkey_gift_reply(const cdkey_gift_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.cdkey_gift_reply)
}

void cdkey_gift_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _pack_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cdkey_gift_reply::~cdkey_gift_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.cdkey_gift_reply)
  SharedDtor();
}

void cdkey_gift_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _pack_;
  }
}

void cdkey_gift_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cdkey_gift_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cdkey_gift_reply_descriptor_;
}

const cdkey_gift_reply& cdkey_gift_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

cdkey_gift_reply* cdkey_gift_reply::default_instance_ = NULL;

cdkey_gift_reply* cdkey_gift_reply::New() const {
  return new cdkey_gift_reply;
}

void cdkey_gift_reply::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _result_ = 0;
    if (has__pack()) {
      if (_pack_ != NULL) _pack_->::client_baseserver::res_pack::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cdkey_gift_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.cdkey_gift_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.cdkey_gift_reply.cdkey_result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::cdkey_gift_reply_cdkey_result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::cdkey_gift_reply_cdkey_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__pack;
        break;
      }

      // optional .client_baseserver.res_pack _pack = 2;
      case 2: {
        if (tag == 18) {
         parse__pack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__pack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.cdkey_gift_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.cdkey_gift_reply)
  return false;
#undef DO_
}

void cdkey_gift_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.cdkey_gift_reply)
  // required .client_baseserver.cdkey_gift_reply.cdkey_result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // optional .client_baseserver.res_pack _pack = 2;
  if (has__pack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_pack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.cdkey_gift_reply)
}

::google::protobuf::uint8* cdkey_gift_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.cdkey_gift_reply)
  // required .client_baseserver.cdkey_gift_reply.cdkey_result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // optional .client_baseserver.res_pack _pack = 2;
  if (has__pack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_pack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.cdkey_gift_reply)
  return target;
}

int cdkey_gift_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.cdkey_gift_reply.cdkey_result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional .client_baseserver.res_pack _pack = 2;
    if (has__pack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_pack());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cdkey_gift_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cdkey_gift_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cdkey_gift_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cdkey_gift_reply::MergeFrom(const cdkey_gift_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__pack()) {
      mutable__pack()->::client_baseserver::res_pack::MergeFrom(from._pack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cdkey_gift_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cdkey_gift_reply::CopyFrom(const cdkey_gift_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cdkey_gift_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__pack()) {
    if (!this->_pack().IsInitialized()) return false;
  }
  return true;
}

void cdkey_gift_reply::Swap(cdkey_gift_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_pack_, other->_pack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cdkey_gift_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cdkey_gift_reply_descriptor_;
  metadata.reflection = cdkey_gift_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int res_pack::kMoneyFieldNumber;
const int res_pack::kDiamondFieldNumber;
const int res_pack::kItemsFieldNumber;
const int res_pack::kHeroesFieldNumber;
const int res_pack::kMonthCardFieldNumber;
#endif  // !_MSC_VER

res_pack::res_pack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.res_pack)
}

void res_pack::InitAsDefaultInstance() {
  _month_card_ = const_cast< ::client_baseserver::monthcard*>(&::client_baseserver::monthcard::default_instance());
}

res_pack::res_pack(const res_pack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.res_pack)
}

void res_pack::SharedCtor() {
  _cached_size_ = 0;
  _money_ = 0u;
  _diamond_ = 0u;
  _month_card_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

res_pack::~res_pack() {
  // @@protoc_insertion_point(destructor:client_baseserver.res_pack)
  SharedDtor();
}

void res_pack::SharedDtor() {
  if (this != default_instance_) {
    delete _month_card_;
  }
}

void res_pack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* res_pack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return res_pack_descriptor_;
}

const res_pack& res_pack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

res_pack* res_pack::default_instance_ = NULL;

res_pack* res_pack::New() const {
  return new res_pack;
}

void res_pack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<res_pack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 19) {
    ZR_(_money_, _diamond_);
    if (has__month_card()) {
      if (_month_card_ != NULL) _month_card_->::client_baseserver::monthcard::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _items_.Clear();
  _heroes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool res_pack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.res_pack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 _money = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_money_)));
          set_has__money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__diamond;
        break;
      }

      // optional uint32 _diamond = 2;
      case 2: {
        if (tag == 16) {
         parse__diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_diamond_)));
          set_has__diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__items;
        break;
      }

      // repeated uint32 _items = 3;
      case 3: {
        if (tag == 24) {
         parse__items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable__items())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__items())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__items;
        if (input->ExpectTag(34)) goto parse__heroes;
        break;
      }

      // repeated .client_baseserver.hero _heroes = 4;
      case 4: {
        if (tag == 34) {
         parse__heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__heroes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__heroes;
        if (input->ExpectTag(42)) goto parse__month_card;
        break;
      }

      // optional .client_baseserver.monthcard _month_card = 5;
      case 5: {
        if (tag == 42) {
         parse__month_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__month_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.res_pack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.res_pack)
  return false;
#undef DO_
}

void res_pack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.res_pack)
  // optional uint32 _money = 1;
  if (has__money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_money(), output);
  }

  // optional uint32 _diamond = 2;
  if (has__diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_diamond(), output);
  }

  // repeated uint32 _items = 3;
  for (int i = 0; i < this->_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->_items(i), output);
  }

  // repeated .client_baseserver.hero _heroes = 4;
  for (int i = 0; i < this->_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_heroes(i), output);
  }

  // optional .client_baseserver.monthcard _month_card = 5;
  if (has__month_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_month_card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.res_pack)
}

::google::protobuf::uint8* res_pack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.res_pack)
  // optional uint32 _money = 1;
  if (has__money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_money(), target);
  }

  // optional uint32 _diamond = 2;
  if (has__diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_diamond(), target);
  }

  // repeated uint32 _items = 3;
  for (int i = 0; i < this->_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->_items(i), target);
  }

  // repeated .client_baseserver.hero _heroes = 4;
  for (int i = 0; i < this->_heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_heroes(i), target);
  }

  // optional .client_baseserver.monthcard _month_card = 5;
  if (has__month_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_month_card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.res_pack)
  return target;
}

int res_pack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 _money = 1;
    if (has__money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_money());
    }

    // optional uint32 _diamond = 2;
    if (has__diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_diamond());
    }

    // optional .client_baseserver.monthcard _month_card = 5;
    if (has__month_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_month_card());
    }

  }
  // repeated uint32 _items = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->_items_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_items(i));
    }
    total_size += 1 * this->_items_size() + data_size;
  }

  // repeated .client_baseserver.hero _heroes = 4;
  total_size += 1 * this->_heroes_size();
  for (int i = 0; i < this->_heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_heroes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void res_pack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const res_pack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const res_pack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void res_pack::MergeFrom(const res_pack& from) {
  GOOGLE_CHECK_NE(&from, this);
  _items_.MergeFrom(from._items_);
  _heroes_.MergeFrom(from._heroes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__money()) {
      set__money(from._money());
    }
    if (from.has__diamond()) {
      set__diamond(from._diamond());
    }
    if (from.has__month_card()) {
      mutable__month_card()->::client_baseserver::monthcard::MergeFrom(from._month_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void res_pack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void res_pack::CopyFrom(const res_pack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool res_pack::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_heroes())) return false;
  if (has__month_card()) {
    if (!this->_month_card().IsInitialized()) return false;
  }
  return true;
}

void res_pack::Swap(res_pack* other) {
  if (other != this) {
    std::swap(_money_, other->_money_);
    std::swap(_diamond_, other->_diamond_);
    _items_.Swap(&other->_items_);
    _heroes_.Swap(&other->_heroes_);
    std::swap(_month_card_, other->_month_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata res_pack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = res_pack_descriptor_;
  metadata.reflection = res_pack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ask_magicsoul_reply::kIdFieldNumber;
#endif  // !_MSC_VER

ask_magicsoul_reply::ask_magicsoul_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.ask_magicsoul_reply)
}

void ask_magicsoul_reply::InitAsDefaultInstance() {
}

ask_magicsoul_reply::ask_magicsoul_reply(const ask_magicsoul_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.ask_magicsoul_reply)
}

void ask_magicsoul_reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ask_magicsoul_reply::~ask_magicsoul_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.ask_magicsoul_reply)
  SharedDtor();
}

void ask_magicsoul_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ask_magicsoul_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ask_magicsoul_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ask_magicsoul_reply_descriptor_;
}

const ask_magicsoul_reply& ask_magicsoul_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

ask_magicsoul_reply* ask_magicsoul_reply::default_instance_ = NULL;

ask_magicsoul_reply* ask_magicsoul_reply::New() const {
  return new ask_magicsoul_reply;
}

void ask_magicsoul_reply::Clear() {
  _id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ask_magicsoul_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.ask_magicsoul_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 _id = 1;
      case 1: {
        if (tag == 8) {
         parse__id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable__id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse__id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.ask_magicsoul_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.ask_magicsoul_reply)
  return false;
#undef DO_
}

void ask_magicsoul_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.ask_magicsoul_reply)
  // repeated uint32 _id = 1;
  for (int i = 0; i < this->_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.ask_magicsoul_reply)
}

::google::protobuf::uint8* ask_magicsoul_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.ask_magicsoul_reply)
  // repeated uint32 _id = 1;
  for (int i = 0; i < this->_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.ask_magicsoul_reply)
  return target;
}

int ask_magicsoul_reply::ByteSize() const {
  int total_size = 0;

  // repeated uint32 _id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_id(i));
    }
    total_size += 1 * this->_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ask_magicsoul_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ask_magicsoul_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ask_magicsoul_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ask_magicsoul_reply::MergeFrom(const ask_magicsoul_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _id_.MergeFrom(from._id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ask_magicsoul_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ask_magicsoul_reply::CopyFrom(const ask_magicsoul_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ask_magicsoul_reply::IsInitialized() const {

  return true;
}

void ask_magicsoul_reply::Swap(ask_magicsoul_reply* other) {
  if (other != this) {
    _id_.Swap(&other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ask_magicsoul_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ask_magicsoul_reply_descriptor_;
  metadata.reflection = ask_magicsoul_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int important_data::kMoneyFieldNumber;
const int important_data::kRmbFieldNumber;
const int important_data::kHeroesFieldNumber;
const int important_data::kItemsFieldNumber;
#endif  // !_MSC_VER

important_data::important_data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.important_data)
}

void important_data::InitAsDefaultInstance() {
}

important_data::important_data(const important_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.important_data)
}

void important_data::SharedCtor() {
  _cached_size_ = 0;
  _money_ = 0u;
  _rmb_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

important_data::~important_data() {
  // @@protoc_insertion_point(destructor:client_baseserver.important_data)
  SharedDtor();
}

void important_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void important_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* important_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return important_data_descriptor_;
}

const important_data& important_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

important_data* important_data::default_instance_ = NULL;

important_data* important_data::New() const {
  return new important_data;
}

void important_data::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<important_data*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_money_, _rmb_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  _heroes_.Clear();
  _items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool important_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.important_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _money = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_money_)));
          set_has__money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__rmb;
        break;
      }

      // required uint32 _rmb = 2;
      case 2: {
        if (tag == 16) {
         parse__rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_rmb_)));
          set_has__rmb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__heroes;
        break;
      }

      // repeated .client_baseserver.hero _heroes = 3;
      case 3: {
        if (tag == 26) {
         parse__heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__heroes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__heroes;
        if (input->ExpectTag(32)) goto parse__items;
        break;
      }

      // repeated uint32 _items = 4;
      case 4: {
        if (tag == 32) {
         parse__items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable__items())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__items())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.important_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.important_data)
  return false;
#undef DO_
}

void important_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.important_data)
  // required uint32 _money = 1;
  if (has__money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_money(), output);
  }

  // required uint32 _rmb = 2;
  if (has__rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_rmb(), output);
  }

  // repeated .client_baseserver.hero _heroes = 3;
  for (int i = 0; i < this->_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_heroes(i), output);
  }

  // repeated uint32 _items = 4;
  for (int i = 0; i < this->_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.important_data)
}

::google::protobuf::uint8* important_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.important_data)
  // required uint32 _money = 1;
  if (has__money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_money(), target);
  }

  // required uint32 _rmb = 2;
  if (has__rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_rmb(), target);
  }

  // repeated .client_baseserver.hero _heroes = 3;
  for (int i = 0; i < this->_heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_heroes(i), target);
  }

  // repeated uint32 _items = 4;
  for (int i = 0; i < this->_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.important_data)
  return target;
}

int important_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _money = 1;
    if (has__money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_money());
    }

    // required uint32 _rmb = 2;
    if (has__rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_rmb());
    }

  }
  // repeated .client_baseserver.hero _heroes = 3;
  total_size += 1 * this->_heroes_size();
  for (int i = 0; i < this->_heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_heroes(i));
  }

  // repeated uint32 _items = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->_items_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_items(i));
    }
    total_size += 1 * this->_items_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void important_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const important_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const important_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void important_data::MergeFrom(const important_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  _heroes_.MergeFrom(from._heroes_);
  _items_.MergeFrom(from._items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__money()) {
      set__money(from._money());
    }
    if (from.has__rmb()) {
      set__rmb(from._rmb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void important_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void important_data::CopyFrom(const important_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool important_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_heroes())) return false;
  return true;
}

void important_data::Swap(important_data* other) {
  if (other != this) {
    std::swap(_money_, other->_money_);
    std::swap(_rmb_, other->_rmb_);
    _heroes_.Swap(&other->_heroes_);
    _items_.Swap(&other->_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata important_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = important_data_descriptor_;
  metadata.reflection = important_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int monthcard::kIdFieldNumber;
const int monthcard::kExpireTimeFieldNumber;
#endif  // !_MSC_VER

monthcard::monthcard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.monthcard)
}

void monthcard::InitAsDefaultInstance() {
}

monthcard::monthcard(const monthcard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.monthcard)
}

void monthcard::SharedCtor() {
  _cached_size_ = 0;
  _id_ = 0u;
  _expire_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

monthcard::~monthcard() {
  // @@protoc_insertion_point(destructor:client_baseserver.monthcard)
  SharedDtor();
}

void monthcard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void monthcard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* monthcard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return monthcard_descriptor_;
}

const monthcard& monthcard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

monthcard* monthcard::default_instance_ = NULL;

monthcard* monthcard::New() const {
  return new monthcard;
}

void monthcard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<monthcard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_id_, _expire_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool monthcard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.monthcard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_id_)));
          set_has__id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__expire_time;
        break;
      }

      // required uint32 _expire_time = 2;
      case 2: {
        if (tag == 16) {
         parse__expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_expire_time_)));
          set_has__expire_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.monthcard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.monthcard)
  return false;
#undef DO_
}

void monthcard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.monthcard)
  // required uint32 _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_id(), output);
  }

  // required uint32 _expire_time = 2;
  if (has__expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_expire_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.monthcard)
}

::google::protobuf::uint8* monthcard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.monthcard)
  // required uint32 _id = 1;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_id(), target);
  }

  // required uint32 _expire_time = 2;
  if (has__expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_expire_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.monthcard)
  return target;
}

int monthcard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _id = 1;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_id());
    }

    // required uint32 _expire_time = 2;
    if (has__expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_expire_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void monthcard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const monthcard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const monthcard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void monthcard::MergeFrom(const monthcard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__id()) {
      set__id(from._id());
    }
    if (from.has__expire_time()) {
      set__expire_time(from._expire_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void monthcard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void monthcard::CopyFrom(const monthcard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool monthcard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void monthcard::Swap(monthcard* other) {
  if (other != this) {
    std::swap(_id_, other->_id_);
    std::swap(_expire_time_, other->_expire_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata monthcard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = monthcard_descriptor_;
  metadata.reflection = monthcard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int excavate_reply::kSearchExcavateReplyFieldNumber;
const int excavate_reply::kQueryExcavateDataReplyFieldNumber;
const int excavate_reply::kQueryExcavateHistoryReplyFieldNumber;
const int excavate_reply::kQueryExcavateBattleReplyFieldNumber;
const int excavate_reply::kSetExcavateTeamReplyFieldNumber;
const int excavate_reply::kExcavateStartBattleReplyFieldNumber;
const int excavate_reply::kExcavateEndBattleReplyFieldNumber;
const int excavate_reply::kQueryExcavateDefReplyFieldNumber;
const int excavate_reply::kClearExcavateBattleReplyFieldNumber;
const int excavate_reply::kDrawExcavateDefRwdReplyFieldNumber;
const int excavate_reply::kRevengeExcavateReplyFieldNumber;
const int excavate_reply::kDrawExcavResReplyFieldNumber;
const int excavate_reply::kWithdrawExcavateHeroReplyFieldNumber;
#endif  // !_MSC_VER

excavate_reply::excavate_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.excavate_reply)
}

void excavate_reply::InitAsDefaultInstance() {
  _search_excavate_reply_ = const_cast< ::client_baseserver::search_excavate_reply*>(&::client_baseserver::search_excavate_reply::default_instance());
  _query_excavate_data_reply_ = const_cast< ::client_baseserver::query_excavate_data_reply*>(&::client_baseserver::query_excavate_data_reply::default_instance());
  _query_excavate_history_reply_ = const_cast< ::client_baseserver::query_excavate_history_reply*>(&::client_baseserver::query_excavate_history_reply::default_instance());
  _query_excavate_battle_reply_ = const_cast< ::client_baseserver::query_excavate_battle_reply*>(&::client_baseserver::query_excavate_battle_reply::default_instance());
  _set_excavate_team_reply_ = const_cast< ::client_baseserver::set_excavate_team_reply*>(&::client_baseserver::set_excavate_team_reply::default_instance());
  _excavate_start_battle_reply_ = const_cast< ::client_baseserver::excavate_start_battle_reply*>(&::client_baseserver::excavate_start_battle_reply::default_instance());
  _excavate_end_battle_reply_ = const_cast< ::client_baseserver::excavate_end_battle_reply*>(&::client_baseserver::excavate_end_battle_reply::default_instance());
  _query_excavate_def_reply_ = const_cast< ::client_baseserver::query_excavate_def_reply*>(&::client_baseserver::query_excavate_def_reply::default_instance());
  _clear_excavate_battle_reply_ = const_cast< ::client_baseserver::clear_excavate_battle_reply*>(&::client_baseserver::clear_excavate_battle_reply::default_instance());
  _draw_excavate_def_rwd_reply_ = const_cast< ::client_baseserver::draw_excavate_def_rwd_reply*>(&::client_baseserver::draw_excavate_def_rwd_reply::default_instance());
  _revenge_excavate_reply_ = const_cast< ::client_baseserver::revenge_excavate_reply*>(&::client_baseserver::revenge_excavate_reply::default_instance());
  _draw_excav_res_reply_ = const_cast< ::client_baseserver::draw_excav_res_reply*>(&::client_baseserver::draw_excav_res_reply::default_instance());
  _withdraw_excavate_hero_reply_ = const_cast< ::client_baseserver::withdraw_excavate_hero_reply*>(&::client_baseserver::withdraw_excavate_hero_reply::default_instance());
}

excavate_reply::excavate_reply(const excavate_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.excavate_reply)
}

void excavate_reply::SharedCtor() {
  _cached_size_ = 0;
  _search_excavate_reply_ = NULL;
  _query_excavate_data_reply_ = NULL;
  _query_excavate_history_reply_ = NULL;
  _query_excavate_battle_reply_ = NULL;
  _set_excavate_team_reply_ = NULL;
  _excavate_start_battle_reply_ = NULL;
  _excavate_end_battle_reply_ = NULL;
  _query_excavate_def_reply_ = NULL;
  _clear_excavate_battle_reply_ = NULL;
  _draw_excavate_def_rwd_reply_ = NULL;
  _revenge_excavate_reply_ = NULL;
  _draw_excav_res_reply_ = NULL;
  _withdraw_excavate_hero_reply_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

excavate_reply::~excavate_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.excavate_reply)
  SharedDtor();
}

void excavate_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _search_excavate_reply_;
    delete _query_excavate_data_reply_;
    delete _query_excavate_history_reply_;
    delete _query_excavate_battle_reply_;
    delete _set_excavate_team_reply_;
    delete _excavate_start_battle_reply_;
    delete _excavate_end_battle_reply_;
    delete _query_excavate_def_reply_;
    delete _clear_excavate_battle_reply_;
    delete _draw_excavate_def_rwd_reply_;
    delete _revenge_excavate_reply_;
    delete _draw_excav_res_reply_;
    delete _withdraw_excavate_hero_reply_;
  }
}

void excavate_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* excavate_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return excavate_reply_descriptor_;
}

const excavate_reply& excavate_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

excavate_reply* excavate_reply::default_instance_ = NULL;

excavate_reply* excavate_reply::New() const {
  return new excavate_reply;
}

void excavate_reply::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has__search_excavate_reply()) {
      if (_search_excavate_reply_ != NULL) _search_excavate_reply_->::client_baseserver::search_excavate_reply::Clear();
    }
    if (has__query_excavate_data_reply()) {
      if (_query_excavate_data_reply_ != NULL) _query_excavate_data_reply_->::client_baseserver::query_excavate_data_reply::Clear();
    }
    if (has__query_excavate_history_reply()) {
      if (_query_excavate_history_reply_ != NULL) _query_excavate_history_reply_->::client_baseserver::query_excavate_history_reply::Clear();
    }
    if (has__query_excavate_battle_reply()) {
      if (_query_excavate_battle_reply_ != NULL) _query_excavate_battle_reply_->::client_baseserver::query_excavate_battle_reply::Clear();
    }
    if (has__set_excavate_team_reply()) {
      if (_set_excavate_team_reply_ != NULL) _set_excavate_team_reply_->::client_baseserver::set_excavate_team_reply::Clear();
    }
    if (has__excavate_start_battle_reply()) {
      if (_excavate_start_battle_reply_ != NULL) _excavate_start_battle_reply_->::client_baseserver::excavate_start_battle_reply::Clear();
    }
    if (has__excavate_end_battle_reply()) {
      if (_excavate_end_battle_reply_ != NULL) _excavate_end_battle_reply_->::client_baseserver::excavate_end_battle_reply::Clear();
    }
    if (has__query_excavate_def_reply()) {
      if (_query_excavate_def_reply_ != NULL) _query_excavate_def_reply_->::client_baseserver::query_excavate_def_reply::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has__clear_excavate_battle_reply()) {
      if (_clear_excavate_battle_reply_ != NULL) _clear_excavate_battle_reply_->::client_baseserver::clear_excavate_battle_reply::Clear();
    }
    if (has__draw_excavate_def_rwd_reply()) {
      if (_draw_excavate_def_rwd_reply_ != NULL) _draw_excavate_def_rwd_reply_->::client_baseserver::draw_excavate_def_rwd_reply::Clear();
    }
    if (has__revenge_excavate_reply()) {
      if (_revenge_excavate_reply_ != NULL) _revenge_excavate_reply_->::client_baseserver::revenge_excavate_reply::Clear();
    }
    if (has__draw_excav_res_reply()) {
      if (_draw_excav_res_reply_ != NULL) _draw_excav_res_reply_->::client_baseserver::draw_excav_res_reply::Clear();
    }
    if (has__withdraw_excavate_hero_reply()) {
      if (_withdraw_excavate_hero_reply_ != NULL) _withdraw_excavate_hero_reply_->::client_baseserver::withdraw_excavate_hero_reply::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool excavate_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.excavate_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_baseserver.search_excavate_reply _search_excavate_reply = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__search_excavate_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__query_excavate_data_reply;
        break;
      }

      // optional .client_baseserver.query_excavate_data_reply _query_excavate_data_reply = 2;
      case 2: {
        if (tag == 18) {
         parse__query_excavate_data_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_excavate_data_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__query_excavate_history_reply;
        break;
      }

      // optional .client_baseserver.query_excavate_history_reply _query_excavate_history_reply = 3;
      case 3: {
        if (tag == 26) {
         parse__query_excavate_history_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_excavate_history_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__query_excavate_battle_reply;
        break;
      }

      // optional .client_baseserver.query_excavate_battle_reply _query_excavate_battle_reply = 4;
      case 4: {
        if (tag == 34) {
         parse__query_excavate_battle_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_excavate_battle_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse__set_excavate_team_reply;
        break;
      }

      // optional .client_baseserver.set_excavate_team_reply _set_excavate_team_reply = 5;
      case 5: {
        if (tag == 42) {
         parse__set_excavate_team_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__set_excavate_team_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse__excavate_start_battle_reply;
        break;
      }

      // optional .client_baseserver.excavate_start_battle_reply _excavate_start_battle_reply = 6;
      case 6: {
        if (tag == 50) {
         parse__excavate_start_battle_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__excavate_start_battle_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse__excavate_end_battle_reply;
        break;
      }

      // optional .client_baseserver.excavate_end_battle_reply _excavate_end_battle_reply = 7;
      case 7: {
        if (tag == 58) {
         parse__excavate_end_battle_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__excavate_end_battle_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse__query_excavate_def_reply;
        break;
      }

      // optional .client_baseserver.query_excavate_def_reply _query_excavate_def_reply = 8;
      case 8: {
        if (tag == 66) {
         parse__query_excavate_def_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_excavate_def_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse__clear_excavate_battle_reply;
        break;
      }

      // optional .client_baseserver.clear_excavate_battle_reply _clear_excavate_battle_reply = 9;
      case 9: {
        if (tag == 74) {
         parse__clear_excavate_battle_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__clear_excavate_battle_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse__draw_excavate_def_rwd_reply;
        break;
      }

      // optional .client_baseserver.draw_excavate_def_rwd_reply _draw_excavate_def_rwd_reply = 10;
      case 10: {
        if (tag == 82) {
         parse__draw_excavate_def_rwd_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__draw_excavate_def_rwd_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse__revenge_excavate_reply;
        break;
      }

      // optional .client_baseserver.revenge_excavate_reply _revenge_excavate_reply = 11;
      case 11: {
        if (tag == 90) {
         parse__revenge_excavate_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__revenge_excavate_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse__draw_excav_res_reply;
        break;
      }

      // optional .client_baseserver.draw_excav_res_reply _draw_excav_res_reply = 12;
      case 12: {
        if (tag == 98) {
         parse__draw_excav_res_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__draw_excav_res_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse__withdraw_excavate_hero_reply;
        break;
      }

      // optional .client_baseserver.withdraw_excavate_hero_reply _withdraw_excavate_hero_reply = 13;
      case 13: {
        if (tag == 106) {
         parse__withdraw_excavate_hero_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__withdraw_excavate_hero_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.excavate_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.excavate_reply)
  return false;
#undef DO_
}

void excavate_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.excavate_reply)
  // optional .client_baseserver.search_excavate_reply _search_excavate_reply = 1;
  if (has__search_excavate_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_search_excavate_reply(), output);
  }

  // optional .client_baseserver.query_excavate_data_reply _query_excavate_data_reply = 2;
  if (has__query_excavate_data_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_query_excavate_data_reply(), output);
  }

  // optional .client_baseserver.query_excavate_history_reply _query_excavate_history_reply = 3;
  if (has__query_excavate_history_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_query_excavate_history_reply(), output);
  }

  // optional .client_baseserver.query_excavate_battle_reply _query_excavate_battle_reply = 4;
  if (has__query_excavate_battle_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_query_excavate_battle_reply(), output);
  }

  // optional .client_baseserver.set_excavate_team_reply _set_excavate_team_reply = 5;
  if (has__set_excavate_team_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_set_excavate_team_reply(), output);
  }

  // optional .client_baseserver.excavate_start_battle_reply _excavate_start_battle_reply = 6;
  if (has__excavate_start_battle_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_excavate_start_battle_reply(), output);
  }

  // optional .client_baseserver.excavate_end_battle_reply _excavate_end_battle_reply = 7;
  if (has__excavate_end_battle_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_excavate_end_battle_reply(), output);
  }

  // optional .client_baseserver.query_excavate_def_reply _query_excavate_def_reply = 8;
  if (has__query_excavate_def_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_query_excavate_def_reply(), output);
  }

  // optional .client_baseserver.clear_excavate_battle_reply _clear_excavate_battle_reply = 9;
  if (has__clear_excavate_battle_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_clear_excavate_battle_reply(), output);
  }

  // optional .client_baseserver.draw_excavate_def_rwd_reply _draw_excavate_def_rwd_reply = 10;
  if (has__draw_excavate_def_rwd_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_draw_excavate_def_rwd_reply(), output);
  }

  // optional .client_baseserver.revenge_excavate_reply _revenge_excavate_reply = 11;
  if (has__revenge_excavate_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_revenge_excavate_reply(), output);
  }

  // optional .client_baseserver.draw_excav_res_reply _draw_excav_res_reply = 12;
  if (has__draw_excav_res_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_draw_excav_res_reply(), output);
  }

  // optional .client_baseserver.withdraw_excavate_hero_reply _withdraw_excavate_hero_reply = 13;
  if (has__withdraw_excavate_hero_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_withdraw_excavate_hero_reply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.excavate_reply)
}

::google::protobuf::uint8* excavate_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.excavate_reply)
  // optional .client_baseserver.search_excavate_reply _search_excavate_reply = 1;
  if (has__search_excavate_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_search_excavate_reply(), target);
  }

  // optional .client_baseserver.query_excavate_data_reply _query_excavate_data_reply = 2;
  if (has__query_excavate_data_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_query_excavate_data_reply(), target);
  }

  // optional .client_baseserver.query_excavate_history_reply _query_excavate_history_reply = 3;
  if (has__query_excavate_history_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_query_excavate_history_reply(), target);
  }

  // optional .client_baseserver.query_excavate_battle_reply _query_excavate_battle_reply = 4;
  if (has__query_excavate_battle_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_query_excavate_battle_reply(), target);
  }

  // optional .client_baseserver.set_excavate_team_reply _set_excavate_team_reply = 5;
  if (has__set_excavate_team_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_set_excavate_team_reply(), target);
  }

  // optional .client_baseserver.excavate_start_battle_reply _excavate_start_battle_reply = 6;
  if (has__excavate_start_battle_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->_excavate_start_battle_reply(), target);
  }

  // optional .client_baseserver.excavate_end_battle_reply _excavate_end_battle_reply = 7;
  if (has__excavate_end_battle_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->_excavate_end_battle_reply(), target);
  }

  // optional .client_baseserver.query_excavate_def_reply _query_excavate_def_reply = 8;
  if (has__query_excavate_def_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->_query_excavate_def_reply(), target);
  }

  // optional .client_baseserver.clear_excavate_battle_reply _clear_excavate_battle_reply = 9;
  if (has__clear_excavate_battle_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->_clear_excavate_battle_reply(), target);
  }

  // optional .client_baseserver.draw_excavate_def_rwd_reply _draw_excavate_def_rwd_reply = 10;
  if (has__draw_excavate_def_rwd_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->_draw_excavate_def_rwd_reply(), target);
  }

  // optional .client_baseserver.revenge_excavate_reply _revenge_excavate_reply = 11;
  if (has__revenge_excavate_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->_revenge_excavate_reply(), target);
  }

  // optional .client_baseserver.draw_excav_res_reply _draw_excav_res_reply = 12;
  if (has__draw_excav_res_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->_draw_excav_res_reply(), target);
  }

  // optional .client_baseserver.withdraw_excavate_hero_reply _withdraw_excavate_hero_reply = 13;
  if (has__withdraw_excavate_hero_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->_withdraw_excavate_hero_reply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.excavate_reply)
  return target;
}

int excavate_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_baseserver.search_excavate_reply _search_excavate_reply = 1;
    if (has__search_excavate_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_search_excavate_reply());
    }

    // optional .client_baseserver.query_excavate_data_reply _query_excavate_data_reply = 2;
    if (has__query_excavate_data_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_excavate_data_reply());
    }

    // optional .client_baseserver.query_excavate_history_reply _query_excavate_history_reply = 3;
    if (has__query_excavate_history_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_excavate_history_reply());
    }

    // optional .client_baseserver.query_excavate_battle_reply _query_excavate_battle_reply = 4;
    if (has__query_excavate_battle_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_excavate_battle_reply());
    }

    // optional .client_baseserver.set_excavate_team_reply _set_excavate_team_reply = 5;
    if (has__set_excavate_team_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_set_excavate_team_reply());
    }

    // optional .client_baseserver.excavate_start_battle_reply _excavate_start_battle_reply = 6;
    if (has__excavate_start_battle_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_excavate_start_battle_reply());
    }

    // optional .client_baseserver.excavate_end_battle_reply _excavate_end_battle_reply = 7;
    if (has__excavate_end_battle_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_excavate_end_battle_reply());
    }

    // optional .client_baseserver.query_excavate_def_reply _query_excavate_def_reply = 8;
    if (has__query_excavate_def_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_excavate_def_reply());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .client_baseserver.clear_excavate_battle_reply _clear_excavate_battle_reply = 9;
    if (has__clear_excavate_battle_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_clear_excavate_battle_reply());
    }

    // optional .client_baseserver.draw_excavate_def_rwd_reply _draw_excavate_def_rwd_reply = 10;
    if (has__draw_excavate_def_rwd_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_draw_excavate_def_rwd_reply());
    }

    // optional .client_baseserver.revenge_excavate_reply _revenge_excavate_reply = 11;
    if (has__revenge_excavate_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_revenge_excavate_reply());
    }

    // optional .client_baseserver.draw_excav_res_reply _draw_excav_res_reply = 12;
    if (has__draw_excav_res_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_draw_excav_res_reply());
    }

    // optional .client_baseserver.withdraw_excavate_hero_reply _withdraw_excavate_hero_reply = 13;
    if (has__withdraw_excavate_hero_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_withdraw_excavate_hero_reply());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void excavate_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const excavate_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const excavate_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void excavate_reply::MergeFrom(const excavate_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__search_excavate_reply()) {
      mutable__search_excavate_reply()->::client_baseserver::search_excavate_reply::MergeFrom(from._search_excavate_reply());
    }
    if (from.has__query_excavate_data_reply()) {
      mutable__query_excavate_data_reply()->::client_baseserver::query_excavate_data_reply::MergeFrom(from._query_excavate_data_reply());
    }
    if (from.has__query_excavate_history_reply()) {
      mutable__query_excavate_history_reply()->::client_baseserver::query_excavate_history_reply::MergeFrom(from._query_excavate_history_reply());
    }
    if (from.has__query_excavate_battle_reply()) {
      mutable__query_excavate_battle_reply()->::client_baseserver::query_excavate_battle_reply::MergeFrom(from._query_excavate_battle_reply());
    }
    if (from.has__set_excavate_team_reply()) {
      mutable__set_excavate_team_reply()->::client_baseserver::set_excavate_team_reply::MergeFrom(from._set_excavate_team_reply());
    }
    if (from.has__excavate_start_battle_reply()) {
      mutable__excavate_start_battle_reply()->::client_baseserver::excavate_start_battle_reply::MergeFrom(from._excavate_start_battle_reply());
    }
    if (from.has__excavate_end_battle_reply()) {
      mutable__excavate_end_battle_reply()->::client_baseserver::excavate_end_battle_reply::MergeFrom(from._excavate_end_battle_reply());
    }
    if (from.has__query_excavate_def_reply()) {
      mutable__query_excavate_def_reply()->::client_baseserver::query_excavate_def_reply::MergeFrom(from._query_excavate_def_reply());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has__clear_excavate_battle_reply()) {
      mutable__clear_excavate_battle_reply()->::client_baseserver::clear_excavate_battle_reply::MergeFrom(from._clear_excavate_battle_reply());
    }
    if (from.has__draw_excavate_def_rwd_reply()) {
      mutable__draw_excavate_def_rwd_reply()->::client_baseserver::draw_excavate_def_rwd_reply::MergeFrom(from._draw_excavate_def_rwd_reply());
    }
    if (from.has__revenge_excavate_reply()) {
      mutable__revenge_excavate_reply()->::client_baseserver::revenge_excavate_reply::MergeFrom(from._revenge_excavate_reply());
    }
    if (from.has__draw_excav_res_reply()) {
      mutable__draw_excav_res_reply()->::client_baseserver::draw_excav_res_reply::MergeFrom(from._draw_excav_res_reply());
    }
    if (from.has__withdraw_excavate_hero_reply()) {
      mutable__withdraw_excavate_hero_reply()->::client_baseserver::withdraw_excavate_hero_reply::MergeFrom(from._withdraw_excavate_hero_reply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void excavate_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void excavate_reply::CopyFrom(const excavate_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool excavate_reply::IsInitialized() const {

  if (has__search_excavate_reply()) {
    if (!this->_search_excavate_reply().IsInitialized()) return false;
  }
  if (has__query_excavate_data_reply()) {
    if (!this->_query_excavate_data_reply().IsInitialized()) return false;
  }
  if (has__query_excavate_history_reply()) {
    if (!this->_query_excavate_history_reply().IsInitialized()) return false;
  }
  if (has__query_excavate_battle_reply()) {
    if (!this->_query_excavate_battle_reply().IsInitialized()) return false;
  }
  if (has__set_excavate_team_reply()) {
    if (!this->_set_excavate_team_reply().IsInitialized()) return false;
  }
  if (has__excavate_start_battle_reply()) {
    if (!this->_excavate_start_battle_reply().IsInitialized()) return false;
  }
  if (has__excavate_end_battle_reply()) {
    if (!this->_excavate_end_battle_reply().IsInitialized()) return false;
  }
  if (has__query_excavate_def_reply()) {
    if (!this->_query_excavate_def_reply().IsInitialized()) return false;
  }
  if (has__clear_excavate_battle_reply()) {
    if (!this->_clear_excavate_battle_reply().IsInitialized()) return false;
  }
  if (has__draw_excavate_def_rwd_reply()) {
    if (!this->_draw_excavate_def_rwd_reply().IsInitialized()) return false;
  }
  if (has__revenge_excavate_reply()) {
    if (!this->_revenge_excavate_reply().IsInitialized()) return false;
  }
  if (has__draw_excav_res_reply()) {
    if (!this->_draw_excav_res_reply().IsInitialized()) return false;
  }
  if (has__withdraw_excavate_hero_reply()) {
    if (!this->_withdraw_excavate_hero_reply().IsInitialized()) return false;
  }
  return true;
}

void excavate_reply::Swap(excavate_reply* other) {
  if (other != this) {
    std::swap(_search_excavate_reply_, other->_search_excavate_reply_);
    std::swap(_query_excavate_data_reply_, other->_query_excavate_data_reply_);
    std::swap(_query_excavate_history_reply_, other->_query_excavate_history_reply_);
    std::swap(_query_excavate_battle_reply_, other->_query_excavate_battle_reply_);
    std::swap(_set_excavate_team_reply_, other->_set_excavate_team_reply_);
    std::swap(_excavate_start_battle_reply_, other->_excavate_start_battle_reply_);
    std::swap(_excavate_end_battle_reply_, other->_excavate_end_battle_reply_);
    std::swap(_query_excavate_def_reply_, other->_query_excavate_def_reply_);
    std::swap(_clear_excavate_battle_reply_, other->_clear_excavate_battle_reply_);
    std::swap(_draw_excavate_def_rwd_reply_, other->_draw_excavate_def_rwd_reply_);
    std::swap(_revenge_excavate_reply_, other->_revenge_excavate_reply_);
    std::swap(_draw_excav_res_reply_, other->_draw_excav_res_reply_);
    std::swap(_withdraw_excavate_hero_reply_, other->_withdraw_excavate_hero_reply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata excavate_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = excavate_reply_descriptor_;
  metadata.reflection = excavate_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int revenge_excavate_reply::kExcavateFieldNumber;
#endif  // !_MSC_VER

revenge_excavate_reply::revenge_excavate_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.revenge_excavate_reply)
}

void revenge_excavate_reply::InitAsDefaultInstance() {
  _excavate_ = const_cast< ::client_baseserver::excavate*>(&::client_baseserver::excavate::default_instance());
}

revenge_excavate_reply::revenge_excavate_reply(const revenge_excavate_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.revenge_excavate_reply)
}

void revenge_excavate_reply::SharedCtor() {
  _cached_size_ = 0;
  _excavate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

revenge_excavate_reply::~revenge_excavate_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.revenge_excavate_reply)
  SharedDtor();
}

void revenge_excavate_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _excavate_;
  }
}

void revenge_excavate_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* revenge_excavate_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return revenge_excavate_reply_descriptor_;
}

const revenge_excavate_reply& revenge_excavate_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

revenge_excavate_reply* revenge_excavate_reply::default_instance_ = NULL;

revenge_excavate_reply* revenge_excavate_reply::New() const {
  return new revenge_excavate_reply;
}

void revenge_excavate_reply::Clear() {
  if (has__excavate()) {
    if (_excavate_ != NULL) _excavate_->::client_baseserver::excavate::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool revenge_excavate_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.revenge_excavate_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_baseserver.excavate _excavate = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__excavate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.revenge_excavate_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.revenge_excavate_reply)
  return false;
#undef DO_
}

void revenge_excavate_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.revenge_excavate_reply)
  // optional .client_baseserver.excavate _excavate = 1;
  if (has__excavate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_excavate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.revenge_excavate_reply)
}

::google::protobuf::uint8* revenge_excavate_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.revenge_excavate_reply)
  // optional .client_baseserver.excavate _excavate = 1;
  if (has__excavate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_excavate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.revenge_excavate_reply)
  return target;
}

int revenge_excavate_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_baseserver.excavate _excavate = 1;
    if (has__excavate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_excavate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void revenge_excavate_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const revenge_excavate_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const revenge_excavate_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void revenge_excavate_reply::MergeFrom(const revenge_excavate_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__excavate()) {
      mutable__excavate()->::client_baseserver::excavate::MergeFrom(from._excavate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void revenge_excavate_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void revenge_excavate_reply::CopyFrom(const revenge_excavate_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool revenge_excavate_reply::IsInitialized() const {

  if (has__excavate()) {
    if (!this->_excavate().IsInitialized()) return false;
  }
  return true;
}

void revenge_excavate_reply::Swap(revenge_excavate_reply* other) {
  if (other != this) {
    std::swap(_excavate_, other->_excavate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata revenge_excavate_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = revenge_excavate_reply_descriptor_;
  metadata.reflection = revenge_excavate_reply_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* search_excavate_reply_search_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return search_excavate_reply_search_result_descriptor_;
}
bool search_excavate_reply_search_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const search_excavate_reply_search_result search_excavate_reply::success;
const search_excavate_reply_search_result search_excavate_reply::failed;
const search_excavate_reply_search_result search_excavate_reply::lack_money;
const search_excavate_reply_search_result search_excavate_reply::search_result_MIN;
const search_excavate_reply_search_result search_excavate_reply::search_result_MAX;
const int search_excavate_reply::search_result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int search_excavate_reply::kResultFieldNumber;
const int search_excavate_reply::kExcavateFieldNumber;
#endif  // !_MSC_VER

search_excavate_reply::search_excavate_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.search_excavate_reply)
}

void search_excavate_reply::InitAsDefaultInstance() {
  _excavate_ = const_cast< ::client_baseserver::excavate*>(&::client_baseserver::excavate::default_instance());
}

search_excavate_reply::search_excavate_reply(const search_excavate_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.search_excavate_reply)
}

void search_excavate_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _excavate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

search_excavate_reply::~search_excavate_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.search_excavate_reply)
  SharedDtor();
}

void search_excavate_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _excavate_;
  }
}

void search_excavate_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* search_excavate_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return search_excavate_reply_descriptor_;
}

const search_excavate_reply& search_excavate_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

search_excavate_reply* search_excavate_reply::default_instance_ = NULL;

search_excavate_reply* search_excavate_reply::New() const {
  return new search_excavate_reply;
}

void search_excavate_reply::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _result_ = 0;
    if (has__excavate()) {
      if (_excavate_ != NULL) _excavate_->::client_baseserver::excavate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool search_excavate_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.search_excavate_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.search_excavate_reply.search_result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::search_excavate_reply_search_result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::search_excavate_reply_search_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__excavate;
        break;
      }

      // optional .client_baseserver.excavate _excavate = 2;
      case 2: {
        if (tag == 18) {
         parse__excavate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__excavate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.search_excavate_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.search_excavate_reply)
  return false;
#undef DO_
}

void search_excavate_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.search_excavate_reply)
  // required .client_baseserver.search_excavate_reply.search_result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // optional .client_baseserver.excavate _excavate = 2;
  if (has__excavate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_excavate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.search_excavate_reply)
}

::google::protobuf::uint8* search_excavate_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.search_excavate_reply)
  // required .client_baseserver.search_excavate_reply.search_result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // optional .client_baseserver.excavate _excavate = 2;
  if (has__excavate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_excavate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.search_excavate_reply)
  return target;
}

int search_excavate_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.search_excavate_reply.search_result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional .client_baseserver.excavate _excavate = 2;
    if (has__excavate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_excavate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void search_excavate_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const search_excavate_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const search_excavate_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void search_excavate_reply::MergeFrom(const search_excavate_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__excavate()) {
      mutable__excavate()->::client_baseserver::excavate::MergeFrom(from._excavate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void search_excavate_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void search_excavate_reply::CopyFrom(const search_excavate_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool search_excavate_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__excavate()) {
    if (!this->_excavate().IsInitialized()) return false;
  }
  return true;
}

void search_excavate_reply::Swap(search_excavate_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_excavate_, other->_excavate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata search_excavate_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = search_excavate_reply_descriptor_;
  metadata.reflection = search_excavate_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int query_excavate_data_reply::kExcavateFieldNumber;
const int query_excavate_data_reply::kSearchedIdFieldNumber;
const int query_excavate_data_reply::kSearchTimesFieldNumber;
const int query_excavate_data_reply::kLastSearchTsFieldNumber;
const int query_excavate_data_reply::kAttackingIdFieldNumber;
const int query_excavate_data_reply::kBatHeroesFieldNumber;
const int query_excavate_data_reply::kCfgFieldNumber;
const int query_excavate_data_reply::kHireFieldNumber;
#endif  // !_MSC_VER

query_excavate_data_reply::query_excavate_data_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.query_excavate_data_reply)
}

void query_excavate_data_reply::InitAsDefaultInstance() {
  _cfg_ = const_cast< ::client_baseserver::excavate_cfg*>(&::client_baseserver::excavate_cfg::default_instance());
  _hire_ = const_cast< ::client_baseserver::hire_data*>(&::client_baseserver::hire_data::default_instance());
}

query_excavate_data_reply::query_excavate_data_reply(const query_excavate_data_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.query_excavate_data_reply)
}

void query_excavate_data_reply::SharedCtor() {
  _cached_size_ = 0;
  _searched_id_ = 0u;
  _search_times_ = 0u;
  _last_search_ts_ = 0u;
  _attacking_id_ = 0u;
  _cfg_ = NULL;
  _hire_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_excavate_data_reply::~query_excavate_data_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.query_excavate_data_reply)
  SharedDtor();
}

void query_excavate_data_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _cfg_;
    delete _hire_;
  }
}

void query_excavate_data_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_excavate_data_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_excavate_data_reply_descriptor_;
}

const query_excavate_data_reply& query_excavate_data_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

query_excavate_data_reply* query_excavate_data_reply::default_instance_ = NULL;

query_excavate_data_reply* query_excavate_data_reply::New() const {
  return new query_excavate_data_reply;
}

void query_excavate_data_reply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<query_excavate_data_reply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 222) {
    ZR_(_searched_id_, _attacking_id_);
    if (has__cfg()) {
      if (_cfg_ != NULL) _cfg_->::client_baseserver::excavate_cfg::Clear();
    }
    if (has__hire()) {
      if (_hire_ != NULL) _hire_->::client_baseserver::hire_data::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _excavate_.Clear();
  _bat_heroes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_excavate_data_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.query_excavate_data_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.excavate _excavate = 1;
      case 1: {
        if (tag == 10) {
         parse__excavate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__excavate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__excavate;
        if (input->ExpectTag(16)) goto parse__searched_id;
        break;
      }

      // required uint32 _searched_id = 2;
      case 2: {
        if (tag == 16) {
         parse__searched_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_searched_id_)));
          set_has__searched_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__search_times;
        break;
      }

      // required uint32 _search_times = 3;
      case 3: {
        if (tag == 24) {
         parse__search_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_search_times_)));
          set_has__search_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__last_search_ts;
        break;
      }

      // required uint32 _last_search_ts = 4;
      case 4: {
        if (tag == 32) {
         parse__last_search_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_last_search_ts_)));
          set_has__last_search_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__attacking_id;
        break;
      }

      // optional uint32 _attacking_id = 5;
      case 5: {
        if (tag == 40) {
         parse__attacking_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_attacking_id_)));
          set_has__attacking_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse__bat_heroes;
        break;
      }

      // repeated .client_baseserver.excavate_self_hero _bat_heroes = 6;
      case 6: {
        if (tag == 50) {
         parse__bat_heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__bat_heroes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse__bat_heroes;
        if (input->ExpectTag(58)) goto parse__cfg;
        break;
      }

      // optional .client_baseserver.excavate_cfg _cfg = 7;
      case 7: {
        if (tag == 58) {
         parse__cfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__cfg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse__hire;
        break;
      }

      // optional .client_baseserver.hire_data _hire = 8;
      case 8: {
        if (tag == 66) {
         parse__hire:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__hire()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.query_excavate_data_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.query_excavate_data_reply)
  return false;
#undef DO_
}

void query_excavate_data_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.query_excavate_data_reply)
  // repeated .client_baseserver.excavate _excavate = 1;
  for (int i = 0; i < this->_excavate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_excavate(i), output);
  }

  // required uint32 _searched_id = 2;
  if (has__searched_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_searched_id(), output);
  }

  // required uint32 _search_times = 3;
  if (has__search_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_search_times(), output);
  }

  // required uint32 _last_search_ts = 4;
  if (has__last_search_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_last_search_ts(), output);
  }

  // optional uint32 _attacking_id = 5;
  if (has__attacking_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_attacking_id(), output);
  }

  // repeated .client_baseserver.excavate_self_hero _bat_heroes = 6;
  for (int i = 0; i < this->_bat_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_bat_heroes(i), output);
  }

  // optional .client_baseserver.excavate_cfg _cfg = 7;
  if (has__cfg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_cfg(), output);
  }

  // optional .client_baseserver.hire_data _hire = 8;
  if (has__hire()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_hire(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.query_excavate_data_reply)
}

::google::protobuf::uint8* query_excavate_data_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.query_excavate_data_reply)
  // repeated .client_baseserver.excavate _excavate = 1;
  for (int i = 0; i < this->_excavate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_excavate(i), target);
  }

  // required uint32 _searched_id = 2;
  if (has__searched_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_searched_id(), target);
  }

  // required uint32 _search_times = 3;
  if (has__search_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_search_times(), target);
  }

  // required uint32 _last_search_ts = 4;
  if (has__last_search_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_last_search_ts(), target);
  }

  // optional uint32 _attacking_id = 5;
  if (has__attacking_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_attacking_id(), target);
  }

  // repeated .client_baseserver.excavate_self_hero _bat_heroes = 6;
  for (int i = 0; i < this->_bat_heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->_bat_heroes(i), target);
  }

  // optional .client_baseserver.excavate_cfg _cfg = 7;
  if (has__cfg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->_cfg(), target);
  }

  // optional .client_baseserver.hire_data _hire = 8;
  if (has__hire()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->_hire(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.query_excavate_data_reply)
  return target;
}

int query_excavate_data_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 _searched_id = 2;
    if (has__searched_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_searched_id());
    }

    // required uint32 _search_times = 3;
    if (has__search_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_search_times());
    }

    // required uint32 _last_search_ts = 4;
    if (has__last_search_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_last_search_ts());
    }

    // optional uint32 _attacking_id = 5;
    if (has__attacking_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_attacking_id());
    }

    // optional .client_baseserver.excavate_cfg _cfg = 7;
    if (has__cfg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_cfg());
    }

    // optional .client_baseserver.hire_data _hire = 8;
    if (has__hire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_hire());
    }

  }
  // repeated .client_baseserver.excavate _excavate = 1;
  total_size += 1 * this->_excavate_size();
  for (int i = 0; i < this->_excavate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_excavate(i));
  }

  // repeated .client_baseserver.excavate_self_hero _bat_heroes = 6;
  total_size += 1 * this->_bat_heroes_size();
  for (int i = 0; i < this->_bat_heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_bat_heroes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_excavate_data_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_excavate_data_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_excavate_data_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_excavate_data_reply::MergeFrom(const query_excavate_data_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _excavate_.MergeFrom(from._excavate_);
  _bat_heroes_.MergeFrom(from._bat_heroes_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__searched_id()) {
      set__searched_id(from._searched_id());
    }
    if (from.has__search_times()) {
      set__search_times(from._search_times());
    }
    if (from.has__last_search_ts()) {
      set__last_search_ts(from._last_search_ts());
    }
    if (from.has__attacking_id()) {
      set__attacking_id(from._attacking_id());
    }
    if (from.has__cfg()) {
      mutable__cfg()->::client_baseserver::excavate_cfg::MergeFrom(from._cfg());
    }
    if (from.has__hire()) {
      mutable__hire()->::client_baseserver::hire_data::MergeFrom(from._hire());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_excavate_data_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_excavate_data_reply::CopyFrom(const query_excavate_data_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_excavate_data_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_excavate())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->_bat_heroes())) return false;
  if (has__hire()) {
    if (!this->_hire().IsInitialized()) return false;
  }
  return true;
}

void query_excavate_data_reply::Swap(query_excavate_data_reply* other) {
  if (other != this) {
    _excavate_.Swap(&other->_excavate_);
    std::swap(_searched_id_, other->_searched_id_);
    std::swap(_search_times_, other->_search_times_);
    std::swap(_last_search_ts_, other->_last_search_ts_);
    std::swap(_attacking_id_, other->_attacking_id_);
    _bat_heroes_.Swap(&other->_bat_heroes_);
    std::swap(_cfg_, other->_cfg_);
    std::swap(_hire_, other->_hire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_excavate_data_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_excavate_data_reply_descriptor_;
  metadata.reflection = query_excavate_data_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int excavate_self_hero::kHeroIdFieldNumber;
const int excavate_self_hero::kDynaFieldNumber;
#endif  // !_MSC_VER

excavate_self_hero::excavate_self_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.excavate_self_hero)
}

void excavate_self_hero::InitAsDefaultInstance() {
  _dyna_ = const_cast< ::client_baseserver::hero_dyna*>(&::client_baseserver::hero_dyna::default_instance());
}

excavate_self_hero::excavate_self_hero(const excavate_self_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.excavate_self_hero)
}

void excavate_self_hero::SharedCtor() {
  _cached_size_ = 0;
  _hero_id_ = 0u;
  _dyna_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

excavate_self_hero::~excavate_self_hero() {
  // @@protoc_insertion_point(destructor:client_baseserver.excavate_self_hero)
  SharedDtor();
}

void excavate_self_hero::SharedDtor() {
  if (this != default_instance_) {
    delete _dyna_;
  }
}

void excavate_self_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* excavate_self_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return excavate_self_hero_descriptor_;
}

const excavate_self_hero& excavate_self_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

excavate_self_hero* excavate_self_hero::default_instance_ = NULL;

excavate_self_hero* excavate_self_hero::New() const {
  return new excavate_self_hero;
}

void excavate_self_hero::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _hero_id_ = 0u;
    if (has__dyna()) {
      if (_dyna_ != NULL) _dyna_->::client_baseserver::hero_dyna::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool excavate_self_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.excavate_self_hero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _hero_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_hero_id_)));
          set_has__hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__dyna;
        break;
      }

      // required .client_baseserver.hero_dyna _dyna = 2;
      case 2: {
        if (tag == 18) {
         parse__dyna:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__dyna()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.excavate_self_hero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.excavate_self_hero)
  return false;
#undef DO_
}

void excavate_self_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.excavate_self_hero)
  // required uint32 _hero_id = 1;
  if (has__hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_hero_id(), output);
  }

  // required .client_baseserver.hero_dyna _dyna = 2;
  if (has__dyna()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_dyna(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.excavate_self_hero)
}

::google::protobuf::uint8* excavate_self_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.excavate_self_hero)
  // required uint32 _hero_id = 1;
  if (has__hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_hero_id(), target);
  }

  // required .client_baseserver.hero_dyna _dyna = 2;
  if (has__dyna()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_dyna(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.excavate_self_hero)
  return target;
}

int excavate_self_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _hero_id = 1;
    if (has__hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_hero_id());
    }

    // required .client_baseserver.hero_dyna _dyna = 2;
    if (has__dyna()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_dyna());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void excavate_self_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const excavate_self_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const excavate_self_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void excavate_self_hero::MergeFrom(const excavate_self_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__hero_id()) {
      set__hero_id(from._hero_id());
    }
    if (from.has__dyna()) {
      mutable__dyna()->::client_baseserver::hero_dyna::MergeFrom(from._dyna());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void excavate_self_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void excavate_self_hero::CopyFrom(const excavate_self_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool excavate_self_hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has__dyna()) {
    if (!this->_dyna().IsInitialized()) return false;
  }
  return true;
}

void excavate_self_hero::Swap(excavate_self_hero* other) {
  if (other != this) {
    std::swap(_hero_id_, other->_hero_id_);
    std::swap(_dyna_, other->_dyna_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata excavate_self_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = excavate_self_hero_descriptor_;
  metadata.reflection = excavate_self_hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int excavate_cfg::kAttackTimeoutFieldNumber;
#endif  // !_MSC_VER

excavate_cfg::excavate_cfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.excavate_cfg)
}

void excavate_cfg::InitAsDefaultInstance() {
}

excavate_cfg::excavate_cfg(const excavate_cfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.excavate_cfg)
}

void excavate_cfg::SharedCtor() {
  _cached_size_ = 0;
  _attack_timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

excavate_cfg::~excavate_cfg() {
  // @@protoc_insertion_point(destructor:client_baseserver.excavate_cfg)
  SharedDtor();
}

void excavate_cfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void excavate_cfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* excavate_cfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return excavate_cfg_descriptor_;
}

const excavate_cfg& excavate_cfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

excavate_cfg* excavate_cfg::default_instance_ = NULL;

excavate_cfg* excavate_cfg::New() const {
  return new excavate_cfg;
}

void excavate_cfg::Clear() {
  _attack_timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool excavate_cfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.excavate_cfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 _attack_timeout = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_attack_timeout_)));
          set_has__attack_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.excavate_cfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.excavate_cfg)
  return false;
#undef DO_
}

void excavate_cfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.excavate_cfg)
  // optional uint32 _attack_timeout = 1;
  if (has__attack_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_attack_timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.excavate_cfg)
}

::google::protobuf::uint8* excavate_cfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.excavate_cfg)
  // optional uint32 _attack_timeout = 1;
  if (has__attack_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_attack_timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.excavate_cfg)
  return target;
}

int excavate_cfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 _attack_timeout = 1;
    if (has__attack_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_attack_timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void excavate_cfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const excavate_cfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const excavate_cfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void excavate_cfg::MergeFrom(const excavate_cfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__attack_timeout()) {
      set__attack_timeout(from._attack_timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void excavate_cfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void excavate_cfg::CopyFrom(const excavate_cfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool excavate_cfg::IsInitialized() const {

  return true;
}

void excavate_cfg::Swap(excavate_cfg* other) {
  if (other != this) {
    std::swap(_attack_timeout_, other->_attack_timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata excavate_cfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = excavate_cfg_descriptor_;
  metadata.reflection = excavate_cfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int excavate_team::kTeamIdFieldNumber;
const int excavate_team::kPlayerFieldNumber;
const int excavate_team::kHeroBasesFieldNumber;
const int excavate_team::kHeroDynasFieldNumber;
const int excavate_team::kResGotFieldNumber;
const int excavate_team::kSvrIdFieldNumber;
const int excavate_team::kDisplaySvrIdFieldNumber;
const int excavate_team::kSvrNameFieldNumber;
const int excavate_team::kTeamGsFieldNumber;
const int excavate_team::kSpeedFieldNumber;
const int excavate_team::kRobbedFieldNumber;
#endif  // !_MSC_VER

excavate_team::excavate_team()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.excavate_team)
}

void excavate_team::InitAsDefaultInstance() {
  _player_ = const_cast< ::client_baseserver::user_summary*>(&::client_baseserver::user_summary::default_instance());
}

excavate_team::excavate_team(const excavate_team& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.excavate_team)
}

void excavate_team::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _team_id_ = 0u;
  _player_ = NULL;
  _res_got_ = 0u;
  _svr_id_ = 0u;
  _display_svr_id_ = 0u;
  _svr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _team_gs_ = 0u;
  _speed_ = 0u;
  _robbed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

excavate_team::~excavate_team() {
  // @@protoc_insertion_point(destructor:client_baseserver.excavate_team)
  SharedDtor();
}

void excavate_team::SharedDtor() {
  if (_svr_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _svr_name_;
  }
  if (this != default_instance_) {
    delete _player_;
  }
}

void excavate_team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* excavate_team::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return excavate_team_descriptor_;
}

const excavate_team& excavate_team::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

excavate_team* excavate_team::default_instance_ = NULL;

excavate_team* excavate_team::New() const {
  return new excavate_team;
}

void excavate_team::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<excavate_team*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 243) {
    ZR_(_team_id_, _res_got_);
    ZR_(_svr_id_, _display_svr_id_);
    if (has__player()) {
      if (_player_ != NULL) _player_->::client_baseserver::user_summary::Clear();
    }
    if (has__svr_name()) {
      if (_svr_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _svr_name_->clear();
      }
    }
  }
  ZR_(_team_gs_, _robbed_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  _hero_bases_.Clear();
  _hero_dynas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool excavate_team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.excavate_team)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _team_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_team_id_)));
          set_has__team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__player;
        break;
      }

      // optional .client_baseserver.user_summary _player = 2;
      case 2: {
        if (tag == 18) {
         parse__player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__hero_bases;
        break;
      }

      // repeated .client_baseserver.hero_summary _hero_bases = 3;
      case 3: {
        if (tag == 26) {
         parse__hero_bases:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__hero_bases()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__hero_bases;
        if (input->ExpectTag(34)) goto parse__hero_dynas;
        break;
      }

      // repeated .client_baseserver.hero_dyna _hero_dynas = 4;
      case 4: {
        if (tag == 34) {
         parse__hero_dynas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__hero_dynas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__hero_dynas;
        if (input->ExpectTag(40)) goto parse__res_got;
        break;
      }

      // required uint32 _res_got = 5;
      case 5: {
        if (tag == 40) {
         parse__res_got:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_res_got_)));
          set_has__res_got();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse__svr_id;
        break;
      }

      // optional uint32 _svr_id = 6;
      case 6: {
        if (tag == 48) {
         parse__svr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_svr_id_)));
          set_has__svr_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse__display_svr_id;
        break;
      }

      // optional uint32 _display_svr_id = 7;
      case 7: {
        if (tag == 56) {
         parse__display_svr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_display_svr_id_)));
          set_has__display_svr_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse__svr_name;
        break;
      }

      // optional string _svr_name = 8;
      case 8: {
        if (tag == 66) {
         parse__svr_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__svr_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_svr_name().data(), this->_svr_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_svr_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse__team_gs;
        break;
      }

      // optional uint32 _team_gs = 9;
      case 9: {
        if (tag == 72) {
         parse__team_gs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_team_gs_)));
          set_has__team_gs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse__speed;
        break;
      }

      // optional uint32 _speed = 10;
      case 10: {
        if (tag == 80) {
         parse__speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_speed_)));
          set_has__speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse__robbed;
        break;
      }

      // optional uint32 _robbed = 11;
      case 11: {
        if (tag == 88) {
         parse__robbed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_robbed_)));
          set_has__robbed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.excavate_team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.excavate_team)
  return false;
#undef DO_
}

void excavate_team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.excavate_team)
  // required uint32 _team_id = 1;
  if (has__team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_team_id(), output);
  }

  // optional .client_baseserver.user_summary _player = 2;
  if (has__player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_player(), output);
  }

  // repeated .client_baseserver.hero_summary _hero_bases = 3;
  for (int i = 0; i < this->_hero_bases_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_hero_bases(i), output);
  }

  // repeated .client_baseserver.hero_dyna _hero_dynas = 4;
  for (int i = 0; i < this->_hero_dynas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_hero_dynas(i), output);
  }

  // required uint32 _res_got = 5;
  if (has__res_got()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_res_got(), output);
  }

  // optional uint32 _svr_id = 6;
  if (has__svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_svr_id(), output);
  }

  // optional uint32 _display_svr_id = 7;
  if (has__display_svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->_display_svr_id(), output);
  }

  // optional string _svr_name = 8;
  if (has__svr_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_svr_name().data(), this->_svr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_svr_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->_svr_name(), output);
  }

  // optional uint32 _team_gs = 9;
  if (has__team_gs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->_team_gs(), output);
  }

  // optional uint32 _speed = 10;
  if (has__speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->_speed(), output);
  }

  // optional uint32 _robbed = 11;
  if (has__robbed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->_robbed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.excavate_team)
}

::google::protobuf::uint8* excavate_team::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.excavate_team)
  // required uint32 _team_id = 1;
  if (has__team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_team_id(), target);
  }

  // optional .client_baseserver.user_summary _player = 2;
  if (has__player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_player(), target);
  }

  // repeated .client_baseserver.hero_summary _hero_bases = 3;
  for (int i = 0; i < this->_hero_bases_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_hero_bases(i), target);
  }

  // repeated .client_baseserver.hero_dyna _hero_dynas = 4;
  for (int i = 0; i < this->_hero_dynas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_hero_dynas(i), target);
  }

  // required uint32 _res_got = 5;
  if (has__res_got()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_res_got(), target);
  }

  // optional uint32 _svr_id = 6;
  if (has__svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_svr_id(), target);
  }

  // optional uint32 _display_svr_id = 7;
  if (has__display_svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->_display_svr_id(), target);
  }

  // optional string _svr_name = 8;
  if (has__svr_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_svr_name().data(), this->_svr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_svr_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->_svr_name(), target);
  }

  // optional uint32 _team_gs = 9;
  if (has__team_gs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->_team_gs(), target);
  }

  // optional uint32 _speed = 10;
  if (has__speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->_speed(), target);
  }

  // optional uint32 _robbed = 11;
  if (has__robbed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->_robbed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.excavate_team)
  return target;
}

int excavate_team::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _team_id = 1;
    if (has__team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_team_id());
    }

    // optional .client_baseserver.user_summary _player = 2;
    if (has__player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_player());
    }

    // required uint32 _res_got = 5;
    if (has__res_got()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_res_got());
    }

    // optional uint32 _svr_id = 6;
    if (has__svr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_svr_id());
    }

    // optional uint32 _display_svr_id = 7;
    if (has__display_svr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_display_svr_id());
    }

    // optional string _svr_name = 8;
    if (has__svr_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_svr_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 _team_gs = 9;
    if (has__team_gs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_team_gs());
    }

    // optional uint32 _speed = 10;
    if (has__speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_speed());
    }

    // optional uint32 _robbed = 11;
    if (has__robbed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_robbed());
    }

  }
  // repeated .client_baseserver.hero_summary _hero_bases = 3;
  total_size += 1 * this->_hero_bases_size();
  for (int i = 0; i < this->_hero_bases_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_hero_bases(i));
  }

  // repeated .client_baseserver.hero_dyna _hero_dynas = 4;
  total_size += 1 * this->_hero_dynas_size();
  for (int i = 0; i < this->_hero_dynas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_hero_dynas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void excavate_team::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const excavate_team* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const excavate_team*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void excavate_team::MergeFrom(const excavate_team& from) {
  GOOGLE_CHECK_NE(&from, this);
  _hero_bases_.MergeFrom(from._hero_bases_);
  _hero_dynas_.MergeFrom(from._hero_dynas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__team_id()) {
      set__team_id(from._team_id());
    }
    if (from.has__player()) {
      mutable__player()->::client_baseserver::user_summary::MergeFrom(from._player());
    }
    if (from.has__res_got()) {
      set__res_got(from._res_got());
    }
    if (from.has__svr_id()) {
      set__svr_id(from._svr_id());
    }
    if (from.has__display_svr_id()) {
      set__display_svr_id(from._display_svr_id());
    }
    if (from.has__svr_name()) {
      set__svr_name(from._svr_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has__team_gs()) {
      set__team_gs(from._team_gs());
    }
    if (from.has__speed()) {
      set__speed(from._speed());
    }
    if (from.has__robbed()) {
      set__robbed(from._robbed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void excavate_team::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void excavate_team::CopyFrom(const excavate_team& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool excavate_team::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;

  if (has__player()) {
    if (!this->_player().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->_hero_bases())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->_hero_dynas())) return false;
  return true;
}

void excavate_team::Swap(excavate_team* other) {
  if (other != this) {
    std::swap(_team_id_, other->_team_id_);
    std::swap(_player_, other->_player_);
    _hero_bases_.Swap(&other->_hero_bases_);
    _hero_dynas_.Swap(&other->_hero_dynas_);
    std::swap(_res_got_, other->_res_got_);
    std::swap(_svr_id_, other->_svr_id_);
    std::swap(_display_svr_id_, other->_display_svr_id_);
    std::swap(_svr_name_, other->_svr_name_);
    std::swap(_team_gs_, other->_team_gs_);
    std::swap(_speed_, other->_speed_);
    std::swap(_robbed_, other->_robbed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata excavate_team::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = excavate_team_descriptor_;
  metadata.reflection = excavate_team_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* excavate_owner_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return excavate_owner_descriptor_;
}
bool excavate_owner_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const excavate_owner excavate::mine;
const excavate_owner excavate::others;
const excavate_owner excavate::robot;
const excavate_owner excavate::owner_MIN;
const excavate_owner excavate::owner_MAX;
const int excavate::owner_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* excavate_state_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return excavate_state_descriptor_;
}
bool excavate_state_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const excavate_state excavate::searched;
const excavate_state excavate::battle;
const excavate_state excavate::shield;
const excavate_state excavate::occupy;
const excavate_state excavate::protect;
const excavate_state excavate::dead;
const excavate_state excavate::state_MIN;
const excavate_state excavate::state_MAX;
const int excavate::state_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int excavate::kOwnerFieldNumber;
const int excavate::kIdFieldNumber;
const int excavate::kTypeIdFieldNumber;
const int excavate::kTeamFieldNumber;
const int excavate::kStateFieldNumber;
const int excavate::kStateEndTsFieldNumber;
const int excavate::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

excavate::excavate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.excavate)
}

void excavate::InitAsDefaultInstance() {
}

excavate::excavate(const excavate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.excavate)
}

void excavate::SharedCtor() {
  _cached_size_ = 0;
  _owner_ = 0;
  _id_ = 0u;
  _type_id_ = 0u;
  _state_ = 1;
  _state_end_ts_ = 0u;
  _create_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

excavate::~excavate() {
  // @@protoc_insertion_point(destructor:client_baseserver.excavate)
  SharedDtor();
}

void excavate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void excavate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* excavate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return excavate_descriptor_;
}

const excavate& excavate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

excavate* excavate::default_instance_ = NULL;

excavate* excavate::New() const {
  return new excavate;
}

void excavate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<excavate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 119) {
    ZR_(_owner_, _id_);
    ZR_(_state_end_ts_, _create_time_);
    _type_id_ = 0u;
    _state_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _team_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool excavate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.excavate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.excavate.owner _owner = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::excavate_owner_IsValid(value)) {
            set__owner(static_cast< ::client_baseserver::excavate_owner >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__id;
        break;
      }

      // required uint32 _id = 2;
      case 2: {
        if (tag == 16) {
         parse__id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_id_)));
          set_has__id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__type_id;
        break;
      }

      // required uint32 _type_id = 3;
      case 3: {
        if (tag == 24) {
         parse__type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_type_id_)));
          set_has__type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__team;
        break;
      }

      // repeated .client_baseserver.excavate_team _team = 4;
      case 4: {
        if (tag == 34) {
         parse__team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__team;
        if (input->ExpectTag(40)) goto parse__state;
        break;
      }

      // required .client_baseserver.excavate.state _state = 5;
      case 5: {
        if (tag == 40) {
         parse__state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::excavate_state_IsValid(value)) {
            set__state(static_cast< ::client_baseserver::excavate_state >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse__state_end_ts;
        break;
      }

      // optional uint32 _state_end_ts = 6;
      case 6: {
        if (tag == 48) {
         parse__state_end_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_state_end_ts_)));
          set_has__state_end_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse__create_time;
        break;
      }

      // optional uint32 _create_time = 7;
      case 7: {
        if (tag == 56) {
         parse__create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_create_time_)));
          set_has__create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.excavate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.excavate)
  return false;
#undef DO_
}

void excavate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.excavate)
  // required .client_baseserver.excavate.owner _owner = 1;
  if (has__owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_owner(), output);
  }

  // required uint32 _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_id(), output);
  }

  // required uint32 _type_id = 3;
  if (has__type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_type_id(), output);
  }

  // repeated .client_baseserver.excavate_team _team = 4;
  for (int i = 0; i < this->_team_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_team(i), output);
  }

  // required .client_baseserver.excavate.state _state = 5;
  if (has__state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->_state(), output);
  }

  // optional uint32 _state_end_ts = 6;
  if (has__state_end_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_state_end_ts(), output);
  }

  // optional uint32 _create_time = 7;
  if (has__create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->_create_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.excavate)
}

::google::protobuf::uint8* excavate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.excavate)
  // required .client_baseserver.excavate.owner _owner = 1;
  if (has__owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_owner(), target);
  }

  // required uint32 _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_id(), target);
  }

  // required uint32 _type_id = 3;
  if (has__type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_type_id(), target);
  }

  // repeated .client_baseserver.excavate_team _team = 4;
  for (int i = 0; i < this->_team_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_team(i), target);
  }

  // required .client_baseserver.excavate.state _state = 5;
  if (has__state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->_state(), target);
  }

  // optional uint32 _state_end_ts = 6;
  if (has__state_end_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_state_end_ts(), target);
  }

  // optional uint32 _create_time = 7;
  if (has__create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->_create_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.excavate)
  return target;
}

int excavate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.excavate.owner _owner = 1;
    if (has__owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_owner());
    }

    // required uint32 _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_id());
    }

    // required uint32 _type_id = 3;
    if (has__type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_type_id());
    }

    // required .client_baseserver.excavate.state _state = 5;
    if (has__state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_state());
    }

    // optional uint32 _state_end_ts = 6;
    if (has__state_end_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_state_end_ts());
    }

    // optional uint32 _create_time = 7;
    if (has__create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_create_time());
    }

  }
  // repeated .client_baseserver.excavate_team _team = 4;
  total_size += 1 * this->_team_size();
  for (int i = 0; i < this->_team_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_team(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void excavate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const excavate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const excavate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void excavate::MergeFrom(const excavate& from) {
  GOOGLE_CHECK_NE(&from, this);
  _team_.MergeFrom(from._team_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__owner()) {
      set__owner(from._owner());
    }
    if (from.has__id()) {
      set__id(from._id());
    }
    if (from.has__type_id()) {
      set__type_id(from._type_id());
    }
    if (from.has__state()) {
      set__state(from._state());
    }
    if (from.has__state_end_ts()) {
      set__state_end_ts(from._state_end_ts());
    }
    if (from.has__create_time()) {
      set__create_time(from._create_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void excavate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void excavate::CopyFrom(const excavate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool excavate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_team())) return false;
  return true;
}

void excavate::Swap(excavate* other) {
  if (other != this) {
    std::swap(_owner_, other->_owner_);
    std::swap(_id_, other->_id_);
    std::swap(_type_id_, other->_type_id_);
    _team_.Swap(&other->_team_);
    std::swap(_state_, other->_state_);
    std::swap(_state_end_ts_, other->_state_end_ts_);
    std::swap(_create_time_, other->_create_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata excavate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = excavate_descriptor_;
  metadata.reflection = excavate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* excavate_history_def_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return excavate_history_def_result_descriptor_;
}
bool excavate_history_def_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const excavate_history_def_result excavate_history::win;
const excavate_history_def_result excavate_history::fail;
const excavate_history_def_result excavate_history::def_result_MIN;
const excavate_history_def_result excavate_history::def_result_MAX;
const int excavate_history::def_result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int excavate_history::kIdFieldNumber;
const int excavate_history::kExcavateIdFieldNumber;
const int excavate_history::kResultFieldNumber;
const int excavate_history::kEnemyNameFieldNumber;
const int excavate_history::kEnemySvridFieldNumber;
const int excavate_history::kEnemySvrnameFieldNumber;
const int excavate_history::kTimeFieldNumber;
const int excavate_history::kVatilityFieldNumber;
const int excavate_history::kRewardFieldNumber;
#endif  // !_MSC_VER

excavate_history::excavate_history()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.excavate_history)
}

void excavate_history::InitAsDefaultInstance() {
}

excavate_history::excavate_history(const excavate_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.excavate_history)
}

void excavate_history::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _excavate_id_ = 0u;
  _result_ = 0;
  _enemy_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _enemy_svrid_ = 0u;
  _enemy_svrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _time_ = 0u;
  _vatility_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

excavate_history::~excavate_history() {
  // @@protoc_insertion_point(destructor:client_baseserver.excavate_history)
  SharedDtor();
}

void excavate_history::SharedDtor() {
  if (_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _id_;
  }
  if (_enemy_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _enemy_name_;
  }
  if (_enemy_svrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _enemy_svrname_;
  }
  if (this != default_instance_) {
  }
}

void excavate_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* excavate_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return excavate_history_descriptor_;
}

const excavate_history& excavate_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

excavate_history* excavate_history::default_instance_ = NULL;

excavate_history* excavate_history::New() const {
  return new excavate_history;
}

void excavate_history::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<excavate_history*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(_excavate_id_, _result_);
    ZR_(_enemy_svrid_, _time_);
    if (has__id()) {
      if (_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _id_->clear();
      }
    }
    if (has__enemy_name()) {
      if (_enemy_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _enemy_name_->clear();
      }
    }
    if (has__enemy_svrname()) {
      if (_enemy_svrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _enemy_svrname_->clear();
      }
    }
    _vatility_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool excavate_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.excavate_history)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_id().data(), this->_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__excavate_id;
        break;
      }

      // required uint32 _excavate_id = 2;
      case 2: {
        if (tag == 16) {
         parse__excavate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_excavate_id_)));
          set_has__excavate_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__result;
        break;
      }

      // required .client_baseserver.excavate_history.def_result _result = 3;
      case 3: {
        if (tag == 24) {
         parse__result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::excavate_history_def_result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::excavate_history_def_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__enemy_name;
        break;
      }

      // required string _enemy_name = 4;
      case 4: {
        if (tag == 34) {
         parse__enemy_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__enemy_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_enemy_name().data(), this->_enemy_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_enemy_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__enemy_svrid;
        break;
      }

      // optional uint32 _enemy_svrid = 5;
      case 5: {
        if (tag == 40) {
         parse__enemy_svrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_enemy_svrid_)));
          set_has__enemy_svrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse__enemy_svrname;
        break;
      }

      // optional string _enemy_svrname = 6;
      case 6: {
        if (tag == 50) {
         parse__enemy_svrname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__enemy_svrname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_enemy_svrname().data(), this->_enemy_svrname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_enemy_svrname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse__time;
        break;
      }

      // required uint32 _time = 7;
      case 7: {
        if (tag == 56) {
         parse__time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_time_)));
          set_has__time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse__vatility;
        break;
      }

      // optional uint32 _vatility = 8;
      case 8: {
        if (tag == 64) {
         parse__vatility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_vatility_)));
          set_has__vatility();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse__reward;
        break;
      }

      // repeated .client_baseserver.excavate_reward _reward = 9;
      case 9: {
        if (tag == 74) {
         parse__reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse__reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.excavate_history)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.excavate_history)
  return false;
#undef DO_
}

void excavate_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.excavate_history)
  // required string _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_id().data(), this->_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->_id(), output);
  }

  // required uint32 _excavate_id = 2;
  if (has__excavate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_excavate_id(), output);
  }

  // required .client_baseserver.excavate_history.def_result _result = 3;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->_result(), output);
  }

  // required string _enemy_name = 4;
  if (has__enemy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_enemy_name().data(), this->_enemy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_enemy_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->_enemy_name(), output);
  }

  // optional uint32 _enemy_svrid = 5;
  if (has__enemy_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_enemy_svrid(), output);
  }

  // optional string _enemy_svrname = 6;
  if (has__enemy_svrname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_enemy_svrname().data(), this->_enemy_svrname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_enemy_svrname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->_enemy_svrname(), output);
  }

  // required uint32 _time = 7;
  if (has__time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->_time(), output);
  }

  // optional uint32 _vatility = 8;
  if (has__vatility()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->_vatility(), output);
  }

  // repeated .client_baseserver.excavate_reward _reward = 9;
  for (int i = 0; i < this->_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.excavate_history)
}

::google::protobuf::uint8* excavate_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.excavate_history)
  // required string _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_id().data(), this->_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_id(), target);
  }

  // required uint32 _excavate_id = 2;
  if (has__excavate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_excavate_id(), target);
  }

  // required .client_baseserver.excavate_history.def_result _result = 3;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->_result(), target);
  }

  // required string _enemy_name = 4;
  if (has__enemy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_enemy_name().data(), this->_enemy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_enemy_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->_enemy_name(), target);
  }

  // optional uint32 _enemy_svrid = 5;
  if (has__enemy_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_enemy_svrid(), target);
  }

  // optional string _enemy_svrname = 6;
  if (has__enemy_svrname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_enemy_svrname().data(), this->_enemy_svrname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_enemy_svrname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->_enemy_svrname(), target);
  }

  // required uint32 _time = 7;
  if (has__time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->_time(), target);
  }

  // optional uint32 _vatility = 8;
  if (has__vatility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->_vatility(), target);
  }

  // repeated .client_baseserver.excavate_reward _reward = 9;
  for (int i = 0; i < this->_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.excavate_history)
  return target;
}

int excavate_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _id = 1;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_id());
    }

    // required uint32 _excavate_id = 2;
    if (has__excavate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_excavate_id());
    }

    // required .client_baseserver.excavate_history.def_result _result = 3;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // required string _enemy_name = 4;
    if (has__enemy_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_enemy_name());
    }

    // optional uint32 _enemy_svrid = 5;
    if (has__enemy_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_enemy_svrid());
    }

    // optional string _enemy_svrname = 6;
    if (has__enemy_svrname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_enemy_svrname());
    }

    // required uint32 _time = 7;
    if (has__time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_time());
    }

    // optional uint32 _vatility = 8;
    if (has__vatility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_vatility());
    }

  }
  // repeated .client_baseserver.excavate_reward _reward = 9;
  total_size += 1 * this->_reward_size();
  for (int i = 0; i < this->_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void excavate_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const excavate_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const excavate_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void excavate_history::MergeFrom(const excavate_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  _reward_.MergeFrom(from._reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__id()) {
      set__id(from._id());
    }
    if (from.has__excavate_id()) {
      set__excavate_id(from._excavate_id());
    }
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__enemy_name()) {
      set__enemy_name(from._enemy_name());
    }
    if (from.has__enemy_svrid()) {
      set__enemy_svrid(from._enemy_svrid());
    }
    if (from.has__enemy_svrname()) {
      set__enemy_svrname(from._enemy_svrname());
    }
    if (from.has__time()) {
      set__time(from._time());
    }
    if (from.has__vatility()) {
      set__vatility(from._vatility());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void excavate_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void excavate_history::CopyFrom(const excavate_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool excavate_history::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000004f) != 0x0000004f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_reward())) return false;
  return true;
}

void excavate_history::Swap(excavate_history* other) {
  if (other != this) {
    std::swap(_id_, other->_id_);
    std::swap(_excavate_id_, other->_excavate_id_);
    std::swap(_result_, other->_result_);
    std::swap(_enemy_name_, other->_enemy_name_);
    std::swap(_enemy_svrid_, other->_enemy_svrid_);
    std::swap(_enemy_svrname_, other->_enemy_svrname_);
    std::swap(_time_, other->_time_);
    std::swap(_vatility_, other->_vatility_);
    _reward_.Swap(&other->_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata excavate_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = excavate_history_descriptor_;
  metadata.reflection = excavate_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int query_excavate_history_reply::kExcavateHistoryFieldNumber;
const int query_excavate_history_reply::kDrawDefVitalityFieldNumber;
#endif  // !_MSC_VER

query_excavate_history_reply::query_excavate_history_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.query_excavate_history_reply)
}

void query_excavate_history_reply::InitAsDefaultInstance() {
}

query_excavate_history_reply::query_excavate_history_reply(const query_excavate_history_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.query_excavate_history_reply)
}

void query_excavate_history_reply::SharedCtor() {
  _cached_size_ = 0;
  _draw_def_vitality_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_excavate_history_reply::~query_excavate_history_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.query_excavate_history_reply)
  SharedDtor();
}

void query_excavate_history_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void query_excavate_history_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_excavate_history_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_excavate_history_reply_descriptor_;
}

const query_excavate_history_reply& query_excavate_history_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

query_excavate_history_reply* query_excavate_history_reply::default_instance_ = NULL;

query_excavate_history_reply* query_excavate_history_reply::New() const {
  return new query_excavate_history_reply;
}

void query_excavate_history_reply::Clear() {
  _draw_def_vitality_ = 0u;
  _excavate_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_excavate_history_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.query_excavate_history_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.excavate_history _excavate_history = 1;
      case 1: {
        if (tag == 10) {
         parse__excavate_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__excavate_history()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__excavate_history;
        if (input->ExpectTag(16)) goto parse__draw_def_vitality;
        break;
      }

      // optional uint32 _draw_def_vitality = 2;
      case 2: {
        if (tag == 16) {
         parse__draw_def_vitality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_draw_def_vitality_)));
          set_has__draw_def_vitality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.query_excavate_history_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.query_excavate_history_reply)
  return false;
#undef DO_
}

void query_excavate_history_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.query_excavate_history_reply)
  // repeated .client_baseserver.excavate_history _excavate_history = 1;
  for (int i = 0; i < this->_excavate_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_excavate_history(i), output);
  }

  // optional uint32 _draw_def_vitality = 2;
  if (has__draw_def_vitality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_draw_def_vitality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.query_excavate_history_reply)
}

::google::protobuf::uint8* query_excavate_history_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.query_excavate_history_reply)
  // repeated .client_baseserver.excavate_history _excavate_history = 1;
  for (int i = 0; i < this->_excavate_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_excavate_history(i), target);
  }

  // optional uint32 _draw_def_vitality = 2;
  if (has__draw_def_vitality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_draw_def_vitality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.query_excavate_history_reply)
  return target;
}

int query_excavate_history_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 _draw_def_vitality = 2;
    if (has__draw_def_vitality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_draw_def_vitality());
    }

  }
  // repeated .client_baseserver.excavate_history _excavate_history = 1;
  total_size += 1 * this->_excavate_history_size();
  for (int i = 0; i < this->_excavate_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_excavate_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_excavate_history_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_excavate_history_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_excavate_history_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_excavate_history_reply::MergeFrom(const query_excavate_history_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _excavate_history_.MergeFrom(from._excavate_history_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__draw_def_vitality()) {
      set__draw_def_vitality(from._draw_def_vitality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_excavate_history_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_excavate_history_reply::CopyFrom(const query_excavate_history_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_excavate_history_reply::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_excavate_history())) return false;
  return true;
}

void query_excavate_history_reply::Swap(query_excavate_history_reply* other) {
  if (other != this) {
    _excavate_history_.Swap(&other->_excavate_history_);
    std::swap(_draw_def_vitality_, other->_draw_def_vitality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_excavate_history_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_excavate_history_reply_descriptor_;
  metadata.reflection = query_excavate_history_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int excavate_battle_hero::kBaseFieldNumber;
const int excavate_battle_hero::kDynaFieldNumber;
#endif  // !_MSC_VER

excavate_battle_hero::excavate_battle_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.excavate_battle_hero)
}

void excavate_battle_hero::InitAsDefaultInstance() {
  _base_ = const_cast< ::client_baseserver::hero_summary*>(&::client_baseserver::hero_summary::default_instance());
  _dyna_ = const_cast< ::client_baseserver::hero_dyna*>(&::client_baseserver::hero_dyna::default_instance());
}

excavate_battle_hero::excavate_battle_hero(const excavate_battle_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.excavate_battle_hero)
}

void excavate_battle_hero::SharedCtor() {
  _cached_size_ = 0;
  _base_ = NULL;
  _dyna_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

excavate_battle_hero::~excavate_battle_hero() {
  // @@protoc_insertion_point(destructor:client_baseserver.excavate_battle_hero)
  SharedDtor();
}

void excavate_battle_hero::SharedDtor() {
  if (this != default_instance_) {
    delete _base_;
    delete _dyna_;
  }
}

void excavate_battle_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* excavate_battle_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return excavate_battle_hero_descriptor_;
}

const excavate_battle_hero& excavate_battle_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

excavate_battle_hero* excavate_battle_hero::default_instance_ = NULL;

excavate_battle_hero* excavate_battle_hero::New() const {
  return new excavate_battle_hero;
}

void excavate_battle_hero::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has__base()) {
      if (_base_ != NULL) _base_->::client_baseserver::hero_summary::Clear();
    }
    if (has__dyna()) {
      if (_dyna_ != NULL) _dyna_->::client_baseserver::hero_dyna::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool excavate_battle_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.excavate_battle_hero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.hero_summary _base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__dyna;
        break;
      }

      // required .client_baseserver.hero_dyna _dyna = 2;
      case 2: {
        if (tag == 18) {
         parse__dyna:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__dyna()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.excavate_battle_hero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.excavate_battle_hero)
  return false;
#undef DO_
}

void excavate_battle_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.excavate_battle_hero)
  // required .client_baseserver.hero_summary _base = 1;
  if (has__base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_base(), output);
  }

  // required .client_baseserver.hero_dyna _dyna = 2;
  if (has__dyna()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_dyna(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.excavate_battle_hero)
}

::google::protobuf::uint8* excavate_battle_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.excavate_battle_hero)
  // required .client_baseserver.hero_summary _base = 1;
  if (has__base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_base(), target);
  }

  // required .client_baseserver.hero_dyna _dyna = 2;
  if (has__dyna()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_dyna(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.excavate_battle_hero)
  return target;
}

int excavate_battle_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.hero_summary _base = 1;
    if (has__base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_base());
    }

    // required .client_baseserver.hero_dyna _dyna = 2;
    if (has__dyna()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_dyna());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void excavate_battle_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const excavate_battle_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const excavate_battle_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void excavate_battle_hero::MergeFrom(const excavate_battle_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__base()) {
      mutable__base()->::client_baseserver::hero_summary::MergeFrom(from._base());
    }
    if (from.has__dyna()) {
      mutable__dyna()->::client_baseserver::hero_dyna::MergeFrom(from._dyna());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void excavate_battle_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void excavate_battle_hero::CopyFrom(const excavate_battle_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool excavate_battle_hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has__base()) {
    if (!this->_base().IsInitialized()) return false;
  }
  if (has__dyna()) {
    if (!this->_dyna().IsInitialized()) return false;
  }
  return true;
}

void excavate_battle_hero::Swap(excavate_battle_hero* other) {
  if (other != this) {
    std::swap(_base_, other->_base_);
    std::swap(_dyna_, other->_dyna_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata excavate_battle_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = excavate_battle_hero_descriptor_;
  metadata.reflection = excavate_battle_hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int excavate_battle_team::kPlayerFieldNumber;
const int excavate_battle_team::kHeroFieldNumber;
#endif  // !_MSC_VER

excavate_battle_team::excavate_battle_team()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.excavate_battle_team)
}

void excavate_battle_team::InitAsDefaultInstance() {
  _player_ = const_cast< ::client_baseserver::user_summary*>(&::client_baseserver::user_summary::default_instance());
}

excavate_battle_team::excavate_battle_team(const excavate_battle_team& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.excavate_battle_team)
}

void excavate_battle_team::SharedCtor() {
  _cached_size_ = 0;
  _player_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

excavate_battle_team::~excavate_battle_team() {
  // @@protoc_insertion_point(destructor:client_baseserver.excavate_battle_team)
  SharedDtor();
}

void excavate_battle_team::SharedDtor() {
  if (this != default_instance_) {
    delete _player_;
  }
}

void excavate_battle_team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* excavate_battle_team::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return excavate_battle_team_descriptor_;
}

const excavate_battle_team& excavate_battle_team::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

excavate_battle_team* excavate_battle_team::default_instance_ = NULL;

excavate_battle_team* excavate_battle_team::New() const {
  return new excavate_battle_team;
}

void excavate_battle_team::Clear() {
  if (has__player()) {
    if (_player_ != NULL) _player_->::client_baseserver::user_summary::Clear();
  }
  _hero_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool excavate_battle_team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.excavate_battle_team)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.user_summary _player = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__hero;
        break;
      }

      // repeated .client_baseserver.excavate_battle_hero _hero = 2;
      case 2: {
        if (tag == 18) {
         parse__hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__hero;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.excavate_battle_team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.excavate_battle_team)
  return false;
#undef DO_
}

void excavate_battle_team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.excavate_battle_team)
  // required .client_baseserver.user_summary _player = 1;
  if (has__player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_player(), output);
  }

  // repeated .client_baseserver.excavate_battle_hero _hero = 2;
  for (int i = 0; i < this->_hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_hero(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.excavate_battle_team)
}

::google::protobuf::uint8* excavate_battle_team::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.excavate_battle_team)
  // required .client_baseserver.user_summary _player = 1;
  if (has__player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_player(), target);
  }

  // repeated .client_baseserver.excavate_battle_hero _hero = 2;
  for (int i = 0; i < this->_hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_hero(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.excavate_battle_team)
  return target;
}

int excavate_battle_team::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.user_summary _player = 1;
    if (has__player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_player());
    }

  }
  // repeated .client_baseserver.excavate_battle_hero _hero = 2;
  total_size += 1 * this->_hero_size();
  for (int i = 0; i < this->_hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_hero(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void excavate_battle_team::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const excavate_battle_team* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const excavate_battle_team*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void excavate_battle_team::MergeFrom(const excavate_battle_team& from) {
  GOOGLE_CHECK_NE(&from, this);
  _hero_.MergeFrom(from._hero_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__player()) {
      mutable__player()->::client_baseserver::user_summary::MergeFrom(from._player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void excavate_battle_team::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void excavate_battle_team::CopyFrom(const excavate_battle_team& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool excavate_battle_team::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__player()) {
    if (!this->_player().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->_hero())) return false;
  return true;
}

void excavate_battle_team::Swap(excavate_battle_team* other) {
  if (other != this) {
    std::swap(_player_, other->_player_);
    _hero_.Swap(&other->_hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata excavate_battle_team::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = excavate_battle_team_descriptor_;
  metadata.reflection = excavate_battle_team_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int excavate_battle::kSelfTeamFieldNumber;
const int excavate_battle::kOppoTeamFieldNumber;
const int excavate_battle::kResultFieldNumber;
const int excavate_battle::kRecordIdFieldNumber;
const int excavate_battle::kRecordSvridFieldNumber;
#endif  // !_MSC_VER

excavate_battle::excavate_battle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.excavate_battle)
}

void excavate_battle::InitAsDefaultInstance() {
  _self_team_ = const_cast< ::client_baseserver::excavate_battle_team*>(&::client_baseserver::excavate_battle_team::default_instance());
  _oppo_team_ = const_cast< ::client_baseserver::excavate_battle_team*>(&::client_baseserver::excavate_battle_team::default_instance());
}

excavate_battle::excavate_battle(const excavate_battle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.excavate_battle)
}

void excavate_battle::SharedCtor() {
  _cached_size_ = 0;
  _self_team_ = NULL;
  _oppo_team_ = NULL;
  _result_ = 0;
  _record_id_ = 0u;
  _record_svrid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

excavate_battle::~excavate_battle() {
  // @@protoc_insertion_point(destructor:client_baseserver.excavate_battle)
  SharedDtor();
}

void excavate_battle::SharedDtor() {
  if (this != default_instance_) {
    delete _self_team_;
    delete _oppo_team_;
  }
}

void excavate_battle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* excavate_battle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return excavate_battle_descriptor_;
}

const excavate_battle& excavate_battle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

excavate_battle* excavate_battle::default_instance_ = NULL;

excavate_battle* excavate_battle::New() const {
  return new excavate_battle;
}

void excavate_battle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<excavate_battle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(_result_, _record_svrid_);
    if (has__self_team()) {
      if (_self_team_ != NULL) _self_team_->::client_baseserver::excavate_battle_team::Clear();
    }
    if (has__oppo_team()) {
      if (_oppo_team_ != NULL) _oppo_team_->::client_baseserver::excavate_battle_team::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool excavate_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.excavate_battle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.excavate_battle_team _self_team = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__self_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__oppo_team;
        break;
      }

      // required .client_baseserver.excavate_battle_team _oppo_team = 2;
      case 2: {
        if (tag == 18) {
         parse__oppo_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__oppo_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__result;
        break;
      }

      // required .client_baseserver.battle_result _result = 3;
      case 3: {
        if (tag == 24) {
         parse__result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::battle_result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::battle_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__record_id;
        break;
      }

      // required uint32 _record_id = 4;
      case 4: {
        if (tag == 32) {
         parse__record_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_record_id_)));
          set_has__record_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__record_svrid;
        break;
      }

      // required uint32 _record_svrid = 5;
      case 5: {
        if (tag == 40) {
         parse__record_svrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_record_svrid_)));
          set_has__record_svrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.excavate_battle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.excavate_battle)
  return false;
#undef DO_
}

void excavate_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.excavate_battle)
  // required .client_baseserver.excavate_battle_team _self_team = 1;
  if (has__self_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_self_team(), output);
  }

  // required .client_baseserver.excavate_battle_team _oppo_team = 2;
  if (has__oppo_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_oppo_team(), output);
  }

  // required .client_baseserver.battle_result _result = 3;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->_result(), output);
  }

  // required uint32 _record_id = 4;
  if (has__record_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_record_id(), output);
  }

  // required uint32 _record_svrid = 5;
  if (has__record_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_record_svrid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.excavate_battle)
}

::google::protobuf::uint8* excavate_battle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.excavate_battle)
  // required .client_baseserver.excavate_battle_team _self_team = 1;
  if (has__self_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_self_team(), target);
  }

  // required .client_baseserver.excavate_battle_team _oppo_team = 2;
  if (has__oppo_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_oppo_team(), target);
  }

  // required .client_baseserver.battle_result _result = 3;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->_result(), target);
  }

  // required uint32 _record_id = 4;
  if (has__record_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_record_id(), target);
  }

  // required uint32 _record_svrid = 5;
  if (has__record_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_record_svrid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.excavate_battle)
  return target;
}

int excavate_battle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.excavate_battle_team _self_team = 1;
    if (has__self_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_self_team());
    }

    // required .client_baseserver.excavate_battle_team _oppo_team = 2;
    if (has__oppo_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_oppo_team());
    }

    // required .client_baseserver.battle_result _result = 3;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // required uint32 _record_id = 4;
    if (has__record_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_record_id());
    }

    // required uint32 _record_svrid = 5;
    if (has__record_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_record_svrid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void excavate_battle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const excavate_battle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const excavate_battle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void excavate_battle::MergeFrom(const excavate_battle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__self_team()) {
      mutable__self_team()->::client_baseserver::excavate_battle_team::MergeFrom(from._self_team());
    }
    if (from.has__oppo_team()) {
      mutable__oppo_team()->::client_baseserver::excavate_battle_team::MergeFrom(from._oppo_team());
    }
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__record_id()) {
      set__record_id(from._record_id());
    }
    if (from.has__record_svrid()) {
      set__record_svrid(from._record_svrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void excavate_battle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void excavate_battle::CopyFrom(const excavate_battle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool excavate_battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has__self_team()) {
    if (!this->_self_team().IsInitialized()) return false;
  }
  if (has__oppo_team()) {
    if (!this->_oppo_team().IsInitialized()) return false;
  }
  return true;
}

void excavate_battle::Swap(excavate_battle* other) {
  if (other != this) {
    std::swap(_self_team_, other->_self_team_);
    std::swap(_oppo_team_, other->_oppo_team_);
    std::swap(_result_, other->_result_);
    std::swap(_record_id_, other->_record_id_);
    std::swap(_record_svrid_, other->_record_svrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata excavate_battle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = excavate_battle_descriptor_;
  metadata.reflection = excavate_battle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int query_excavate_battle_reply::kBattlesFieldNumber;
#endif  // !_MSC_VER

query_excavate_battle_reply::query_excavate_battle_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.query_excavate_battle_reply)
}

void query_excavate_battle_reply::InitAsDefaultInstance() {
}

query_excavate_battle_reply::query_excavate_battle_reply(const query_excavate_battle_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.query_excavate_battle_reply)
}

void query_excavate_battle_reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_excavate_battle_reply::~query_excavate_battle_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.query_excavate_battle_reply)
  SharedDtor();
}

void query_excavate_battle_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void query_excavate_battle_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_excavate_battle_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_excavate_battle_reply_descriptor_;
}

const query_excavate_battle_reply& query_excavate_battle_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

query_excavate_battle_reply* query_excavate_battle_reply::default_instance_ = NULL;

query_excavate_battle_reply* query_excavate_battle_reply::New() const {
  return new query_excavate_battle_reply;
}

void query_excavate_battle_reply::Clear() {
  _battles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_excavate_battle_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.query_excavate_battle_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.excavate_battle _battles = 1;
      case 1: {
        if (tag == 10) {
         parse__battles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__battles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__battles;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.query_excavate_battle_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.query_excavate_battle_reply)
  return false;
#undef DO_
}

void query_excavate_battle_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.query_excavate_battle_reply)
  // repeated .client_baseserver.excavate_battle _battles = 1;
  for (int i = 0; i < this->_battles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_battles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.query_excavate_battle_reply)
}

::google::protobuf::uint8* query_excavate_battle_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.query_excavate_battle_reply)
  // repeated .client_baseserver.excavate_battle _battles = 1;
  for (int i = 0; i < this->_battles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_battles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.query_excavate_battle_reply)
  return target;
}

int query_excavate_battle_reply::ByteSize() const {
  int total_size = 0;

  // repeated .client_baseserver.excavate_battle _battles = 1;
  total_size += 1 * this->_battles_size();
  for (int i = 0; i < this->_battles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_battles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_excavate_battle_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_excavate_battle_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_excavate_battle_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_excavate_battle_reply::MergeFrom(const query_excavate_battle_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _battles_.MergeFrom(from._battles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_excavate_battle_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_excavate_battle_reply::CopyFrom(const query_excavate_battle_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_excavate_battle_reply::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_battles())) return false;
  return true;
}

void query_excavate_battle_reply::Swap(query_excavate_battle_reply* other) {
  if (other != this) {
    _battles_.Swap(&other->_battles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_excavate_battle_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_excavate_battle_reply_descriptor_;
  metadata.reflection = query_excavate_battle_reply_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* set_excavate_team_reply_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_excavate_team_reply_result_descriptor_;
}
bool set_excavate_team_reply_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const set_excavate_team_reply_result set_excavate_team_reply::success;
const set_excavate_team_reply_result set_excavate_team_reply::failed;
const set_excavate_team_reply_result set_excavate_team_reply::expired;
const set_excavate_team_reply_result set_excavate_team_reply::fall;
const set_excavate_team_reply_result set_excavate_team_reply::result_MIN;
const set_excavate_team_reply_result set_excavate_team_reply::result_MAX;
const int set_excavate_team_reply::result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int set_excavate_team_reply::kResultFieldNumber;
const int set_excavate_team_reply::kMineFieldNumber;
#endif  // !_MSC_VER

set_excavate_team_reply::set_excavate_team_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.set_excavate_team_reply)
}

void set_excavate_team_reply::InitAsDefaultInstance() {
  _mine_ = const_cast< ::client_baseserver::excavate*>(&::client_baseserver::excavate::default_instance());
}

set_excavate_team_reply::set_excavate_team_reply(const set_excavate_team_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.set_excavate_team_reply)
}

void set_excavate_team_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _mine_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_excavate_team_reply::~set_excavate_team_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.set_excavate_team_reply)
  SharedDtor();
}

void set_excavate_team_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _mine_;
  }
}

void set_excavate_team_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_excavate_team_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_excavate_team_reply_descriptor_;
}

const set_excavate_team_reply& set_excavate_team_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

set_excavate_team_reply* set_excavate_team_reply::default_instance_ = NULL;

set_excavate_team_reply* set_excavate_team_reply::New() const {
  return new set_excavate_team_reply;
}

void set_excavate_team_reply::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _result_ = 0;
    if (has__mine()) {
      if (_mine_ != NULL) _mine_->::client_baseserver::excavate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_excavate_team_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.set_excavate_team_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.set_excavate_team_reply.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::set_excavate_team_reply_result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::set_excavate_team_reply_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__mine;
        break;
      }

      // optional .client_baseserver.excavate _mine = 2;
      case 2: {
        if (tag == 18) {
         parse__mine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__mine()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.set_excavate_team_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.set_excavate_team_reply)
  return false;
#undef DO_
}

void set_excavate_team_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.set_excavate_team_reply)
  // required .client_baseserver.set_excavate_team_reply.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // optional .client_baseserver.excavate _mine = 2;
  if (has__mine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_mine(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.set_excavate_team_reply)
}

::google::protobuf::uint8* set_excavate_team_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.set_excavate_team_reply)
  // required .client_baseserver.set_excavate_team_reply.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // optional .client_baseserver.excavate _mine = 2;
  if (has__mine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_mine(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.set_excavate_team_reply)
  return target;
}

int set_excavate_team_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.set_excavate_team_reply.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional .client_baseserver.excavate _mine = 2;
    if (has__mine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_mine());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_excavate_team_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_excavate_team_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_excavate_team_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_excavate_team_reply::MergeFrom(const set_excavate_team_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__mine()) {
      mutable__mine()->::client_baseserver::excavate::MergeFrom(from._mine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_excavate_team_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_excavate_team_reply::CopyFrom(const set_excavate_team_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_excavate_team_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__mine()) {
    if (!this->_mine().IsInitialized()) return false;
  }
  return true;
}

void set_excavate_team_reply::Swap(set_excavate_team_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_mine_, other->_mine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_excavate_team_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_excavate_team_reply_descriptor_;
  metadata.reflection = set_excavate_team_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int excavate_start_battle_reply::kResultFieldNumber;
const int excavate_start_battle_reply::kRseedFieldNumber;
const int excavate_start_battle_reply::kHeroBasesFieldNumber;
const int excavate_start_battle_reply::kHeroDynasFieldNumber;
#endif  // !_MSC_VER

excavate_start_battle_reply::excavate_start_battle_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.excavate_start_battle_reply)
}

void excavate_start_battle_reply::InitAsDefaultInstance() {
}

excavate_start_battle_reply::excavate_start_battle_reply(const excavate_start_battle_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.excavate_start_battle_reply)
}

void excavate_start_battle_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _rseed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

excavate_start_battle_reply::~excavate_start_battle_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.excavate_start_battle_reply)
  SharedDtor();
}

void excavate_start_battle_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void excavate_start_battle_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* excavate_start_battle_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return excavate_start_battle_reply_descriptor_;
}

const excavate_start_battle_reply& excavate_start_battle_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

excavate_start_battle_reply* excavate_start_battle_reply::default_instance_ = NULL;

excavate_start_battle_reply* excavate_start_battle_reply::New() const {
  return new excavate_start_battle_reply;
}

void excavate_start_battle_reply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<excavate_start_battle_reply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_result_, _rseed_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  _hero_bases_.Clear();
  _hero_dynas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool excavate_start_battle_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.excavate_start_battle_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1 [default = success];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__rseed;
        break;
      }

      // required uint32 _rseed = 2;
      case 2: {
        if (tag == 16) {
         parse__rseed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_rseed_)));
          set_has__rseed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__hero_bases;
        break;
      }

      // repeated .client_baseserver.hero _hero_bases = 3;
      case 3: {
        if (tag == 26) {
         parse__hero_bases:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__hero_bases()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__hero_bases;
        if (input->ExpectTag(34)) goto parse__hero_dynas;
        break;
      }

      // repeated .client_baseserver.hero_dyna _hero_dynas = 4;
      case 4: {
        if (tag == 34) {
         parse__hero_dynas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__hero_dynas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__hero_dynas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.excavate_start_battle_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.excavate_start_battle_reply)
  return false;
#undef DO_
}

void excavate_start_battle_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.excavate_start_battle_reply)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // required uint32 _rseed = 2;
  if (has__rseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_rseed(), output);
  }

  // repeated .client_baseserver.hero _hero_bases = 3;
  for (int i = 0; i < this->_hero_bases_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_hero_bases(i), output);
  }

  // repeated .client_baseserver.hero_dyna _hero_dynas = 4;
  for (int i = 0; i < this->_hero_dynas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_hero_dynas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.excavate_start_battle_reply)
}

::google::protobuf::uint8* excavate_start_battle_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.excavate_start_battle_reply)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // required uint32 _rseed = 2;
  if (has__rseed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_rseed(), target);
  }

  // repeated .client_baseserver.hero _hero_bases = 3;
  for (int i = 0; i < this->_hero_bases_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_hero_bases(i), target);
  }

  // repeated .client_baseserver.hero_dyna _hero_dynas = 4;
  for (int i = 0; i < this->_hero_dynas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_hero_dynas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.excavate_start_battle_reply)
  return target;
}

int excavate_start_battle_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1 [default = success];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // required uint32 _rseed = 2;
    if (has__rseed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_rseed());
    }

  }
  // repeated .client_baseserver.hero _hero_bases = 3;
  total_size += 1 * this->_hero_bases_size();
  for (int i = 0; i < this->_hero_bases_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_hero_bases(i));
  }

  // repeated .client_baseserver.hero_dyna _hero_dynas = 4;
  total_size += 1 * this->_hero_dynas_size();
  for (int i = 0; i < this->_hero_dynas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_hero_dynas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void excavate_start_battle_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const excavate_start_battle_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const excavate_start_battle_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void excavate_start_battle_reply::MergeFrom(const excavate_start_battle_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _hero_bases_.MergeFrom(from._hero_bases_);
  _hero_dynas_.MergeFrom(from._hero_dynas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__rseed()) {
      set__rseed(from._rseed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void excavate_start_battle_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void excavate_start_battle_reply::CopyFrom(const excavate_start_battle_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool excavate_start_battle_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_hero_bases())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->_hero_dynas())) return false;
  return true;
}

void excavate_start_battle_reply::Swap(excavate_start_battle_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_rseed_, other->_rseed_);
    _hero_bases_.Swap(&other->_hero_bases_);
    _hero_dynas_.Swap(&other->_hero_dynas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata excavate_start_battle_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = excavate_start_battle_reply_descriptor_;
  metadata.reflection = excavate_start_battle_reply_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* excavate_end_battle_reply_mine_battle_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return excavate_end_battle_reply_mine_battle_result_descriptor_;
}
bool excavate_end_battle_reply_mine_battle_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const excavate_end_battle_reply_mine_battle_result excavate_end_battle_reply::success;
const excavate_end_battle_reply_mine_battle_result excavate_end_battle_reply::timeout;
const excavate_end_battle_reply_mine_battle_result excavate_end_battle_reply::mine_battle_result_MIN;
const excavate_end_battle_reply_mine_battle_result excavate_end_battle_reply::mine_battle_result_MAX;
const int excavate_end_battle_reply::mine_battle_result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int excavate_end_battle_reply::kResultFieldNumber;
const int excavate_end_battle_reply::kExcavateFieldNumber;
const int excavate_end_battle_reply::kRewardFieldNumber;
const int excavate_end_battle_reply::kMineBattleResultFieldNumber;
#endif  // !_MSC_VER

excavate_end_battle_reply::excavate_end_battle_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.excavate_end_battle_reply)
}

void excavate_end_battle_reply::InitAsDefaultInstance() {
  _excavate_ = const_cast< ::client_baseserver::excavate*>(&::client_baseserver::excavate::default_instance());
}

excavate_end_battle_reply::excavate_end_battle_reply(const excavate_end_battle_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.excavate_end_battle_reply)
}

void excavate_end_battle_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _excavate_ = NULL;
  _mine_battle_result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

excavate_end_battle_reply::~excavate_end_battle_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.excavate_end_battle_reply)
  SharedDtor();
}

void excavate_end_battle_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _excavate_;
  }
}

void excavate_end_battle_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* excavate_end_battle_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return excavate_end_battle_reply_descriptor_;
}

const excavate_end_battle_reply& excavate_end_battle_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

excavate_end_battle_reply* excavate_end_battle_reply::default_instance_ = NULL;

excavate_end_battle_reply* excavate_end_battle_reply::New() const {
  return new excavate_end_battle_reply;
}

void excavate_end_battle_reply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<excavate_end_battle_reply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(_result_, _mine_battle_result_);
    if (has__excavate()) {
      if (_excavate_ != NULL) _excavate_->::client_baseserver::excavate::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool excavate_end_battle_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.excavate_end_battle_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_baseserver.battle_result _result = 1 [default = victory];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::battle_result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::battle_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__excavate;
        break;
      }

      // optional .client_baseserver.excavate _excavate = 2;
      case 2: {
        if (tag == 18) {
         parse__excavate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__excavate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__reward;
        break;
      }

      // repeated .client_baseserver.excavate_reward _reward = 3;
      case 3: {
        if (tag == 26) {
         parse__reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__reward;
        if (input->ExpectTag(32)) goto parse__mine_battle_result;
        break;
      }

      // optional .client_baseserver.excavate_end_battle_reply.mine_battle_result _mine_battle_result = 4 [default = success];
      case 4: {
        if (tag == 32) {
         parse__mine_battle_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::excavate_end_battle_reply_mine_battle_result_IsValid(value)) {
            set__mine_battle_result(static_cast< ::client_baseserver::excavate_end_battle_reply_mine_battle_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.excavate_end_battle_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.excavate_end_battle_reply)
  return false;
#undef DO_
}

void excavate_end_battle_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.excavate_end_battle_reply)
  // optional .client_baseserver.battle_result _result = 1 [default = victory];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // optional .client_baseserver.excavate _excavate = 2;
  if (has__excavate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_excavate(), output);
  }

  // repeated .client_baseserver.excavate_reward _reward = 3;
  for (int i = 0; i < this->_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_reward(i), output);
  }

  // optional .client_baseserver.excavate_end_battle_reply.mine_battle_result _mine_battle_result = 4 [default = success];
  if (has__mine_battle_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->_mine_battle_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.excavate_end_battle_reply)
}

::google::protobuf::uint8* excavate_end_battle_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.excavate_end_battle_reply)
  // optional .client_baseserver.battle_result _result = 1 [default = victory];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // optional .client_baseserver.excavate _excavate = 2;
  if (has__excavate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_excavate(), target);
  }

  // repeated .client_baseserver.excavate_reward _reward = 3;
  for (int i = 0; i < this->_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_reward(i), target);
  }

  // optional .client_baseserver.excavate_end_battle_reply.mine_battle_result _mine_battle_result = 4 [default = success];
  if (has__mine_battle_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->_mine_battle_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.excavate_end_battle_reply)
  return target;
}

int excavate_end_battle_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_baseserver.battle_result _result = 1 [default = victory];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional .client_baseserver.excavate _excavate = 2;
    if (has__excavate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_excavate());
    }

    // optional .client_baseserver.excavate_end_battle_reply.mine_battle_result _mine_battle_result = 4 [default = success];
    if (has__mine_battle_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_mine_battle_result());
    }

  }
  // repeated .client_baseserver.excavate_reward _reward = 3;
  total_size += 1 * this->_reward_size();
  for (int i = 0; i < this->_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void excavate_end_battle_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const excavate_end_battle_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const excavate_end_battle_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void excavate_end_battle_reply::MergeFrom(const excavate_end_battle_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _reward_.MergeFrom(from._reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__excavate()) {
      mutable__excavate()->::client_baseserver::excavate::MergeFrom(from._excavate());
    }
    if (from.has__mine_battle_result()) {
      set__mine_battle_result(from._mine_battle_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void excavate_end_battle_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void excavate_end_battle_reply::CopyFrom(const excavate_end_battle_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool excavate_end_battle_reply::IsInitialized() const {

  if (has__excavate()) {
    if (!this->_excavate().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->_reward())) return false;
  return true;
}

void excavate_end_battle_reply::Swap(excavate_end_battle_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_excavate_, other->_excavate_);
    _reward_.Swap(&other->_reward_);
    std::swap(_mine_battle_result_, other->_mine_battle_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata excavate_end_battle_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = excavate_end_battle_reply_descriptor_;
  metadata.reflection = excavate_end_battle_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int draw_excav_res_reply::kDiamondFieldNumber;
const int draw_excav_res_reply::kRewardFieldNumber;
#endif  // !_MSC_VER

draw_excav_res_reply::draw_excav_res_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.draw_excav_res_reply)
}

void draw_excav_res_reply::InitAsDefaultInstance() {
}

draw_excav_res_reply::draw_excav_res_reply(const draw_excav_res_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.draw_excav_res_reply)
}

void draw_excav_res_reply::SharedCtor() {
  _cached_size_ = 0;
  _diamond_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

draw_excav_res_reply::~draw_excav_res_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.draw_excav_res_reply)
  SharedDtor();
}

void draw_excav_res_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void draw_excav_res_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* draw_excav_res_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return draw_excav_res_reply_descriptor_;
}

const draw_excav_res_reply& draw_excav_res_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

draw_excav_res_reply* draw_excav_res_reply::default_instance_ = NULL;

draw_excav_res_reply* draw_excav_res_reply::New() const {
  return new draw_excav_res_reply;
}

void draw_excav_res_reply::Clear() {
  _diamond_ = 0u;
  _reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool draw_excav_res_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.draw_excav_res_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 _diamond = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_diamond_)));
          set_has__diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__reward;
        break;
      }

      // repeated .client_baseserver.excavate_reward _reward = 2;
      case 2: {
        if (tag == 18) {
         parse__reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.draw_excav_res_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.draw_excav_res_reply)
  return false;
#undef DO_
}

void draw_excav_res_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.draw_excav_res_reply)
  // optional uint32 _diamond = 1;
  if (has__diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_diamond(), output);
  }

  // repeated .client_baseserver.excavate_reward _reward = 2;
  for (int i = 0; i < this->_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.draw_excav_res_reply)
}

::google::protobuf::uint8* draw_excav_res_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.draw_excav_res_reply)
  // optional uint32 _diamond = 1;
  if (has__diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_diamond(), target);
  }

  // repeated .client_baseserver.excavate_reward _reward = 2;
  for (int i = 0; i < this->_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.draw_excav_res_reply)
  return target;
}

int draw_excav_res_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 _diamond = 1;
    if (has__diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_diamond());
    }

  }
  // repeated .client_baseserver.excavate_reward _reward = 2;
  total_size += 1 * this->_reward_size();
  for (int i = 0; i < this->_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void draw_excav_res_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const draw_excav_res_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const draw_excav_res_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void draw_excav_res_reply::MergeFrom(const draw_excav_res_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _reward_.MergeFrom(from._reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__diamond()) {
      set__diamond(from._diamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void draw_excav_res_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void draw_excav_res_reply::CopyFrom(const draw_excav_res_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool draw_excav_res_reply::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_reward())) return false;
  return true;
}

void draw_excav_res_reply::Swap(draw_excav_res_reply* other) {
  if (other != this) {
    std::swap(_diamond_, other->_diamond_);
    _reward_.Swap(&other->_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata draw_excav_res_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = draw_excav_res_reply_descriptor_;
  metadata.reflection = draw_excav_res_reply_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* excavate_reward_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return excavate_reward_type_descriptor_;
}
bool excavate_reward_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const excavate_reward_type excavate_reward::gold;
const excavate_reward_type excavate_reward::diamond;
const excavate_reward_type excavate_reward::item;
const excavate_reward_type excavate_reward::wood;
const excavate_reward_type excavate_reward::iron;
const excavate_reward_type excavate_reward::crystal;
const excavate_reward_type excavate_reward::type_MIN;
const excavate_reward_type excavate_reward::type_MAX;
const int excavate_reward::type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int excavate_reward::kTypeFieldNumber;
const int excavate_reward::kTeamIdFieldNumber;
const int excavate_reward::kParam1FieldNumber;
const int excavate_reward::kParam2FieldNumber;
#endif  // !_MSC_VER

excavate_reward::excavate_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.excavate_reward)
}

void excavate_reward::InitAsDefaultInstance() {
}

excavate_reward::excavate_reward(const excavate_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.excavate_reward)
}

void excavate_reward::SharedCtor() {
  _cached_size_ = 0;
  _type_ = 1;
  _team_id_ = 0u;
  _param1_ = 0u;
  _param2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

excavate_reward::~excavate_reward() {
  // @@protoc_insertion_point(destructor:client_baseserver.excavate_reward)
  SharedDtor();
}

void excavate_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void excavate_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* excavate_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return excavate_reward_descriptor_;
}

const excavate_reward& excavate_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

excavate_reward* excavate_reward::default_instance_ = NULL;

excavate_reward* excavate_reward::New() const {
  return new excavate_reward;
}

void excavate_reward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<excavate_reward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(_team_id_, _param2_);
    _type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool excavate_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.excavate_reward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.excavate_reward.type _type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::excavate_reward_type_IsValid(value)) {
            set__type(static_cast< ::client_baseserver::excavate_reward_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__team_id;
        break;
      }

      // optional uint32 _team_id = 2;
      case 2: {
        if (tag == 16) {
         parse__team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_team_id_)));
          set_has__team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__param1;
        break;
      }

      // optional uint32 _param1 = 3;
      case 3: {
        if (tag == 24) {
         parse__param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_param1_)));
          set_has__param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__param2;
        break;
      }

      // optional uint32 _param2 = 4;
      case 4: {
        if (tag == 32) {
         parse__param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_param2_)));
          set_has__param2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.excavate_reward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.excavate_reward)
  return false;
#undef DO_
}

void excavate_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.excavate_reward)
  // required .client_baseserver.excavate_reward.type _type = 1;
  if (has__type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_type(), output);
  }

  // optional uint32 _team_id = 2;
  if (has__team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_team_id(), output);
  }

  // optional uint32 _param1 = 3;
  if (has__param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_param1(), output);
  }

  // optional uint32 _param2 = 4;
  if (has__param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_param2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.excavate_reward)
}

::google::protobuf::uint8* excavate_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.excavate_reward)
  // required .client_baseserver.excavate_reward.type _type = 1;
  if (has__type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_type(), target);
  }

  // optional uint32 _team_id = 2;
  if (has__team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_team_id(), target);
  }

  // optional uint32 _param1 = 3;
  if (has__param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_param1(), target);
  }

  // optional uint32 _param2 = 4;
  if (has__param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_param2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.excavate_reward)
  return target;
}

int excavate_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.excavate_reward.type _type = 1;
    if (has__type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_type());
    }

    // optional uint32 _team_id = 2;
    if (has__team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_team_id());
    }

    // optional uint32 _param1 = 3;
    if (has__param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_param1());
    }

    // optional uint32 _param2 = 4;
    if (has__param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_param2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void excavate_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const excavate_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const excavate_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void excavate_reward::MergeFrom(const excavate_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__type()) {
      set__type(from._type());
    }
    if (from.has__team_id()) {
      set__team_id(from._team_id());
    }
    if (from.has__param1()) {
      set__param1(from._param1());
    }
    if (from.has__param2()) {
      set__param2(from._param2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void excavate_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void excavate_reward::CopyFrom(const excavate_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool excavate_reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void excavate_reward::Swap(excavate_reward* other) {
  if (other != this) {
    std::swap(_type_, other->_type_);
    std::swap(_team_id_, other->_team_id_);
    std::swap(_param1_, other->_param1_);
    std::swap(_param2_, other->_param2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata excavate_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = excavate_reward_descriptor_;
  metadata.reflection = excavate_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int query_excavate_def_reply::kExcavateFieldNumber;
#endif  // !_MSC_VER

query_excavate_def_reply::query_excavate_def_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.query_excavate_def_reply)
}

void query_excavate_def_reply::InitAsDefaultInstance() {
  _excavate_ = const_cast< ::client_baseserver::excavate*>(&::client_baseserver::excavate::default_instance());
}

query_excavate_def_reply::query_excavate_def_reply(const query_excavate_def_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.query_excavate_def_reply)
}

void query_excavate_def_reply::SharedCtor() {
  _cached_size_ = 0;
  _excavate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_excavate_def_reply::~query_excavate_def_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.query_excavate_def_reply)
  SharedDtor();
}

void query_excavate_def_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _excavate_;
  }
}

void query_excavate_def_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_excavate_def_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_excavate_def_reply_descriptor_;
}

const query_excavate_def_reply& query_excavate_def_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

query_excavate_def_reply* query_excavate_def_reply::default_instance_ = NULL;

query_excavate_def_reply* query_excavate_def_reply::New() const {
  return new query_excavate_def_reply;
}

void query_excavate_def_reply::Clear() {
  if (has__excavate()) {
    if (_excavate_ != NULL) _excavate_->::client_baseserver::excavate::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_excavate_def_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.query_excavate_def_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_baseserver.excavate _excavate = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__excavate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.query_excavate_def_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.query_excavate_def_reply)
  return false;
#undef DO_
}

void query_excavate_def_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.query_excavate_def_reply)
  // optional .client_baseserver.excavate _excavate = 1;
  if (has__excavate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_excavate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.query_excavate_def_reply)
}

::google::protobuf::uint8* query_excavate_def_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.query_excavate_def_reply)
  // optional .client_baseserver.excavate _excavate = 1;
  if (has__excavate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_excavate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.query_excavate_def_reply)
  return target;
}

int query_excavate_def_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_baseserver.excavate _excavate = 1;
    if (has__excavate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_excavate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_excavate_def_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_excavate_def_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_excavate_def_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_excavate_def_reply::MergeFrom(const query_excavate_def_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__excavate()) {
      mutable__excavate()->::client_baseserver::excavate::MergeFrom(from._excavate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_excavate_def_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_excavate_def_reply::CopyFrom(const query_excavate_def_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_excavate_def_reply::IsInitialized() const {

  if (has__excavate()) {
    if (!this->_excavate().IsInitialized()) return false;
  }
  return true;
}

void query_excavate_def_reply::Swap(query_excavate_def_reply* other) {
  if (other != this) {
    std::swap(_excavate_, other->_excavate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_excavate_def_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_excavate_def_reply_descriptor_;
  metadata.reflection = query_excavate_def_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int clear_excavate_battle_reply::kResultFieldNumber;
#endif  // !_MSC_VER

clear_excavate_battle_reply::clear_excavate_battle_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.clear_excavate_battle_reply)
}

void clear_excavate_battle_reply::InitAsDefaultInstance() {
}

clear_excavate_battle_reply::clear_excavate_battle_reply(const clear_excavate_battle_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.clear_excavate_battle_reply)
}

void clear_excavate_battle_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

clear_excavate_battle_reply::~clear_excavate_battle_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.clear_excavate_battle_reply)
  SharedDtor();
}

void clear_excavate_battle_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void clear_excavate_battle_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* clear_excavate_battle_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return clear_excavate_battle_reply_descriptor_;
}

const clear_excavate_battle_reply& clear_excavate_battle_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

clear_excavate_battle_reply* clear_excavate_battle_reply::default_instance_ = NULL;

clear_excavate_battle_reply* clear_excavate_battle_reply::New() const {
  return new clear_excavate_battle_reply;
}

void clear_excavate_battle_reply::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool clear_excavate_battle_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.clear_excavate_battle_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1 [default = success];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.clear_excavate_battle_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.clear_excavate_battle_reply)
  return false;
#undef DO_
}

void clear_excavate_battle_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.clear_excavate_battle_reply)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.clear_excavate_battle_reply)
}

::google::protobuf::uint8* clear_excavate_battle_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.clear_excavate_battle_reply)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.clear_excavate_battle_reply)
  return target;
}

int clear_excavate_battle_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1 [default = success];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void clear_excavate_battle_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const clear_excavate_battle_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const clear_excavate_battle_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void clear_excavate_battle_reply::MergeFrom(const clear_excavate_battle_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void clear_excavate_battle_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void clear_excavate_battle_reply::CopyFrom(const clear_excavate_battle_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool clear_excavate_battle_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void clear_excavate_battle_reply::Swap(clear_excavate_battle_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata clear_excavate_battle_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = clear_excavate_battle_reply_descriptor_;
  metadata.reflection = clear_excavate_battle_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int withdraw_excavate_hero_reply::kResultFieldNumber;
#endif  // !_MSC_VER

withdraw_excavate_hero_reply::withdraw_excavate_hero_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.withdraw_excavate_hero_reply)
}

void withdraw_excavate_hero_reply::InitAsDefaultInstance() {
}

withdraw_excavate_hero_reply::withdraw_excavate_hero_reply(const withdraw_excavate_hero_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.withdraw_excavate_hero_reply)
}

void withdraw_excavate_hero_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

withdraw_excavate_hero_reply::~withdraw_excavate_hero_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.withdraw_excavate_hero_reply)
  SharedDtor();
}

void withdraw_excavate_hero_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void withdraw_excavate_hero_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* withdraw_excavate_hero_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return withdraw_excavate_hero_reply_descriptor_;
}

const withdraw_excavate_hero_reply& withdraw_excavate_hero_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

withdraw_excavate_hero_reply* withdraw_excavate_hero_reply::default_instance_ = NULL;

withdraw_excavate_hero_reply* withdraw_excavate_hero_reply::New() const {
  return new withdraw_excavate_hero_reply;
}

void withdraw_excavate_hero_reply::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool withdraw_excavate_hero_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.withdraw_excavate_hero_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1 [default = success];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.withdraw_excavate_hero_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.withdraw_excavate_hero_reply)
  return false;
#undef DO_
}

void withdraw_excavate_hero_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.withdraw_excavate_hero_reply)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.withdraw_excavate_hero_reply)
}

::google::protobuf::uint8* withdraw_excavate_hero_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.withdraw_excavate_hero_reply)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.withdraw_excavate_hero_reply)
  return target;
}

int withdraw_excavate_hero_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1 [default = success];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void withdraw_excavate_hero_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const withdraw_excavate_hero_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const withdraw_excavate_hero_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void withdraw_excavate_hero_reply::MergeFrom(const withdraw_excavate_hero_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void withdraw_excavate_hero_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void withdraw_excavate_hero_reply::CopyFrom(const withdraw_excavate_hero_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool withdraw_excavate_hero_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void withdraw_excavate_hero_reply::Swap(withdraw_excavate_hero_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata withdraw_excavate_hero_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = withdraw_excavate_hero_reply_descriptor_;
  metadata.reflection = withdraw_excavate_hero_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int draw_excavate_def_rwd_reply::kResultFieldNumber;
const int draw_excavate_def_rwd_reply::kDrawVitalityFieldNumber;
#endif  // !_MSC_VER

draw_excavate_def_rwd_reply::draw_excavate_def_rwd_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.draw_excavate_def_rwd_reply)
}

void draw_excavate_def_rwd_reply::InitAsDefaultInstance() {
}

draw_excavate_def_rwd_reply::draw_excavate_def_rwd_reply(const draw_excavate_def_rwd_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.draw_excavate_def_rwd_reply)
}

void draw_excavate_def_rwd_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _draw_vitality_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

draw_excavate_def_rwd_reply::~draw_excavate_def_rwd_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.draw_excavate_def_rwd_reply)
  SharedDtor();
}

void draw_excavate_def_rwd_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void draw_excavate_def_rwd_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* draw_excavate_def_rwd_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return draw_excavate_def_rwd_reply_descriptor_;
}

const draw_excavate_def_rwd_reply& draw_excavate_def_rwd_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

draw_excavate_def_rwd_reply* draw_excavate_def_rwd_reply::default_instance_ = NULL;

draw_excavate_def_rwd_reply* draw_excavate_def_rwd_reply::New() const {
  return new draw_excavate_def_rwd_reply;
}

void draw_excavate_def_rwd_reply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<draw_excavate_def_rwd_reply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_result_, _draw_vitality_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool draw_excavate_def_rwd_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.draw_excavate_def_rwd_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1 [default = success];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__draw_vitality;
        break;
      }

      // optional uint32 _draw_vitality = 2;
      case 2: {
        if (tag == 16) {
         parse__draw_vitality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_draw_vitality_)));
          set_has__draw_vitality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.draw_excavate_def_rwd_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.draw_excavate_def_rwd_reply)
  return false;
#undef DO_
}

void draw_excavate_def_rwd_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.draw_excavate_def_rwd_reply)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // optional uint32 _draw_vitality = 2;
  if (has__draw_vitality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_draw_vitality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.draw_excavate_def_rwd_reply)
}

::google::protobuf::uint8* draw_excavate_def_rwd_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.draw_excavate_def_rwd_reply)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // optional uint32 _draw_vitality = 2;
  if (has__draw_vitality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_draw_vitality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.draw_excavate_def_rwd_reply)
  return target;
}

int draw_excavate_def_rwd_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1 [default = success];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional uint32 _draw_vitality = 2;
    if (has__draw_vitality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_draw_vitality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void draw_excavate_def_rwd_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const draw_excavate_def_rwd_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const draw_excavate_def_rwd_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void draw_excavate_def_rwd_reply::MergeFrom(const draw_excavate_def_rwd_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__draw_vitality()) {
      set__draw_vitality(from._draw_vitality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void draw_excavate_def_rwd_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void draw_excavate_def_rwd_reply::CopyFrom(const draw_excavate_def_rwd_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool draw_excavate_def_rwd_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void draw_excavate_def_rwd_reply::Swap(draw_excavate_def_rwd_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_draw_vitality_, other->_draw_vitality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata draw_excavate_def_rwd_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = draw_excavate_def_rwd_reply_descriptor_;
  metadata.reflection = draw_excavate_def_rwd_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int drop_excavate_reply::kResultFieldNumber;
const int drop_excavate_reply::kRewardFieldNumber;
#endif  // !_MSC_VER

drop_excavate_reply::drop_excavate_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.drop_excavate_reply)
}

void drop_excavate_reply::InitAsDefaultInstance() {
  _reward_ = const_cast< ::client_baseserver::excavate_reward*>(&::client_baseserver::excavate_reward::default_instance());
}

drop_excavate_reply::drop_excavate_reply(const drop_excavate_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.drop_excavate_reply)
}

void drop_excavate_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

drop_excavate_reply::~drop_excavate_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.drop_excavate_reply)
  SharedDtor();
}

void drop_excavate_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _reward_;
  }
}

void drop_excavate_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* drop_excavate_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return drop_excavate_reply_descriptor_;
}

const drop_excavate_reply& drop_excavate_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

drop_excavate_reply* drop_excavate_reply::default_instance_ = NULL;

drop_excavate_reply* drop_excavate_reply::New() const {
  return new drop_excavate_reply;
}

void drop_excavate_reply::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _result_ = 0;
    if (has__reward()) {
      if (_reward_ != NULL) _reward_->::client_baseserver::excavate_reward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool drop_excavate_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.drop_excavate_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1 [default = success];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__reward;
        break;
      }

      // optional .client_baseserver.excavate_reward _reward = 2;
      case 2: {
        if (tag == 18) {
         parse__reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.drop_excavate_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.drop_excavate_reply)
  return false;
#undef DO_
}

void drop_excavate_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.drop_excavate_reply)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // optional .client_baseserver.excavate_reward _reward = 2;
  if (has__reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.drop_excavate_reply)
}

::google::protobuf::uint8* drop_excavate_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.drop_excavate_reply)
  // required .client_baseserver.result _result = 1 [default = success];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // optional .client_baseserver.excavate_reward _reward = 2;
  if (has__reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.drop_excavate_reply)
  return target;
}

int drop_excavate_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1 [default = success];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional .client_baseserver.excavate_reward _reward = 2;
    if (has__reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void drop_excavate_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const drop_excavate_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const drop_excavate_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void drop_excavate_reply::MergeFrom(const drop_excavate_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__reward()) {
      mutable__reward()->::client_baseserver::excavate_reward::MergeFrom(from._reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void drop_excavate_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void drop_excavate_reply::CopyFrom(const drop_excavate_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool drop_excavate_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__reward()) {
    if (!this->_reward().IsInitialized()) return false;
  }
  return true;
}

void drop_excavate_reply::Swap(drop_excavate_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_reward_, other->_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata drop_excavate_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = drop_excavate_reply_descriptor_;
  metadata.reflection = drop_excavate_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int change_server_reply::kResultFieldNumber;
const int change_server_reply::kServerInfoFieldNumber;
#endif  // !_MSC_VER

change_server_reply::change_server_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.change_server_reply)
}

void change_server_reply::InitAsDefaultInstance() {
}

change_server_reply::change_server_reply(const change_server_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.change_server_reply)
}

void change_server_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

change_server_reply::~change_server_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.change_server_reply)
  SharedDtor();
}

void change_server_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void change_server_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* change_server_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return change_server_reply_descriptor_;
}

const change_server_reply& change_server_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

change_server_reply* change_server_reply::default_instance_ = NULL;

change_server_reply* change_server_reply::New() const {
  return new change_server_reply;
}

void change_server_reply::Clear() {
  _result_ = 0;
  _server_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool change_server_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.change_server_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.server_opt_result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::server_opt_result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::server_opt_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__server_info;
        break;
      }

      // repeated .client_baseserver.server_info _server_info = 2;
      case 2: {
        if (tag == 18) {
         parse__server_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__server_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__server_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.change_server_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.change_server_reply)
  return false;
#undef DO_
}

void change_server_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.change_server_reply)
  // required .client_baseserver.server_opt_result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // repeated .client_baseserver.server_info _server_info = 2;
  for (int i = 0; i < this->_server_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_server_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.change_server_reply)
}

::google::protobuf::uint8* change_server_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.change_server_reply)
  // required .client_baseserver.server_opt_result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // repeated .client_baseserver.server_info _server_info = 2;
  for (int i = 0; i < this->_server_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_server_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.change_server_reply)
  return target;
}

int change_server_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.server_opt_result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  // repeated .client_baseserver.server_info _server_info = 2;
  total_size += 1 * this->_server_info_size();
  for (int i = 0; i < this->_server_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_server_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void change_server_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const change_server_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const change_server_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void change_server_reply::MergeFrom(const change_server_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _server_info_.MergeFrom(from._server_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void change_server_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void change_server_reply::CopyFrom(const change_server_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool change_server_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_server_info())) return false;
  return true;
}

void change_server_reply::Swap(change_server_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    _server_info_.Swap(&other->_server_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata change_server_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = change_server_reply_descriptor_;
  metadata.reflection = change_server_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int server_info::kServerIdFieldNumber;
const int server_info::kServerNameFieldNumber;
const int server_info::kPlayerNameFieldNumber;
const int server_info::kPlayerLevelFieldNumber;
#endif  // !_MSC_VER

server_info::server_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.server_info)
}

void server_info::InitAsDefaultInstance() {
}

server_info::server_info(const server_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.server_info)
}

void server_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _server_id_ = 0u;
  _server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _player_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

server_info::~server_info() {
  // @@protoc_insertion_point(destructor:client_baseserver.server_info)
  SharedDtor();
}

void server_info::SharedDtor() {
  if (_server_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _server_name_;
  }
  if (_player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _player_name_;
  }
  if (this != default_instance_) {
  }
}

void server_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* server_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return server_info_descriptor_;
}

const server_info& server_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

server_info* server_info::default_instance_ = NULL;

server_info* server_info::New() const {
  return new server_info;
}

void server_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<server_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(_server_id_, _player_level_);
    if (has__server_name()) {
      if (_server_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _server_name_->clear();
      }
    }
    if (has__player_name()) {
      if (_player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _player_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool server_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.server_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _server_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_server_id_)));
          set_has__server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__server_name;
        break;
      }

      // required string _server_name = 2;
      case 2: {
        if (tag == 18) {
         parse__server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_server_name().data(), this->_server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_server_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__player_name;
        break;
      }

      // optional string _player_name = 3;
      case 3: {
        if (tag == 26) {
         parse__player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_player_name().data(), this->_player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_player_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__player_level;
        break;
      }

      // optional uint32 _player_level = 4;
      case 4: {
        if (tag == 32) {
         parse__player_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_player_level_)));
          set_has__player_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.server_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.server_info)
  return false;
#undef DO_
}

void server_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.server_info)
  // required uint32 _server_id = 1;
  if (has__server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_server_id(), output);
  }

  // required string _server_name = 2;
  if (has__server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_server_name().data(), this->_server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->_server_name(), output);
  }

  // optional string _player_name = 3;
  if (has__player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_player_name().data(), this->_player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->_player_name(), output);
  }

  // optional uint32 _player_level = 4;
  if (has__player_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_player_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.server_info)
}

::google::protobuf::uint8* server_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.server_info)
  // required uint32 _server_id = 1;
  if (has__server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_server_id(), target);
  }

  // required string _server_name = 2;
  if (has__server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_server_name().data(), this->_server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_server_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_server_name(), target);
  }

  // optional string _player_name = 3;
  if (has__player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_player_name().data(), this->_player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->_player_name(), target);
  }

  // optional uint32 _player_level = 4;
  if (has__player_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_player_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.server_info)
  return target;
}

int server_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _server_id = 1;
    if (has__server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_server_id());
    }

    // required string _server_name = 2;
    if (has__server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_server_name());
    }

    // optional string _player_name = 3;
    if (has__player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_player_name());
    }

    // optional uint32 _player_level = 4;
    if (has__player_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_player_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void server_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const server_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const server_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void server_info::MergeFrom(const server_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__server_id()) {
      set__server_id(from._server_id());
    }
    if (from.has__server_name()) {
      set__server_name(from._server_name());
    }
    if (from.has__player_name()) {
      set__player_name(from._player_name());
    }
    if (from.has__player_level()) {
      set__player_level(from._player_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void server_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void server_info::CopyFrom(const server_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool server_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void server_info::Swap(server_info* other) {
  if (other != this) {
    std::swap(_server_id_, other->_server_id_);
    std::swap(_server_name_, other->_server_name_);
    std::swap(_player_name_, other->_player_name_);
    std::swap(_player_level_, other->_player_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata server_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = server_info_descriptor_;
  metadata.reflection = server_info_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* guild_instance_query_is_can_jump_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_query_is_can_jump_descriptor_;
}
bool guild_instance_query_is_can_jump_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const guild_instance_query_is_can_jump guild_instance_query::true;
const guild_instance_query_is_can_jump guild_instance_query::false;
const guild_instance_query_is_can_jump guild_instance_query::is_can_jump_MIN;
const guild_instance_query_is_can_jump guild_instance_query::is_can_jump_MAX;
const int guild_instance_query::is_can_jump_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int guild_instance_query::kCurrentRaidIdFieldNumber;
const int guild_instance_query::kSummaryFieldNumber;
const int guild_instance_query::kStagePassFieldNumber;
const int guild_instance_query::kIsCanJumpFieldNumber;
#endif  // !_MSC_VER

guild_instance_query::guild_instance_query()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_instance_query)
}

void guild_instance_query::InitAsDefaultInstance() {
}

guild_instance_query::guild_instance_query(const guild_instance_query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_instance_query)
}

void guild_instance_query::SharedCtor() {
  _cached_size_ = 0;
  _current_raid_id_ = 0u;
  _stage_pass_ = 0u;
  _is_can_jump_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_instance_query::~guild_instance_query() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_instance_query)
  SharedDtor();
}

void guild_instance_query::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_instance_query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_instance_query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_query_descriptor_;
}

const guild_instance_query& guild_instance_query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_instance_query* guild_instance_query::default_instance_ = NULL;

guild_instance_query* guild_instance_query::New() const {
  return new guild_instance_query;
}

void guild_instance_query::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_instance_query*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(_current_raid_id_, _stage_pass_);
    _is_can_jump_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _summary_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_instance_query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_instance_query)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _current_raid_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_current_raid_id_)));
          set_has__current_raid_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__summary;
        break;
      }

      // repeated .client_baseserver.guild_instance_summary _summary = 2;
      case 2: {
        if (tag == 18) {
         parse__summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__summary;
        if (input->ExpectTag(24)) goto parse__stage_pass;
        break;
      }

      // optional uint32 _stage_pass = 3;
      case 3: {
        if (tag == 24) {
         parse__stage_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stage_pass_)));
          set_has__stage_pass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__is_can_jump;
        break;
      }

      // required .client_baseserver.guild_instance_query.is_can_jump _is_can_jump = 4;
      case 4: {
        if (tag == 32) {
         parse__is_can_jump:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::guild_instance_query_is_can_jump_IsValid(value)) {
            set__is_can_jump(static_cast< ::client_baseserver::guild_instance_query_is_can_jump >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_instance_query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_instance_query)
  return false;
#undef DO_
}

void guild_instance_query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_instance_query)
  // required uint32 _current_raid_id = 1;
  if (has__current_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_current_raid_id(), output);
  }

  // repeated .client_baseserver.guild_instance_summary _summary = 2;
  for (int i = 0; i < this->_summary_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_summary(i), output);
  }

  // optional uint32 _stage_pass = 3;
  if (has__stage_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_stage_pass(), output);
  }

  // required .client_baseserver.guild_instance_query.is_can_jump _is_can_jump = 4;
  if (has__is_can_jump()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->_is_can_jump(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_instance_query)
}

::google::protobuf::uint8* guild_instance_query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_instance_query)
  // required uint32 _current_raid_id = 1;
  if (has__current_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_current_raid_id(), target);
  }

  // repeated .client_baseserver.guild_instance_summary _summary = 2;
  for (int i = 0; i < this->_summary_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_summary(i), target);
  }

  // optional uint32 _stage_pass = 3;
  if (has__stage_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_stage_pass(), target);
  }

  // required .client_baseserver.guild_instance_query.is_can_jump _is_can_jump = 4;
  if (has__is_can_jump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->_is_can_jump(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_instance_query)
  return target;
}

int guild_instance_query::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _current_raid_id = 1;
    if (has__current_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_current_raid_id());
    }

    // optional uint32 _stage_pass = 3;
    if (has__stage_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stage_pass());
    }

    // required .client_baseserver.guild_instance_query.is_can_jump _is_can_jump = 4;
    if (has__is_can_jump()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_is_can_jump());
    }

  }
  // repeated .client_baseserver.guild_instance_summary _summary = 2;
  total_size += 1 * this->_summary_size();
  for (int i = 0; i < this->_summary_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_summary(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_instance_query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_instance_query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_instance_query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_instance_query::MergeFrom(const guild_instance_query& from) {
  GOOGLE_CHECK_NE(&from, this);
  _summary_.MergeFrom(from._summary_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__current_raid_id()) {
      set__current_raid_id(from._current_raid_id());
    }
    if (from.has__stage_pass()) {
      set__stage_pass(from._stage_pass());
    }
    if (from.has__is_can_jump()) {
      set__is_can_jump(from._is_can_jump());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_instance_query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_instance_query::CopyFrom(const guild_instance_query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_instance_query::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_summary())) return false;
  return true;
}

void guild_instance_query::Swap(guild_instance_query* other) {
  if (other != this) {
    std::swap(_current_raid_id_, other->_current_raid_id_);
    _summary_.Swap(&other->_summary_);
    std::swap(_stage_pass_, other->_stage_pass_);
    std::swap(_is_can_jump_, other->_is_can_jump_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_instance_query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_instance_query_descriptor_;
  metadata.reflection = guild_instance_query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_chapter::kIdFieldNumber;
const int guild_chapter::kProgressFieldNumber;
const int guild_chapter::kBeginTimeFieldNumber;
const int guild_chapter::kRestTimesFieldNumber;
const int guild_chapter::kCurStageIdFieldNumber;
#endif  // !_MSC_VER

guild_chapter::guild_chapter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_chapter)
}

void guild_chapter::InitAsDefaultInstance() {
}

guild_chapter::guild_chapter(const guild_chapter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_chapter)
}

void guild_chapter::SharedCtor() {
  _cached_size_ = 0;
  _id_ = 0u;
  _progress_ = 0u;
  _begin_time_ = 0u;
  _rest_times_ = 0u;
  _cur_stage_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_chapter::~guild_chapter() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_chapter)
  SharedDtor();
}

void guild_chapter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_chapter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_chapter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_chapter_descriptor_;
}

const guild_chapter& guild_chapter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_chapter* guild_chapter::default_instance_ = NULL;

guild_chapter* guild_chapter::New() const {
  return new guild_chapter;
}

void guild_chapter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_chapter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(_id_, _cur_stage_id_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_chapter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_chapter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_id_)));
          set_has__id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__progress;
        break;
      }

      // required uint32 _progress = 2;
      case 2: {
        if (tag == 16) {
         parse__progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_progress_)));
          set_has__progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__begin_time;
        break;
      }

      // required uint32 _begin_time = 3;
      case 3: {
        if (tag == 24) {
         parse__begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_begin_time_)));
          set_has__begin_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__rest_times;
        break;
      }

      // required uint32 _rest_times = 4;
      case 4: {
        if (tag == 32) {
         parse__rest_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_rest_times_)));
          set_has__rest_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__cur_stage_id;
        break;
      }

      // required uint32 _cur_stage_id = 5;
      case 5: {
        if (tag == 40) {
         parse__cur_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_cur_stage_id_)));
          set_has__cur_stage_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_chapter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_chapter)
  return false;
#undef DO_
}

void guild_chapter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_chapter)
  // required uint32 _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_id(), output);
  }

  // required uint32 _progress = 2;
  if (has__progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_progress(), output);
  }

  // required uint32 _begin_time = 3;
  if (has__begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_begin_time(), output);
  }

  // required uint32 _rest_times = 4;
  if (has__rest_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_rest_times(), output);
  }

  // required uint32 _cur_stage_id = 5;
  if (has__cur_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_cur_stage_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_chapter)
}

::google::protobuf::uint8* guild_chapter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_chapter)
  // required uint32 _id = 1;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_id(), target);
  }

  // required uint32 _progress = 2;
  if (has__progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_progress(), target);
  }

  // required uint32 _begin_time = 3;
  if (has__begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_begin_time(), target);
  }

  // required uint32 _rest_times = 4;
  if (has__rest_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_rest_times(), target);
  }

  // required uint32 _cur_stage_id = 5;
  if (has__cur_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_cur_stage_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_chapter)
  return target;
}

int guild_chapter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _id = 1;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_id());
    }

    // required uint32 _progress = 2;
    if (has__progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_progress());
    }

    // required uint32 _begin_time = 3;
    if (has__begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_begin_time());
    }

    // required uint32 _rest_times = 4;
    if (has__rest_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_rest_times());
    }

    // required uint32 _cur_stage_id = 5;
    if (has__cur_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_cur_stage_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_chapter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_chapter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_chapter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_chapter::MergeFrom(const guild_chapter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__id()) {
      set__id(from._id());
    }
    if (from.has__progress()) {
      set__progress(from._progress());
    }
    if (from.has__begin_time()) {
      set__begin_time(from._begin_time());
    }
    if (from.has__rest_times()) {
      set__rest_times(from._rest_times());
    }
    if (from.has__cur_stage_id()) {
      set__cur_stage_id(from._cur_stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_chapter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_chapter::CopyFrom(const guild_chapter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_chapter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void guild_chapter::Swap(guild_chapter* other) {
  if (other != this) {
    std::swap(_id_, other->_id_);
    std::swap(_progress_, other->_progress_);
    std::swap(_begin_time_, other->_begin_time_);
    std::swap(_rest_times_, other->_rest_times_);
    std::swap(_cur_stage_id_, other->_cur_stage_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_chapter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_chapter_descriptor_;
  metadata.reflection = guild_chapter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* guild_instance_detail_challenger_status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_detail_challenger_status_descriptor_;
}
bool guild_instance_detail_challenger_status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const guild_instance_detail_challenger_status guild_instance_detail::battle;
const guild_instance_detail_challenger_status guild_instance_detail::prepare;
const guild_instance_detail_challenger_status guild_instance_detail::challenger_status_MIN;
const guild_instance_detail_challenger_status guild_instance_detail::challenger_status_MAX;
const int guild_instance_detail::challenger_status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int guild_instance_detail::kStageFieldNumber;
const int guild_instance_detail::kWaveFieldNumber;
const int guild_instance_detail::kHpFieldNumber;
const int guild_instance_detail::kRecordFieldNumber;
const int guild_instance_detail::kChallengerFieldNumber;
const int guild_instance_detail::kChallengerStatusFieldNumber;
#endif  // !_MSC_VER

guild_instance_detail::guild_instance_detail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_instance_detail)
}

void guild_instance_detail::InitAsDefaultInstance() {
  _challenger_ = const_cast< ::client_baseserver::guild_challenger*>(&::client_baseserver::guild_challenger::default_instance());
}

guild_instance_detail::guild_instance_detail(const guild_instance_detail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_instance_detail)
}

void guild_instance_detail::SharedCtor() {
  _cached_size_ = 0;
  _stage_ = 0u;
  _wave_ = 0u;
  _challenger_ = NULL;
  _challenger_status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_instance_detail::~guild_instance_detail() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_instance_detail)
  SharedDtor();
}

void guild_instance_detail::SharedDtor() {
  if (this != default_instance_) {
    delete _challenger_;
  }
}

void guild_instance_detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_instance_detail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_detail_descriptor_;
}

const guild_instance_detail& guild_instance_detail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_instance_detail* guild_instance_detail::default_instance_ = NULL;

guild_instance_detail* guild_instance_detail::New() const {
  return new guild_instance_detail;
}

void guild_instance_detail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_instance_detail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 51) {
    ZR_(_stage_, _wave_);
    if (has__challenger()) {
      if (_challenger_ != NULL) _challenger_->::client_baseserver::guild_challenger::Clear();
    }
    _challenger_status_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  _hp_.Clear();
  _record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_instance_detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_instance_detail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _stage = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stage_)));
          set_has__stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__wave;
        break;
      }

      // required uint32 _wave = 2;
      case 2: {
        if (tag == 16) {
         parse__wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_wave_)));
          set_has__wave();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__hp;
        break;
      }

      // repeated uint32 _hp = 3;
      case 3: {
        if (tag == 24) {
         parse__hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable__hp())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__hp())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__hp;
        if (input->ExpectTag(34)) goto parse__record;
        break;
      }

      // repeated .client_baseserver.guild_instance_record _record = 4;
      case 4: {
        if (tag == 34) {
         parse__record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__record;
        if (input->ExpectTag(42)) goto parse__challenger;
        break;
      }

      // optional .client_baseserver.guild_challenger _challenger = 5;
      case 5: {
        if (tag == 42) {
         parse__challenger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__challenger()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse__challenger_status;
        break;
      }

      // optional .client_baseserver.guild_instance_detail.challenger_status _challenger_status = 6;
      case 6: {
        if (tag == 48) {
         parse__challenger_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::guild_instance_detail_challenger_status_IsValid(value)) {
            set__challenger_status(static_cast< ::client_baseserver::guild_instance_detail_challenger_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_instance_detail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_instance_detail)
  return false;
#undef DO_
}

void guild_instance_detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_instance_detail)
  // required uint32 _stage = 1;
  if (has__stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_stage(), output);
  }

  // required uint32 _wave = 2;
  if (has__wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_wave(), output);
  }

  // repeated uint32 _hp = 3;
  for (int i = 0; i < this->_hp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->_hp(i), output);
  }

  // repeated .client_baseserver.guild_instance_record _record = 4;
  for (int i = 0; i < this->_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_record(i), output);
  }

  // optional .client_baseserver.guild_challenger _challenger = 5;
  if (has__challenger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_challenger(), output);
  }

  // optional .client_baseserver.guild_instance_detail.challenger_status _challenger_status = 6;
  if (has__challenger_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->_challenger_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_instance_detail)
}

::google::protobuf::uint8* guild_instance_detail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_instance_detail)
  // required uint32 _stage = 1;
  if (has__stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_stage(), target);
  }

  // required uint32 _wave = 2;
  if (has__wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_wave(), target);
  }

  // repeated uint32 _hp = 3;
  for (int i = 0; i < this->_hp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->_hp(i), target);
  }

  // repeated .client_baseserver.guild_instance_record _record = 4;
  for (int i = 0; i < this->_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_record(i), target);
  }

  // optional .client_baseserver.guild_challenger _challenger = 5;
  if (has__challenger()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_challenger(), target);
  }

  // optional .client_baseserver.guild_instance_detail.challenger_status _challenger_status = 6;
  if (has__challenger_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->_challenger_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_instance_detail)
  return target;
}

int guild_instance_detail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _stage = 1;
    if (has__stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stage());
    }

    // required uint32 _wave = 2;
    if (has__wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_wave());
    }

    // optional .client_baseserver.guild_challenger _challenger = 5;
    if (has__challenger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_challenger());
    }

    // optional .client_baseserver.guild_instance_detail.challenger_status _challenger_status = 6;
    if (has__challenger_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_challenger_status());
    }

  }
  // repeated uint32 _hp = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->_hp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_hp(i));
    }
    total_size += 1 * this->_hp_size() + data_size;
  }

  // repeated .client_baseserver.guild_instance_record _record = 4;
  total_size += 1 * this->_record_size();
  for (int i = 0; i < this->_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_instance_detail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_instance_detail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_instance_detail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_instance_detail::MergeFrom(const guild_instance_detail& from) {
  GOOGLE_CHECK_NE(&from, this);
  _hp_.MergeFrom(from._hp_);
  _record_.MergeFrom(from._record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__stage()) {
      set__stage(from._stage());
    }
    if (from.has__wave()) {
      set__wave(from._wave());
    }
    if (from.has__challenger()) {
      mutable__challenger()->::client_baseserver::guild_challenger::MergeFrom(from._challenger());
    }
    if (from.has__challenger_status()) {
      set__challenger_status(from._challenger_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_instance_detail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_instance_detail::CopyFrom(const guild_instance_detail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_instance_detail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_record())) return false;
  if (has__challenger()) {
    if (!this->_challenger().IsInitialized()) return false;
  }
  return true;
}

void guild_instance_detail::Swap(guild_instance_detail* other) {
  if (other != this) {
    std::swap(_stage_, other->_stage_);
    std::swap(_wave_, other->_wave_);
    _hp_.Swap(&other->_hp_);
    _record_.Swap(&other->_record_);
    std::swap(_challenger_, other->_challenger_);
    std::swap(_challenger_status_, other->_challenger_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_instance_detail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_instance_detail_descriptor_;
  metadata.reflection = guild_instance_detail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_challenger::kSummaryFieldNumber;
#endif  // !_MSC_VER

guild_challenger::guild_challenger()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_challenger)
}

void guild_challenger::InitAsDefaultInstance() {
  _summary_ = const_cast< ::client_baseserver::user_summary*>(&::client_baseserver::user_summary::default_instance());
}

guild_challenger::guild_challenger(const guild_challenger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_challenger)
}

void guild_challenger::SharedCtor() {
  _cached_size_ = 0;
  _summary_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_challenger::~guild_challenger() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_challenger)
  SharedDtor();
}

void guild_challenger::SharedDtor() {
  if (this != default_instance_) {
    delete _summary_;
  }
}

void guild_challenger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_challenger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_challenger_descriptor_;
}

const guild_challenger& guild_challenger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_challenger* guild_challenger::default_instance_ = NULL;

guild_challenger* guild_challenger::New() const {
  return new guild_challenger;
}

void guild_challenger::Clear() {
  if (has__summary()) {
    if (_summary_ != NULL) _summary_->::client_baseserver::user_summary::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_challenger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_challenger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.user_summary _summary = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_challenger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_challenger)
  return false;
#undef DO_
}

void guild_challenger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_challenger)
  // required .client_baseserver.user_summary _summary = 1;
  if (has__summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_summary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_challenger)
}

::google::protobuf::uint8* guild_challenger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_challenger)
  // required .client_baseserver.user_summary _summary = 1;
  if (has__summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_summary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_challenger)
  return target;
}

int guild_challenger::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.user_summary _summary = 1;
    if (has__summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_summary());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_challenger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_challenger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_challenger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_challenger::MergeFrom(const guild_challenger& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__summary()) {
      mutable__summary()->::client_baseserver::user_summary::MergeFrom(from._summary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_challenger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_challenger::CopyFrom(const guild_challenger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_challenger::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__summary()) {
    if (!this->_summary().IsInitialized()) return false;
  }
  return true;
}

void guild_challenger::Swap(guild_challenger* other) {
  if (other != this) {
    std::swap(_summary_, other->_summary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_challenger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_challenger_descriptor_;
  metadata.reflection = guild_challenger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_instance_record::kChallengerFieldNumber;
const int guild_instance_record::kDamageFieldNumber;
#endif  // !_MSC_VER

guild_instance_record::guild_instance_record()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_instance_record)
}

void guild_instance_record::InitAsDefaultInstance() {
  _challenger_ = const_cast< ::client_baseserver::guild_challenger*>(&::client_baseserver::guild_challenger::default_instance());
}

guild_instance_record::guild_instance_record(const guild_instance_record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_instance_record)
}

void guild_instance_record::SharedCtor() {
  _cached_size_ = 0;
  _challenger_ = NULL;
  _damage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_instance_record::~guild_instance_record() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_instance_record)
  SharedDtor();
}

void guild_instance_record::SharedDtor() {
  if (this != default_instance_) {
    delete _challenger_;
  }
}

void guild_instance_record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_instance_record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_record_descriptor_;
}

const guild_instance_record& guild_instance_record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_instance_record* guild_instance_record::default_instance_ = NULL;

guild_instance_record* guild_instance_record::New() const {
  return new guild_instance_record;
}

void guild_instance_record::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has__challenger()) {
      if (_challenger_ != NULL) _challenger_->::client_baseserver::guild_challenger::Clear();
    }
    _damage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_instance_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_instance_record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.guild_challenger _challenger = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__challenger()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__damage;
        break;
      }

      // required uint32 _damage = 2;
      case 2: {
        if (tag == 16) {
         parse__damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_damage_)));
          set_has__damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_instance_record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_instance_record)
  return false;
#undef DO_
}

void guild_instance_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_instance_record)
  // required .client_baseserver.guild_challenger _challenger = 1;
  if (has__challenger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_challenger(), output);
  }

  // required uint32 _damage = 2;
  if (has__damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_damage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_instance_record)
}

::google::protobuf::uint8* guild_instance_record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_instance_record)
  // required .client_baseserver.guild_challenger _challenger = 1;
  if (has__challenger()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_challenger(), target);
  }

  // required uint32 _damage = 2;
  if (has__damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_damage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_instance_record)
  return target;
}

int guild_instance_record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.guild_challenger _challenger = 1;
    if (has__challenger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_challenger());
    }

    // required uint32 _damage = 2;
    if (has__damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_damage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_instance_record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_instance_record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_instance_record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_instance_record::MergeFrom(const guild_instance_record& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__challenger()) {
      mutable__challenger()->::client_baseserver::guild_challenger::MergeFrom(from._challenger());
    }
    if (from.has__damage()) {
      set__damage(from._damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_instance_record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_instance_record::CopyFrom(const guild_instance_record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_instance_record::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has__challenger()) {
    if (!this->_challenger().IsInitialized()) return false;
  }
  return true;
}

void guild_instance_record::Swap(guild_instance_record* other) {
  if (other != this) {
    std::swap(_challenger_, other->_challenger_);
    std::swap(_damage_, other->_damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_instance_record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_instance_record_descriptor_;
  metadata.reflection = guild_instance_record_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_instance_summary::kIdFieldNumber;
const int guild_instance_summary::kStageIdFieldNumber;
const int guild_instance_summary::kLeftTimeFieldNumber;
const int guild_instance_summary::kStartTimeFieldNumber;
const int guild_instance_summary::kProgressFieldNumber;
const int guild_instance_summary::kStageProgressFieldNumber;
const int guild_instance_summary::kBattleUserIdFieldNumber;
#endif  // !_MSC_VER

guild_instance_summary::guild_instance_summary()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_instance_summary)
}

void guild_instance_summary::InitAsDefaultInstance() {
}

guild_instance_summary::guild_instance_summary(const guild_instance_summary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_instance_summary)
}

void guild_instance_summary::SharedCtor() {
  _cached_size_ = 0;
  _id_ = 0u;
  _stage_id_ = 0u;
  _left_time_ = 0u;
  _start_time_ = 0u;
  _progress_ = 0u;
  _stage_progress_ = 0u;
  _battle_user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_instance_summary::~guild_instance_summary() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_instance_summary)
  SharedDtor();
}

void guild_instance_summary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_instance_summary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_instance_summary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_summary_descriptor_;
}

const guild_instance_summary& guild_instance_summary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_instance_summary* guild_instance_summary::default_instance_ = NULL;

guild_instance_summary* guild_instance_summary::New() const {
  return new guild_instance_summary;
}

void guild_instance_summary::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_instance_summary*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(_id_, _battle_user_id_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_instance_summary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_instance_summary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_id_)));
          set_has__id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__stage_id;
        break;
      }

      // required uint32 _stage_id = 2;
      case 2: {
        if (tag == 16) {
         parse__stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stage_id_)));
          set_has__stage_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__left_time;
        break;
      }

      // required uint32 _left_time = 3;
      case 3: {
        if (tag == 24) {
         parse__left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_left_time_)));
          set_has__left_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__start_time;
        break;
      }

      // required uint32 _start_time = 4;
      case 4: {
        if (tag == 32) {
         parse__start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_start_time_)));
          set_has__start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__progress;
        break;
      }

      // required uint32 _progress = 5;
      case 5: {
        if (tag == 40) {
         parse__progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_progress_)));
          set_has__progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse__stage_progress;
        break;
      }

      // required uint32 _stage_progress = 6;
      case 6: {
        if (tag == 48) {
         parse__stage_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stage_progress_)));
          set_has__stage_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse__battle_user_id;
        break;
      }

      // optional uint32 _battle_user_id = 7;
      case 7: {
        if (tag == 56) {
         parse__battle_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_battle_user_id_)));
          set_has__battle_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_instance_summary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_instance_summary)
  return false;
#undef DO_
}

void guild_instance_summary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_instance_summary)
  // required uint32 _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_id(), output);
  }

  // required uint32 _stage_id = 2;
  if (has__stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_stage_id(), output);
  }

  // required uint32 _left_time = 3;
  if (has__left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_left_time(), output);
  }

  // required uint32 _start_time = 4;
  if (has__start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_start_time(), output);
  }

  // required uint32 _progress = 5;
  if (has__progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_progress(), output);
  }

  // required uint32 _stage_progress = 6;
  if (has__stage_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_stage_progress(), output);
  }

  // optional uint32 _battle_user_id = 7;
  if (has__battle_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->_battle_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_instance_summary)
}

::google::protobuf::uint8* guild_instance_summary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_instance_summary)
  // required uint32 _id = 1;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_id(), target);
  }

  // required uint32 _stage_id = 2;
  if (has__stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_stage_id(), target);
  }

  // required uint32 _left_time = 3;
  if (has__left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_left_time(), target);
  }

  // required uint32 _start_time = 4;
  if (has__start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_start_time(), target);
  }

  // required uint32 _progress = 5;
  if (has__progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_progress(), target);
  }

  // required uint32 _stage_progress = 6;
  if (has__stage_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_stage_progress(), target);
  }

  // optional uint32 _battle_user_id = 7;
  if (has__battle_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->_battle_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_instance_summary)
  return target;
}

int guild_instance_summary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _id = 1;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_id());
    }

    // required uint32 _stage_id = 2;
    if (has__stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stage_id());
    }

    // required uint32 _left_time = 3;
    if (has__left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_left_time());
    }

    // required uint32 _start_time = 4;
    if (has__start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_start_time());
    }

    // required uint32 _progress = 5;
    if (has__progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_progress());
    }

    // required uint32 _stage_progress = 6;
    if (has__stage_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stage_progress());
    }

    // optional uint32 _battle_user_id = 7;
    if (has__battle_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_battle_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_instance_summary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_instance_summary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_instance_summary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_instance_summary::MergeFrom(const guild_instance_summary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__id()) {
      set__id(from._id());
    }
    if (from.has__stage_id()) {
      set__stage_id(from._stage_id());
    }
    if (from.has__left_time()) {
      set__left_time(from._left_time());
    }
    if (from.has__start_time()) {
      set__start_time(from._start_time());
    }
    if (from.has__progress()) {
      set__progress(from._progress());
    }
    if (from.has__stage_progress()) {
      set__stage_progress(from._stage_progress());
    }
    if (from.has__battle_user_id()) {
      set__battle_user_id(from._battle_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_instance_summary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_instance_summary::CopyFrom(const guild_instance_summary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_instance_summary::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void guild_instance_summary::Swap(guild_instance_summary* other) {
  if (other != this) {
    std::swap(_id_, other->_id_);
    std::swap(_stage_id_, other->_stage_id_);
    std::swap(_left_time_, other->_left_time_);
    std::swap(_start_time_, other->_start_time_);
    std::swap(_progress_, other->_progress_);
    std::swap(_stage_progress_, other->_stage_progress_);
    std::swap(_battle_user_id_, other->_battle_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_instance_summary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_instance_summary_descriptor_;
  metadata.reflection = guild_instance_summary_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* guild_instance_item_drop_state_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_item_drop_state_descriptor_;
}
bool guild_instance_item_drop_state_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const guild_instance_item_drop_state guild_instance_item::no_apply;
const guild_instance_item_drop_state guild_instance_item::apply;
const guild_instance_item_drop_state guild_instance_item::drop_state_MIN;
const guild_instance_item_drop_state guild_instance_item::drop_state_MAX;
const int guild_instance_item::drop_state_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int guild_instance_item::kItemIdFieldNumber;
const int guild_instance_item::kNumFieldNumber;
const int guild_instance_item::kStateFieldNumber;
const int guild_instance_item::kApplyNumFieldNumber;
const int guild_instance_item::kAbleAppCountFieldNumber;
#endif  // !_MSC_VER

guild_instance_item::guild_instance_item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_instance_item)
}

void guild_instance_item::InitAsDefaultInstance() {
}

guild_instance_item::guild_instance_item(const guild_instance_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_instance_item)
}

void guild_instance_item::SharedCtor() {
  _cached_size_ = 0;
  _item_id_ = 0u;
  _num_ = 0u;
  _state_ = 1;
  _apply_num_ = 0u;
  _able_app_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_instance_item::~guild_instance_item() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_instance_item)
  SharedDtor();
}

void guild_instance_item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_instance_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_instance_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_item_descriptor_;
}

const guild_instance_item& guild_instance_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_instance_item* guild_instance_item::default_instance_ = NULL;

guild_instance_item* guild_instance_item::New() const {
  return new guild_instance_item;
}

void guild_instance_item::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_instance_item*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(_item_id_, _num_);
    ZR_(_apply_num_, _able_app_count_);
    _state_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_instance_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_instance_item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_item_id_)));
          set_has__item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__num;
        break;
      }

      // required uint32 _num = 2;
      case 2: {
        if (tag == 16) {
         parse__num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_num_)));
          set_has__num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__state;
        break;
      }

      // required .client_baseserver.guild_instance_item.drop_state _state = 3;
      case 3: {
        if (tag == 24) {
         parse__state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::guild_instance_item_drop_state_IsValid(value)) {
            set__state(static_cast< ::client_baseserver::guild_instance_item_drop_state >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__apply_num;
        break;
      }

      // required uint32 _apply_num = 4;
      case 4: {
        if (tag == 32) {
         parse__apply_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_apply_num_)));
          set_has__apply_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__able_app_count;
        break;
      }

      // required uint32 _able_app_count = 5;
      case 5: {
        if (tag == 40) {
         parse__able_app_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_able_app_count_)));
          set_has__able_app_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_instance_item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_instance_item)
  return false;
#undef DO_
}

void guild_instance_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_instance_item)
  // required uint32 _item_id = 1;
  if (has__item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_item_id(), output);
  }

  // required uint32 _num = 2;
  if (has__num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_num(), output);
  }

  // required .client_baseserver.guild_instance_item.drop_state _state = 3;
  if (has__state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->_state(), output);
  }

  // required uint32 _apply_num = 4;
  if (has__apply_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_apply_num(), output);
  }

  // required uint32 _able_app_count = 5;
  if (has__able_app_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_able_app_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_instance_item)
}

::google::protobuf::uint8* guild_instance_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_instance_item)
  // required uint32 _item_id = 1;
  if (has__item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_item_id(), target);
  }

  // required uint32 _num = 2;
  if (has__num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_num(), target);
  }

  // required .client_baseserver.guild_instance_item.drop_state _state = 3;
  if (has__state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->_state(), target);
  }

  // required uint32 _apply_num = 4;
  if (has__apply_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_apply_num(), target);
  }

  // required uint32 _able_app_count = 5;
  if (has__able_app_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_able_app_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_instance_item)
  return target;
}

int guild_instance_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _item_id = 1;
    if (has__item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_item_id());
    }

    // required uint32 _num = 2;
    if (has__num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_num());
    }

    // required .client_baseserver.guild_instance_item.drop_state _state = 3;
    if (has__state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_state());
    }

    // required uint32 _apply_num = 4;
    if (has__apply_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_apply_num());
    }

    // required uint32 _able_app_count = 5;
    if (has__able_app_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_able_app_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_instance_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_instance_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_instance_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_instance_item::MergeFrom(const guild_instance_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__item_id()) {
      set__item_id(from._item_id());
    }
    if (from.has__num()) {
      set__num(from._num());
    }
    if (from.has__state()) {
      set__state(from._state());
    }
    if (from.has__apply_num()) {
      set__apply_num(from._apply_num());
    }
    if (from.has__able_app_count()) {
      set__able_app_count(from._able_app_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_instance_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_instance_item::CopyFrom(const guild_instance_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_instance_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void guild_instance_item::Swap(guild_instance_item* other) {
  if (other != this) {
    std::swap(_item_id_, other->_item_id_);
    std::swap(_num_, other->_num_);
    std::swap(_state_, other->_state_);
    std::swap(_apply_num_, other->_apply_num_);
    std::swap(_able_app_count_, other->_able_app_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_instance_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_instance_item_descriptor_;
  metadata.reflection = guild_instance_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_instance_drop::kItemsFieldNumber;
const int guild_instance_drop::kRaidIdFieldNumber;
const int guild_instance_drop::kApplyItemIdFieldNumber;
const int guild_instance_drop::kRankFieldNumber;
#endif  // !_MSC_VER

guild_instance_drop::guild_instance_drop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_instance_drop)
}

void guild_instance_drop::InitAsDefaultInstance() {
}

guild_instance_drop::guild_instance_drop(const guild_instance_drop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_instance_drop)
}

void guild_instance_drop::SharedCtor() {
  _cached_size_ = 0;
  _raid_id_ = 0u;
  _apply_item_id_ = 0u;
  _rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_instance_drop::~guild_instance_drop() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_instance_drop)
  SharedDtor();
}

void guild_instance_drop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_instance_drop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_instance_drop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_drop_descriptor_;
}

const guild_instance_drop& guild_instance_drop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_instance_drop* guild_instance_drop::default_instance_ = NULL;

guild_instance_drop* guild_instance_drop::New() const {
  return new guild_instance_drop;
}

void guild_instance_drop::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_instance_drop*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_raid_id_, _rank_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  _items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_instance_drop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_instance_drop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.guild_instance_item _items = 1;
      case 1: {
        if (tag == 10) {
         parse__items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__items;
        if (input->ExpectTag(16)) goto parse__raid_id;
        break;
      }

      // required uint32 _raid_id = 2;
      case 2: {
        if (tag == 16) {
         parse__raid_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_raid_id_)));
          set_has__raid_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__apply_item_id;
        break;
      }

      // optional uint32 _apply_item_id = 3;
      case 3: {
        if (tag == 24) {
         parse__apply_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_apply_item_id_)));
          set_has__apply_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__rank;
        break;
      }

      // optional uint32 _rank = 4;
      case 4: {
        if (tag == 32) {
         parse__rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_rank_)));
          set_has__rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_instance_drop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_instance_drop)
  return false;
#undef DO_
}

void guild_instance_drop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_instance_drop)
  // repeated .client_baseserver.guild_instance_item _items = 1;
  for (int i = 0; i < this->_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_items(i), output);
  }

  // required uint32 _raid_id = 2;
  if (has__raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_raid_id(), output);
  }

  // optional uint32 _apply_item_id = 3;
  if (has__apply_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_apply_item_id(), output);
  }

  // optional uint32 _rank = 4;
  if (has__rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_instance_drop)
}

::google::protobuf::uint8* guild_instance_drop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_instance_drop)
  // repeated .client_baseserver.guild_instance_item _items = 1;
  for (int i = 0; i < this->_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_items(i), target);
  }

  // required uint32 _raid_id = 2;
  if (has__raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_raid_id(), target);
  }

  // optional uint32 _apply_item_id = 3;
  if (has__apply_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_apply_item_id(), target);
  }

  // optional uint32 _rank = 4;
  if (has__rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_instance_drop)
  return target;
}

int guild_instance_drop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 _raid_id = 2;
    if (has__raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_raid_id());
    }

    // optional uint32 _apply_item_id = 3;
    if (has__apply_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_apply_item_id());
    }

    // optional uint32 _rank = 4;
    if (has__rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_rank());
    }

  }
  // repeated .client_baseserver.guild_instance_item _items = 1;
  total_size += 1 * this->_items_size();
  for (int i = 0; i < this->_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_instance_drop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_instance_drop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_instance_drop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_instance_drop::MergeFrom(const guild_instance_drop& from) {
  GOOGLE_CHECK_NE(&from, this);
  _items_.MergeFrom(from._items_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__raid_id()) {
      set__raid_id(from._raid_id());
    }
    if (from.has__apply_item_id()) {
      set__apply_item_id(from._apply_item_id());
    }
    if (from.has__rank()) {
      set__rank(from._rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_instance_drop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_instance_drop::CopyFrom(const guild_instance_drop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_instance_drop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_items())) return false;
  return true;
}

void guild_instance_drop::Swap(guild_instance_drop* other) {
  if (other != this) {
    _items_.Swap(&other->_items_);
    std::swap(_raid_id_, other->_raid_id_);
    std::swap(_apply_item_id_, other->_apply_item_id_);
    std::swap(_rank_, other->_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_instance_drop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_instance_drop_descriptor_;
  metadata.reflection = guild_instance_drop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int splitable_hero::kTidFieldNumber;
const int splitable_hero::kSplitTimesFieldNumber;
const int splitable_hero::kEndPointFieldNumber;
#endif  // !_MSC_VER

splitable_hero::splitable_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.splitable_hero)
}

void splitable_hero::InitAsDefaultInstance() {
}

splitable_hero::splitable_hero(const splitable_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.splitable_hero)
}

void splitable_hero::SharedCtor() {
  _cached_size_ = 0;
  _tid_ = 0u;
  _split_times_ = 0u;
  _end_point_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

splitable_hero::~splitable_hero() {
  // @@protoc_insertion_point(destructor:client_baseserver.splitable_hero)
  SharedDtor();
}

void splitable_hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void splitable_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* splitable_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return splitable_hero_descriptor_;
}

const splitable_hero& splitable_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

splitable_hero* splitable_hero::default_instance_ = NULL;

splitable_hero* splitable_hero::New() const {
  return new splitable_hero;
}

void splitable_hero::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<splitable_hero*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_tid_, _end_point_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool splitable_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.splitable_hero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_tid_)));
          set_has__tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__split_times;
        break;
      }

      // required uint32 _split_times = 2;
      case 2: {
        if (tag == 16) {
         parse__split_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_split_times_)));
          set_has__split_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__end_point;
        break;
      }

      // required uint32 _end_point = 3;
      case 3: {
        if (tag == 24) {
         parse__end_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_end_point_)));
          set_has__end_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.splitable_hero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.splitable_hero)
  return false;
#undef DO_
}

void splitable_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.splitable_hero)
  // required uint32 _tid = 1;
  if (has__tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_tid(), output);
  }

  // required uint32 _split_times = 2;
  if (has__split_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_split_times(), output);
  }

  // required uint32 _end_point = 3;
  if (has__end_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_end_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.splitable_hero)
}

::google::protobuf::uint8* splitable_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.splitable_hero)
  // required uint32 _tid = 1;
  if (has__tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_tid(), target);
  }

  // required uint32 _split_times = 2;
  if (has__split_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_split_times(), target);
  }

  // required uint32 _end_point = 3;
  if (has__end_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_end_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.splitable_hero)
  return target;
}

int splitable_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _tid = 1;
    if (has__tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_tid());
    }

    // required uint32 _split_times = 2;
    if (has__split_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_split_times());
    }

    // required uint32 _end_point = 3;
    if (has__end_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_end_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void splitable_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const splitable_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const splitable_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void splitable_hero::MergeFrom(const splitable_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__tid()) {
      set__tid(from._tid());
    }
    if (from.has__split_times()) {
      set__split_times(from._split_times());
    }
    if (from.has__end_point()) {
      set__end_point(from._end_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void splitable_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void splitable_hero::CopyFrom(const splitable_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool splitable_hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void splitable_hero::Swap(splitable_hero* other) {
  if (other != this) {
    std::swap(_tid_, other->_tid_);
    std::swap(_split_times_, other->_split_times_);
    std::swap(_end_point_, other->_end_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata splitable_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = splitable_hero_descriptor_;
  metadata.reflection = splitable_hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int query_split_data_reply::kHeroesFieldNumber;
#endif  // !_MSC_VER

query_split_data_reply::query_split_data_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.query_split_data_reply)
}

void query_split_data_reply::InitAsDefaultInstance() {
}

query_split_data_reply::query_split_data_reply(const query_split_data_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.query_split_data_reply)
}

void query_split_data_reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_split_data_reply::~query_split_data_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.query_split_data_reply)
  SharedDtor();
}

void query_split_data_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void query_split_data_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_split_data_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_split_data_reply_descriptor_;
}

const query_split_data_reply& query_split_data_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

query_split_data_reply* query_split_data_reply::default_instance_ = NULL;

query_split_data_reply* query_split_data_reply::New() const {
  return new query_split_data_reply;
}

void query_split_data_reply::Clear() {
  _heroes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_split_data_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.query_split_data_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.splitable_hero _heroes = 1;
      case 1: {
        if (tag == 10) {
         parse__heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__heroes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__heroes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.query_split_data_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.query_split_data_reply)
  return false;
#undef DO_
}

void query_split_data_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.query_split_data_reply)
  // repeated .client_baseserver.splitable_hero _heroes = 1;
  for (int i = 0; i < this->_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_heroes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.query_split_data_reply)
}

::google::protobuf::uint8* query_split_data_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.query_split_data_reply)
  // repeated .client_baseserver.splitable_hero _heroes = 1;
  for (int i = 0; i < this->_heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_heroes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.query_split_data_reply)
  return target;
}

int query_split_data_reply::ByteSize() const {
  int total_size = 0;

  // repeated .client_baseserver.splitable_hero _heroes = 1;
  total_size += 1 * this->_heroes_size();
  for (int i = 0; i < this->_heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_heroes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_split_data_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_split_data_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_split_data_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_split_data_reply::MergeFrom(const query_split_data_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _heroes_.MergeFrom(from._heroes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_split_data_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_split_data_reply::CopyFrom(const query_split_data_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_split_data_reply::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_heroes())) return false;
  return true;
}

void query_split_data_reply::Swap(query_split_data_reply* other) {
  if (other != this) {
    _heroes_.Swap(&other->_heroes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_split_data_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_split_data_reply_descriptor_;
  metadata.reflection = query_split_data_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int query_split_return_reply::kItemsFieldNumber;
const int query_split_return_reply::kGoldFieldNumber;
const int query_split_return_reply::kSkillPointFieldNumber;
#endif  // !_MSC_VER

query_split_return_reply::query_split_return_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.query_split_return_reply)
}

void query_split_return_reply::InitAsDefaultInstance() {
}

query_split_return_reply::query_split_return_reply(const query_split_return_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.query_split_return_reply)
}

void query_split_return_reply::SharedCtor() {
  _cached_size_ = 0;
  _gold_ = 0u;
  _skill_point_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_split_return_reply::~query_split_return_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.query_split_return_reply)
  SharedDtor();
}

void query_split_return_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void query_split_return_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_split_return_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_split_return_reply_descriptor_;
}

const query_split_return_reply& query_split_return_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

query_split_return_reply* query_split_return_reply::default_instance_ = NULL;

query_split_return_reply* query_split_return_reply::New() const {
  return new query_split_return_reply;
}

void query_split_return_reply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<query_split_return_reply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_gold_, _skill_point_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  _items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_split_return_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.query_split_return_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 _items = 1;
      case 1: {
        if (tag == 8) {
         parse__items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable__items())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__items())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse__items;
        if (input->ExpectTag(16)) goto parse__gold;
        break;
      }

      // required uint32 _gold = 2;
      case 2: {
        if (tag == 16) {
         parse__gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_gold_)));
          set_has__gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__skill_point;
        break;
      }

      // required uint32 _skill_point = 3;
      case 3: {
        if (tag == 24) {
         parse__skill_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_skill_point_)));
          set_has__skill_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.query_split_return_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.query_split_return_reply)
  return false;
#undef DO_
}

void query_split_return_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.query_split_return_reply)
  // repeated uint32 _items = 1;
  for (int i = 0; i < this->_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->_items(i), output);
  }

  // required uint32 _gold = 2;
  if (has__gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_gold(), output);
  }

  // required uint32 _skill_point = 3;
  if (has__skill_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_skill_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.query_split_return_reply)
}

::google::protobuf::uint8* query_split_return_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.query_split_return_reply)
  // repeated uint32 _items = 1;
  for (int i = 0; i < this->_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->_items(i), target);
  }

  // required uint32 _gold = 2;
  if (has__gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_gold(), target);
  }

  // required uint32 _skill_point = 3;
  if (has__skill_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_skill_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.query_split_return_reply)
  return target;
}

int query_split_return_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 _gold = 2;
    if (has__gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_gold());
    }

    // required uint32 _skill_point = 3;
    if (has__skill_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_skill_point());
    }

  }
  // repeated uint32 _items = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->_items_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_items(i));
    }
    total_size += 1 * this->_items_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_split_return_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_split_return_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_split_return_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_split_return_reply::MergeFrom(const query_split_return_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _items_.MergeFrom(from._items_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__gold()) {
      set__gold(from._gold());
    }
    if (from.has__skill_point()) {
      set__skill_point(from._skill_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_split_return_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_split_return_reply::CopyFrom(const query_split_return_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_split_return_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void query_split_return_reply::Swap(query_split_return_reply* other) {
  if (other != this) {
    _items_.Swap(&other->_items_);
    std::swap(_gold_, other->_gold_);
    std::swap(_skill_point_, other->_skill_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_split_return_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_split_return_reply_descriptor_;
  metadata.reflection = query_split_return_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int split_hero_reply::kResultFieldNumber;
const int split_hero_reply::kHeroFieldNumber;
#endif  // !_MSC_VER

split_hero_reply::split_hero_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.split_hero_reply)
}

void split_hero_reply::InitAsDefaultInstance() {
  _hero_ = const_cast< ::client_baseserver::hero*>(&::client_baseserver::hero::default_instance());
}

split_hero_reply::split_hero_reply(const split_hero_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.split_hero_reply)
}

void split_hero_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

split_hero_reply::~split_hero_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.split_hero_reply)
  SharedDtor();
}

void split_hero_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _hero_;
  }
}

void split_hero_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* split_hero_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return split_hero_reply_descriptor_;
}

const split_hero_reply& split_hero_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

split_hero_reply* split_hero_reply::default_instance_ = NULL;

split_hero_reply* split_hero_reply::New() const {
  return new split_hero_reply;
}

void split_hero_reply::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _result_ = 0;
    if (has__hero()) {
      if (_hero_ != NULL) _hero_->::client_baseserver::hero::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool split_hero_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.split_hero_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__hero;
        break;
      }

      // optional .client_baseserver.hero _hero = 2;
      case 2: {
        if (tag == 18) {
         parse__hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.split_hero_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.split_hero_reply)
  return false;
#undef DO_
}

void split_hero_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.split_hero_reply)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // optional .client_baseserver.hero _hero = 2;
  if (has__hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_hero(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.split_hero_reply)
}

::google::protobuf::uint8* split_hero_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.split_hero_reply)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // optional .client_baseserver.hero _hero = 2;
  if (has__hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_hero(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.split_hero_reply)
  return target;
}

int split_hero_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional .client_baseserver.hero _hero = 2;
    if (has__hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_hero());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void split_hero_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const split_hero_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const split_hero_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void split_hero_reply::MergeFrom(const split_hero_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__hero()) {
      mutable__hero()->::client_baseserver::hero::MergeFrom(from._hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void split_hero_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void split_hero_reply::CopyFrom(const split_hero_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool split_hero_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__hero()) {
    if (!this->_hero().IsInitialized()) return false;
  }
  return true;
}

void split_hero_reply::Swap(split_hero_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_hero_, other->_hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata split_hero_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = split_hero_reply_descriptor_;
  metadata.reflection = split_hero_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int worldcup_reply::kWorldcupQueryReplyFieldNumber;
const int worldcup_reply::kWorldcupSubmitReplyFieldNumber;
#endif  // !_MSC_VER

worldcup_reply::worldcup_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.worldcup_reply)
}

void worldcup_reply::InitAsDefaultInstance() {
  _worldcup_query_reply_ = const_cast< ::client_baseserver::worldcup_query_reply*>(&::client_baseserver::worldcup_query_reply::default_instance());
  _worldcup_submit_reply_ = const_cast< ::client_baseserver::worldcup_submit_reply*>(&::client_baseserver::worldcup_submit_reply::default_instance());
}

worldcup_reply::worldcup_reply(const worldcup_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.worldcup_reply)
}

void worldcup_reply::SharedCtor() {
  _cached_size_ = 0;
  _worldcup_query_reply_ = NULL;
  _worldcup_submit_reply_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

worldcup_reply::~worldcup_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.worldcup_reply)
  SharedDtor();
}

void worldcup_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _worldcup_query_reply_;
    delete _worldcup_submit_reply_;
  }
}

void worldcup_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* worldcup_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return worldcup_reply_descriptor_;
}

const worldcup_reply& worldcup_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

worldcup_reply* worldcup_reply::default_instance_ = NULL;

worldcup_reply* worldcup_reply::New() const {
  return new worldcup_reply;
}

void worldcup_reply::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has__worldcup_query_reply()) {
      if (_worldcup_query_reply_ != NULL) _worldcup_query_reply_->::client_baseserver::worldcup_query_reply::Clear();
    }
    if (has__worldcup_submit_reply()) {
      if (_worldcup_submit_reply_ != NULL) _worldcup_submit_reply_->::client_baseserver::worldcup_submit_reply::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool worldcup_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.worldcup_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_baseserver.worldcup_query_reply _worldcup_query_reply = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__worldcup_query_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__worldcup_submit_reply;
        break;
      }

      // optional .client_baseserver.worldcup_submit_reply _worldcup_submit_reply = 2;
      case 2: {
        if (tag == 18) {
         parse__worldcup_submit_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__worldcup_submit_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.worldcup_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.worldcup_reply)
  return false;
#undef DO_
}

void worldcup_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.worldcup_reply)
  // optional .client_baseserver.worldcup_query_reply _worldcup_query_reply = 1;
  if (has__worldcup_query_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_worldcup_query_reply(), output);
  }

  // optional .client_baseserver.worldcup_submit_reply _worldcup_submit_reply = 2;
  if (has__worldcup_submit_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_worldcup_submit_reply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.worldcup_reply)
}

::google::protobuf::uint8* worldcup_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.worldcup_reply)
  // optional .client_baseserver.worldcup_query_reply _worldcup_query_reply = 1;
  if (has__worldcup_query_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_worldcup_query_reply(), target);
  }

  // optional .client_baseserver.worldcup_submit_reply _worldcup_submit_reply = 2;
  if (has__worldcup_submit_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_worldcup_submit_reply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.worldcup_reply)
  return target;
}

int worldcup_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_baseserver.worldcup_query_reply _worldcup_query_reply = 1;
    if (has__worldcup_query_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_worldcup_query_reply());
    }

    // optional .client_baseserver.worldcup_submit_reply _worldcup_submit_reply = 2;
    if (has__worldcup_submit_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_worldcup_submit_reply());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void worldcup_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const worldcup_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const worldcup_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void worldcup_reply::MergeFrom(const worldcup_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__worldcup_query_reply()) {
      mutable__worldcup_query_reply()->::client_baseserver::worldcup_query_reply::MergeFrom(from._worldcup_query_reply());
    }
    if (from.has__worldcup_submit_reply()) {
      mutable__worldcup_submit_reply()->::client_baseserver::worldcup_submit_reply::MergeFrom(from._worldcup_submit_reply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void worldcup_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void worldcup_reply::CopyFrom(const worldcup_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool worldcup_reply::IsInitialized() const {

  if (has__worldcup_query_reply()) {
    if (!this->_worldcup_query_reply().IsInitialized()) return false;
  }
  if (has__worldcup_submit_reply()) {
    if (!this->_worldcup_submit_reply().IsInitialized()) return false;
  }
  return true;
}

void worldcup_reply::Swap(worldcup_reply* other) {
  if (other != this) {
    std::swap(_worldcup_query_reply_, other->_worldcup_query_reply_);
    std::swap(_worldcup_submit_reply_, other->_worldcup_submit_reply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata worldcup_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = worldcup_reply_descriptor_;
  metadata.reflection = worldcup_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int worldcup_reward::kGoldFieldNumber;
const int worldcup_reward::kDiamondFieldNumber;
#endif  // !_MSC_VER

worldcup_reward::worldcup_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.worldcup_reward)
}

void worldcup_reward::InitAsDefaultInstance() {
}

worldcup_reward::worldcup_reward(const worldcup_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.worldcup_reward)
}

void worldcup_reward::SharedCtor() {
  _cached_size_ = 0;
  _gold_ = 0u;
  _diamond_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

worldcup_reward::~worldcup_reward() {
  // @@protoc_insertion_point(destructor:client_baseserver.worldcup_reward)
  SharedDtor();
}

void worldcup_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void worldcup_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* worldcup_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return worldcup_reward_descriptor_;
}

const worldcup_reward& worldcup_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

worldcup_reward* worldcup_reward::default_instance_ = NULL;

worldcup_reward* worldcup_reward::New() const {
  return new worldcup_reward;
}

void worldcup_reward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<worldcup_reward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_gold_, _diamond_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool worldcup_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.worldcup_reward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 _gold = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_gold_)));
          set_has__gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__diamond;
        break;
      }

      // optional uint32 _diamond = 2;
      case 2: {
        if (tag == 16) {
         parse__diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_diamond_)));
          set_has__diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.worldcup_reward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.worldcup_reward)
  return false;
#undef DO_
}

void worldcup_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.worldcup_reward)
  // optional uint32 _gold = 1;
  if (has__gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_gold(), output);
  }

  // optional uint32 _diamond = 2;
  if (has__diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_diamond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.worldcup_reward)
}

::google::protobuf::uint8* worldcup_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.worldcup_reward)
  // optional uint32 _gold = 1;
  if (has__gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_gold(), target);
  }

  // optional uint32 _diamond = 2;
  if (has__diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_diamond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.worldcup_reward)
  return target;
}

int worldcup_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 _gold = 1;
    if (has__gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_gold());
    }

    // optional uint32 _diamond = 2;
    if (has__diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_diamond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void worldcup_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const worldcup_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const worldcup_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void worldcup_reward::MergeFrom(const worldcup_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__gold()) {
      set__gold(from._gold());
    }
    if (from.has__diamond()) {
      set__diamond(from._diamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void worldcup_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void worldcup_reward::CopyFrom(const worldcup_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool worldcup_reward::IsInitialized() const {

  return true;
}

void worldcup_reward::Swap(worldcup_reward* other) {
  if (other != this) {
    std::swap(_gold_, other->_gold_);
    std::swap(_diamond_, other->_diamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata worldcup_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = worldcup_reward_descriptor_;
  metadata.reflection = worldcup_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int worldcup_comp::kTeamsFieldNumber;
const int worldcup_comp::kRewardFieldNumber;
const int worldcup_comp::kGuessFieldNumber;
#endif  // !_MSC_VER

worldcup_comp::worldcup_comp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.worldcup_comp)
}

void worldcup_comp::InitAsDefaultInstance() {
  _reward_ = const_cast< ::client_baseserver::worldcup_reward*>(&::client_baseserver::worldcup_reward::default_instance());
}

worldcup_comp::worldcup_comp(const worldcup_comp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.worldcup_comp)
}

void worldcup_comp::SharedCtor() {
  _cached_size_ = 0;
  _reward_ = NULL;
  _guess_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

worldcup_comp::~worldcup_comp() {
  // @@protoc_insertion_point(destructor:client_baseserver.worldcup_comp)
  SharedDtor();
}

void worldcup_comp::SharedDtor() {
  if (this != default_instance_) {
    delete _reward_;
  }
}

void worldcup_comp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* worldcup_comp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return worldcup_comp_descriptor_;
}

const worldcup_comp& worldcup_comp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

worldcup_comp* worldcup_comp::default_instance_ = NULL;

worldcup_comp* worldcup_comp::New() const {
  return new worldcup_comp;
}

void worldcup_comp::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has__reward()) {
      if (_reward_ != NULL) _reward_->::client_baseserver::worldcup_reward::Clear();
    }
    _guess_ = 0u;
  }
  _teams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool worldcup_comp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.worldcup_comp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 _teams = 1;
      case 1: {
        if (tag == 8) {
         parse__teams:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable__teams())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__teams())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse__teams;
        if (input->ExpectTag(18)) goto parse__reward;
        break;
      }

      // required .client_baseserver.worldcup_reward _reward = 2;
      case 2: {
        if (tag == 18) {
         parse__reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__guess;
        break;
      }

      // optional uint32 _guess = 3;
      case 3: {
        if (tag == 24) {
         parse__guess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_guess_)));
          set_has__guess();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.worldcup_comp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.worldcup_comp)
  return false;
#undef DO_
}

void worldcup_comp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.worldcup_comp)
  // repeated uint32 _teams = 1;
  for (int i = 0; i < this->_teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->_teams(i), output);
  }

  // required .client_baseserver.worldcup_reward _reward = 2;
  if (has__reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_reward(), output);
  }

  // optional uint32 _guess = 3;
  if (has__guess()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_guess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.worldcup_comp)
}

::google::protobuf::uint8* worldcup_comp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.worldcup_comp)
  // repeated uint32 _teams = 1;
  for (int i = 0; i < this->_teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->_teams(i), target);
  }

  // required .client_baseserver.worldcup_reward _reward = 2;
  if (has__reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_reward(), target);
  }

  // optional uint32 _guess = 3;
  if (has__guess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_guess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.worldcup_comp)
  return target;
}

int worldcup_comp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .client_baseserver.worldcup_reward _reward = 2;
    if (has__reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_reward());
    }

    // optional uint32 _guess = 3;
    if (has__guess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_guess());
    }

  }
  // repeated uint32 _teams = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->_teams_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_teams(i));
    }
    total_size += 1 * this->_teams_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void worldcup_comp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const worldcup_comp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const worldcup_comp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void worldcup_comp::MergeFrom(const worldcup_comp& from) {
  GOOGLE_CHECK_NE(&from, this);
  _teams_.MergeFrom(from._teams_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__reward()) {
      mutable__reward()->::client_baseserver::worldcup_reward::MergeFrom(from._reward());
    }
    if (from.has__guess()) {
      set__guess(from._guess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void worldcup_comp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void worldcup_comp::CopyFrom(const worldcup_comp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool worldcup_comp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void worldcup_comp::Swap(worldcup_comp* other) {
  if (other != this) {
    _teams_.Swap(&other->_teams_);
    std::swap(_reward_, other->_reward_);
    std::swap(_guess_, other->_guess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata worldcup_comp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = worldcup_comp_descriptor_;
  metadata.reflection = worldcup_comp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int worldcup_query_reply::kCompFieldNumber;
#endif  // !_MSC_VER

worldcup_query_reply::worldcup_query_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.worldcup_query_reply)
}

void worldcup_query_reply::InitAsDefaultInstance() {
}

worldcup_query_reply::worldcup_query_reply(const worldcup_query_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.worldcup_query_reply)
}

void worldcup_query_reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

worldcup_query_reply::~worldcup_query_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.worldcup_query_reply)
  SharedDtor();
}

void worldcup_query_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void worldcup_query_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* worldcup_query_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return worldcup_query_reply_descriptor_;
}

const worldcup_query_reply& worldcup_query_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

worldcup_query_reply* worldcup_query_reply::default_instance_ = NULL;

worldcup_query_reply* worldcup_query_reply::New() const {
  return new worldcup_query_reply;
}

void worldcup_query_reply::Clear() {
  _comp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool worldcup_query_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.worldcup_query_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.worldcup_comp _comp = 1;
      case 1: {
        if (tag == 10) {
         parse__comp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__comp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__comp;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.worldcup_query_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.worldcup_query_reply)
  return false;
#undef DO_
}

void worldcup_query_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.worldcup_query_reply)
  // repeated .client_baseserver.worldcup_comp _comp = 1;
  for (int i = 0; i < this->_comp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_comp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.worldcup_query_reply)
}

::google::protobuf::uint8* worldcup_query_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.worldcup_query_reply)
  // repeated .client_baseserver.worldcup_comp _comp = 1;
  for (int i = 0; i < this->_comp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_comp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.worldcup_query_reply)
  return target;
}

int worldcup_query_reply::ByteSize() const {
  int total_size = 0;

  // repeated .client_baseserver.worldcup_comp _comp = 1;
  total_size += 1 * this->_comp_size();
  for (int i = 0; i < this->_comp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_comp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void worldcup_query_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const worldcup_query_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const worldcup_query_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void worldcup_query_reply::MergeFrom(const worldcup_query_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _comp_.MergeFrom(from._comp_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void worldcup_query_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void worldcup_query_reply::CopyFrom(const worldcup_query_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool worldcup_query_reply::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_comp())) return false;
  return true;
}

void worldcup_query_reply::Swap(worldcup_query_reply* other) {
  if (other != this) {
    _comp_.Swap(&other->_comp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata worldcup_query_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = worldcup_query_reply_descriptor_;
  metadata.reflection = worldcup_query_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int worldcup_submit_reply::kResultFieldNumber;
#endif  // !_MSC_VER

worldcup_submit_reply::worldcup_submit_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.worldcup_submit_reply)
}

void worldcup_submit_reply::InitAsDefaultInstance() {
}

worldcup_submit_reply::worldcup_submit_reply(const worldcup_submit_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.worldcup_submit_reply)
}

void worldcup_submit_reply::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

worldcup_submit_reply::~worldcup_submit_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.worldcup_submit_reply)
  SharedDtor();
}

void worldcup_submit_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void worldcup_submit_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* worldcup_submit_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return worldcup_submit_reply_descriptor_;
}

const worldcup_submit_reply& worldcup_submit_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

worldcup_submit_reply* worldcup_submit_reply::default_instance_ = NULL;

worldcup_submit_reply* worldcup_submit_reply::New() const {
  return new worldcup_submit_reply;
}

void worldcup_submit_reply::Clear() {
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool worldcup_submit_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.worldcup_submit_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.result _result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::result_IsValid(value)) {
            set__result(static_cast< ::client_baseserver::result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.worldcup_submit_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.worldcup_submit_reply)
  return false;
#undef DO_
}

void worldcup_submit_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.worldcup_submit_reply)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.worldcup_submit_reply)
}

::google::protobuf::uint8* worldcup_submit_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.worldcup_submit_reply)
  // required .client_baseserver.result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.worldcup_submit_reply)
  return target;
}

int worldcup_submit_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void worldcup_submit_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const worldcup_submit_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const worldcup_submit_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void worldcup_submit_reply::MergeFrom(const worldcup_submit_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void worldcup_submit_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void worldcup_submit_reply::CopyFrom(const worldcup_submit_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool worldcup_submit_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void worldcup_submit_reply::Swap(worldcup_submit_reply* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata worldcup_submit_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = worldcup_submit_reply_descriptor_;
  metadata.reflection = worldcup_submit_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_check_fail::kCheckidFieldNumber;
#endif  // !_MSC_VER

battle_check_fail::battle_check_fail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.battle_check_fail)
}

void battle_check_fail::InitAsDefaultInstance() {
}

battle_check_fail::battle_check_fail(const battle_check_fail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.battle_check_fail)
}

void battle_check_fail::SharedCtor() {
  _cached_size_ = 0;
  _checkid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_check_fail::~battle_check_fail() {
  // @@protoc_insertion_point(destructor:client_baseserver.battle_check_fail)
  SharedDtor();
}

void battle_check_fail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_check_fail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_check_fail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_check_fail_descriptor_;
}

const battle_check_fail& battle_check_fail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

battle_check_fail* battle_check_fail::default_instance_ = NULL;

battle_check_fail* battle_check_fail::New() const {
  return new battle_check_fail;
}

void battle_check_fail::Clear() {
  _checkid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_check_fail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.battle_check_fail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _checkid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_checkid_)));
          set_has__checkid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.battle_check_fail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.battle_check_fail)
  return false;
#undef DO_
}

void battle_check_fail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.battle_check_fail)
  // required uint32 _checkid = 1;
  if (has__checkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_checkid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.battle_check_fail)
}

::google::protobuf::uint8* battle_check_fail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.battle_check_fail)
  // required uint32 _checkid = 1;
  if (has__checkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_checkid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.battle_check_fail)
  return target;
}

int battle_check_fail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _checkid = 1;
    if (has__checkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_checkid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_check_fail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_check_fail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_check_fail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_check_fail::MergeFrom(const battle_check_fail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__checkid()) {
      set__checkid(from._checkid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_check_fail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_check_fail::CopyFrom(const battle_check_fail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_check_fail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void battle_check_fail::Swap(battle_check_fail* other) {
  if (other != this) {
    std::swap(_checkid_, other->_checkid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_check_fail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_check_fail_descriptor_;
  metadata.reflection = battle_check_fail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int super_link::kInfoFieldNumber;
const int super_link::kAddrFieldNumber;
#endif  // !_MSC_VER

super_link::super_link()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.super_link)
}

void super_link::InitAsDefaultInstance() {
}

super_link::super_link(const super_link& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.super_link)
}

void super_link::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

super_link::~super_link() {
  // @@protoc_insertion_point(destructor:client_baseserver.super_link)
  SharedDtor();
}

void super_link::SharedDtor() {
  if (_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _info_;
  }
  if (_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _addr_;
  }
  if (this != default_instance_) {
  }
}

void super_link::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* super_link::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return super_link_descriptor_;
}

const super_link& super_link::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

super_link* super_link::default_instance_ = NULL;

super_link* super_link::New() const {
  return new super_link;
}

void super_link::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has__info()) {
      if (_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _info_->clear();
      }
    }
    if (has__addr()) {
      if (_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _addr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool super_link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.super_link)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _addr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_addr().data(), this->_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__info;
        break;
      }

      // required string _info = 2;
      case 2: {
        if (tag == 18) {
         parse__info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_info().data(), this->_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.super_link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.super_link)
  return false;
#undef DO_
}

void super_link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.super_link)
  // required string _addr = 1;
  if (has__addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_addr().data(), this->_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->_addr(), output);
  }

  // required string _info = 2;
  if (has__info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_info().data(), this->_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.super_link)
}

::google::protobuf::uint8* super_link::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.super_link)
  // required string _addr = 1;
  if (has__addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_addr().data(), this->_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_addr(), target);
  }

  // required string _info = 2;
  if (has__info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_info().data(), this->_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.super_link)
  return target;
}

int super_link::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _info = 2;
    if (has__info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_info());
    }

    // required string _addr = 1;
    if (has__addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_addr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void super_link::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const super_link* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const super_link*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void super_link::MergeFrom(const super_link& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__info()) {
      set__info(from._info());
    }
    if (from.has__addr()) {
      set__addr(from._addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void super_link::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void super_link::CopyFrom(const super_link& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool super_link::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void super_link::Swap(super_link* other) {
  if (other != this) {
    std::swap(_info_, other->_info_);
    std::swap(_addr_, other->_addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata super_link::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = super_link_descriptor_;
  metadata.reflection = super_link_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ranklist_item::kUserSummaryFieldNumber;
const int ranklist_item::kGuildSummaryFieldNumber;
const int ranklist_item::kParam1FieldNumber;
#endif  // !_MSC_VER

ranklist_item::ranklist_item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.ranklist_item)
}

void ranklist_item::InitAsDefaultInstance() {
  _user_summary_ = const_cast< ::client_baseserver::user_summary*>(&::client_baseserver::user_summary::default_instance());
  _guild_summary_ = const_cast< ::client_baseserver::guild_summary*>(&::client_baseserver::guild_summary::default_instance());
}

ranklist_item::ranklist_item(const ranklist_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.ranklist_item)
}

void ranklist_item::SharedCtor() {
  _cached_size_ = 0;
  _user_summary_ = NULL;
  _guild_summary_ = NULL;
  _param1_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ranklist_item::~ranklist_item() {
  // @@protoc_insertion_point(destructor:client_baseserver.ranklist_item)
  SharedDtor();
}

void ranklist_item::SharedDtor() {
  if (this != default_instance_) {
    delete _user_summary_;
    delete _guild_summary_;
  }
}

void ranklist_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ranklist_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ranklist_item_descriptor_;
}

const ranklist_item& ranklist_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

ranklist_item* ranklist_item::default_instance_ = NULL;

ranklist_item* ranklist_item::New() const {
  return new ranklist_item;
}

void ranklist_item::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has__user_summary()) {
      if (_user_summary_ != NULL) _user_summary_->::client_baseserver::user_summary::Clear();
    }
    if (has__guild_summary()) {
      if (_guild_summary_ != NULL) _guild_summary_->::client_baseserver::guild_summary::Clear();
    }
    _param1_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ranklist_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.ranklist_item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_baseserver.user_summary _user_summary = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__user_summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__guild_summary;
        break;
      }

      // optional .client_baseserver.guild_summary _guild_summary = 2;
      case 2: {
        if (tag == 18) {
         parse__guild_summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__guild_summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__param1;
        break;
      }

      // optional uint32 _param1 = 3;
      case 3: {
        if (tag == 24) {
         parse__param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_param1_)));
          set_has__param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.ranklist_item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.ranklist_item)
  return false;
#undef DO_
}

void ranklist_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.ranklist_item)
  // optional .client_baseserver.user_summary _user_summary = 1;
  if (has__user_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_user_summary(), output);
  }

  // optional .client_baseserver.guild_summary _guild_summary = 2;
  if (has__guild_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_guild_summary(), output);
  }

  // optional uint32 _param1 = 3;
  if (has__param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_param1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.ranklist_item)
}

::google::protobuf::uint8* ranklist_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.ranklist_item)
  // optional .client_baseserver.user_summary _user_summary = 1;
  if (has__user_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_user_summary(), target);
  }

  // optional .client_baseserver.guild_summary _guild_summary = 2;
  if (has__guild_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_guild_summary(), target);
  }

  // optional uint32 _param1 = 3;
  if (has__param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_param1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.ranklist_item)
  return target;
}

int ranklist_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_baseserver.user_summary _user_summary = 1;
    if (has__user_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_user_summary());
    }

    // optional .client_baseserver.guild_summary _guild_summary = 2;
    if (has__guild_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_guild_summary());
    }

    // optional uint32 _param1 = 3;
    if (has__param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_param1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ranklist_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ranklist_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ranklist_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ranklist_item::MergeFrom(const ranklist_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__user_summary()) {
      mutable__user_summary()->::client_baseserver::user_summary::MergeFrom(from._user_summary());
    }
    if (from.has__guild_summary()) {
      mutable__guild_summary()->::client_baseserver::guild_summary::MergeFrom(from._guild_summary());
    }
    if (from.has__param1()) {
      set__param1(from._param1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ranklist_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ranklist_item::CopyFrom(const ranklist_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ranklist_item::IsInitialized() const {

  if (has__user_summary()) {
    if (!this->_user_summary().IsInitialized()) return false;
  }
  if (has__guild_summary()) {
    if (!this->_guild_summary().IsInitialized()) return false;
  }
  return true;
}

void ranklist_item::Swap(ranklist_item* other) {
  if (other != this) {
    std::swap(_user_summary_, other->_user_summary_);
    std::swap(_guild_summary_, other->_guild_summary_);
    std::swap(_param1_, other->_param1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ranklist_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ranklist_item_descriptor_;
  metadata.reflection = ranklist_item_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* query_ranklist_reply_rank_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_ranklist_reply_rank_type_descriptor_;
}
bool query_ranklist_reply_rank_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const query_ranklist_reply_rank_type query_ranklist_reply::guildliveness;
const query_ranklist_reply_rank_type query_ranklist_reply::excavate_rob;
const query_ranklist_reply_rank_type query_ranklist_reply::excavate_gold;
const query_ranklist_reply_rank_type query_ranklist_reply::excavate_exp;
const query_ranklist_reply_rank_type query_ranklist_reply::top_gs;
const query_ranklist_reply_rank_type query_ranklist_reply::full_hero_gs;
const query_ranklist_reply_rank_type query_ranklist_reply::hero_team_gs;
const query_ranklist_reply_rank_type query_ranklist_reply::hero_evo_star;
const query_ranklist_reply_rank_type query_ranklist_reply::hero_arousal;
const query_ranklist_reply_rank_type query_ranklist_reply::top_arena;
const query_ranklist_reply_rank_type query_ranklist_reply::rank_type_MIN;
const query_ranklist_reply_rank_type query_ranklist_reply::rank_type_MAX;
const int query_ranklist_reply::rank_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int query_ranklist_reply::kRankTypeFieldNumber;
const int query_ranklist_reply::kRanklistItemFieldNumber;
const int query_ranklist_reply::kSelfRankingFieldNumber;
const int query_ranklist_reply::kSelfItemFieldNumber;
const int query_ranklist_reply::kSelfPrevPosFieldNumber;
#endif  // !_MSC_VER

query_ranklist_reply::query_ranklist_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.query_ranklist_reply)
}

void query_ranklist_reply::InitAsDefaultInstance() {
  _self_item_ = const_cast< ::client_baseserver::ranklist_item*>(&::client_baseserver::ranklist_item::default_instance());
}

query_ranklist_reply::query_ranklist_reply(const query_ranklist_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.query_ranklist_reply)
}

void query_ranklist_reply::SharedCtor() {
  _cached_size_ = 0;
  _rank_type_ = 1;
  _self_ranking_ = 0u;
  _self_item_ = NULL;
  _self_prev_pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_ranklist_reply::~query_ranklist_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.query_ranklist_reply)
  SharedDtor();
}

void query_ranklist_reply::SharedDtor() {
  if (this != default_instance_) {
    delete _self_item_;
  }
}

void query_ranklist_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_ranklist_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_ranklist_reply_descriptor_;
}

const query_ranklist_reply& query_ranklist_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

query_ranklist_reply* query_ranklist_reply::default_instance_ = NULL;

query_ranklist_reply* query_ranklist_reply::New() const {
  return new query_ranklist_reply;
}

void query_ranklist_reply::Clear() {
  if (_has_bits_[0 / 32] & 29) {
    _rank_type_ = 1;
    _self_ranking_ = 0u;
    if (has__self_item()) {
      if (_self_item_ != NULL) _self_item_->::client_baseserver::ranklist_item::Clear();
    }
    _self_prev_pos_ = 0u;
  }
  _ranklist_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_ranklist_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.query_ranklist_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_baseserver.query_ranklist_reply.rank_type _rank_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_baseserver::query_ranklist_reply_rank_type_IsValid(value)) {
            set__rank_type(static_cast< ::client_baseserver::query_ranklist_reply_rank_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__ranklist_item;
        break;
      }

      // repeated .client_baseserver.ranklist_item _ranklist_item = 2;
      case 2: {
        if (tag == 18) {
         parse__ranklist_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__ranklist_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__ranklist_item;
        if (input->ExpectTag(24)) goto parse__self_ranking;
        break;
      }

      // optional uint32 _self_ranking = 3;
      case 3: {
        if (tag == 24) {
         parse__self_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_self_ranking_)));
          set_has__self_ranking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__self_item;
        break;
      }

      // optional .client_baseserver.ranklist_item _self_item = 4;
      case 4: {
        if (tag == 34) {
         parse__self_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__self_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__self_prev_pos;
        break;
      }

      // optional uint32 _self_prev_pos = 5;
      case 5: {
        if (tag == 40) {
         parse__self_prev_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_self_prev_pos_)));
          set_has__self_prev_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.query_ranklist_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.query_ranklist_reply)
  return false;
#undef DO_
}

void query_ranklist_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.query_ranklist_reply)
  // required .client_baseserver.query_ranklist_reply.rank_type _rank_type = 1;
  if (has__rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_rank_type(), output);
  }

  // repeated .client_baseserver.ranklist_item _ranklist_item = 2;
  for (int i = 0; i < this->_ranklist_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_ranklist_item(i), output);
  }

  // optional uint32 _self_ranking = 3;
  if (has__self_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_self_ranking(), output);
  }

  // optional .client_baseserver.ranklist_item _self_item = 4;
  if (has__self_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_self_item(), output);
  }

  // optional uint32 _self_prev_pos = 5;
  if (has__self_prev_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_self_prev_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.query_ranklist_reply)
}

::google::protobuf::uint8* query_ranklist_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.query_ranklist_reply)
  // required .client_baseserver.query_ranklist_reply.rank_type _rank_type = 1;
  if (has__rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_rank_type(), target);
  }

  // repeated .client_baseserver.ranklist_item _ranklist_item = 2;
  for (int i = 0; i < this->_ranklist_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_ranklist_item(i), target);
  }

  // optional uint32 _self_ranking = 3;
  if (has__self_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_self_ranking(), target);
  }

  // optional .client_baseserver.ranklist_item _self_item = 4;
  if (has__self_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_self_item(), target);
  }

  // optional uint32 _self_prev_pos = 5;
  if (has__self_prev_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_self_prev_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.query_ranklist_reply)
  return target;
}

int query_ranklist_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_baseserver.query_ranklist_reply.rank_type _rank_type = 1;
    if (has__rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_rank_type());
    }

    // optional uint32 _self_ranking = 3;
    if (has__self_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_self_ranking());
    }

    // optional .client_baseserver.ranklist_item _self_item = 4;
    if (has__self_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_self_item());
    }

    // optional uint32 _self_prev_pos = 5;
    if (has__self_prev_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_self_prev_pos());
    }

  }
  // repeated .client_baseserver.ranklist_item _ranklist_item = 2;
  total_size += 1 * this->_ranklist_item_size();
  for (int i = 0; i < this->_ranklist_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_ranklist_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_ranklist_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_ranklist_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_ranklist_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_ranklist_reply::MergeFrom(const query_ranklist_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _ranklist_item_.MergeFrom(from._ranklist_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__rank_type()) {
      set__rank_type(from._rank_type());
    }
    if (from.has__self_ranking()) {
      set__self_ranking(from._self_ranking());
    }
    if (from.has__self_item()) {
      mutable__self_item()->::client_baseserver::ranklist_item::MergeFrom(from._self_item());
    }
    if (from.has__self_prev_pos()) {
      set__self_prev_pos(from._self_prev_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_ranklist_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_ranklist_reply::CopyFrom(const query_ranklist_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_ranklist_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_ranklist_item())) return false;
  if (has__self_item()) {
    if (!this->_self_item().IsInitialized()) return false;
  }
  return true;
}

void query_ranklist_reply::Swap(query_ranklist_reply* other) {
  if (other != this) {
    std::swap(_rank_type_, other->_rank_type_);
    _ranklist_item_.Swap(&other->_ranklist_item_);
    std::swap(_self_ranking_, other->_self_ranking_);
    std::swap(_self_item_, other->_self_item_);
    std::swap(_self_prev_pos_, other->_self_prev_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_ranklist_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_ranklist_reply_descriptor_;
  metadata.reflection = query_ranklist_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int request_guild_log_reply::kGuildLogFieldNumber;
#endif  // !_MSC_VER

request_guild_log_reply::request_guild_log_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.request_guild_log_reply)
}

void request_guild_log_reply::InitAsDefaultInstance() {
}

request_guild_log_reply::request_guild_log_reply(const request_guild_log_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.request_guild_log_reply)
}

void request_guild_log_reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

request_guild_log_reply::~request_guild_log_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.request_guild_log_reply)
  SharedDtor();
}

void request_guild_log_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void request_guild_log_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* request_guild_log_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return request_guild_log_reply_descriptor_;
}

const request_guild_log_reply& request_guild_log_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

request_guild_log_reply* request_guild_log_reply::default_instance_ = NULL;

request_guild_log_reply* request_guild_log_reply::New() const {
  return new request_guild_log_reply;
}

void request_guild_log_reply::Clear() {
  _guild_log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool request_guild_log_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.request_guild_log_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client_baseserver.guild_log _guild_log = 1;
      case 1: {
        if (tag == 10) {
         parse__guild_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__guild_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse__guild_log;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.request_guild_log_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.request_guild_log_reply)
  return false;
#undef DO_
}

void request_guild_log_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.request_guild_log_reply)
  // repeated .client_baseserver.guild_log _guild_log = 1;
  for (int i = 0; i < this->_guild_log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_guild_log(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.request_guild_log_reply)
}

::google::protobuf::uint8* request_guild_log_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.request_guild_log_reply)
  // repeated .client_baseserver.guild_log _guild_log = 1;
  for (int i = 0; i < this->_guild_log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_guild_log(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.request_guild_log_reply)
  return target;
}

int request_guild_log_reply::ByteSize() const {
  int total_size = 0;

  // repeated .client_baseserver.guild_log _guild_log = 1;
  total_size += 1 * this->_guild_log_size();
  for (int i = 0; i < this->_guild_log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_guild_log(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void request_guild_log_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const request_guild_log_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const request_guild_log_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void request_guild_log_reply::MergeFrom(const request_guild_log_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _guild_log_.MergeFrom(from._guild_log_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void request_guild_log_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void request_guild_log_reply::CopyFrom(const request_guild_log_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool request_guild_log_reply::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->_guild_log())) return false;
  return true;
}

void request_guild_log_reply::Swap(request_guild_log_reply* other) {
  if (other != this) {
    _guild_log_.Swap(&other->_guild_log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata request_guild_log_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = request_guild_log_reply_descriptor_;
  metadata.reflection = request_guild_log_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_log::kIdFieldNumber;
const int guild_log::kGuildLogContentFieldNumber;
const int guild_log::kDateFieldNumber;
#endif  // !_MSC_VER

guild_log::guild_log()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_log)
}

void guild_log::InitAsDefaultInstance() {
}

guild_log::guild_log(const guild_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_log)
}

void guild_log::SharedCtor() {
  _cached_size_ = 0;
  _id_ = 0u;
  _date_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_log::~guild_log() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_log)
  SharedDtor();
}

void guild_log::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_log_descriptor_;
}

const guild_log& guild_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_log* guild_log::default_instance_ = NULL;

guild_log* guild_log::New() const {
  return new guild_log;
}

void guild_log::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<guild_log*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_id_, _date_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  _guild_log_content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_log)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_id_)));
          set_has__id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__guild_log_content;
        break;
      }

      // repeated .client_baseserver.guild_log_content _guild_log_content = 2;
      case 2: {
        if (tag == 18) {
         parse__guild_log_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__guild_log_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__guild_log_content;
        if (input->ExpectTag(24)) goto parse__date;
        break;
      }

      // required uint32 _date = 3;
      case 3: {
        if (tag == 24) {
         parse__date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_date_)));
          set_has__date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_log)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_log)
  return false;
#undef DO_
}

void guild_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_log)
  // required uint32 _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_id(), output);
  }

  // repeated .client_baseserver.guild_log_content _guild_log_content = 2;
  for (int i = 0; i < this->_guild_log_content_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_guild_log_content(i), output);
  }

  // required uint32 _date = 3;
  if (has__date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_log)
}

::google::protobuf::uint8* guild_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_log)
  // required uint32 _id = 1;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_id(), target);
  }

  // repeated .client_baseserver.guild_log_content _guild_log_content = 2;
  for (int i = 0; i < this->_guild_log_content_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_guild_log_content(i), target);
  }

  // required uint32 _date = 3;
  if (has__date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_log)
  return target;
}

int guild_log::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _id = 1;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_id());
    }

    // required uint32 _date = 3;
    if (has__date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_date());
    }

  }
  // repeated .client_baseserver.guild_log_content _guild_log_content = 2;
  total_size += 1 * this->_guild_log_content_size();
  for (int i = 0; i < this->_guild_log_content_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_guild_log_content(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_log::MergeFrom(const guild_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  _guild_log_content_.MergeFrom(from._guild_log_content_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__id()) {
      set__id(from._id());
    }
    if (from.has__date()) {
      set__date(from._date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_log::CopyFrom(const guild_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_log::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->_guild_log_content())) return false;
  return true;
}

void guild_log::Swap(guild_log* other) {
  if (other != this) {
    std::swap(_id_, other->_id_);
    _guild_log_content_.Swap(&other->_guild_log_content_);
    std::swap(_date_, other->_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_log_descriptor_;
  metadata.reflection = guild_log_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_log_content::kTimeFieldNumber;
const int guild_log_content::kContentFieldNumber;
#endif  // !_MSC_VER

guild_log_content::guild_log_content()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.guild_log_content)
}

void guild_log_content::InitAsDefaultInstance() {
}

guild_log_content::guild_log_content(const guild_log_content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.guild_log_content)
}

void guild_log_content::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _time_ = 0u;
  _content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_log_content::~guild_log_content() {
  // @@protoc_insertion_point(destructor:client_baseserver.guild_log_content)
  SharedDtor();
}

void guild_log_content::SharedDtor() {
  if (_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _content_;
  }
  if (this != default_instance_) {
  }
}

void guild_log_content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_log_content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_log_content_descriptor_;
}

const guild_log_content& guild_log_content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

guild_log_content* guild_log_content::default_instance_ = NULL;

guild_log_content* guild_log_content::New() const {
  return new guild_log_content;
}

void guild_log_content::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    _time_ = 0u;
    if (has__content()) {
      if (_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_log_content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.guild_log_content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_time_)));
          set_has__time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__content;
        break;
      }

      // required string _content = 2;
      case 2: {
        if (tag == 18) {
         parse__content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_content().data(), this->_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.guild_log_content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.guild_log_content)
  return false;
#undef DO_
}

void guild_log_content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.guild_log_content)
  // required uint32 _time = 1;
  if (has__time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_time(), output);
  }

  // required string _content = 2;
  if (has__content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_content().data(), this->_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.guild_log_content)
}

::google::protobuf::uint8* guild_log_content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.guild_log_content)
  // required uint32 _time = 1;
  if (has__time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_time(), target);
  }

  // required string _content = 2;
  if (has__content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_content().data(), this->_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.guild_log_content)
  return target;
}

int guild_log_content::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _time = 1;
    if (has__time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_time());
    }

    // required string _content = 2;
    if (has__content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_log_content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_log_content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_log_content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_log_content::MergeFrom(const guild_log_content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__time()) {
      set__time(from._time());
    }
    if (from.has__content()) {
      set__content(from._content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_log_content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_log_content::CopyFrom(const guild_log_content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_log_content::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void guild_log_content::Swap(guild_log_content* other) {
  if (other != this) {
    std::swap(_time_, other->_time_);
    std::swap(_content_, other->_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_log_content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_log_content_descriptor_;
  metadata.reflection = guild_log_content_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_update_version::kVersionFieldNumber;
#endif  // !_MSC_VER

client_update_version::client_update_version()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.client_update_version)
}

void client_update_version::InitAsDefaultInstance() {
}

client_update_version::client_update_version(const client_update_version& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.client_update_version)
}

void client_update_version::SharedCtor() {
  _cached_size_ = 0;
  _version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_update_version::~client_update_version() {
  // @@protoc_insertion_point(destructor:client_baseserver.client_update_version)
  SharedDtor();
}

void client_update_version::SharedDtor() {
  if (this != default_instance_) {
  }
}

void client_update_version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_update_version::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_update_version_descriptor_;
}

const client_update_version& client_update_version::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

client_update_version* client_update_version::default_instance_ = NULL;

client_update_version* client_update_version::New() const {
  return new client_update_version;
}

void client_update_version::Clear() {
  _version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_update_version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.client_update_version)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_version_)));
          set_has__version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.client_update_version)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.client_update_version)
  return false;
#undef DO_
}

void client_update_version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.client_update_version)
  // required uint32 _version = 1;
  if (has__version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.client_update_version)
}

::google::protobuf::uint8* client_update_version::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.client_update_version)
  // required uint32 _version = 1;
  if (has__version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.client_update_version)
  return target;
}

int client_update_version::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _version = 1;
    if (has__version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_update_version::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_update_version* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_update_version*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_update_version::MergeFrom(const client_update_version& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__version()) {
      set__version(from._version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_update_version::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_update_version::CopyFrom(const client_update_version& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_update_version::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void client_update_version::Swap(client_update_version* other) {
  if (other != this) {
    std::swap(_version_, other->_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_update_version::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_update_version_descriptor_;
  metadata.reflection = client_update_version_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int query_act_stage_reply::kOpenedActStageFieldNumber;
#endif  // !_MSC_VER

query_act_stage_reply::query_act_stage_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.query_act_stage_reply)
}

void query_act_stage_reply::InitAsDefaultInstance() {
}

query_act_stage_reply::query_act_stage_reply(const query_act_stage_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.query_act_stage_reply)
}

void query_act_stage_reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_act_stage_reply::~query_act_stage_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.query_act_stage_reply)
  SharedDtor();
}

void query_act_stage_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void query_act_stage_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_act_stage_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_act_stage_reply_descriptor_;
}

const query_act_stage_reply& query_act_stage_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

query_act_stage_reply* query_act_stage_reply::default_instance_ = NULL;

query_act_stage_reply* query_act_stage_reply::New() const {
  return new query_act_stage_reply;
}

void query_act_stage_reply::Clear() {
  _opened_act_stage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_act_stage_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.query_act_stage_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 _opened_act_stage = 1;
      case 1: {
        if (tag == 8) {
         parse__opened_act_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable__opened_act_stage())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__opened_act_stage())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse__opened_act_stage;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.query_act_stage_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.query_act_stage_reply)
  return false;
#undef DO_
}

void query_act_stage_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.query_act_stage_reply)
  // repeated uint32 _opened_act_stage = 1;
  for (int i = 0; i < this->_opened_act_stage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->_opened_act_stage(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.query_act_stage_reply)
}

::google::protobuf::uint8* query_act_stage_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.query_act_stage_reply)
  // repeated uint32 _opened_act_stage = 1;
  for (int i = 0; i < this->_opened_act_stage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->_opened_act_stage(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.query_act_stage_reply)
  return target;
}

int query_act_stage_reply::ByteSize() const {
  int total_size = 0;

  // repeated uint32 _opened_act_stage = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->_opened_act_stage_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_opened_act_stage(i));
    }
    total_size += 1 * this->_opened_act_stage_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_act_stage_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_act_stage_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_act_stage_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_act_stage_reply::MergeFrom(const query_act_stage_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _opened_act_stage_.MergeFrom(from._opened_act_stage_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_act_stage_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_act_stage_reply::CopyFrom(const query_act_stage_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_act_stage_reply::IsInitialized() const {

  return true;
}

void query_act_stage_reply::Swap(query_act_stage_reply* other) {
  if (other != this) {
    _opened_act_stage_.Swap(&other->_opened_act_stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_act_stage_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_act_stage_reply_descriptor_;
  metadata.reflection = query_act_stage_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fb_attention_reply::kAttentionFieldNumber;
#endif  // !_MSC_VER

fb_attention_reply::fb_attention_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.fb_attention_reply)
}

void fb_attention_reply::InitAsDefaultInstance() {
}

fb_attention_reply::fb_attention_reply(const fb_attention_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.fb_attention_reply)
}

void fb_attention_reply::SharedCtor() {
  _cached_size_ = 0;
  _attention_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fb_attention_reply::~fb_attention_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.fb_attention_reply)
  SharedDtor();
}

void fb_attention_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fb_attention_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fb_attention_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fb_attention_reply_descriptor_;
}

const fb_attention_reply& fb_attention_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

fb_attention_reply* fb_attention_reply::default_instance_ = NULL;

fb_attention_reply* fb_attention_reply::New() const {
  return new fb_attention_reply;
}

void fb_attention_reply::Clear() {
  _attention_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fb_attention_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.fb_attention_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _attention = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_attention_)));
          set_has__attention();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.fb_attention_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.fb_attention_reply)
  return false;
#undef DO_
}

void fb_attention_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.fb_attention_reply)
  // required uint32 _attention = 1;
  if (has__attention()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_attention(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.fb_attention_reply)
}

::google::protobuf::uint8* fb_attention_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.fb_attention_reply)
  // required uint32 _attention = 1;
  if (has__attention()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_attention(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.fb_attention_reply)
  return target;
}

int fb_attention_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _attention = 1;
    if (has__attention()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_attention());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fb_attention_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fb_attention_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fb_attention_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fb_attention_reply::MergeFrom(const fb_attention_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__attention()) {
      set__attention(from._attention());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fb_attention_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fb_attention_reply::CopyFrom(const fb_attention_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fb_attention_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void fb_attention_reply::Swap(fb_attention_reply* other) {
  if (other != this) {
    std::swap(_attention_, other->_attention_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fb_attention_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fb_attention_reply_descriptor_;
  metadata.reflection = fb_attention_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int continue_pay_reply::kTimeFieldNumber;
const int continue_pay_reply::kStatusFieldNumber;
#endif  // !_MSC_VER

continue_pay_reply::continue_pay_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.continue_pay_reply)
}

void continue_pay_reply::InitAsDefaultInstance() {
}

continue_pay_reply::continue_pay_reply(const continue_pay_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.continue_pay_reply)
}

void continue_pay_reply::SharedCtor() {
  _cached_size_ = 0;
  _time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

continue_pay_reply::~continue_pay_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.continue_pay_reply)
  SharedDtor();
}

void continue_pay_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void continue_pay_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* continue_pay_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return continue_pay_reply_descriptor_;
}

const continue_pay_reply& continue_pay_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

continue_pay_reply* continue_pay_reply::default_instance_ = NULL;

continue_pay_reply* continue_pay_reply::New() const {
  return new continue_pay_reply;
}

void continue_pay_reply::Clear() {
  _time_ = 0u;
  _status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool continue_pay_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.continue_pay_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_time_)));
          set_has__time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__status;
        break;
      }

      // repeated uint32 _status = 2;
      case 2: {
        if (tag == 16) {
         parse__status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable__status())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__status())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__status;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.continue_pay_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.continue_pay_reply)
  return false;
#undef DO_
}

void continue_pay_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.continue_pay_reply)
  // required uint32 _time = 1;
  if (has__time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_time(), output);
  }

  // repeated uint32 _status = 2;
  for (int i = 0; i < this->_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->_status(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.continue_pay_reply)
}

::google::protobuf::uint8* continue_pay_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.continue_pay_reply)
  // required uint32 _time = 1;
  if (has__time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_time(), target);
  }

  // repeated uint32 _status = 2;
  for (int i = 0; i < this->_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->_status(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.continue_pay_reply)
  return target;
}

int continue_pay_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _time = 1;
    if (has__time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_time());
    }

  }
  // repeated uint32 _status = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->_status_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_status(i));
    }
    total_size += 1 * this->_status_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void continue_pay_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const continue_pay_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const continue_pay_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void continue_pay_reply::MergeFrom(const continue_pay_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _status_.MergeFrom(from._status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__time()) {
      set__time(from._time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void continue_pay_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void continue_pay_reply::CopyFrom(const continue_pay_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool continue_pay_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void continue_pay_reply::Swap(continue_pay_reply* other) {
  if (other != this) {
    std::swap(_time_, other->_time_);
    _status_.Swap(&other->_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata continue_pay_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = continue_pay_reply_descriptor_;
  metadata.reflection = continue_pay_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int recharge_rebate_reply::kTimeFieldNumber;
const int recharge_rebate_reply::kStatusFieldNumber;
const int recharge_rebate_reply::kRechargeMoneyFieldNumber;
const int recharge_rebate_reply::kGetDayFieldNumber;
const int recharge_rebate_reply::kGetStatusFieldNumber;
#endif  // !_MSC_VER

recharge_rebate_reply::recharge_rebate_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.recharge_rebate_reply)
}

void recharge_rebate_reply::InitAsDefaultInstance() {
}

recharge_rebate_reply::recharge_rebate_reply(const recharge_rebate_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.recharge_rebate_reply)
}

void recharge_rebate_reply::SharedCtor() {
  _cached_size_ = 0;
  _time_ = 0u;
  _status_ = 0u;
  _recharge_money_ = 0u;
  _get_day_ = 0u;
  _get_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

recharge_rebate_reply::~recharge_rebate_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.recharge_rebate_reply)
  SharedDtor();
}

void recharge_rebate_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void recharge_rebate_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* recharge_rebate_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return recharge_rebate_reply_descriptor_;
}

const recharge_rebate_reply& recharge_rebate_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

recharge_rebate_reply* recharge_rebate_reply::default_instance_ = NULL;

recharge_rebate_reply* recharge_rebate_reply::New() const {
  return new recharge_rebate_reply;
}

void recharge_rebate_reply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<recharge_rebate_reply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(_time_, _get_status_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool recharge_rebate_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.recharge_rebate_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_time_)));
          set_has__time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__status;
        break;
      }

      // required uint32 _status = 2;
      case 2: {
        if (tag == 16) {
         parse__status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_status_)));
          set_has__status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__recharge_money;
        break;
      }

      // required uint32 _recharge_money = 3;
      case 3: {
        if (tag == 24) {
         parse__recharge_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_recharge_money_)));
          set_has__recharge_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__get_day;
        break;
      }

      // optional uint32 _get_day = 4;
      case 4: {
        if (tag == 32) {
         parse__get_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_get_day_)));
          set_has__get_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse__get_status;
        break;
      }

      // optional uint32 _get_status = 5;
      case 5: {
        if (tag == 40) {
         parse__get_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_get_status_)));
          set_has__get_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.recharge_rebate_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.recharge_rebate_reply)
  return false;
#undef DO_
}

void recharge_rebate_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.recharge_rebate_reply)
  // required uint32 _time = 1;
  if (has__time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_time(), output);
  }

  // required uint32 _status = 2;
  if (has__status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_status(), output);
  }

  // required uint32 _recharge_money = 3;
  if (has__recharge_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_recharge_money(), output);
  }

  // optional uint32 _get_day = 4;
  if (has__get_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_get_day(), output);
  }

  // optional uint32 _get_status = 5;
  if (has__get_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_get_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.recharge_rebate_reply)
}

::google::protobuf::uint8* recharge_rebate_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.recharge_rebate_reply)
  // required uint32 _time = 1;
  if (has__time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_time(), target);
  }

  // required uint32 _status = 2;
  if (has__status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_status(), target);
  }

  // required uint32 _recharge_money = 3;
  if (has__recharge_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_recharge_money(), target);
  }

  // optional uint32 _get_day = 4;
  if (has__get_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_get_day(), target);
  }

  // optional uint32 _get_status = 5;
  if (has__get_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_get_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.recharge_rebate_reply)
  return target;
}

int recharge_rebate_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _time = 1;
    if (has__time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_time());
    }

    // required uint32 _status = 2;
    if (has__status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_status());
    }

    // required uint32 _recharge_money = 3;
    if (has__recharge_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_recharge_money());
    }

    // optional uint32 _get_day = 4;
    if (has__get_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_get_day());
    }

    // optional uint32 _get_status = 5;
    if (has__get_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_get_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void recharge_rebate_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const recharge_rebate_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const recharge_rebate_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void recharge_rebate_reply::MergeFrom(const recharge_rebate_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__time()) {
      set__time(from._time());
    }
    if (from.has__status()) {
      set__status(from._status());
    }
    if (from.has__recharge_money()) {
      set__recharge_money(from._recharge_money());
    }
    if (from.has__get_day()) {
      set__get_day(from._get_day());
    }
    if (from.has__get_status()) {
      set__get_status(from._get_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void recharge_rebate_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recharge_rebate_reply::CopyFrom(const recharge_rebate_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recharge_rebate_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void recharge_rebate_reply::Swap(recharge_rebate_reply* other) {
  if (other != this) {
    std::swap(_time_, other->_time_);
    std::swap(_status_, other->_status_);
    std::swap(_recharge_money_, other->_recharge_money_);
    std::swap(_get_day_, other->_get_day_);
    std::swap(_get_status_, other->_get_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata recharge_rebate_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = recharge_rebate_reply_descriptor_;
  metadata.reflection = recharge_rebate_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int every_day_happy_reply::kStatusFieldNumber;
const int every_day_happy_reply::kGoldcardNumberFieldNumber;
const int every_day_happy_reply::kSilvercardNumberFieldNumber;
const int every_day_happy_reply::kCoppercardNumberFieldNumber;
const int every_day_happy_reply::kRewardsFieldNumber;
#endif  // !_MSC_VER

every_day_happy_reply::every_day_happy_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_baseserver.every_day_happy_reply)
}

void every_day_happy_reply::InitAsDefaultInstance() {
}

every_day_happy_reply::every_day_happy_reply(const every_day_happy_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_baseserver.every_day_happy_reply)
}

void every_day_happy_reply::SharedCtor() {
  _cached_size_ = 0;
  _status_ = 0u;
  _goldcard_number_ = 0u;
  _silvercard_number_ = 0u;
  _coppercard_number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

every_day_happy_reply::~every_day_happy_reply() {
  // @@protoc_insertion_point(destructor:client_baseserver.every_day_happy_reply)
  SharedDtor();
}

void every_day_happy_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void every_day_happy_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* every_day_happy_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return every_day_happy_reply_descriptor_;
}

const every_day_happy_reply& every_day_happy_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cb_2eproto();
  return *default_instance_;
}

every_day_happy_reply* every_day_happy_reply::default_instance_ = NULL;

every_day_happy_reply* every_day_happy_reply::New() const {
  return new every_day_happy_reply;
}

void every_day_happy_reply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<every_day_happy_reply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(_status_, _coppercard_number_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  _rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool every_day_happy_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_baseserver.every_day_happy_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _goldcard_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_goldcard_number_)));
          set_has__goldcard_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse__silvercard_number;
        break;
      }

      // required uint32 _silvercard_number = 2;
      case 2: {
        if (tag == 16) {
         parse__silvercard_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_silvercard_number_)));
          set_has__silvercard_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__coppercard_number;
        break;
      }

      // required uint32 _coppercard_number = 3;
      case 3: {
        if (tag == 24) {
         parse__coppercard_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_coppercard_number_)));
          set_has__coppercard_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__rewards;
        break;
      }

      // repeated .client_baseserver.activity_reward _rewards = 4;
      case 4: {
        if (tag == 34) {
         parse__rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__rewards;
        if (input->ExpectTag(40)) goto parse__status;
        break;
      }

      // required uint32 _status = 5;
      case 5: {
        if (tag == 40) {
         parse__status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_status_)));
          set_has__status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_baseserver.every_day_happy_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_baseserver.every_day_happy_reply)
  return false;
#undef DO_
}

void every_day_happy_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_baseserver.every_day_happy_reply)
  // required uint32 _goldcard_number = 1;
  if (has__goldcard_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_goldcard_number(), output);
  }

  // required uint32 _silvercard_number = 2;
  if (has__silvercard_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_silvercard_number(), output);
  }

  // required uint32 _coppercard_number = 3;
  if (has__coppercard_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_coppercard_number(), output);
  }

  // repeated .client_baseserver.activity_reward _rewards = 4;
  for (int i = 0; i < this->_rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_rewards(i), output);
  }

  // required uint32 _status = 5;
  if (has__status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_baseserver.every_day_happy_reply)
}

::google::protobuf::uint8* every_day_happy_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_baseserver.every_day_happy_reply)
  // required uint32 _goldcard_number = 1;
  if (has__goldcard_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_goldcard_number(), target);
  }

  // required uint32 _silvercard_number = 2;
  if (has__silvercard_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_silvercard_number(), target);
  }

  // required uint32 _coppercard_number = 3;
  if (has__coppercard_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_coppercard_number(), target);
  }

  // repeated .client_baseserver.activity_reward _rewards = 4;
  for (int i = 0; i < this->_rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_rewards(i), target);
  }

  // required uint32 _status = 5;
  if (has__status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_baseserver.every_day_happy_reply)
  return target;
}

int every_day_happy_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _status = 5;
    if (has__status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_status());
    }

    // required uint32 _goldcard_number = 1;
    if (has__goldcard_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_goldcard_number());
    }

    // required uint32 _silvercard_number = 2;
    if (has__silvercard_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_silvercard_number());
    }

    // required uint32 _coppercard_number = 3;
    if (has__coppercard_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_coppercard_number());
    }

  }
  // repeated .client_baseserver.activity_reward _rewards = 4;
  total_size += 1 * this->_rewards_size();
  for (int i = 0; i < this->_rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void every_day_happy_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const every_day_happy_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const every_day_happy_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void every_day_happy_reply::MergeFrom(const every_day_happy_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _rewards_.MergeFrom(from._rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__status()) {
      set__status(from._status());
    }
    if (from.has__goldcard_number()) {
      set__goldcard_number(from._goldcard_number());
    }
    if (from.has__silvercard_number()) {
      set__silvercard_number(from._silvercard_number());
    }
    if (from.has__coppercard_number()) {
      set__coppercard_number(from._coppercard_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void every_day_happy_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void every_day_happy_reply::CopyFrom(const every_day_happy_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool every_day_happy_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void every_day_happy_reply::Swap(every_day_happy_reply* other) {
  if (other != this) {
    std::swap(_status_, other->_status_);
    std::swap(_goldcard_number_, other->_goldcard_number_);
    std::swap(_silvercard_number_, other->_silvercard_number_);
    std::swap(_coppercard_number_, other->_coppercard_number_);
    _rewards_.Swap(&other->_rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata every_day_happy_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = every_day_happy_reply_descriptor_;
  metadata.reflection = every_day_happy_reply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client_baseserver

// @@protoc_insertion_point(global_scope)
