// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lbm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lbm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace login_basemgr {

namespace {

const ::google::protobuf::Descriptor* RegisterPendingAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterPendingAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterPendingAccountEx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterPendingAccountEx_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginAccountQueryBaseappAddrFromBaseappmgr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginAccountQueryBaseappAddrFromBaseappmgr_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseappInitProgress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseappInitProgress_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lbm_2eproto() {
  protobuf_AddDesc_lbm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lbm.proto");
  GOOGLE_CHECK(file != NULL);
  RegisterPendingAccount_descriptor_ = file->message_type(0);
  static const int RegisterPendingAccount_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPendingAccount, loginname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPendingAccount, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPendingAccount, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPendingAccount, dbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPendingAccount, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPendingAccount, extradata_),
  };
  RegisterPendingAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterPendingAccount_descriptor_,
      RegisterPendingAccount::default_instance_,
      RegisterPendingAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPendingAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPendingAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterPendingAccount));
  RegisterPendingAccountEx_descriptor_ = file->message_type(1);
  static const int RegisterPendingAccountEx_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPendingAccountEx, componentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPendingAccountEx, loginname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPendingAccountEx, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPendingAccountEx, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPendingAccountEx, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPendingAccountEx, dbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPendingAccountEx, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPendingAccountEx, extradata_),
  };
  RegisterPendingAccountEx_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterPendingAccountEx_descriptor_,
      RegisterPendingAccountEx::default_instance_,
      RegisterPendingAccountEx_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPendingAccountEx, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPendingAccountEx, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterPendingAccountEx));
  LoginAccountQueryBaseappAddrFromBaseappmgr_descriptor_ = file->message_type(2);
  static const int LoginAccountQueryBaseappAddrFromBaseappmgr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAccountQueryBaseappAddrFromBaseappmgr, loginname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAccountQueryBaseappAddrFromBaseappmgr, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAccountQueryBaseappAddrFromBaseappmgr, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAccountQueryBaseappAddrFromBaseappmgr, port_),
  };
  LoginAccountQueryBaseappAddrFromBaseappmgr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginAccountQueryBaseappAddrFromBaseappmgr_descriptor_,
      LoginAccountQueryBaseappAddrFromBaseappmgr::default_instance_,
      LoginAccountQueryBaseappAddrFromBaseappmgr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAccountQueryBaseappAddrFromBaseappmgr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAccountQueryBaseappAddrFromBaseappmgr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginAccountQueryBaseappAddrFromBaseappmgr));
  BaseappInitProgress_descriptor_ = file->message_type(3);
  static const int BaseappInitProgress_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseappInitProgress, baseappsinitprogress_),
  };
  BaseappInitProgress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseappInitProgress_descriptor_,
      BaseappInitProgress::default_instance_,
      BaseappInitProgress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseappInitProgress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseappInitProgress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseappInitProgress));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lbm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterPendingAccount_descriptor_, &RegisterPendingAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterPendingAccountEx_descriptor_, &RegisterPendingAccountEx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginAccountQueryBaseappAddrFromBaseappmgr_descriptor_, &LoginAccountQueryBaseappAddrFromBaseappmgr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseappInitProgress_descriptor_, &BaseappInitProgress::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lbm_2eproto() {
  delete RegisterPendingAccount::default_instance_;
  delete RegisterPendingAccount_reflection_;
  delete RegisterPendingAccountEx::default_instance_;
  delete RegisterPendingAccountEx_reflection_;
  delete LoginAccountQueryBaseappAddrFromBaseappmgr::default_instance_;
  delete LoginAccountQueryBaseappAddrFromBaseappmgr_reflection_;
  delete BaseappInitProgress::default_instance_;
  delete BaseappInitProgress_reflection_;
}

void protobuf_AddDesc_lbm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tlbm.proto\022\rlogin_basemgr\"\202\001\n\026RegisterP"
    "endingAccount\022\021\n\tloginName\030\001 \001(\t\022\023\n\013acco"
    "untName\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\022\014\n\004dbid\030"
    "\004 \001(\004\022\r\n\005flags\030\005 \001(\r\022\021\n\textraData\030\006 \001(\t\""
    "\253\001\n\030RegisterPendingAccountEx\022\023\n\013componen"
    "tID\030\001 \001(\004\022\021\n\tloginName\030\002 \001(\t\022\023\n\013accountN"
    "ame\030\003 \001(\t\022\020\n\010password\030\004 \001(\t\022\020\n\010entityID\030"
    "\005 \001(\005\022\014\n\004dbid\030\006 \001(\004\022\r\n\005flags\030\007 \001(\r\022\021\n\tex"
    "traData\030\010 \001(\t\"n\n*LoginAccountQueryBaseap"
    "pAddrFromBaseappmgr\022\021\n\tloginName\030\001 \001(\t\022\023"
    "\n\013accountName\030\002 \001(\t\022\n\n\002ip\030\003 \001(\t\022\014\n\004port\030"
    "\004 \001(\r\"3\n\023BaseappInitProgress\022\034\n\024baseapps"
    "InitProgress\030\001 \001(\r", 498);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lbm.proto", &protobuf_RegisterTypes);
  RegisterPendingAccount::default_instance_ = new RegisterPendingAccount();
  RegisterPendingAccountEx::default_instance_ = new RegisterPendingAccountEx();
  LoginAccountQueryBaseappAddrFromBaseappmgr::default_instance_ = new LoginAccountQueryBaseappAddrFromBaseappmgr();
  BaseappInitProgress::default_instance_ = new BaseappInitProgress();
  RegisterPendingAccount::default_instance_->InitAsDefaultInstance();
  RegisterPendingAccountEx::default_instance_->InitAsDefaultInstance();
  LoginAccountQueryBaseappAddrFromBaseappmgr::default_instance_->InitAsDefaultInstance();
  BaseappInitProgress::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lbm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lbm_2eproto {
  StaticDescriptorInitializer_lbm_2eproto() {
    protobuf_AddDesc_lbm_2eproto();
  }
} static_descriptor_initializer_lbm_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RegisterPendingAccount::kLoginNameFieldNumber;
const int RegisterPendingAccount::kAccountNameFieldNumber;
const int RegisterPendingAccount::kPasswordFieldNumber;
const int RegisterPendingAccount::kDbidFieldNumber;
const int RegisterPendingAccount::kFlagsFieldNumber;
const int RegisterPendingAccount::kExtraDataFieldNumber;
#endif  // !_MSC_VER

RegisterPendingAccount::RegisterPendingAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:login_basemgr.RegisterPendingAccount)
}

void RegisterPendingAccount::InitAsDefaultInstance() {
}

RegisterPendingAccount::RegisterPendingAccount(const RegisterPendingAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:login_basemgr.RegisterPendingAccount)
}

void RegisterPendingAccount::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  loginname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dbid_ = GOOGLE_ULONGLONG(0);
  flags_ = 0u;
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterPendingAccount::~RegisterPendingAccount() {
  // @@protoc_insertion_point(destructor:login_basemgr.RegisterPendingAccount)
  SharedDtor();
}

void RegisterPendingAccount::SharedDtor() {
  if (loginname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loginname_;
  }
  if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountname_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (extradata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void RegisterPendingAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterPendingAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterPendingAccount_descriptor_;
}

const RegisterPendingAccount& RegisterPendingAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbm_2eproto();
  return *default_instance_;
}

RegisterPendingAccount* RegisterPendingAccount::default_instance_ = NULL;

RegisterPendingAccount* RegisterPendingAccount::New() const {
  return new RegisterPendingAccount;
}

void RegisterPendingAccount::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_loginname()) {
      if (loginname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        loginname_->clear();
      }
    }
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accountname_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    dbid_ = GOOGLE_ULONGLONG(0);
    flags_ = 0u;
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterPendingAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:login_basemgr.RegisterPendingAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string loginName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loginname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loginname().data(), this->loginname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "loginname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_accountName;
        break;
      }

      // optional string accountName = 2;
      case 2: {
        if (tag == 18) {
         parse_accountName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "accountname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dbid;
        break;
      }

      // optional uint64 dbid = 4;
      case 4: {
        if (tag == 32) {
         parse_dbid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dbid_)));
          set_has_dbid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 5;
      case 5: {
        if (tag == 40) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_extraData;
        break;
      }

      // optional string extraData = 6;
      case 6: {
        if (tag == 50) {
         parse_extraData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extradata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:login_basemgr.RegisterPendingAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:login_basemgr.RegisterPendingAccount)
  return false;
#undef DO_
}

void RegisterPendingAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:login_basemgr.RegisterPendingAccount)
  // optional string loginName = 1;
  if (has_loginname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loginname().data(), this->loginname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loginname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->loginname(), output);
  }

  // optional string accountName = 2;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->accountname(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional uint64 dbid = 4;
  if (has_dbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dbid(), output);
  }

  // optional uint32 flags = 5;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flags(), output);
  }

  // optional string extraData = 6;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extradata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:login_basemgr.RegisterPendingAccount)
}

::google::protobuf::uint8* RegisterPendingAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_basemgr.RegisterPendingAccount)
  // optional string loginName = 1;
  if (has_loginname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loginname().data(), this->loginname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loginname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->loginname(), target);
  }

  // optional string accountName = 2;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accountname(), target);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional uint64 dbid = 4;
  if (has_dbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dbid(), target);
  }

  // optional uint32 flags = 5;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->flags(), target);
  }

  // optional string extraData = 6;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extradata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_basemgr.RegisterPendingAccount)
  return target;
}

int RegisterPendingAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string loginName = 1;
    if (has_loginname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loginname());
    }

    // optional string accountName = 2;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional uint64 dbid = 4;
    if (has_dbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dbid());
    }

    // optional uint32 flags = 5;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional string extraData = 6;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterPendingAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterPendingAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterPendingAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterPendingAccount::MergeFrom(const RegisterPendingAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loginname()) {
      set_loginname(from.loginname());
    }
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_dbid()) {
      set_dbid(from.dbid());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterPendingAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterPendingAccount::CopyFrom(const RegisterPendingAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterPendingAccount::IsInitialized() const {

  return true;
}

void RegisterPendingAccount::Swap(RegisterPendingAccount* other) {
  if (other != this) {
    std::swap(loginname_, other->loginname_);
    std::swap(accountname_, other->accountname_);
    std::swap(password_, other->password_);
    std::swap(dbid_, other->dbid_);
    std::swap(flags_, other->flags_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterPendingAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterPendingAccount_descriptor_;
  metadata.reflection = RegisterPendingAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterPendingAccountEx::kComponentIDFieldNumber;
const int RegisterPendingAccountEx::kLoginNameFieldNumber;
const int RegisterPendingAccountEx::kAccountNameFieldNumber;
const int RegisterPendingAccountEx::kPasswordFieldNumber;
const int RegisterPendingAccountEx::kEntityIDFieldNumber;
const int RegisterPendingAccountEx::kDbidFieldNumber;
const int RegisterPendingAccountEx::kFlagsFieldNumber;
const int RegisterPendingAccountEx::kExtraDataFieldNumber;
#endif  // !_MSC_VER

RegisterPendingAccountEx::RegisterPendingAccountEx()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:login_basemgr.RegisterPendingAccountEx)
}

void RegisterPendingAccountEx::InitAsDefaultInstance() {
}

RegisterPendingAccountEx::RegisterPendingAccountEx(const RegisterPendingAccountEx& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:login_basemgr.RegisterPendingAccountEx)
}

void RegisterPendingAccountEx::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  componentid_ = GOOGLE_ULONGLONG(0);
  loginname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entityid_ = 0;
  dbid_ = GOOGLE_ULONGLONG(0);
  flags_ = 0u;
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterPendingAccountEx::~RegisterPendingAccountEx() {
  // @@protoc_insertion_point(destructor:login_basemgr.RegisterPendingAccountEx)
  SharedDtor();
}

void RegisterPendingAccountEx::SharedDtor() {
  if (loginname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loginname_;
  }
  if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountname_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (extradata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void RegisterPendingAccountEx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterPendingAccountEx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterPendingAccountEx_descriptor_;
}

const RegisterPendingAccountEx& RegisterPendingAccountEx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbm_2eproto();
  return *default_instance_;
}

RegisterPendingAccountEx* RegisterPendingAccountEx::default_instance_ = NULL;

RegisterPendingAccountEx* RegisterPendingAccountEx::New() const {
  return new RegisterPendingAccountEx;
}

void RegisterPendingAccountEx::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RegisterPendingAccountEx*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(dbid_, flags_);
    componentid_ = GOOGLE_ULONGLONG(0);
    if (has_loginname()) {
      if (loginname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        loginname_->clear();
      }
    }
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accountname_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extradata_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterPendingAccountEx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:login_basemgr.RegisterPendingAccountEx)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 componentID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &componentid_)));
          set_has_componentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loginName;
        break;
      }

      // optional string loginName = 2;
      case 2: {
        if (tag == 18) {
         parse_loginName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loginname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loginname().data(), this->loginname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "loginname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_accountName;
        break;
      }

      // optional string accountName = 3;
      case 3: {
        if (tag == 26) {
         parse_accountName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "accountname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // optional string password = 4;
      case 4: {
        if (tag == 34) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_entityID;
        break;
      }

      // optional int32 entityID = 5;
      case 5: {
        if (tag == 40) {
         parse_entityID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entityid_)));
          set_has_entityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dbid;
        break;
      }

      // optional uint64 dbid = 6;
      case 6: {
        if (tag == 48) {
         parse_dbid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dbid_)));
          set_has_dbid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 7;
      case 7: {
        if (tag == 56) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_extraData;
        break;
      }

      // optional string extraData = 8;
      case 8: {
        if (tag == 66) {
         parse_extraData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extradata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:login_basemgr.RegisterPendingAccountEx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:login_basemgr.RegisterPendingAccountEx)
  return false;
#undef DO_
}

void RegisterPendingAccountEx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:login_basemgr.RegisterPendingAccountEx)
  // optional uint64 componentID = 1;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->componentid(), output);
  }

  // optional string loginName = 2;
  if (has_loginname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loginname().data(), this->loginname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loginname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->loginname(), output);
  }

  // optional string accountName = 3;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->accountname(), output);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password(), output);
  }

  // optional int32 entityID = 5;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->entityid(), output);
  }

  // optional uint64 dbid = 6;
  if (has_dbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->dbid(), output);
  }

  // optional uint32 flags = 7;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->flags(), output);
  }

  // optional string extraData = 8;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extradata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:login_basemgr.RegisterPendingAccountEx)
}

::google::protobuf::uint8* RegisterPendingAccountEx::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_basemgr.RegisterPendingAccountEx)
  // optional uint64 componentID = 1;
  if (has_componentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->componentid(), target);
  }

  // optional string loginName = 2;
  if (has_loginname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loginname().data(), this->loginname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loginname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->loginname(), target);
  }

  // optional string accountName = 3;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->accountname(), target);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  // optional int32 entityID = 5;
  if (has_entityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->entityid(), target);
  }

  // optional uint64 dbid = 6;
  if (has_dbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->dbid(), target);
  }

  // optional uint32 flags = 7;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->flags(), target);
  }

  // optional string extraData = 8;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extradata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_basemgr.RegisterPendingAccountEx)
  return target;
}

int RegisterPendingAccountEx::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 componentID = 1;
    if (has_componentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->componentid());
    }

    // optional string loginName = 2;
    if (has_loginname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loginname());
    }

    // optional string accountName = 3;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional int32 entityID = 5;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entityid());
    }

    // optional uint64 dbid = 6;
    if (has_dbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dbid());
    }

    // optional uint32 flags = 7;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional string extraData = 8;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterPendingAccountEx::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterPendingAccountEx* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterPendingAccountEx*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterPendingAccountEx::MergeFrom(const RegisterPendingAccountEx& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_componentid()) {
      set_componentid(from.componentid());
    }
    if (from.has_loginname()) {
      set_loginname(from.loginname());
    }
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
    if (from.has_dbid()) {
      set_dbid(from.dbid());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterPendingAccountEx::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterPendingAccountEx::CopyFrom(const RegisterPendingAccountEx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterPendingAccountEx::IsInitialized() const {

  return true;
}

void RegisterPendingAccountEx::Swap(RegisterPendingAccountEx* other) {
  if (other != this) {
    std::swap(componentid_, other->componentid_);
    std::swap(loginname_, other->loginname_);
    std::swap(accountname_, other->accountname_);
    std::swap(password_, other->password_);
    std::swap(entityid_, other->entityid_);
    std::swap(dbid_, other->dbid_);
    std::swap(flags_, other->flags_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterPendingAccountEx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterPendingAccountEx_descriptor_;
  metadata.reflection = RegisterPendingAccountEx_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginAccountQueryBaseappAddrFromBaseappmgr::kLoginNameFieldNumber;
const int LoginAccountQueryBaseappAddrFromBaseappmgr::kAccountNameFieldNumber;
const int LoginAccountQueryBaseappAddrFromBaseappmgr::kIpFieldNumber;
const int LoginAccountQueryBaseappAddrFromBaseappmgr::kPortFieldNumber;
#endif  // !_MSC_VER

LoginAccountQueryBaseappAddrFromBaseappmgr::LoginAccountQueryBaseappAddrFromBaseappmgr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:login_basemgr.LoginAccountQueryBaseappAddrFromBaseappmgr)
}

void LoginAccountQueryBaseappAddrFromBaseappmgr::InitAsDefaultInstance() {
}

LoginAccountQueryBaseappAddrFromBaseappmgr::LoginAccountQueryBaseappAddrFromBaseappmgr(const LoginAccountQueryBaseappAddrFromBaseappmgr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:login_basemgr.LoginAccountQueryBaseappAddrFromBaseappmgr)
}

void LoginAccountQueryBaseappAddrFromBaseappmgr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  loginname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginAccountQueryBaseappAddrFromBaseappmgr::~LoginAccountQueryBaseappAddrFromBaseappmgr() {
  // @@protoc_insertion_point(destructor:login_basemgr.LoginAccountQueryBaseappAddrFromBaseappmgr)
  SharedDtor();
}

void LoginAccountQueryBaseappAddrFromBaseappmgr::SharedDtor() {
  if (loginname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loginname_;
  }
  if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountname_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void LoginAccountQueryBaseappAddrFromBaseappmgr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginAccountQueryBaseappAddrFromBaseappmgr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginAccountQueryBaseappAddrFromBaseappmgr_descriptor_;
}

const LoginAccountQueryBaseappAddrFromBaseappmgr& LoginAccountQueryBaseappAddrFromBaseappmgr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbm_2eproto();
  return *default_instance_;
}

LoginAccountQueryBaseappAddrFromBaseappmgr* LoginAccountQueryBaseappAddrFromBaseappmgr::default_instance_ = NULL;

LoginAccountQueryBaseappAddrFromBaseappmgr* LoginAccountQueryBaseappAddrFromBaseappmgr::New() const {
  return new LoginAccountQueryBaseappAddrFromBaseappmgr;
}

void LoginAccountQueryBaseappAddrFromBaseappmgr::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_loginname()) {
      if (loginname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        loginname_->clear();
      }
    }
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accountname_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginAccountQueryBaseappAddrFromBaseappmgr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:login_basemgr.LoginAccountQueryBaseappAddrFromBaseappmgr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string loginName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loginname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loginname().data(), this->loginname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "loginname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_accountName;
        break;
      }

      // optional string accountName = 2;
      case 2: {
        if (tag == 18) {
         parse_accountName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "accountname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional uint32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:login_basemgr.LoginAccountQueryBaseappAddrFromBaseappmgr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:login_basemgr.LoginAccountQueryBaseappAddrFromBaseappmgr)
  return false;
#undef DO_
}

void LoginAccountQueryBaseappAddrFromBaseappmgr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:login_basemgr.LoginAccountQueryBaseappAddrFromBaseappmgr)
  // optional string loginName = 1;
  if (has_loginname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loginname().data(), this->loginname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loginname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->loginname(), output);
  }

  // optional string accountName = 2;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->accountname(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional uint32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:login_basemgr.LoginAccountQueryBaseappAddrFromBaseappmgr)
}

::google::protobuf::uint8* LoginAccountQueryBaseappAddrFromBaseappmgr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_basemgr.LoginAccountQueryBaseappAddrFromBaseappmgr)
  // optional string loginName = 1;
  if (has_loginname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loginname().data(), this->loginname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loginname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->loginname(), target);
  }

  // optional string accountName = 2;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accountname(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional uint32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_basemgr.LoginAccountQueryBaseappAddrFromBaseappmgr)
  return target;
}

int LoginAccountQueryBaseappAddrFromBaseappmgr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string loginName = 1;
    if (has_loginname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loginname());
    }

    // optional string accountName = 2;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAccountQueryBaseappAddrFromBaseappmgr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginAccountQueryBaseappAddrFromBaseappmgr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginAccountQueryBaseappAddrFromBaseappmgr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginAccountQueryBaseappAddrFromBaseappmgr::MergeFrom(const LoginAccountQueryBaseappAddrFromBaseappmgr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loginname()) {
      set_loginname(from.loginname());
    }
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginAccountQueryBaseappAddrFromBaseappmgr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAccountQueryBaseappAddrFromBaseappmgr::CopyFrom(const LoginAccountQueryBaseappAddrFromBaseappmgr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAccountQueryBaseappAddrFromBaseappmgr::IsInitialized() const {

  return true;
}

void LoginAccountQueryBaseappAddrFromBaseappmgr::Swap(LoginAccountQueryBaseappAddrFromBaseappmgr* other) {
  if (other != this) {
    std::swap(loginname_, other->loginname_);
    std::swap(accountname_, other->accountname_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginAccountQueryBaseappAddrFromBaseappmgr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginAccountQueryBaseappAddrFromBaseappmgr_descriptor_;
  metadata.reflection = LoginAccountQueryBaseappAddrFromBaseappmgr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaseappInitProgress::kBaseappsInitProgressFieldNumber;
#endif  // !_MSC_VER

BaseappInitProgress::BaseappInitProgress()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:login_basemgr.BaseappInitProgress)
}

void BaseappInitProgress::InitAsDefaultInstance() {
}

BaseappInitProgress::BaseappInitProgress(const BaseappInitProgress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:login_basemgr.BaseappInitProgress)
}

void BaseappInitProgress::SharedCtor() {
  _cached_size_ = 0;
  baseappsinitprogress_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseappInitProgress::~BaseappInitProgress() {
  // @@protoc_insertion_point(destructor:login_basemgr.BaseappInitProgress)
  SharedDtor();
}

void BaseappInitProgress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BaseappInitProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseappInitProgress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseappInitProgress_descriptor_;
}

const BaseappInitProgress& BaseappInitProgress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbm_2eproto();
  return *default_instance_;
}

BaseappInitProgress* BaseappInitProgress::default_instance_ = NULL;

BaseappInitProgress* BaseappInitProgress::New() const {
  return new BaseappInitProgress;
}

void BaseappInitProgress::Clear() {
  baseappsinitprogress_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseappInitProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:login_basemgr.BaseappInitProgress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 baseappsInitProgress = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baseappsinitprogress_)));
          set_has_baseappsinitprogress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:login_basemgr.BaseappInitProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:login_basemgr.BaseappInitProgress)
  return false;
#undef DO_
}

void BaseappInitProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:login_basemgr.BaseappInitProgress)
  // optional uint32 baseappsInitProgress = 1;
  if (has_baseappsinitprogress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->baseappsinitprogress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:login_basemgr.BaseappInitProgress)
}

::google::protobuf::uint8* BaseappInitProgress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_basemgr.BaseappInitProgress)
  // optional uint32 baseappsInitProgress = 1;
  if (has_baseappsinitprogress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->baseappsinitprogress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_basemgr.BaseappInitProgress)
  return target;
}

int BaseappInitProgress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 baseappsInitProgress = 1;
    if (has_baseappsinitprogress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baseappsinitprogress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseappInitProgress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseappInitProgress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseappInitProgress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseappInitProgress::MergeFrom(const BaseappInitProgress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseappsinitprogress()) {
      set_baseappsinitprogress(from.baseappsinitprogress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseappInitProgress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseappInitProgress::CopyFrom(const BaseappInitProgress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseappInitProgress::IsInitialized() const {

  return true;
}

void BaseappInitProgress::Swap(BaseappInitProgress* other) {
  if (other != this) {
    std::swap(baseappsinitprogress_, other->baseappsinitprogress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseappInitProgress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseappInitProgress_descriptor_;
  metadata.reflection = BaseappInitProgress_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace login_basemgr

// @@protoc_insertion_point(global_scope)
